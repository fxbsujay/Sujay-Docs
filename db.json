{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/Quiet/source/css/about.css","path":"css/about.css","modified":0,"renderable":1},{"_id":"themes/Quiet/source/css/archive.css","path":"css/archive.css","modified":0,"renderable":1},{"_id":"themes/Quiet/source/css/atom-one-dark.css","path":"css/atom-one-dark.css","modified":0,"renderable":1},{"_id":"themes/Quiet/source/css/categories.css","path":"css/categories.css","modified":0,"renderable":1},{"_id":"themes/Quiet/source/css/food.css","path":"css/food.css","modified":0,"renderable":1},{"_id":"themes/Quiet/source/css/header.css","path":"css/header.css","modified":0,"renderable":1},{"_id":"themes/Quiet/source/css/home.css","path":"css/home.css","modified":0,"renderable":1},{"_id":"themes/Quiet/source/css/links.css","path":"css/links.css","modified":0,"renderable":1},{"_id":"themes/Quiet/source/css/page.css","path":"css/page.css","modified":0,"renderable":1},{"_id":"themes/Quiet/source/css/page_cente.css","path":"css/page_cente.css","modified":0,"renderable":1},{"_id":"themes/Quiet/source/css/tag.css","path":"css/tag.css","modified":0,"renderable":1},{"_id":"themes/Quiet/source/css/tags.css","path":"css/tags.css","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/favicon.ico","path":"image/favicon.ico","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/logo.png","path":"image/logo.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/pattern.png","path":"image/pattern.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/js/gotop.js","path":"js/gotop.js","modified":0,"renderable":1},{"_id":"themes/Quiet/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/logo.jpg","path":"image/logo.jpg","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/categories.svg","path":"image/categories.svg","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/archive.svg","path":"image/archive.svg","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/github.svg","path":"image/github.svg","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/tag.svg","path":"image/tag.svg","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/links.svg","path":"image/links.svg","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/home.jpg","path":"image/home.jpg","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/elk17.png","path":"image/blog/elk17.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/elk18.png","path":"image/blog/elk18.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/elk19.png","path":"image/blog/elk19.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/elk20.png","path":"image/blog/elk20.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/elk21.png","path":"image/blog/elk21.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/hexo.png","path":"image/blog/hexo.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/image (1).png","path":"image/blog/image (1).png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/image.png","path":"image/blog/image.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/map.png","path":"image/blog/map.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/seata.png","path":"image/blog/seata.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/seata1.png","path":"image/blog/seata1.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/seata2.png","path":"image/blog/seata2.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/seata3.png","path":"image/blog/seata3.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/springcloud_arch.png","path":"image/blog/springcloud_arch.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/事务1.png","path":"image/blog/事务1.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/事务2.png","path":"image/blog/事务2.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/事务3.png","path":"image/blog/事务3.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/事务4.png","path":"image/blog/事务4.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/事务5.png","path":"image/blog/事务5.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/事务6.png","path":"image/blog/事务6.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/事务7.png","path":"image/blog/事务7.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/事务8.png","path":"image/blog/事务8.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/事务9.png","path":"image/blog/事务9.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/事务10.png","path":"image/blog/事务10.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/事务11.png","path":"image/blog/事务11.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/事务12.png","path":"image/blog/事务12.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/事务13.png","path":"image/blog/事务13.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/事务14.png","path":"image/blog/事务14.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/事务15.png","path":"image/blog/事务15.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/事务16.png","path":"image/blog/事务16.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/事务17.png","path":"image/blog/事务17.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/事务18.png","path":"image/blog/事务18.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/未命名1645368182.png","path":"image/blog/未命名1645368182.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/12.png","path":"image/blog/12.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/20201015160244631.jpg","path":"image/blog/20201015160244631.jpg","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/c9a8cde506c5898db5a8595be46e386.png","path":"image/blog/c9a8cde506c5898db5a8595be46e386.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/components.png","path":"image/blog/components.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/elk1.png","path":"image/blog/elk1.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/elk2.png","path":"image/blog/elk2.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/elk3.png","path":"image/blog/elk3.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/elk4.png","path":"image/blog/elk4.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/elk5.png","path":"image/blog/elk5.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/elk6.png","path":"image/blog/elk6.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/elk7.png","path":"image/blog/elk7.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/elk8.png","path":"image/blog/elk8.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/elk9.png","path":"image/blog/elk9.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/elk10.png","path":"image/blog/elk10.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/elk11.png","path":"image/blog/elk11.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/elk12.png","path":"image/blog/elk12.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/elk13.png","path":"image/blog/elk13.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/elk14.png","path":"image/blog/elk14.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/elk15.png","path":"image/blog/elk15.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/elk16.png","path":"image/blog/elk16.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/20210506090047.png","path":"image/blog/20210506090047.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/image2.png","path":"image/blog/image2.png","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/mysql_index.jpg","path":"image/blog/mysql_index.jpg","modified":0,"renderable":1},{"_id":"themes/Quiet/source/image/blog/jdk17_index.jpg","path":"image/blog/jdk17_index.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1643340943280},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1643340943278},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1643340943278},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1643340943278},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1643340943278},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1643340943278},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1643340943278},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1643340943278},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1643340943280},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1643340943280},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1643340943280},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1643340943280},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1643340943280},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1643340943280},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1643340943280},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1643340943280},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1643340943280},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1643340943280},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1643340943280},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1643340943278},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1643340943280},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1643340943280},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1643340943280},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1643340943280},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1643340943280},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1643340943280},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1643340943278},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1643340943280},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1643340943281},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1643340943281},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1643340943281},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1643340943281},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1643340943281},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1643340943281},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1643340943281},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1643340943281},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1643340943281},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1643340943281},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1643340943280},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1643340943281},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1643340943281},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1643340943281},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1643340943281},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1643340943281},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1643340943282},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1643340943282},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1643340943282},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1643340943282},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1643340943282},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1643340943282},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1643340943282},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1643340943282},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1643340943283},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1643340943283},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1643340943283},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1643340943282},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1643340943281},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1643340943282},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1643340943282},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1643340943282},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1643340943282},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1643340943282},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1643340943283},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1643340943283},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1643340943283},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1643340943283},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1643340943283},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1643340943283},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1643340943284},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1643340943284},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1643340943284},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1643340943284},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1643340943283},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1643340943284},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1643340943283},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1643340943284},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1643340943284},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1643340943282},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1643340943284},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1643340943284},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1643340943284},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1643340943284},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1643340943284},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1643340943284},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1643340943284},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1643340943283},{"_id":"themes/Quiet/.DS_Store","hash":"d6b0bd348c278071914e2dee0dfe4123fecf375f","modified":1644989550473},{"_id":"themes/Quiet/LICENSE","hash":"b72e12dea2912d0a0ec34ca7b491bc1c9403091b","modified":1644989551248},{"_id":"themes/Quiet/README-EN.md","hash":"fbdebb6f2e19ce125c08c3b40cb54911a2528fc5","modified":1644989551447},{"_id":"themes/Quiet/README.md","hash":"6fd0f3d6a013e38e55e0ca719481bf2f824ad1e9","modified":1644989551537},{"_id":"themes/Quiet/_config.yml","hash":"3b9a15e9fee5f9a6622178a301422ea3e5b9990c","modified":1709199060359},{"_id":"themes/Quiet/layout/.DS_Store","hash":"46cf1797a08a1ea0f0cdb2af9ebf7d59bd6d976a","modified":1644989550707},{"_id":"themes/Quiet/layout/404.ejs","hash":"ee787012f3d6c350473e1e6fd33f4c13a9f8fc5a","modified":1644989550832},{"_id":"themes/Quiet/layout/about.ejs","hash":"6f92047c1871526671498ffa08d969e49dce08d5","modified":1644989550657},{"_id":"themes/Quiet/layout/archive.ejs","hash":"3225b9fd210fbd2293d5c9a73c7d4e1cc2f427cd","modified":1644989550563},{"_id":"themes/Quiet/layout/categories.ejs","hash":"fd5c882bbb85394302a80f0d2dd633b151857808","modified":1644989550852},{"_id":"themes/Quiet/layout/index.ejs","hash":"f386bf82750ae76baad5909b7180055188565065","modified":1644989550744},{"_id":"themes/Quiet/layout/layout.ejs","hash":"4bb0df9b8abba6fbdcae0c5b5654f88950176a02","modified":1644989550763},{"_id":"themes/Quiet/layout/links.ejs","hash":"f2206fab7d3cf02746ce531e08c38ee176b1bc04","modified":1644989550803},{"_id":"themes/Quiet/layout/post.ejs","hash":"a08fe718c9a23da42817a1677c55bf6e4d9b05a4","modified":1644989550620},{"_id":"themes/Quiet/layout/tag.ejs","hash":"4c3b5b5ae1758e6aacfe4652a2a39ea19fec69be","modified":1644989550920},{"_id":"themes/Quiet/layout/tags.ejs","hash":"49cffef645f839e5efffdaff689b5ed3ceff0dee","modified":1644989550920},{"_id":"themes/Quiet/source/.DS_Store","hash":"2fe0ee40294946d656b103cef8719c97924075f1","modified":1644989551447},{"_id":"themes/Quiet/layout/_partial/.DS_Store","hash":"db62fbf1993ecd5d9e70a49a58be69ac7e7a4485","modified":1644989550944},{"_id":"themes/Quiet/layout/_partial/foot.ejs","hash":"3899046043b76bc79900dde3e20d104d36e81082","modified":1709197812633},{"_id":"themes/Quiet/layout/_partial/head.ejs","hash":"5a64c0d1c944619b6f706fcda5ee8bff470ac231","modified":1644989551002},{"_id":"themes/Quiet/layout/_partial/header.ejs","hash":"96df41d672ff95323f5f61718c8b5587cc7fc502","modified":1644989551072},{"_id":"themes/Quiet/layout/_partial/home.ejs","hash":"96d7a27f64958a7ed7226c7faf9c6f14a965fad7","modified":1644989551101},{"_id":"themes/Quiet/layout/_partial/post_centent.ejs","hash":"26595e81d138f7c1022d0d292e78f6f6de830e75","modified":1644989551188},{"_id":"themes/Quiet/layout/_partial/post_head.ejs","hash":"d0a4cc42a4ecae40926e6c6d20423338cf89b5b0","modified":1644989551248},{"_id":"themes/Quiet/layout/_partial/post_pn.ejs","hash":"8b64ad0b169959efa82f7fabe64c19b54a18064a","modified":1644989551188},{"_id":"themes/Quiet/layout/_widget/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1644989551188},{"_id":"themes/Quiet/layout/_widget/analytics.ejs","hash":"e6f5fea8a5e1642a569cfeaba24f74e68efd9e09","modified":1644989551388},{"_id":"themes/Quiet/layout/_widget/gotop.ejs","hash":"5d6e0418fb6056c6f4af49b3f6481430e7a6b5c6","modified":1644989551476},{"_id":"themes/Quiet/layout/_widget/sidebar.ejs","hash":"a7e98cc7d66f2b9981784aa8054fe8975cacf69d","modified":1644989551447},{"_id":"themes/Quiet/source/css/.DS_Store","hash":"75b22b6a020bdf7a452db2f4d29044b8a88a6661","modified":1644989551596},{"_id":"themes/Quiet/source/css/about.css","hash":"d3d7ae17f0571f1cec4514135d644c6590118bd0","modified":1644989551652},{"_id":"themes/Quiet/source/css/archive.css","hash":"e87c945020b9141c8dd43e0349bd1ebaa1d13f30","modified":1644989551768},{"_id":"themes/Quiet/source/css/atom-one-dark.css","hash":"da8603ef348b38d6ef090fa9172a6521e53b6c89","modified":1644989551623},{"_id":"themes/Quiet/source/css/categories.css","hash":"06b727d6e2e21b1e5ab12de073406517c32dfe93","modified":1644989551704},{"_id":"themes/Quiet/source/css/food.css","hash":"10a0e21ef9b2e4a6af9328be51e1c0368ca91f4e","modified":1644989552083},{"_id":"themes/Quiet/source/css/header.css","hash":"e3ce1dbac2e258f0943c5aebdd89b29702246baa","modified":1644989551768},{"_id":"themes/Quiet/source/css/home.css","hash":"a7c02f1052e32cc049dc41462455181568bf76d7","modified":1709197814016},{"_id":"themes/Quiet/source/css/links.css","hash":"c7afe457cea5d996ee86cfc47174aa114e458fb0","modified":1644989551856},{"_id":"themes/Quiet/source/css/page.css","hash":"0514b75a35c93c10826cd861f0dd380d90ba8e41","modified":1644989551856},{"_id":"themes/Quiet/source/css/page_cente.css","hash":"b85a224b56e93c6b56058ed49cde58e0bfc1d2e4","modified":1644989551911},{"_id":"themes/Quiet/source/css/tag.css","hash":"e87c945020b9141c8dd43e0349bd1ebaa1d13f30","modified":1644989551826},{"_id":"themes/Quiet/source/css/tags.css","hash":"b2de1e197efba0a058f1a5d37aa014fcfc0016ff","modified":1644989551969},{"_id":"themes/Quiet/source/image/.DS_Store","hash":"3128ff56de5645c269da786b475fd357f1db7a5f","modified":1644989551999},{"_id":"themes/Quiet/source/image/favicon.ico","hash":"22af0505a182d4febb551e3c055d4f5db5020958","modified":1709197825200},{"_id":"themes/Quiet/source/image/logo.png","hash":"3487c0299f2f69abc8bbbd5d7c61ad77b311c801","modified":1644989552083},{"_id":"themes/Quiet/source/image/pattern.png","hash":"e9a79b9b5716c781e8f5acf3462e42fae7f39741","modified":1644989551940},{"_id":"themes/Quiet/source/js/.DS_Store","hash":"0f43f1407d3b3df9e865a28f4c9ef13640ad739b","modified":1644989552143},{"_id":"themes/Quiet/source/js/gotop.js","hash":"2bd969b8dd7b81626dcd2a3d8a1b1bbb4e0fc33c","modified":1644989552180},{"_id":"themes/Quiet/source/js/jquery.min.js","hash":"948b382d052e9af0de5353f29f986d3080e7221c","modified":1644989552180},{"_id":"source/_posts/blog.md","hash":"67dfd57c21f42975d05268e69b3f14b418bd354e","modified":1709197794655},{"_id":"source/_posts/jdk_support.md","hash":"52fab77d6e6efaf7ccf2641e0963f8ac4cafa914","modified":1709197794922},{"_id":"source/_posts/mymap.md","hash":"d672696129f383ed34159d07b0f6086705d8d8b9","modified":1709197795110},{"_id":"source/_posts/mysql_index.md","hash":"bffd52136ce986859c52768b5c060ed8ee939dbd","modified":1709197794765},{"_id":"source/_posts/netty.md","hash":"629f5c02341ceb5cf02780c311cd9b1309a29f7d","modified":1709197795630},{"_id":"source/_posts/shiwu.md","hash":"851901b5fdc63a918f822f74d10d4e08d5ef1443","modified":1709197795487},{"_id":"source/_posts/snow-flake.md","hash":"ef06e2228d0260e47469924b5831bee149b962cd","modified":1709197795018},{"_id":"source/_posts/vue.md","hash":"9264b6f5da37ba42f79f6466c77bd9886e1264fd","modified":1709197795762},{"_id":"source/_posts/wangguan.md","hash":"c029ea5d710ab91bec8400fa379063e2054bdff4","modified":1709197795907},{"_id":"source/about/index.md","hash":"1ba96c514b86d13c89313ed0cba981a1be31ab33","modified":1709197798043},{"_id":"source/about/me.md","hash":"37e1519865b995402accbd0ee4c32a9c1a3e8e3c","modified":1709197797438},{"_id":"source/categories/index.md","hash":"ece9cf85409368fc1bf7133c6580be6724b8d07e","modified":1709197796341},{"_id":"source/tags/index.md","hash":"07f92928eeebd0473e34b1ec9cde7dfbc8834b16","modified":1709197796021},{"_id":"source/links/index.md","hash":"522a47d78d51bfeeb2a46b51900abb5368626042","modified":1709197796303},{"_id":"source/_posts/elk.md","hash":"7097e2fdbe0982bced8f4cae24f5dc60dca44638","modified":1709197795228},{"_id":"themes/Quiet/source/image/archive.svg","hash":"59947ec6f127942874b30ed452c322cb3e4c359b","modified":1709197824930},{"_id":"themes/Quiet/source/image/categories.svg","hash":"852f556f79761a72554c66b06996a93791601b6b","modified":1709197825010},{"_id":"themes/Quiet/source/image/github.svg","hash":"97ebb97294c8e565c26d754e79b410aef867cc29","modified":1709197825058},{"_id":"themes/Quiet/source/image/links.svg","hash":"5040c743c6321420c251de7ba4c8a994e242e617","modified":1709197814756},{"_id":"themes/Quiet/source/image/logo.jpg","hash":"9e3f34565d74ec5ebba901f3fa5c9e9013e4c55b","modified":1709197814581},{"_id":"themes/Quiet/source/image/tag.svg","hash":"5552faad0c2e60c1f7601024084485a9b121f786","modified":1709197824798},{"_id":"themes/Quiet/source/image/blog/20210506090047.png","hash":"516aec4f7376200cd4b06b315063d7c2c7347e34","modified":1709197816224},{"_id":"themes/Quiet/source/image/blog/20201015160244631.jpg","hash":"bf811d03276855544262d93fe1d06aa3603abfe1","modified":1709197822908},{"_id":"themes/Quiet/source/image/blog/c9a8cde506c5898db5a8595be46e386.png","hash":"075be08393392bd79519c4839566e3238d67017e","modified":1709197819904},{"_id":"themes/Quiet/source/image/blog/components.png","hash":"ad6b3b294ac4485dc6c72ae4755fa73fb8b3516b","modified":1709197819811},{"_id":"themes/Quiet/source/image/blog/elk1.png","hash":"bb789de03eab441bc949bea26b4da6c412084c12","modified":1709197817247},{"_id":"themes/Quiet/source/image/blog/elk10.png","hash":"66645e4262eaf15226207b3fafedbe877155cf4c","modified":1709197819239},{"_id":"themes/Quiet/source/image/blog/elk12.png","hash":"38fd8cd80dd1eeb6131e5f60c9b10bd9fe227cfa","modified":1709197819672},{"_id":"themes/Quiet/source/image/blog/elk2.png","hash":"53b20386d62b531c600bda8d65c6a9e5f4f48506","modified":1709197822128},{"_id":"themes/Quiet/source/image/blog/elk3.png","hash":"64a17040bf664bbeb0008a7db09249ee5a7c37ed","modified":1709197815135},{"_id":"themes/Quiet/source/image/blog/elk5.png","hash":"d1d42c2a81e16be90b26cd47cb1d1985085cc8ed","modified":1709197821598},{"_id":"themes/Quiet/source/image/blog/elk6.png","hash":"107862f6bdb674393148b48c0f564cb35f6dd9ad","modified":1709197823854},{"_id":"themes/Quiet/source/image/blog/hexo.png","hash":"d75b9779e53bea2391766f35ff712a809ff84bac","modified":1709197818781},{"_id":"themes/Quiet/source/image/blog/image.png","hash":"448fd43e993e1bf4187d5da9104bdb3c5167519d","modified":1709197816143},{"_id":"themes/Quiet/source/image/blog/image (1).png","hash":"3a99a4e2090d92a80ec11a5f1a045a9be6080608","modified":1709197821843},{"_id":"themes/Quiet/source/image/blog/image2.png","hash":"220cdb6af9a7c233186e266b57410492f51529a2","modified":1709197819337},{"_id":"themes/Quiet/source/image/blog/jdk17_index.jpg","hash":"71606e5246137d7005c7227fb647bb847a4a15e5","modified":1709197815881},{"_id":"themes/Quiet/source/image/blog/mysql_index.jpg","hash":"fc53e0b5bdafc5198de6aabaf305e396fb57582e","modified":1709197816521},{"_id":"themes/Quiet/source/image/blog/seata.png","hash":"ff95321b50a77e505cff274f023f8898ffdd4ffb","modified":1709197821518},{"_id":"themes/Quiet/source/image/blog/seata2.png","hash":"5f1c3ba182d6f0ae5bf6017bab3c45aeb0229da2","modified":1709197820677},{"_id":"themes/Quiet/source/image/blog/seata3.png","hash":"bd88ef22681ae088eb4d37a6c050db22c2085e17","modified":1709197821976},{"_id":"themes/Quiet/source/image/blog/springcloud_arch.png","hash":"5e9cb394b5efce93568880960f573b002814a4eb","modified":1709197821414},{"_id":"themes/Quiet/source/image/blog/事务1.png","hash":"e8f2e9735910ed167ac0cfdbf51ab938778dfb6b","modified":1709197815546},{"_id":"themes/Quiet/source/image/blog/事务10.png","hash":"773f4ac393878c024771f7cf9b20c7ed52436f81","modified":1709197824652},{"_id":"themes/Quiet/source/image/blog/事务12.png","hash":"5b5fad8490008fc60a8da5d592434ac8e5f299e3","modified":1709197821736},{"_id":"themes/Quiet/source/image/blog/事务14.png","hash":"81cfc3a8f1a3a77edf86c1690b0ef672f6788580","modified":1709197819439},{"_id":"themes/Quiet/source/image/blog/事务15.png","hash":"06f1e4dcb45570f9c59ed12e1ea08702b508f66b","modified":1709197818479},{"_id":"themes/Quiet/source/image/blog/事务16.png","hash":"3f912feae3869696c298e04fca8e14e87cf8b0fb","modified":1709197815739},{"_id":"themes/Quiet/source/image/blog/事务18.png","hash":"2c38897344b6b3f418e4c17e512e7a1e0ac6f667","modified":1709197823242},{"_id":"themes/Quiet/source/image/blog/事务3.png","hash":"e2cfb84d74070bf286fdd2b6c1294a714f102f4e","modified":1709197815424},{"_id":"themes/Quiet/source/image/blog/事务4.png","hash":"b147073a79baa607685a8220d03bbfa71970eda2","modified":1709197824139},{"_id":"themes/Quiet/source/image/blog/事务5.png","hash":"4d319bd79166ae6f1ad4ac1906fab6f66f95d87c","modified":1709197818621},{"_id":"themes/Quiet/source/image/blog/事务6.png","hash":"98ea76488e6d129c501d366c13f034900f0b5742","modified":1709197824013},{"_id":"themes/Quiet/source/image/blog/事务7.png","hash":"73bed3989f4fc0049f63fe6d982cdd3134cb0e64","modified":1709197822303},{"_id":"themes/Quiet/source/image/blog/事务8.png","hash":"5570be462448016dd29ae807ccc416742dc5fd9a","modified":1709197815336},{"_id":"themes/Quiet/source/image/blog/未命名1645368182.png","hash":"cfccb4b7a01302ad33360f722baf7e7d02a2934d","modified":1709197815635},{"_id":"themes/Quiet/source/image/blog/elk11.png","hash":"987d52de442a76dc9eef43feda6594933ff56f57","modified":1709197815991},{"_id":"themes/Quiet/source/image/blog/elk13.png","hash":"e7923328535b0fe10ea4eb44f3e491970e126784","modified":1709197818924},{"_id":"themes/Quiet/source/image/blog/elk14.png","hash":"15a2499bc6ec4da1e9887a4a9cca527d233b6820","modified":1709197821344},{"_id":"themes/Quiet/source/image/blog/elk21.png","hash":"8e7d222fb740f3dd3821caf530e01d108d80d3ad","modified":1709197816345},{"_id":"themes/Quiet/source/image/blog/elk4.png","hash":"df01e42cada2fd2625274f1f55ad09660fca1adc","modified":1709197821150},{"_id":"themes/Quiet/source/image/blog/elk7.png","hash":"284989994ebee7c6f774761560d735346c29f469","modified":1709197821081},{"_id":"themes/Quiet/source/image/blog/map.png","hash":"7b734356f6bdf1640305e2ce0dc391524dd9aa87","modified":1709197819169},{"_id":"themes/Quiet/source/image/blog/事务11.png","hash":"9f87095fa4516949b2fb43b8549f96eef09b9380","modified":1709197824320},{"_id":"themes/Quiet/source/image/blog/事务13.png","hash":"b69209d0cd9e2f2c70f5d9bbc55b9b3e3a2fd26e","modified":1709197820787},{"_id":"themes/Quiet/source/image/blog/事务17.png","hash":"d58da8f8779ce84961af7f4d4df74e88905f8e40","modified":1709197818233},{"_id":"themes/Quiet/source/image/blog/事务2.png","hash":"48daf183fef2331ca612c0d54762f70a714a926e","modified":1709197823120},{"_id":"themes/Quiet/source/image/blog/事务9.png","hash":"a4625182aaae0566885f9165bb185155850e48fe","modified":1709197817104},{"_id":"themes/Quiet/source/image/blog/elk8.png","hash":"d9fca060db7d50d8d76254233b9f4902bc0a5eaa","modified":1709197823505},{"_id":"themes/Quiet/source/image/blog/elk9.png","hash":"c788f6bd714e6e4ef5d51c530c077715d68219e2","modified":1709197820609},{"_id":"themes/Quiet/source/image/blog/seata1.png","hash":"890df736175e677ee0742d92be716204c873e820","modified":1709197816926},{"_id":"themes/Quiet/source/image/blog/elk17.png","hash":"e7dad57b198894205d840adf9cdfd8ed59dbdd10","modified":1709197824528},{"_id":"themes/Quiet/source/image/blog/elk19.png","hash":"58fe797a9d553c685b002bd0a4ba6a66433c1db5","modified":1709197822774},{"_id":"themes/Quiet/source/image/blog/elk20.png","hash":"462c75b9f4498ec431b656eb3aa2412280108545","modified":1709197822568},{"_id":"themes/Quiet/source/image/blog/elk15.png","hash":"27d36c5aff9c39d2ab3e1e2bc6b7e1943c1f1789","modified":1709197823733},{"_id":"themes/Quiet/source/image/blog/elk16.png","hash":"3659f63f89df7737c35a0cbe461589a8c8929fa5","modified":1709197820451},{"_id":"themes/Quiet/source/image/blog/elk18.png","hash":"f445f3a941f7b079c3490d5d914d2e7319bde56b","modified":1709197817008},{"_id":"themes/Quiet/source/image/blog/12.png","hash":"15724d9a7a9c5cc162486db35ee19d9337422098","modified":1709197818350},{"_id":"themes/Quiet/source/image/home.jpg","hash":"f7129cf8d7396b10a39b40cd46971859b45a9829","modified":1709197826526}],"Category":[{"name":"项目案例","_id":"ckzp5zvn80007keuq1zxf3fvo"},{"name":"生活分享","_id":"ckzp61zg2000hkeuq6az51jlt"},{"name":"Baz","_id":"ckzp6grl3000pkeuqgv4e01c5"},{"name":"博客","_id":"ckzqjcfkq0016keuqdnpjbwky"},{"name":"原理分析","_id":"ckzvaf3yh001pkeuqeu0e3hyv"},{"name":"日常学习","_id":"ckzvdpfg00027keuq0pjwgzzh"},{"name":"算法","_id":"ckzveijp6002tkeuq7pl46sfj"},{"name":"前端","_id":"ckzyc59dl002zkeuqfx4o87z4"},{"name":"java","_id":"cldiixcml004bkeuqbk13ccpy"}],"Data":[],"Page":[{"title":"tags","date":"2020-09-19T08:19:22.000Z","layout":"tags","author":"79bk.cn","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-09-19 16:19:22\nlayout: \"tags\"\nauthor: 79bk.cn\n---\n","updated":"2024-02-29T09:09:56.021Z","path":"tags/index.html","_id":"ckzp4xqdi0000keuqhyf3br98","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"个人简介","date":"2022-02-15T16:00:00.000Z","aubot":"Sujay","portrait":"https://avatars.githubusercontent.com/u/92838931?s=400&u=a55745802c77cf7941c6c2a6bbd511e5f17adc3a&v=4","describe":"一个阳光快乐的BOY,在正合适的年龄里希望遇见正好的你。","type":"about","layout":"about","author":"79bk.cn","_content":"","source":"about/index.md","raw":"---\ntitle: 个人简介\ndate: 2022-2-16\naubot: Sujay\nportrait: 'https://avatars.githubusercontent.com/u/92838931?s=400&u=a55745802c77cf7941c6c2a6bbd511e5f17adc3a&v=4'\ndescribe: '一个阳光快乐的BOY,在正合适的年龄里希望遇见正好的你。'\ntype: \"about\"\nlayout: \"about\"\nauthor: 79bk.cn\n---\n","updated":"2024-02-29T09:09:58.043Z","path":"about/index.html","_id":"ckzp52pda0001keuqhezo31gn","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"友情链接","date":"2022-02-15T16:00:00.000Z","type":"links","layout":"links","author":"79bk.cn","_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\ndate: 2022-02-16\ntype: \"links\"\nlayout: \"links\"\nauthor: 79bk.cn\n---\n","updated":"2024-02-29T09:09:56.303Z","path":"links/index.html","_id":"ckzp558n80002keuq2xis9m38","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"文章分类","date":"2020-11-01T16:00:00.000Z","type":"categories","layout":"categories","author":"79bk.cn","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2020-11-02\ntype: categories\nlayout: categories\nauthor: 79bk.cn\n---\n","updated":"2024-02-29T09:09:56.341Z","path":"categories/index.html","_id":"ckzp5auho0003keuq2beufnkj","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About me","date":"2022-02-16T06:14:08.000Z","_content":"","source":"about/me.md","raw":"---\ntitle: About me\ndate: 2022-02-16 14:14:08\n---\n","updated":"2024-02-29T09:09:57.438Z","path":"about/me.html","_id":"ckzp5skjr0006keuqatlz35uy","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"使用Hexo搭建一个博客","excerpt":"Hexo","date":"2021-04-15T05:10:03.000Z","cover":"/image/blog/hexo.png?raw=true","_content":"<a name=\"Vl3vn\"></a>\n# 安装Node.js\n> [下载地址](http://nodejs.cn/download/)​\n\n```\n# 解压\ntar -xvf   node-v6.10.0-linux-x64.tar.xz   \nmv node-v6.10.0-linux-x64  nodejs \n\n# 软连接\nln -s /mydata/nodejs/bin/npm /usr/local/bin/ \nln -s /mydata/nodejs/bin/node /usr/local/bin/\n```\n<a name=\"Pv9Wv\"></a>\n# 安装Hexo\n> [Hexo](https://hexo.io/zh-cn/)\n\n```\n# 安装客户端\nnpm install hexo-cli -g\n# 软连接\nln -s /mydata/nodejs/bin/hexo /usr/local/bin/hexo\n# 检查安装\nhexo\n# 创建你的博客目录\nmkdir blog\ncd blog\n# 初始化博客\nhexo init\nnpm install\n# 启动\nhexo s\n\n#修改启动端口\nnode_modules \\ hexo-server\\ index.js\n```\n<a name=\"QmLNO\"></a>\n# 后台运行\n\n\n```\nnpm install -g pm2\nln -s /mydata/nodejs/bin/pm2 /usr/bin/pm2\n```\n新建 **hexo_run.js **运行脚本\n```\n\n//run\nconst { exec } = require('child_process')\nexec('hexo server',(error, stdout, stderr) => {\n        if(error){\n                console.log('exec error: ${error}')\n                return\n        }\n        console.log('stdout: ${stdout}');\n        console.log('stderr: ${stderr}');\n})\n\n```\n```\n# 启动\npm2 start hexo_run.js\n\n```\n<a name=\"E2EME\"></a>\n# PM2命令\n```\npm2 start server.js //启动server.js进程\npm2 start server.js -i 4 //启动4个server.js进程\npm2 restart server.js //重启server.js进程\npm2 stop all // 停止所有进程\npm2 stop server.js //停止server.js进程\npm2 stop 0 //停止编号为0的进程\n\n\n//创建app.json，内容如下\n{\n  \"apps\" : [{\n    \"script\"    : \"server.js\",  //进程名\n    \"instances\" : \"max\",   //开启进程数，可为数值，也可为max。与服务器cpu核数相关\n    \"exec_mode\" : \"cluster\" // 可选：fork(服务器单核推荐) cluster(多核推荐)\n  }]\n}\npm2 start app.json\n\npm2 list //查看当前正在运行的进程\npm2 show 0 //查看执行编号为0的进程\n\npm2 monit //监控当前所有的进程\npm2 monit 0 //监控批评行编号为0的进程\npm2 monit server.js //监控名称为server.js的进程\n\npm2 logs //显示所有日志\npm2 logs 0 //显示执行编号为0的日志\npm2 logs server.js //显示名称为server.js的进程\npm2 flush  //清洗所有的数据[注：我没有试出来效果]\n```\n","source":"_posts/blog.md","raw":"---\ntitle: 使用Hexo搭建一个博客\ncategories:  博客\ntags:\n  - blog\nexcerpt:  Hexo\ndate: 2021-04-15 13:10:03\ncover: '/image/blog/hexo.png?raw=true'\n---\n<a name=\"Vl3vn\"></a>\n# 安装Node.js\n> [下载地址](http://nodejs.cn/download/)​\n\n```\n# 解压\ntar -xvf   node-v6.10.0-linux-x64.tar.xz   \nmv node-v6.10.0-linux-x64  nodejs \n\n# 软连接\nln -s /mydata/nodejs/bin/npm /usr/local/bin/ \nln -s /mydata/nodejs/bin/node /usr/local/bin/\n```\n<a name=\"Pv9Wv\"></a>\n# 安装Hexo\n> [Hexo](https://hexo.io/zh-cn/)\n\n```\n# 安装客户端\nnpm install hexo-cli -g\n# 软连接\nln -s /mydata/nodejs/bin/hexo /usr/local/bin/hexo\n# 检查安装\nhexo\n# 创建你的博客目录\nmkdir blog\ncd blog\n# 初始化博客\nhexo init\nnpm install\n# 启动\nhexo s\n\n#修改启动端口\nnode_modules \\ hexo-server\\ index.js\n```\n<a name=\"QmLNO\"></a>\n# 后台运行\n\n\n```\nnpm install -g pm2\nln -s /mydata/nodejs/bin/pm2 /usr/bin/pm2\n```\n新建 **hexo_run.js **运行脚本\n```\n\n//run\nconst { exec } = require('child_process')\nexec('hexo server',(error, stdout, stderr) => {\n        if(error){\n                console.log('exec error: ${error}')\n                return\n        }\n        console.log('stdout: ${stdout}');\n        console.log('stderr: ${stderr}');\n})\n\n```\n```\n# 启动\npm2 start hexo_run.js\n\n```\n<a name=\"E2EME\"></a>\n# PM2命令\n```\npm2 start server.js //启动server.js进程\npm2 start server.js -i 4 //启动4个server.js进程\npm2 restart server.js //重启server.js进程\npm2 stop all // 停止所有进程\npm2 stop server.js //停止server.js进程\npm2 stop 0 //停止编号为0的进程\n\n\n//创建app.json，内容如下\n{\n  \"apps\" : [{\n    \"script\"    : \"server.js\",  //进程名\n    \"instances\" : \"max\",   //开启进程数，可为数值，也可为max。与服务器cpu核数相关\n    \"exec_mode\" : \"cluster\" // 可选：fork(服务器单核推荐) cluster(多核推荐)\n  }]\n}\npm2 start app.json\n\npm2 list //查看当前正在运行的进程\npm2 show 0 //查看执行编号为0的进程\n\npm2 monit //监控当前所有的进程\npm2 monit 0 //监控批评行编号为0的进程\npm2 monit server.js //监控名称为server.js的进程\n\npm2 logs //显示所有日志\npm2 logs 0 //显示执行编号为0的日志\npm2 logs server.js //显示名称为server.js的进程\npm2 flush  //清洗所有的数据[注：我没有试出来效果]\n```\n","slug":"blog","published":1,"updated":"2024-02-29T09:09:54.655Z","_id":"ckzqjcfko0015keuq2f9jcqxd","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a name=\"Vl3vn\"></a></p>\n<h1 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h1><blockquote>\n<p><a href=\"http://nodejs.cn/download/\">下载地址</a>​</p>\n</blockquote>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\"># 解压</span><br>tar -xvf   node-v6.<span class=\"hljs-number\">10.0</span>-linux-x64.tar.xz   <br>mv node-v6.<span class=\"hljs-number\">10.0</span>-linux-x64  nodejs <br><br><span class=\"hljs-comment\"># 软连接</span><br>ln -s <span class=\"hljs-regexp\">/mydata/</span>nodejs<span class=\"hljs-regexp\">/bin/</span>npm <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/</span> <br>ln -s <span class=\"hljs-regexp\">/mydata/</span>nodejs<span class=\"hljs-regexp\">/bin/</span>node <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/</span><br></code></pre></td></tr></table></figure>\n<p><a name=\"Pv9Wv\"></a></p>\n<h1 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h1><blockquote>\n<p><a href=\"https://hexo.io/zh-cn/\">Hexo</a></p>\n</blockquote>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\"># 安装客户端</span><br>npm install hexo-cli -g<br><span class=\"hljs-comment\"># 软连接</span><br>ln -s <span class=\"hljs-regexp\">/mydata/</span>nodejs<span class=\"hljs-regexp\">/bin/</span>hexo <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/</span>hexo<br><span class=\"hljs-comment\"># 检查安装</span><br>hexo<br><span class=\"hljs-comment\"># 创建你的博客目录</span><br>mkdir blog<br>cd blog<br><span class=\"hljs-comment\"># 初始化博客</span><br>hexo init<br>npm install<br><span class=\"hljs-comment\"># 启动</span><br>hexo s<br><br><span class=\"hljs-comment\">#修改启动端口</span><br>node_modules \\ hexo-server\\ index.js<br></code></pre></td></tr></table></figure>\n<p><a name=\"QmLNO\"></a></p>\n<h1 id=\"后台运行\"><a href=\"#后台运行\" class=\"headerlink\" title=\"后台运行\"></a>后台运行</h1><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><code class=\"hljs awk\">npm install -g pm2<br>ln -s <span class=\"hljs-regexp\">/mydata/</span>nodejs<span class=\"hljs-regexp\">/bin/</span>pm2 <span class=\"hljs-regexp\">/usr/</span>bin/pm2<br></code></pre></td></tr></table></figure>\n<p>新建 **hexo_run.js **运行脚本</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><br><span class=\"hljs-comment\">//run</span><br><span class=\"hljs-keyword\">const</span> &#123; exec &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;child_process&#x27;</span>)<br>exec(<span class=\"hljs-string\">&#x27;hexo server&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">error, stdout, stderr</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-keyword\">if</span>(error)&#123;<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;exec error: $&#123;error&#125;&#x27;</span>)<br>                <span class=\"hljs-keyword\">return</span><br>        &#125;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;stdout: $&#123;stdout&#125;&#x27;</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;stderr: $&#123;stderr&#125;&#x27;</span>);<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><code class=\"hljs crmsh\"><span class=\"hljs-comment\"># 启动</span><br>pm2 <span class=\"hljs-literal\">start</span> hexo_run.js<br><br></code></pre></td></tr></table></figure>\n<p><a name=\"E2EME\"></a></p>\n<h1 id=\"PM2命令\"><a href=\"#PM2命令\" class=\"headerlink\" title=\"PM2命令\"></a>PM2命令</h1><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><code class=\"hljs awk\">pm2 start server.js <span class=\"hljs-regexp\">//</span>启动server.js进程<br>pm2 start server.js -i <span class=\"hljs-number\">4</span> <span class=\"hljs-regexp\">//</span>启动<span class=\"hljs-number\">4</span>个server.js进程<br>pm2 restart server.js <span class=\"hljs-regexp\">//</span>重启server.js进程<br>pm2 stop all <span class=\"hljs-regexp\">//</span> 停止所有进程<br>pm2 stop server.js <span class=\"hljs-regexp\">//</span>停止server.js进程<br>pm2 stop <span class=\"hljs-number\">0</span> <span class=\"hljs-regexp\">//</span>停止编号为<span class=\"hljs-number\">0</span>的进程<br><br><br><span class=\"hljs-regexp\">//</span>创建app.json，内容如下<br>&#123;<br>  <span class=\"hljs-string\">&quot;apps&quot;</span> : [&#123;<br>    <span class=\"hljs-string\">&quot;script&quot;</span>    : <span class=\"hljs-string\">&quot;server.js&quot;</span>,  <span class=\"hljs-regexp\">//</span>进程名<br>    <span class=\"hljs-string\">&quot;instances&quot;</span> : <span class=\"hljs-string\">&quot;max&quot;</span>,   <span class=\"hljs-regexp\">//</span>开启进程数，可为数值，也可为max。与服务器cpu核数相关<br>    <span class=\"hljs-string\">&quot;exec_mode&quot;</span> : <span class=\"hljs-string\">&quot;cluster&quot;</span> <span class=\"hljs-regexp\">//</span> 可选：fork(服务器单核推荐) cluster(多核推荐)<br>  &#125;]<br>&#125;<br>pm2 start app.json<br><br>pm2 list <span class=\"hljs-regexp\">//</span>查看当前正在运行的进程<br>pm2 show <span class=\"hljs-number\">0</span> <span class=\"hljs-regexp\">//</span>查看执行编号为<span class=\"hljs-number\">0</span>的进程<br><br>pm2 monit <span class=\"hljs-regexp\">//</span>监控当前所有的进程<br>pm2 monit <span class=\"hljs-number\">0</span> <span class=\"hljs-regexp\">//</span>监控批评行编号为<span class=\"hljs-number\">0</span>的进程<br>pm2 monit server.js <span class=\"hljs-regexp\">//</span>监控名称为server.js的进程<br><br>pm2 logs <span class=\"hljs-regexp\">//</span>显示所有日志<br>pm2 logs <span class=\"hljs-number\">0</span> <span class=\"hljs-regexp\">//</span>显示执行编号为<span class=\"hljs-number\">0</span>的日志<br>pm2 logs server.js <span class=\"hljs-regexp\">//</span>显示名称为server.js的进程<br>pm2 flush  <span class=\"hljs-regexp\">//</span>清洗所有的数据[注：我没有试出来效果]<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"more":"<p><a name=\"Vl3vn\"></a></p>\n<h1 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h1><blockquote>\n<p><a href=\"http://nodejs.cn/download/\">下载地址</a>​</p>\n</blockquote>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\"># 解压</span><br>tar -xvf   node-v6.<span class=\"hljs-number\">10.0</span>-linux-x64.tar.xz   <br>mv node-v6.<span class=\"hljs-number\">10.0</span>-linux-x64  nodejs <br><br><span class=\"hljs-comment\"># 软连接</span><br>ln -s <span class=\"hljs-regexp\">/mydata/</span>nodejs<span class=\"hljs-regexp\">/bin/</span>npm <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/</span> <br>ln -s <span class=\"hljs-regexp\">/mydata/</span>nodejs<span class=\"hljs-regexp\">/bin/</span>node <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/</span><br></code></pre></td></tr></table></figure>\n<p><a name=\"Pv9Wv\"></a></p>\n<h1 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h1><blockquote>\n<p><a href=\"https://hexo.io/zh-cn/\">Hexo</a></p>\n</blockquote>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\"># 安装客户端</span><br>npm install hexo-cli -g<br><span class=\"hljs-comment\"># 软连接</span><br>ln -s <span class=\"hljs-regexp\">/mydata/</span>nodejs<span class=\"hljs-regexp\">/bin/</span>hexo <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/</span>hexo<br><span class=\"hljs-comment\"># 检查安装</span><br>hexo<br><span class=\"hljs-comment\"># 创建你的博客目录</span><br>mkdir blog<br>cd blog<br><span class=\"hljs-comment\"># 初始化博客</span><br>hexo init<br>npm install<br><span class=\"hljs-comment\"># 启动</span><br>hexo s<br><br><span class=\"hljs-comment\">#修改启动端口</span><br>node_modules \\ hexo-server\\ index.js<br></code></pre></td></tr></table></figure>\n<p><a name=\"QmLNO\"></a></p>\n<h1 id=\"后台运行\"><a href=\"#后台运行\" class=\"headerlink\" title=\"后台运行\"></a>后台运行</h1><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><code class=\"hljs awk\">npm install -g pm2<br>ln -s <span class=\"hljs-regexp\">/mydata/</span>nodejs<span class=\"hljs-regexp\">/bin/</span>pm2 <span class=\"hljs-regexp\">/usr/</span>bin/pm2<br></code></pre></td></tr></table></figure>\n<p>新建 **hexo_run.js **运行脚本</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><br><span class=\"hljs-comment\">//run</span><br><span class=\"hljs-keyword\">const</span> &#123; exec &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;child_process&#x27;</span>)<br>exec(<span class=\"hljs-string\">&#x27;hexo server&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">error, stdout, stderr</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-keyword\">if</span>(error)&#123;<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;exec error: $&#123;error&#125;&#x27;</span>)<br>                <span class=\"hljs-keyword\">return</span><br>        &#125;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;stdout: $&#123;stdout&#125;&#x27;</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;stderr: $&#123;stderr&#125;&#x27;</span>);<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><code class=\"hljs crmsh\"><span class=\"hljs-comment\"># 启动</span><br>pm2 <span class=\"hljs-literal\">start</span> hexo_run.js<br><br></code></pre></td></tr></table></figure>\n<p><a name=\"E2EME\"></a></p>\n<h1 id=\"PM2命令\"><a href=\"#PM2命令\" class=\"headerlink\" title=\"PM2命令\"></a>PM2命令</h1><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><code class=\"hljs awk\">pm2 start server.js <span class=\"hljs-regexp\">//</span>启动server.js进程<br>pm2 start server.js -i <span class=\"hljs-number\">4</span> <span class=\"hljs-regexp\">//</span>启动<span class=\"hljs-number\">4</span>个server.js进程<br>pm2 restart server.js <span class=\"hljs-regexp\">//</span>重启server.js进程<br>pm2 stop all <span class=\"hljs-regexp\">//</span> 停止所有进程<br>pm2 stop server.js <span class=\"hljs-regexp\">//</span>停止server.js进程<br>pm2 stop <span class=\"hljs-number\">0</span> <span class=\"hljs-regexp\">//</span>停止编号为<span class=\"hljs-number\">0</span>的进程<br><br><br><span class=\"hljs-regexp\">//</span>创建app.json，内容如下<br>&#123;<br>  <span class=\"hljs-string\">&quot;apps&quot;</span> : [&#123;<br>    <span class=\"hljs-string\">&quot;script&quot;</span>    : <span class=\"hljs-string\">&quot;server.js&quot;</span>,  <span class=\"hljs-regexp\">//</span>进程名<br>    <span class=\"hljs-string\">&quot;instances&quot;</span> : <span class=\"hljs-string\">&quot;max&quot;</span>,   <span class=\"hljs-regexp\">//</span>开启进程数，可为数值，也可为max。与服务器cpu核数相关<br>    <span class=\"hljs-string\">&quot;exec_mode&quot;</span> : <span class=\"hljs-string\">&quot;cluster&quot;</span> <span class=\"hljs-regexp\">//</span> 可选：fork(服务器单核推荐) cluster(多核推荐)<br>  &#125;]<br>&#125;<br>pm2 start app.json<br><br>pm2 list <span class=\"hljs-regexp\">//</span>查看当前正在运行的进程<br>pm2 show <span class=\"hljs-number\">0</span> <span class=\"hljs-regexp\">//</span>查看执行编号为<span class=\"hljs-number\">0</span>的进程<br><br>pm2 monit <span class=\"hljs-regexp\">//</span>监控当前所有的进程<br>pm2 monit <span class=\"hljs-number\">0</span> <span class=\"hljs-regexp\">//</span>监控批评行编号为<span class=\"hljs-number\">0</span>的进程<br>pm2 monit server.js <span class=\"hljs-regexp\">//</span>监控名称为server.js的进程<br><br>pm2 logs <span class=\"hljs-regexp\">//</span>显示所有日志<br>pm2 logs <span class=\"hljs-number\">0</span> <span class=\"hljs-regexp\">//</span>显示执行编号为<span class=\"hljs-number\">0</span>的日志<br>pm2 logs server.js <span class=\"hljs-regexp\">//</span>显示名称为server.js的进程<br>pm2 flush  <span class=\"hljs-regexp\">//</span>清洗所有的数据[注：我没有试出来效果]<br></code></pre></td></tr></table></figure>\n"},{"title":"Netty源码分析","excerpt":"Netty源码分析","date":"2022-02-18T08:35:03.000Z","cover":"/image/blog/components.png?raw=true","_content":"\n<a name=\"ul6Ap\"></a>\n\n# 启动流程\nNetty启动流程可以简化成如下代码<br />​<br />\n```java\n// netty 中使用 NioEventLoopGroup （简称 nio boss 线程）来封装线程和 selector\nSelector selector = Selector.open(); \n\n// 创建 NioServerSocketChannel，同时会初始化它关联的 handler，以及为原生 ssc 存储 config\nNioServerSocketChannel attachment = new NioServerSocketChannel();\n\n// 创建 NioServerSocketChannel 时，创建了 java 原生的 ServerSocketChannel\nServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); \nserverSocketChannel.configureBlocking(false);\n\n// 启动 nio boss 线程执行接下来的操作\n\n//注册（仅关联 selector 和 NioServerSocketChannel），未关注事件\nSelectionKey selectionKey = serverSocketChannel.register(selector, 0, attachment);\n\n// head -> 初始化器 -> ServerBootstrapAcceptor -> tail，初始化器是一次性的，只为添加 acceptor\n\n// 绑定端口\nserverSocketChannel.bind(new InetSocketAddress(8080));\n\n// 触发 channel active 事件，在 head 中关注 op_accept 事件\nselectionKey.interestOps(SelectionKey.OP_ACCEPT);\n```\n\n- 获得选择器Selector，Netty中使用NioEventloopGroup中的NioEventloop封装了线程和选择器\n- 创建**NioServerSocketChannel**，该Channel**作为附件**添加到**ServerSocketChannel**中\n- 创建**ServerSocketChannel**，将其设置为非阻塞模式，并注册到Selector中，**此时未关注事件，但是添加了附件NioServerSocketChannel**\n- 绑定端口\n- 通过**interestOps**设置感兴趣的事件\n\n<br />\n<a name=\"aOWtJ\"></a>\n## bind\n> 选择器Selector的创建是在NioEventloopGroup中完成的。NioServerSocketChannel与ServerSocketChannel的创建，ServerSocketChannel注册到Selector中以及绑定操作都是由bind方法完成的\n\n所以服务器启动的入口便是io.netty.bootstrap.ServerBootstrap.bind​\n```java\npublic ChannelFuture bind(SocketAddress localAddress) {\n\tvalidate();\n\treturn doBind(ObjectUtil.checkNotNull(localAddress, \"localAddress\"));\n}\n```\n\n<br />\n\n<a name=\"PoYa8\"></a>\n## doBind\n> 真正完成初始化、注册以及绑定的方法是io.netty.bootstrap.AbstractBootstrap.doBind\n\n**dobind方法在主线程中执行**\n```java\nprivate ChannelFuture doBind(final SocketAddress localAddress) {\n    // 负责NioServerSocketChannel和ServerSocketChannel的创建\n    // ServerSocketChannel的注册工作\n    // init由main线程完成，regisetr由NIO线程完成\n    final ChannelFuture regFuture = initAndRegister();\n    final Channel channel = regFuture.channel();\n    if (regFuture.cause() != null) {\n        return regFuture;\n    }\n\n    // 因为register操作是异步的\n    // 所以要判断主线程执行到这里时，register操作是否已经执行完毕\n    if (regFuture.isDone()) {\n        // At this point we know that the registration was complete and successful.\n        ChannelPromise promise = channel.newPromise();\n        \n        // 执行doBind0绑定操作\n        doBind0(regFuture, channel, localAddress, promise);\n        return promise;\n    } else {\n        // Registration future is almost always fulfilled already, but just in case it's not.\n        // 如果register操作还没执行完，就会到这个分支中来\n        final PendingRegistrationPromise promise = new PendingRegistrationPromise(channel);\n        \n        // 添加监听器，NIO线程异步进行doBind0操作\n        regFuture.addListener(new ChannelFutureListener() {\n            @Override\n            public void operationComplete(ChannelFuture future) throws Exception {\n                Throwable cause = future.cause();\n                if (cause != null) {\n                    // Registration on the EventLoop failed so fail the ChannelPromise directly to not cause an\n                    // IllegalStateException once we try to access the EventLoop of the Channel.\n                    promise.setFailure(cause);\n                } else {\n                    // Registration was successful, so set the correct executor to use.\n                    // See https://github.com/netty/netty/issues/2586\n                    promise.registered();\n\n                    doBind0(regFuture, channel, localAddress, promise);\n                }\n            }\n        });\n        return promise;\n    }\n}\n```\n\n- doBind()中有两个重要方法**initAndRegister()**和**doBind0(regFuture, channel, localAddress, promise)**\n- initAndRegister主要负责NioServerSocketChannel和ServerSocketChannel的创建（主线程中完成）与ServerSocketChannel注册（NIO线程中完成）工作\n- doBind0则负责连接的创建工作\n\n\n<br />\n\n<a name=\"LNV9d\"></a>\n## initAndRegisterd\n```java\nfinal ChannelFuture initAndRegister() {\n    Channel channel = null;\n    try {\n        channel = channelFactory.newChannel();\n        init(channel);\n    } catch (Throwable t) {\n        if (channel != null) {\n            // channel can be null if newChannel crashed (eg SocketException(\"too many open files\"))\n            channel.unsafe().closeForcibly();\n            // as the Channel is not registered yet we need to force the usage of the GlobalEventExecutor\n            return new DefaultChannelPromise(channel, GlobalEventExecutor.INSTANCE).setFailure(t);\n        }\n        // as the Channel is not registered yet we need to force the usage of the GlobalEventExecutor\n        return new DefaultChannelPromise(new FailedChannel(), GlobalEventExecutor.INSTANCE).setFailure(t);\n    }\n\n    ChannelFuture regFuture = config().group().register(channel);\n    if (regFuture.cause() != null) {\n        if (channel.isRegistered()) {\n            channel.close();\n        } else {\n            channel.unsafe().closeForcibly();\n        }\n    }\n\n    // If we are here and the promise is not failed, it's one of the following cases:\n    // 1) If we attempted registration from the event loop, the registration has been completed at this point.\n    //    i.e. It's safe to attempt bind() or connect() now because the channel has been registered.\n    // 2) If we attempted registration from the other thread, the registration request has been successfully\n    //    added to the event loop's task queue for later execution.\n    //    i.e. It's safe to attempt bind() or connect() now:\n    //         because bind() or connect() will be executed *after* the scheduled registration task is executed\n    //         because register(), bind(), and connect() are all bound to the same thread.\n\n    return regFuture;\n}\n```\n**init**\n```java\nChannel channel = null;\ntry {\n    // 通过反射初始化NioServerSocketChannel\n    channel = channelFactory.newChannel();\n    init(channel);\n}\n```\nnewChannel方法<br /> \n```java\n@Override\npublic T newChannel() {\n    try {\n        // 通过反射调用NioServerSocketChannel的构造方法\n        // 创建NioServerSocketChannel对象\n        return constructor.newInstance();\n    } catch (Throwable t) {\n        throw new ChannelException(\"Unable to create Channel from class \" + constructor.getDeclaringClass(), t);\n    }\n}\n```\nNioServerSocketChannel构造方法\n```java\npublic NioServerSocketChannel() {\n    // 创建了ServerSocketChannel实例\n    this(newSocket(DEFAULT_SELECTOR_PROVIDER));\n}\n```\nnewSocket方法\n```java\nprivate static ServerSocketChannel newSocket(SelectorProvider provider) {\n    try {\n        // ServerSocketChannel.open方法：\n        // SelectorProvider.provider().openServerSocketChannel()\n\t    // 所以此处相当于ServerSocketChannel.open()\n        // 创建了ServerSocketChannel实例\n    \treturn provider.openServerSocketChannel();\n\t} catch (IOException e) {\n  \t  throw new ChannelException(\"Failed to open a server socket.\", e);\n\t}\n}\n```\n**Register**\n> init执行完毕后，便执行**ChannelFuture regFuture = config().group().register(channel)**操作\n> 该方法最终调用的是**promise.channel().unsafe().register(this, promise)**方法\n\n**promise.channel().unsafe().register(this, promise)**\n```java\n@Override\npublic final void register(EventLoop eventLoop, final ChannelPromise promise) {\n    ...\n\n    // 获取EventLoop\n    AbstractChannel.this.eventLoop = eventLoop;\n\n   \t// 此处完成了由 主线程 到 NIO线程 的切换\n    // eventLoop.inEventLoop()用于判断当前线程是否为NIO线程\n    if (eventLoop.inEventLoop()) {\n        register0(promise);\n    } else {\n        try {\n            // 向NIO线程中添加任务\n            eventLoop.execute(new Runnable() {\n                @Override\n                public void run() {\n                    // 该方法中会执行doRegister\n                    // 执行真正的注册操作\n                    register0(promise);\n                }\n            });\n        } catch (Throwable t) {\n           ...\n        }\n    }\n}\n```\nregister0方法\n```java\nprivate void register0(ChannelPromise promise) {\n    try {\n       \t...\n            \n        // 执行真正的注册操作\n        doRegister();\n        neverRegistered = false;\n        registered = true;\n\n        // Ensure we call handlerAdded(...) before we actually notify the promise. This is needed as the\n        // user may already fire events through the pipeline in the ChannelFutureListener.\n        \n        // 调用init中的initChannel方法\n        pipeline.invokeHandlerAddedIfNeeded();\n\n        ...\n    } catch (Throwable t) {\n        ...\n    }\n}\n```\n**doRegister方法**<br />​<br />\n```java\n@Override\nprotected void doRegister() throws Exception {\n    boolean selected = false;\n    for (;;) {\n        try {\n            // javaChannel()即为ServerSocketChannel\n            // eventLoop().unwrappedSelector()获取eventLoop中的Selector\n            // this为NIOServerSocketChannel，作为附件\n            selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), 0, this);\n            return;\n        } catch (CancelledKeyException e) {\n            ...\n           \n        }\n    }\n}\n```\n回调initChannel\n```java\n@Override\npublic void initChannel(final Channel ch) {\n    final ChannelPipeline pipeline = ch.pipeline();\n    ChannelHandler handler = config.handler();\n    if (handler != null) {\n        pipeline.addLast(handler);\n    }\n\n    // 添加新任务，任务负责添加handler\n    // 该handler负责发生Accepet事件后建立连接\n    ch.eventLoop().execute(new Runnable() {\n        @Override\n        public void run() {\n            pipeline.addLast(new ServerBootstrapAcceptor(\n                    ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));\n        }\n    });\n}\n```\nRegister主要完成了以下三个操作<br />​<br />\n\n- 完成了主线程到NIO的**线程切换**\n   - 通过**eventLoop.inEventLoop()**进行线程判断，判断当前线程是否为NIO线程\n   - 切换的方式为让eventLoop执行register的操作\n   - **register的操作在NIO线程中完成调用doRegister方法**\n```java\n// javaChannel()即为ServerSocketChannel\n// eventLoop().unwrappedSelector()获取eventLoop中的Selector\n// this为NIOServerSocketChannel，作为附件\nselectionKey = javaChannel().register(eventLoop().unwrappedSelector(), 0, this);\n```\n\n   - **将ServerSocketChannel注册到EventLoop的Selector中**\n   - 此时还未关注事件\n   - 添加NioServerSocketChannel附件\n- 通过**invokeHandlerAddedIfNeeded**调用init中的**initChannel**方法\n   - initChannel方法主要创建了**两个handler**\n      - 一个handler负责设置配置\n      - 一个handler负责发生Accept事件后建立连接\n\n\n<br />\n\n<a name=\"gYTpl\"></a>\n## doBind0\n**绑定端口**<br />在**doRegister**和**invokeHandlerAddedIfNeeded**操作中的完成后，会调用**safeSetSuccess(promise)**方法，向Promise中设置执行成功的结果。此时**doBind**方法中由**initAndRegister**返回的ChannelFuture对象regFuture便会由NIO线程异步执行doBind0绑定操作<br /> \n```java\n// initAndRegister为异步方法，会返回ChannelFuture对象\nfinal ChannelFuture regFuture = initAndRegister();\nregFuture.addListener(new ChannelFutureListener() {\n    @Override\n    public void operationComplete(ChannelFuture future) throws Exception {\n        Throwable cause = future.cause();\n        if (cause != null) {\n            // Registration on the EventLoop failed so fail the ChannelPromise directly to not cause an\n            // IllegalStateException once we try to access the EventLoop of the Channel.\n            promise.setFailure(cause);\n        } else {\n            // Registration was successful, so set the correct executor to use.\n            // See https://github.com/netty/netty/issues/2586\n            promise.registered();\n            // 如果没有异常，则执行绑定操作\n            doBind0(regFuture, channel, localAddress, promise);\n        }\n    }\n});\n```\n> **doBind0最底层调用的是ServerSocketChannel的bind方法**<br /> NioServerSocketChannel.doBind方法\n\n通过该方法，绑定了对应的端口\n```java\n@SuppressJava6Requirement(reason = \"Usage guarded by java version check\")\n@Override\nprotected void doBind(SocketAddress localAddress) throws Exception {\n    if (PlatformDependent.javaVersion() >= 7) {\n        // 调用ServerSocketChannel的bind方法，绑定端口\n        javaChannel().bind(localAddress, config.getBacklog());\n    } else {\n        javaChannel().socket().bind(localAddress, config.getBacklog());\n    }\n}\n```\n**关注事件**<br />在绑定端口操作完成后，会判断各种所有初始化操作是否已经完成，若完成，则会添加ServerSocketChannel感兴趣的事件<br />​<br />\n```java\nif (!wasActive && isActive()) {\n    invokeLater(new Runnable() {\n        @Override\n        public void run() {\n            pipeline.fireChannelActive();\n        }\n    });\n}\n```\n> 最终在**AbstractNioChannel.doBeginRead**方法中，会添加ServerSocketChannel添加Accept事件\n\n```java\n@Override\nprotected void doBeginRead() throws Exception {\n    // Channel.read() or ChannelHandlerContext.read() was called\n    final SelectionKey selectionKey = this.selectionKey;\n    if (!selectionKey.isValid()) {\n        return;\n    }\n    readPending = true;\n    final int interestOps = selectionKey.interestOps();\n    // 如果ServerSocketChannel没有关注Accept事件\n    if ((interestOps & readInterestOp) == 0) {\n        // 则让其关注Accepet事件\n        // readInterestOp 取值是 16\n        // 在 NioServerSocketChannel 创建时初始化\n        selectionKey.interestOps(interestOps | readInterestOp);\n    }\n}\n```\n**注意**：此处设置interestOps时使用的方法，**避免覆盖关注的其他事件**\n\n- 首先获取Channel所有感兴趣的事件\n```java\nfinal int interestOps = selectionKey.interestOps();\n```\n\n- 然后再设置其感兴趣的事件\n\n\n\n```java\nselectionKey.interestOps(interestOps | readInterestOp);\n```\n> **各个事件对应的值**\n\n![](/image/blog/20210506090047.png)\n<a name=\"KD021\"></a>\n\n## 总结\n通过上述步骤，完成了\n\n- NioServerSocketChannel与ServerSocketChannel的创建\n- ServerSocketChannel绑定到EventLoop的Selecot中，并添加NioServerSocketChannel附件\n- 绑定了对应的端口\n- 关注了Accept事件\n\n\n\n<br />\n<a name=\"fFNbn\"></a>\n# NioEventLoop剖析\n<a name=\"CJGhF\"></a>\n## 组成\nNioEventLoop的重要组成部分有三个\n\n- **Selector**\n```java\npublic final class NioEventLoop extends SingleThreadEventLoop {\n    \n    ...\n        \n    // selector中的selectedKeys是基于数组的\n    // unwrappedSelector中的selectedKeys是基于HashSet的    \n    private Selector selector;\n    private Selector unwrappedSelector;\n    private SelectedSelectionKeySet selectedKeys;\n    \n    ...\n}\n```\n\n- **Thread与TaskQueue**\n\n<br />\n```java\npublic abstract class SingleThreadEventExecutor extends AbstractScheduledEventExecutor implements OrderedEventExecutor {\n    // 任务队列\n    private final Queue<Runnable> taskQueue;\n\n    // 线程\n    private volatile Thread thread;\n}\n```\n<a name=\"LDc5h\"></a>\n### Selector的创建\n> Selector是在NioEventLoop的构造方法中被创建的\n\n```java\nNioEventLoop(NioEventLoopGroup parent, Executor executor, SelectorProvider selectorProvider, SelectStrategy strategy, RejectedExecutionHandler rejectedExecutionHandler, EventLoopTaskQueueFactory queueFactory) {\n    \n        ...\n           \n        // 初始化selector，初始化过程在openSelector中\n        final SelectorTuple selectorTuple = openSelector();\n        this.selector = selectorTuple.selector;\n        this.unwrappedSelector = selectorTuple.unwrappedSelector;\n}\n\n\nprivate SelectorTuple openSelector() {\n    final Selector unwrappedSelector;\n    try {\n        // 此处等同于 Selector.open()方法\n        // 创建了unwrappedSelector对象\n        unwrappedSelector = provider.openSelector();\n    } catch (IOException e) {\n        throw new ChannelException(\"failed to open a new selector\", e);\n    }\n}\n```\nNioEventLoop的构造方法中，调用了openSelector()方法， 该方法会返回一个<br />SelectorTuple对象，该方法是创建Selector的核心方法。openSelector()方法内部调用了\n```java\nunwrappedSelector = provider.openSelector();\n```\n获得了Selector对象**unwrappedSelector**<br />​\n\n后面会通过反射，修改**unwrappedSelector**中SelectedKeys的实现，然后通过**SelectedSelectionKeySetSelector**方法获得selector。**最后通过SelectorTuple的构造方法，将该Selector的值赋给SelectorTuple类中的selector与unwrappedSelector**\n```java\nprivate static final class SelectorTuple {\n    final Selector unwrappedSelector;\n    final Selector selector;\n\n    SelectorTuple(Selector unwrappedSelector) {\n        this.unwrappedSelector = unwrappedSelector;\n        this.selector = unwrappedSelector;\n    }\n\n    /**\n    * 一般调用的是这个构造方法\n    */\n    SelectorTuple(Selector unwrappedSelector, Selector selector) {\n        this.unwrappedSelector = unwrappedSelector;\n        this.selector = selector;\n    }\n}\n```\n再通过NioEventLoop的构造方法，将SelectorTuple中的Selector赋值给NioEventLoop中的Selector<br />**​**\n\n**​**<br />\n<a name=\"h6t7t\"></a>\n### 两个Selector\nNioEventLoop中有selector和unwrappedSelector两个Selector，**它们的区别主要在于SelectedKeys的数据结构**\n\n- selector中的SelectedKeys是**基于数组**的\n- unwrappedSelector中的是**基于HashSet**的\n\n这样做的主要目的是，**数组的遍历效率要高于HashSet**<br /> \n```java\nprivate SelectorTuple openSelector() {\n    final Selector unwrappedSelector;\n    try {\n        unwrappedSelector = provider.openSelector();\n    } catch (IOException e) {\n        throw new ChannelException(\"failed to open a new selector\", e);\n    }\n\n    ...\n    \n    // 获得基于数组的selectedKeySet实现\n    final SelectedSelectionKeySet selectedKeySet = new SelectedSelectionKeySet();\n\n\n    Object maybeException = AccessController.doPrivileged(new PrivilegedAction<Object>() {\n        @Override\n        public Object run() {\n            try {\n                // 通过反射拿到unwrappedSelector中的selectedKeys属性\n                Field selectedKeysField = selectorImplClass.getDeclaredField(\"selectedKeys\");\n                Field publicSelectedKeysField = selectorImplClass.getDeclaredField(\"publicSelectedKeys\");\n\n                ...\n\t\n                // 暴力反射，修改私有属性\n                Throwable cause = ReflectionUtil.trySetAccessible(selectedKeysField, true);\n                if (cause != null) {\n                    return cause;\n                }\n                cause = ReflectionUtil.trySetAccessible(publicSelectedKeysField, true);\n                if (cause != null) {\n                    return cause;\n                }\n\n                // 替换为基于数组的selectedKeys实现\n                selectedKeysField.set(unwrappedSelector, selectedKeySet);\n                publicSelectedKeysField.set(unwrappedSelector, selectedKeySet);\n                return null;\n            } catch (NoSuchFieldException e) {\n                return e;\n            } catch (IllegalAccessException e) {\n                return e;\n            }\n        }\n    });\n\n    selectedKeys = selectedKeySet;\n    \n    // 调用构造函数，创建unwrappedSelector与selector\n    return new SelectorTuple(unwrappedSelector,\n                             new SelectedSelectionKeySetSelector(unwrappedSelector, selectedKeySet));\n}\n```\n\n\n获得数组实现SelectedKeys的Selector的原理是反射，主要步骤如下\n\n- 获得**基于数组**的selectedKeySet实现\n```java\n// 获得基于数组的selectedKeySet实现\nfinal SelectedSelectionKeySet selectedKeySet = new SelectedSelectionKeySet();\n\nSelectedSelectionKeySet() {\n\tkeys = new SelectionKey[1024];\n}\n```\n\n- 通过**反射**拿到unwrappedSelector中的SelectedKeySet并将其**替换为selectedKeySet**\n- **通过Selector的构造方法**获得selector\n```java\nnew SelectedSelectionKeySetSelector(unwrappedSelector, selectedKeySet)\n```\n\n- **通过SelectorTuple的构造方法**获得拥有两种Selector的SelectorTuple对象，并返回给NioEventLoop\n```java\n// 调用构造函数，创建unwrappedSelector与selector\nreturn new SelectorTuple(unwrappedSelector, new SelectedSelectionKeySetSelector(unwrappedSelector, selectedKeySet));\n```\n<a name=\"F9Aje\"></a>\n## NIO线程启动时机\n**启动**<br />NioEventLoop中的线程，**在首次执行任务时，才会被创建，且只会被创建一次**<br />**测试代码**\n```java\npublic class TestNioEventLoop {\n    public static void main(String[] args) {\n        EventLoop eventLoop = new NioEventLoopGroup().next();\n        // 使用NioEventLoop执行任务\n        eventLoop.execute(()->{\n            System.out.println(\"hello\");\n        });\n    }\n}\n```\n进入execute执行任务\n```java\n@Override\npublic void execute(Runnable task) {\n    // 检测传入的任务是否为空，为空会抛出NullPointerException\n    ObjectUtil.checkNotNull(task, \"task\");\n    // 执行任务\n    // 此处判断了任务是否为懒加载任务，wakesUpForTask的返回值只会为true\n    execute(task, !(task instanceof LazyRunnable) && wakesUpForTask(task));\n}\n```\n进入上述代码的execute方法\n```java\nprivate void execute(Runnable task, boolean immediate) {\n    // 判断当前线程是否为NIO线程\n    // 判断方法为 return thread == this.thread;\n    // this.thread即为NIO线程，首次执行任务时，其为null\n    boolean inEventLoop = inEventLoop();\n    \n    // 向任务队列taskQueue中添加任务\n    addTask(task);\n    \n    // 当前线程不是NIO线程，则进入if语句\n    if (!inEventLoop) {\n        // 启动NIO线程的核心方法\n        startThread();\n        \n        ...\n        \n    }\n\t\n    // 有任务需要被执行时，唤醒阻塞的NIO线程\n    if (!addTaskWakesUp && immediate) {\n        wakeup(inEventLoop);\n    }\n}\n```\n进入startThread方法\n```java\nprivate void startThread() {\n    // 查看NIO线程状态是否为未启动\n    // 该if代码块只会执行一次\n    // state一开始的值就是ST_NOT_STARTED\n    // private volatile int state = ST_NOT_STARTED;\n    if (state == ST_NOT_STARTED) {\n        // 通过原子属性更新器将状态更新为启动（ST_STARTED）\n        if (STATE_UPDATER.compareAndSet(this, ST_NOT_STARTED, ST_STARTED)) {\n            boolean success = false;\n            try {\n                // 执行启动线程\n                doStartThread();\n                success = true;\n            } finally {\n                if (!success) {\n                    STATE_UPDATER.compareAndSet(this, ST_STARTED, ST_NOT_STARTED);\n                }\n            }\n        }\n    }\n}\n```\n**进入doStartThread，真正创建NIO线程并执行任务**\n```java\nprivate void doStartThread() {\n    assert thread == null;\n    // 创建NIO线程并执行任务\n    executor.execute(new Runnable() {\n        @Override\n        public void run() {\n            // thread即为NIO线程\n            thread = Thread.currentThread();\n            if (interrupted) {\n                thread.interrupt();\n            }\n\n            boolean success = false;\n            updateLastExecutionTime();\n            try {\n                // 执行内部run方法\n                SingleThreadEventExecutor.this.run();\n                success = true;\n            } \n            \n            ...\n    });\n}\n```\n通过SingleThreadEventExecutor.this.run()执行传入的任务（task）<br />该run方法是**NioEvnetLoop的run方法**\n```java\n@Override\nprotected void run() {\n    int selectCnt = 0;\n    // 死循环，不断地从任务队列中获取各种任务来执行\n    for (;;) {\t\n      \t// 执行各种任务\n   \t\ttry {\n            int strategy;\n            try {\n                strategy = selectStrategy.calculateStrategy(selectNowSupplier, hasTasks());\n                switch (strategy) {\n                case SelectStrategy.CONTINUE:\n                    continue;\n\n                case SelectStrategy.BUSY_WAIT:\n                    // fall-through to SELECT since the busy-wait is not supported with NIO\n\n                case SelectStrategy.SELECT:\n                    long curDeadlineNanos = nextScheduledTaskDeadlineNanos();\n                    if (curDeadlineNanos == -1L) {\n                        curDeadlineNanos = NONE; // nothing on the calendar\n                    }\n                    nextWakeupNanos.set(curDeadlineNanos);\n                    try {\n                        if (!hasTasks()) {\n                            strategy = select(curDeadlineNanos);\n                        }\n                    } finally {\n                        // This update is just to help block unnecessary selector wakeups\n                        // so use of lazySet is ok (no race condition)\n                        nextWakeupNanos.lazySet(AWAKE);\n                    }\n                    // fall through\n                default:\n                }\n       \t\t}\n    \t}\n\t}\n```\n<a name=\"TVNbW\"></a>\n### 唤醒\nNioEvnetLoop需要IO事件、普通任务以及定时任务，任务在run方法的for循环中<br />\n\n```java\n@Override\nprotected void run() {\n    int selectCnt = 0;\n    // 死循环，不断地从任务队列中获取各种任务来执行\n    for (;;) {\n      \t// 执行各种任务\n   \t\t...\n    }\n}\n```\n中被执行，但**该循环不会空转，执行到某些代码时，会被阻塞**<br />run方法中有SELECT分支\n```java\ncase SelectStrategy.SELECT:\n\tlong curDeadlineNanos = nextScheduledTaskDeadlineNanos();\n\tif (curDeadlineNanos == -1L) {\n        curDeadlineNanos = NONE; // nothing on the calendar\n    }\n\tnextWakeupNanos.set(curDeadlineNanos);\n\ttry {\n    \tif (!hasTasks()) {\n            // 执行select方法\n            strategy = select(curDeadlineNanos);\n        }\n    }\n```\n会执行NioEvnetLoop的select方法，**该方法内部会根据情况，执行selector的有参和无参的select方法**\n```java\nprivate int select(long deadlineNanos) throws IOException {\n    // 如果没有指定阻塞事件，就调用select()\n    if (deadlineNanos == NONE) {\n        return selector.select();\n    }\n    // 否则调用select(timeoutMillis)，指定时间内未发生事件就停止阻塞\n    // Timeout will only be 0 if deadline is within 5 microsecs\n    long timeoutMillis = deadlineToDelayNanos(deadlineNanos + 995000L) / 1000000L;\n    return timeoutMillis <= 0 ? selector.selectNow() : selector.select(timeoutMillis);\n}\n```\n但需要注意的是，**select方法是会阻塞线程的，当没有IO事件，但有其他任务需要执行时，需要唤醒线程**<br />唤醒是通过execute最后的if代码块来完成的\n```java\n// 有任务需要被执行时，唤醒阻塞的NIO线程\nif (!addTaskWakesUp && immediate) {\n    wakeup(inEventLoop);\n}\n```\nNioEventLoop.wakeup唤醒被selector.select方法阻塞的NIO线程\n```java\n@Override\nprotected void wakeup(boolean inEventLoop) {\n    // 只有当其他线程给当前NIO线程提交任务时（如执行execute），才会被唤醒\n    // 通过AtomicLong进行更新，保证每次只能有一个线程唤醒成功\n    if (!inEventLoop && nextWakeupNanos.getAndSet(AWAKE) != AWAKE) {\n        // 唤醒被selector.select方法阻塞的NIO线程\n        selector.wakeup();\n    }\n}\n```\n唤醒时需要进行两个判断\n\n- 判断提交任务的**是否为NIO线程**\n   - 若是其他线程，才能唤醒NIO线程\n   - 若是NIO线程自己，则不能唤醒\n- 通过**AtomicLong**保证有多个线程同时提交任务时，只有一个线程能够唤醒NIO线程\n\n\n\n<br />\n<a name=\"f9FLE\"></a>\n### SELECT分支\nrun方法的switch语句有多条分支，具体执行分支的代码由strategy变量控制\n```java\nint strategy = selectStrategy.calculateStrategy(selectNowSupplier, hasTasks());\nswitch (strategy) {\n\t...\n}\n```\nstrategy的值由calculateStrategy方法确定\n```java\n@Override\npublic int calculateStrategy(IntSupplier selectSupplier, boolean hasTasks) throws Exception {\n    // selectSupplier.get() 底层是 selector.selectNow();\n    return hasTasks ? selectSupplier.get() : SelectStrategy.SELECT;\n}\n```\n该方法会**根据hasTaks变量判断任务队列中是否有任务**\n\n- 若有任务，则**通过selectSupplier获得strategy的值**\n   - **get方法会selectNow方法，顺便拿到IO事件**\n```java\nprivate final IntSupplier selectNowSupplier = new IntSupplier() {\n    public int get() throws Exception {\n        return NioEventLoop.this.selectNow();\n    }\n};\n\nint selectNow() throws IOException {\n    return this.selector.selectNow();\n}\n```\n\n- 没有任务，就会进入SELECT分支\n\n也就说，**当任务队列中没有任务时，才会进入SELECT分支，让NIO线程阻塞，而不是空转。若有任务，则会通过get方法调用selector.selectNow方法，顺便拿到IO事件**\n\n\n<a name=\"xwaxz\"></a>\n## Java NIO空轮询BUG\nJava NIO空轮询BUG也就是JavaNIO在Linux系统下的epoll空轮询问题<br />**在NioEventLoop中，因为run方法中存在一个死循环，需要通过selector.select方法来阻塞线程。但是select方法因为BUG，可能无法阻塞线程，导致循环一直执行，使得CPU负载升高**\n```java\n@Override\nprotected void run() {\n    ...\n    for(;;){\n        ...\n        // 可能发生空轮询，无法阻塞NIO线程\n        strategy = select(curDeadlineNanos);  \n        ...     \n    \n     \tif(...) {\n\t\t\t...\n     \t} else if (unexpectedSelectorWakeup(selectCnt) ){\n            // 通过unexpectedSelectorWakeup方法中的rebuildSelector重建selector\n            // 并将selectCnt重置为0\n            selectCnt = 0;\n        }\n\t}\n}\n```\n**Netty中通过selectCnt变量来检测select方法是否发生空轮询BUG**<br />若发生空轮询BUG，那么selectCnt的值会**增长是十分迅速**。当selectCnt的值大于等于SELECTOR_AUTO_REBUILD_THRESHOLD（默认512）时，Netty则判断其出现了空轮询BUG，进行如下处理\n```java\nif (SELECTOR_AUTO_REBUILD_THRESHOLD > 0 && selectCnt >= SELECTOR_AUTO_REBUILD_THRESHOLD) {\n    // The selector returned prematurely many times in a row.\n    // Rebuild the selector to work around the problem.\n    logger.warn(\"Selector.select() returned prematurely {} times in a row; rebuilding Selector {}.\",selectCnt, selector);\n    // 重建selector，将原selector的配置信息传给新selector\n    // 再用新selector覆盖旧selector\n    rebuildSelector();\n    return true;\n}\n```\n**通过rebuildSelector方法重建selector，将原selector的配置信息传给新selector，再用新selector覆盖旧selector。同时将selectCnt的值设置为0**\n<a name=\"YwSEi\"></a>\n## ioRatio\nNioEventLoop可以处理IO事件和其他任务。不同的操作所耗费的时间是不同的，**想要控制NioEventLoop处理IO事件花费时间占执行所有操作的总时间的比例，需要通过ioRatio来控制**<br />**NioEventLoop.run方法**\n```java\n// 处理IO事件时间比例，默认为50%\nfinal int ioRatio = this.ioRatio;\n\n// 如果IO事件时间比例设置为100%\nif (ioRatio == 100) {\n    try {\n        // 如果需要去处理IO事件\n        if (strategy > 0) {\n            // 先处理IO事件\n            processSelectedKeys();\n        }\n    } finally {\n        // Ensure we always run tasks.\n        // 剩下的时间都去处理普通任务和定时任务\n        ranTasks = runAllTasks();\n    }\n} else if (strategy > 0) { // 如果需要去处理IO事件\n    // 记录处理IO事件前的时间\n    final long ioStartTime = System.nanoTime();\n    try {\n        // 去处理IO事件\n        processSelectedKeys();\n    } finally {\n        // Ensure we always run tasks.\n        // ioTime为处理IO事件耗费的事件\n        final long ioTime = System.nanoTime() - ioStartTime;\n        // 计算出处理其他任务的事件\n        // 超过设定的时间后，将会停止任务的执行，会在下一次循环中再继续执行\n        ranTasks = runAllTasks(ioTime * (100 - ioRatio) / ioRatio);\n    }\n} else { // 没有IO事件需要处理\n    // This will run the minimum number of tasks\n    // 直接处理普通和定时任务\n    ranTasks = runAllTasks(0); \n}\n```\n**通过ioRatio控制各个任务执行的过程如下**\n\n- 判断ioRatio是否为100\n   - 若是，判断是否需要处理IO事件（strategy>0）\n      - 若需要处理IO事件，则先处理IO事件\n   - 若否（或IO事件已经处理完毕），**接下来去执行所有的普通任务和定时任务，直到所有任务都被处理完**\n```java\n// 没有指定执行任务的时间\nranTasks = runAllTasks();\n```\n若ioRatio不为100\n\n- 先去处理IO事件，**记录处理IO事件所花费的事件保存在ioTime中**\n- 接下来去处理其他任务，**根据ioTime与ioRatio计算执行其他任务可用的时间**\n```java\n// 比如ioTime为10s，ioRatio为50\n// 那么通过 10*(100-50)/50=10 计算出其他任务可用的时间为 10s\n// 处理IO事件占用的事件总比例为50%\nranTasks = runAllTasks(ioTime * (100 - ioRatio) / ioRatio);\n```\n\n   - 执行其他任务一旦超过可用时间，则会停止执行，在下一次循环中再继续执行\n- 若没有IO事件需要处理，则去执行**最少数量**的普通任务和定时任务\n```java\n// 运行最少数量的任务\nranTasks = runAllTasks(0);\n```\n<a name=\"MsGBx\"></a>\n## 处理事件\nIO事件是通过NioEventLoop.processSelectedKeys()方法处理的\n```java\nprivate void processSelectedKeys() {\n    // 如果selectedKeys是基于数组的\n    // 一般情况下都走这个分支\n    if (selectedKeys != null) {\n        // 处理各种IO事件\n        processSelectedKeysOptimized();\n    } else {\n        processSelectedKeysPlain(selector.selectedKeys());\n    }\n}\n```\nprocessSelectedKeysOptimized方法\n```java\nprivate void processSelectedKeysOptimized() {\n    for (int i = 0; i < selectedKeys.size; ++i) {\n        // 拿到SelectionKeyec\n        final SelectionKey k = selectedKeys.keys[i];\n        // null out entry in the array to allow to have it GC'ed once the Channel close\n        // See https://github.com/netty/netty/issues/2363\n        selectedKeys.keys[i] = null;\n\n        // 获取SelectionKey上的附件，即NioServerSocketChannel\n        final Object a = k.attachment();\n\n        if (a instanceof AbstractNioChannel) {\n            // 处理事件，传入附件NioServerSocketChannel\n            processSelectedKey(k, (AbstractNioChannel) a);\n        } else {\n            @SuppressWarnings(\"unchecked\")\n            NioTask<SelectableChannel> task = (NioTask<SelectableChannel>) a;\n            processSelectedKey(k, task);\n        }\n\n        if (needsToSelectAgain) {\n            // null out entries in the array to allow to have it GC'ed once the Channel close\n            // See https://github.com/netty/netty/issues/2363\n            selectedKeys.reset(i + 1);\n\n            selectAgain();\n            i = -1;\n        }\n    }\n}\n```\n该方法中通过fori的方法，遍历基于数组的SelectedKey，通过\n```java\nfinal SelectionKey k = selectedKeys.keys[i];\n```\n获取到SelectionKey，**然后获取其再Register时添加的附件NioServerSocketChannel**\n```java\n// 获取SelectionKey上的附件，即NioServerSocketChannel\nfinal Object a = k.attachment();\n```\n如果附件继承自AbstractNioChannel，则会调用\n```java\n// 处理事件，传入附件NioServerSocketChannel\nprocessSelectedKey(k, (AbstractNioChannel) a);\n```\n去处理各个事件<br />**真正处理各种事件的方法processSelectedKey**<br />获取SelectionKey的事件，然后进行相应处理\n```java\nprivate void processSelectedKey(SelectionKey k, AbstractNioChannel ch) {\n    final AbstractNioChannel.NioUnsafe unsafe = ch.unsafe();\n    if (!k.isValid()) {\n        final EventLoop eventLoop;\n        try {\n            eventLoop = ch.eventLoop();\n        } catch (Throwable ignored) {\n            // If the channel implementation throws an exception because there is no event loop, we ignore this\n            // because we are only trying to determine if ch is registered to this event loop and thus has authority\n            // to close ch.\n            return;\n        }\n        // Only close ch if ch is still registered to this EventLoop. ch could have deregistered from the event loop\n        // and thus the SelectionKey could be cancelled as part of the deregistration process, but the channel is\n        // still healthy and should not be closed.\n        // See https://github.com/netty/netty/issues/5125\n        if (eventLoop == this) {\n            // close the channel if the key is not valid anymore\n            unsafe.close(unsafe.voidPromise());\n        }\n        return;\n    }\n\n    try {\n        int readyOps = k.readyOps();\n        // We first need to call finishConnect() before try to trigger a read(...) or write(...) as otherwise\n        // the NIO JDK channel implementation may throw a NotYetConnectedException.\n        if ((readyOps & SelectionKey.OP_CONNECT) != 0) {\n            // remove OP_CONNECT as otherwise Selector.select(..) will always return without blocking\n            // See https://github.com/netty/netty/issues/924\n            int ops = k.interestOps();\n            ops &= ~SelectionKey.OP_CONNECT;\n            k.interestOps(ops);\n\n            unsafe.finishConnect();\n        }\n\n        // Process OP_WRITE first as we may be able to write some queued buffers and so free memory.\n        if ((readyOps & SelectionKey.OP_WRITE) != 0) {\n            // Call forceFlush which will also take care of clear the OP_WRITE once there is nothing left to write\n            ch.unsafe().forceFlush();\n        }\n\n        // Also check for readOps of 0 to workaround possible JDK bug which may otherwise lead\n        // to a spin loop\n        if ((readyOps & (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != 0 || readyOps == 0) {\n            unsafe.read();\n        }\n    } catch (CancelledKeyException ignored) {\n        unsafe.close(unsafe.voidPromise());\n    }\n}\n```\n<a name=\"l58Kn\"></a>\n# Accept剖析\n<a name=\"vKDhU\"></a>\n## NIO中处理Accept事件流程\n\n- selector.select()阻塞线程，直到事件发生\n- 遍历selectionKeys\n- 获取一个key，判断事件类型是否为Accept\n\n---\n\n- 创建SocketChannel，设置为非阻塞\n- 将SocketChannel注册到selector中\n- 关注selectionKeys的read事件\n\n代码如下\n```java\n// 阻塞直到事件发生\nselector.select();\n\nIterator<SelectionKey> iter = selector.selectionKeys().iterator();\nwhile (iter.hasNext()) {    \n    // 拿到一个事件\n    SelectionKey key = iter.next();\n    \n    // 如果是 accept 事件\n    if (key.isAcceptable()) {\n        \n        // 执行accept，获得SocketChannel\n        SocketChannel channel = serverSocketChannel.accept();\n        channel.configureBlocking(false);\n        \n        // 将SocketChannel注册到selector中，并关注read事件\n        channel.register(selector, SelectionKey.OP_READ);\n    }\n    // ...\n}\n```\n**其中前三步，在NioEventLoop剖析中已经分析过了，所以接下来主要分析后三步**\n\n\n<a name=\"jbFsY\"></a>\n## SocketChannel的创建与注册\n发生Accept事件后，会执行NioEventLoop.run方法的如下if分支\n```java\nif ((readyOps & (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != 0 || readyOps == 0) {\n\tunsafe.read();\n}\n```\nNioMessageUnsafe.read方法\n```java\npublic void read() {\n\n    ...\n    \n    try {\n        try {\n            do {\n\t\t\t\t// doReadMessages中执行了accept获得了SocketChannel\n                // 并创建NioSocketChannel作为消息放入readBuf\n                // readBuf是一个ArrayList用来缓存消息\n                // private final List<Object> readBuf = new ArrayList<Object>();\n                int localRead = doReadMessages(readBuf);\n                \n                ...\n                \n\t\t\t\t// localRead值为1，就一条消息，即接收一个客户端连接\n                allocHandle.incMessagesRead(localRead);\n            } while (allocHandle.continueReading());\n        } catch (Throwable t) {\n            exception = t;\n        }\n\n        int size = readBuf.size();\n        for (int i = 0; i < size; i ++) {\n            readPending = false;\n            // 触发read事件，让pipeline上的handler处理\n            // ServerBootstrapAcceptor.channelRead\n            pipeline.fireChannelRead(readBuf.get(i));\n        }\n        \n        ...\n        \n    } finally {\n        if (!readPending && !config.isAutoRead()) {\n            removeReadOp();\n        }\n    }\n}\n```\nNioSocketChannel.doReadMessages方法<br />该方法中处理accpet事件，**获得SocketChannel**，同时**创建了NioSocketChannel**，作为消息放在了readBuf中\n```java\n@Override\nprotected int doReadMessages(List<Object> buf) throws Exception {\n    // 处理accpet事件，获得SocketChannel\n    SocketChannel ch = SocketUtils.accept(javaChannel());\n\n    try {\n        if (ch != null) {\n            // 创建了NioSocketChannel，作为消息放在了readBuf中\n            buf.add(new NioSocketChannel(this, ch));\n            return 1;\n        }\n    } catch (Throwable t) {\n       ...\n    }\n\n    return 0;\n}\n```\nServerBootstrapAcceptor.channelRead\n```java\npublic void channelRead(ChannelHandlerContext ctx, Object msg) {\n    // 这时的msg是NioSocketChannel\n    final Channel child = (Channel) msg;\n\n    // NioSocketChannel添加childHandler，即初始化器\n    child.pipeline().addLast(childHandler);\n\n    // 设置选项\n    setChannelOptions(child, childOptions, logger);\n\n    for (Entry<AttributeKey<?>, Object> e: childAttrs) {\n        child.attr((AttributeKey<Object>) e.getKey()).set(e.getValue());\n    }\n\n    try {\n        // 注册 NioSocketChannel到nio worker线程，接下来的处理也移交至nio worker线程\n        childGroup.register(child).addListener(new ChannelFutureListener() {\n            @Override\n            public void operationComplete(ChannelFuture future) throws Exception {\n                if (!future.isSuccess()) {\n                    forceClose(child, future.cause());\n                }\n            }\n        });\n    } catch (Throwable t) {\n        forceClose(child, t);\n    }\n}\n```\n通过AbstractUnsafe.register 方法，将SocketChannel注册到了Selector中，**过程与启动流程中的Register过程类似**\n```java\npublic final void register(EventLoop eventLoop, final ChannelPromise promise) {\n    \n    ...\n\n    AbstractChannel.this.eventLoop = eventLoop;\n\n    if (eventLoop.inEventLoop()) {\n        register0(promise);\n    } else {\n        try {\n            // 这行代码完成的是nio boss -> nio worker线程的切换\n            eventLoop.execute(new Runnable() {\n                @Override\n                public void run() {\n                    // 真正的注册操作\n                    register0(promise);\n                }\n            });\n        } catch (Throwable t) {\n            ...\n        }\n    }\n}\n```\nAbstractChannel.AbstractUnsafe.register0\n```java\nprivate void register0(ChannelPromise promise) {\n    try {\n        \n        ...\n            \n        // 该方法将SocketChannel注册到Selector中\n        doRegister();\n        \n        // 执行初始化器，执行前 pipeline 中只有 head -> 初始化器 -> tail\n        pipeline.invokeHandlerAddedIfNeeded();\n        // 执行后就是 head -> logging handler -> my handler -> tail\n\n        safeSetSuccess(promise);\n        pipeline.fireChannelRegistered();\n        \n        if (isActive()) {\n            if (firstRegistration) {\n                // 触发pipeline上active事件\n                pipeline.fireChannelActive();\n            } else if (config().isAutoRead()) {\n                beginRead();\n            }\n        }\n    } catch (Throwable t) {\n        closeForcibly();\n        closeFuture.setClosed();\n        safeSetFailure(promise, t);\n    }\n}\n```\nAbstractNioChannel.doRegister将SocketChannel注册到Selector中\n```java\n@Override\nprotected void doRegister() throws Exception {\n    boolean selected = false;\n    for (;;) {\n        try {\n            // 将Selector注册到Selector中\n            selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), 0, this);\n            return;\n        } catch (CancelledKeyException e) {\n            ...\n        }\n    }\n}\n```\nHeadContext.channelActive\n```java\npublic void channelActive(ChannelHandlerContext ctx) {\n    ctx.fireChannelActive();\n\t// 触发read(NioSocketChannel这里read只是为了触发channel的事件注册，还未涉及数据读取)\n    readIfIsAutoRead();\n}\n```\nAbstractNioChannel.doBeginRead，通过该方法，SocketChannel关注了read事件\n```java\nprotected void doBeginRead() throws Exception {\n    // Channel.read() or ChannelHandlerContext.read() was called\n    final SelectionKey selectionKey = this.selectionKey;\n    if (!selectionKey.isValid()) {\n        return;\n    }\n\n    readPending = true;\n\t// 这时候 interestOps是0\n    final int interestOps = selectionKey.interestOps();\n    if ((interestOps & readInterestOp) == 0) {\n        // 关注read事件\n        selectionKey.interestOps(interestOps | readInterestOp);\n    }\n}\n```\n<a name=\"pEzHa\"></a>\n# Read剖析\nread事件的处理也是在\n```java\nif ((readyOps & (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != 0 || readyOps == 0) {\n\tunsafe.read();\n}\n```\n分支中，通过unsafe.read()方法处理的，**不过此处调用的方法在AbstractNioByteChannel.NioByteUnsafe类中**\n```java\n@Override\npublic final void read() {\n    // 获得Channel的配置\n    final ChannelConfig config = config();\n    if (shouldBreakReadReady(config)) {\n        clearReadPending();\n        return;\n    }\n    final ChannelPipeline pipeline = pipeline();\n\t// 根据配置创建ByteBufAllocator（池化非池化、直接非直接内存）\n\tfinal ByteBufAllocator allocator = config.getAllocator();\n    // 用来分配 byteBuf，确定单次读取大小\n    final RecvByteBufAllocator.Handle allocHandle = recvBufAllocHandle();\n    allocHandle.reset(config);\n\n    ByteBuf byteBuf = null;\n    boolean close = false;\n    try {\n        do {\n            // 创建ByteBuf\n            byteBuf = allocHandle.allocate(allocator);\n            // 读取内容，放入ByteBUf中\n            allocHandle.lastBytesRead(doReadBytes(byteBuf));\n            if (allocHandle.lastBytesRead() <= 0) {\n                byteBuf.release();\n                byteBuf = null;\n                close = allocHandle.lastBytesRead() < 0;\n                if (close) {\n                    readPending = false;\n                }\n                break;\n            }\n\n            allocHandle.incMessagesRead(1);\n            readPending = false;\n            // 触发read 事件，让pipeline上的handler处理\n            // 这时是处理NioSocketChannel上的handler\n            pipeline.fireChannelRead(byteBuf);\n            byteBuf = null;\n        } \n        // 是否要继续循环\n        while (allocHandle.continueReading());\n\n        allocHandle.readComplete();\n        // 触发 read complete事件\n        pipeline.fireChannelReadComplete();\n\n        if (close) {\n            closeOnRead(pipeline);\n        }\n    } catch (Throwable t) {\n        handleReadException(pipeline, byteBuf, t, close, allocHandle);\n    } finally {\n         // Check if there is a readPending which was not processed yet.\n         // This could be for two reasons:\n         // * The user called Channel.read() or ChannelHandlerContext.read() in channelRead(...) method\n         // * The user called Channel.read() or ChannelHandlerContext.read() in channelReadComplete(...) method\n         //\n         // See https://github.com/netty/netty/issues/2254\n        if (!readPending && !config.isAutoRead()) {\n            removeReadOp();\n        }\n    }\n}\n```\nDefaultMaxMessagesRecvByteBufAllocator.MaxMessageHandle.continueReading(io.netty.util.UncheckedBooleanSupplier)\n```java\npublic boolean continueReading(UncheckedBooleanSupplier maybeMoreDataSupplier) {\n    return \n           // 一般为true\n           config.isAutoRead() &&\n           // respectMaybeMoreData默认为true\n           // maybeMoreDataSupplier的逻辑是如果预期读取字节与实际读取字节相等，返回true\n           (!respectMaybeMoreData || maybeMoreDataSupplier.get()) &&\n           // 小于最大次数，maxMessagePerRead默认16\n           totalMessages < maxMessagePerRead &&\n           // 实际读到了数据\n           totalBytesRead > 0;\n}\n```\n","source":"_posts/netty.md","raw":"---\ntitle: Netty源码分析\ncategories:  原理分析\ntags:\n  - java\n  - netty\nexcerpt: Netty源码分析\ndate: 2022-02-18 16:35:03\ncover: '/image/blog/components.png?raw=true'\n---\n\n<a name=\"ul6Ap\"></a>\n\n# 启动流程\nNetty启动流程可以简化成如下代码<br />​<br />\n```java\n// netty 中使用 NioEventLoopGroup （简称 nio boss 线程）来封装线程和 selector\nSelector selector = Selector.open(); \n\n// 创建 NioServerSocketChannel，同时会初始化它关联的 handler，以及为原生 ssc 存储 config\nNioServerSocketChannel attachment = new NioServerSocketChannel();\n\n// 创建 NioServerSocketChannel 时，创建了 java 原生的 ServerSocketChannel\nServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); \nserverSocketChannel.configureBlocking(false);\n\n// 启动 nio boss 线程执行接下来的操作\n\n//注册（仅关联 selector 和 NioServerSocketChannel），未关注事件\nSelectionKey selectionKey = serverSocketChannel.register(selector, 0, attachment);\n\n// head -> 初始化器 -> ServerBootstrapAcceptor -> tail，初始化器是一次性的，只为添加 acceptor\n\n// 绑定端口\nserverSocketChannel.bind(new InetSocketAddress(8080));\n\n// 触发 channel active 事件，在 head 中关注 op_accept 事件\nselectionKey.interestOps(SelectionKey.OP_ACCEPT);\n```\n\n- 获得选择器Selector，Netty中使用NioEventloopGroup中的NioEventloop封装了线程和选择器\n- 创建**NioServerSocketChannel**，该Channel**作为附件**添加到**ServerSocketChannel**中\n- 创建**ServerSocketChannel**，将其设置为非阻塞模式，并注册到Selector中，**此时未关注事件，但是添加了附件NioServerSocketChannel**\n- 绑定端口\n- 通过**interestOps**设置感兴趣的事件\n\n<br />\n<a name=\"aOWtJ\"></a>\n## bind\n> 选择器Selector的创建是在NioEventloopGroup中完成的。NioServerSocketChannel与ServerSocketChannel的创建，ServerSocketChannel注册到Selector中以及绑定操作都是由bind方法完成的\n\n所以服务器启动的入口便是io.netty.bootstrap.ServerBootstrap.bind​\n```java\npublic ChannelFuture bind(SocketAddress localAddress) {\n\tvalidate();\n\treturn doBind(ObjectUtil.checkNotNull(localAddress, \"localAddress\"));\n}\n```\n\n<br />\n\n<a name=\"PoYa8\"></a>\n## doBind\n> 真正完成初始化、注册以及绑定的方法是io.netty.bootstrap.AbstractBootstrap.doBind\n\n**dobind方法在主线程中执行**\n```java\nprivate ChannelFuture doBind(final SocketAddress localAddress) {\n    // 负责NioServerSocketChannel和ServerSocketChannel的创建\n    // ServerSocketChannel的注册工作\n    // init由main线程完成，regisetr由NIO线程完成\n    final ChannelFuture regFuture = initAndRegister();\n    final Channel channel = regFuture.channel();\n    if (regFuture.cause() != null) {\n        return regFuture;\n    }\n\n    // 因为register操作是异步的\n    // 所以要判断主线程执行到这里时，register操作是否已经执行完毕\n    if (regFuture.isDone()) {\n        // At this point we know that the registration was complete and successful.\n        ChannelPromise promise = channel.newPromise();\n        \n        // 执行doBind0绑定操作\n        doBind0(regFuture, channel, localAddress, promise);\n        return promise;\n    } else {\n        // Registration future is almost always fulfilled already, but just in case it's not.\n        // 如果register操作还没执行完，就会到这个分支中来\n        final PendingRegistrationPromise promise = new PendingRegistrationPromise(channel);\n        \n        // 添加监听器，NIO线程异步进行doBind0操作\n        regFuture.addListener(new ChannelFutureListener() {\n            @Override\n            public void operationComplete(ChannelFuture future) throws Exception {\n                Throwable cause = future.cause();\n                if (cause != null) {\n                    // Registration on the EventLoop failed so fail the ChannelPromise directly to not cause an\n                    // IllegalStateException once we try to access the EventLoop of the Channel.\n                    promise.setFailure(cause);\n                } else {\n                    // Registration was successful, so set the correct executor to use.\n                    // See https://github.com/netty/netty/issues/2586\n                    promise.registered();\n\n                    doBind0(regFuture, channel, localAddress, promise);\n                }\n            }\n        });\n        return promise;\n    }\n}\n```\n\n- doBind()中有两个重要方法**initAndRegister()**和**doBind0(regFuture, channel, localAddress, promise)**\n- initAndRegister主要负责NioServerSocketChannel和ServerSocketChannel的创建（主线程中完成）与ServerSocketChannel注册（NIO线程中完成）工作\n- doBind0则负责连接的创建工作\n\n\n<br />\n\n<a name=\"LNV9d\"></a>\n## initAndRegisterd\n```java\nfinal ChannelFuture initAndRegister() {\n    Channel channel = null;\n    try {\n        channel = channelFactory.newChannel();\n        init(channel);\n    } catch (Throwable t) {\n        if (channel != null) {\n            // channel can be null if newChannel crashed (eg SocketException(\"too many open files\"))\n            channel.unsafe().closeForcibly();\n            // as the Channel is not registered yet we need to force the usage of the GlobalEventExecutor\n            return new DefaultChannelPromise(channel, GlobalEventExecutor.INSTANCE).setFailure(t);\n        }\n        // as the Channel is not registered yet we need to force the usage of the GlobalEventExecutor\n        return new DefaultChannelPromise(new FailedChannel(), GlobalEventExecutor.INSTANCE).setFailure(t);\n    }\n\n    ChannelFuture regFuture = config().group().register(channel);\n    if (regFuture.cause() != null) {\n        if (channel.isRegistered()) {\n            channel.close();\n        } else {\n            channel.unsafe().closeForcibly();\n        }\n    }\n\n    // If we are here and the promise is not failed, it's one of the following cases:\n    // 1) If we attempted registration from the event loop, the registration has been completed at this point.\n    //    i.e. It's safe to attempt bind() or connect() now because the channel has been registered.\n    // 2) If we attempted registration from the other thread, the registration request has been successfully\n    //    added to the event loop's task queue for later execution.\n    //    i.e. It's safe to attempt bind() or connect() now:\n    //         because bind() or connect() will be executed *after* the scheduled registration task is executed\n    //         because register(), bind(), and connect() are all bound to the same thread.\n\n    return regFuture;\n}\n```\n**init**\n```java\nChannel channel = null;\ntry {\n    // 通过反射初始化NioServerSocketChannel\n    channel = channelFactory.newChannel();\n    init(channel);\n}\n```\nnewChannel方法<br /> \n```java\n@Override\npublic T newChannel() {\n    try {\n        // 通过反射调用NioServerSocketChannel的构造方法\n        // 创建NioServerSocketChannel对象\n        return constructor.newInstance();\n    } catch (Throwable t) {\n        throw new ChannelException(\"Unable to create Channel from class \" + constructor.getDeclaringClass(), t);\n    }\n}\n```\nNioServerSocketChannel构造方法\n```java\npublic NioServerSocketChannel() {\n    // 创建了ServerSocketChannel实例\n    this(newSocket(DEFAULT_SELECTOR_PROVIDER));\n}\n```\nnewSocket方法\n```java\nprivate static ServerSocketChannel newSocket(SelectorProvider provider) {\n    try {\n        // ServerSocketChannel.open方法：\n        // SelectorProvider.provider().openServerSocketChannel()\n\t    // 所以此处相当于ServerSocketChannel.open()\n        // 创建了ServerSocketChannel实例\n    \treturn provider.openServerSocketChannel();\n\t} catch (IOException e) {\n  \t  throw new ChannelException(\"Failed to open a server socket.\", e);\n\t}\n}\n```\n**Register**\n> init执行完毕后，便执行**ChannelFuture regFuture = config().group().register(channel)**操作\n> 该方法最终调用的是**promise.channel().unsafe().register(this, promise)**方法\n\n**promise.channel().unsafe().register(this, promise)**\n```java\n@Override\npublic final void register(EventLoop eventLoop, final ChannelPromise promise) {\n    ...\n\n    // 获取EventLoop\n    AbstractChannel.this.eventLoop = eventLoop;\n\n   \t// 此处完成了由 主线程 到 NIO线程 的切换\n    // eventLoop.inEventLoop()用于判断当前线程是否为NIO线程\n    if (eventLoop.inEventLoop()) {\n        register0(promise);\n    } else {\n        try {\n            // 向NIO线程中添加任务\n            eventLoop.execute(new Runnable() {\n                @Override\n                public void run() {\n                    // 该方法中会执行doRegister\n                    // 执行真正的注册操作\n                    register0(promise);\n                }\n            });\n        } catch (Throwable t) {\n           ...\n        }\n    }\n}\n```\nregister0方法\n```java\nprivate void register0(ChannelPromise promise) {\n    try {\n       \t...\n            \n        // 执行真正的注册操作\n        doRegister();\n        neverRegistered = false;\n        registered = true;\n\n        // Ensure we call handlerAdded(...) before we actually notify the promise. This is needed as the\n        // user may already fire events through the pipeline in the ChannelFutureListener.\n        \n        // 调用init中的initChannel方法\n        pipeline.invokeHandlerAddedIfNeeded();\n\n        ...\n    } catch (Throwable t) {\n        ...\n    }\n}\n```\n**doRegister方法**<br />​<br />\n```java\n@Override\nprotected void doRegister() throws Exception {\n    boolean selected = false;\n    for (;;) {\n        try {\n            // javaChannel()即为ServerSocketChannel\n            // eventLoop().unwrappedSelector()获取eventLoop中的Selector\n            // this为NIOServerSocketChannel，作为附件\n            selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), 0, this);\n            return;\n        } catch (CancelledKeyException e) {\n            ...\n           \n        }\n    }\n}\n```\n回调initChannel\n```java\n@Override\npublic void initChannel(final Channel ch) {\n    final ChannelPipeline pipeline = ch.pipeline();\n    ChannelHandler handler = config.handler();\n    if (handler != null) {\n        pipeline.addLast(handler);\n    }\n\n    // 添加新任务，任务负责添加handler\n    // 该handler负责发生Accepet事件后建立连接\n    ch.eventLoop().execute(new Runnable() {\n        @Override\n        public void run() {\n            pipeline.addLast(new ServerBootstrapAcceptor(\n                    ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));\n        }\n    });\n}\n```\nRegister主要完成了以下三个操作<br />​<br />\n\n- 完成了主线程到NIO的**线程切换**\n   - 通过**eventLoop.inEventLoop()**进行线程判断，判断当前线程是否为NIO线程\n   - 切换的方式为让eventLoop执行register的操作\n   - **register的操作在NIO线程中完成调用doRegister方法**\n```java\n// javaChannel()即为ServerSocketChannel\n// eventLoop().unwrappedSelector()获取eventLoop中的Selector\n// this为NIOServerSocketChannel，作为附件\nselectionKey = javaChannel().register(eventLoop().unwrappedSelector(), 0, this);\n```\n\n   - **将ServerSocketChannel注册到EventLoop的Selector中**\n   - 此时还未关注事件\n   - 添加NioServerSocketChannel附件\n- 通过**invokeHandlerAddedIfNeeded**调用init中的**initChannel**方法\n   - initChannel方法主要创建了**两个handler**\n      - 一个handler负责设置配置\n      - 一个handler负责发生Accept事件后建立连接\n\n\n<br />\n\n<a name=\"gYTpl\"></a>\n## doBind0\n**绑定端口**<br />在**doRegister**和**invokeHandlerAddedIfNeeded**操作中的完成后，会调用**safeSetSuccess(promise)**方法，向Promise中设置执行成功的结果。此时**doBind**方法中由**initAndRegister**返回的ChannelFuture对象regFuture便会由NIO线程异步执行doBind0绑定操作<br /> \n```java\n// initAndRegister为异步方法，会返回ChannelFuture对象\nfinal ChannelFuture regFuture = initAndRegister();\nregFuture.addListener(new ChannelFutureListener() {\n    @Override\n    public void operationComplete(ChannelFuture future) throws Exception {\n        Throwable cause = future.cause();\n        if (cause != null) {\n            // Registration on the EventLoop failed so fail the ChannelPromise directly to not cause an\n            // IllegalStateException once we try to access the EventLoop of the Channel.\n            promise.setFailure(cause);\n        } else {\n            // Registration was successful, so set the correct executor to use.\n            // See https://github.com/netty/netty/issues/2586\n            promise.registered();\n            // 如果没有异常，则执行绑定操作\n            doBind0(regFuture, channel, localAddress, promise);\n        }\n    }\n});\n```\n> **doBind0最底层调用的是ServerSocketChannel的bind方法**<br /> NioServerSocketChannel.doBind方法\n\n通过该方法，绑定了对应的端口\n```java\n@SuppressJava6Requirement(reason = \"Usage guarded by java version check\")\n@Override\nprotected void doBind(SocketAddress localAddress) throws Exception {\n    if (PlatformDependent.javaVersion() >= 7) {\n        // 调用ServerSocketChannel的bind方法，绑定端口\n        javaChannel().bind(localAddress, config.getBacklog());\n    } else {\n        javaChannel().socket().bind(localAddress, config.getBacklog());\n    }\n}\n```\n**关注事件**<br />在绑定端口操作完成后，会判断各种所有初始化操作是否已经完成，若完成，则会添加ServerSocketChannel感兴趣的事件<br />​<br />\n```java\nif (!wasActive && isActive()) {\n    invokeLater(new Runnable() {\n        @Override\n        public void run() {\n            pipeline.fireChannelActive();\n        }\n    });\n}\n```\n> 最终在**AbstractNioChannel.doBeginRead**方法中，会添加ServerSocketChannel添加Accept事件\n\n```java\n@Override\nprotected void doBeginRead() throws Exception {\n    // Channel.read() or ChannelHandlerContext.read() was called\n    final SelectionKey selectionKey = this.selectionKey;\n    if (!selectionKey.isValid()) {\n        return;\n    }\n    readPending = true;\n    final int interestOps = selectionKey.interestOps();\n    // 如果ServerSocketChannel没有关注Accept事件\n    if ((interestOps & readInterestOp) == 0) {\n        // 则让其关注Accepet事件\n        // readInterestOp 取值是 16\n        // 在 NioServerSocketChannel 创建时初始化\n        selectionKey.interestOps(interestOps | readInterestOp);\n    }\n}\n```\n**注意**：此处设置interestOps时使用的方法，**避免覆盖关注的其他事件**\n\n- 首先获取Channel所有感兴趣的事件\n```java\nfinal int interestOps = selectionKey.interestOps();\n```\n\n- 然后再设置其感兴趣的事件\n\n\n\n```java\nselectionKey.interestOps(interestOps | readInterestOp);\n```\n> **各个事件对应的值**\n\n![](/image/blog/20210506090047.png)\n<a name=\"KD021\"></a>\n\n## 总结\n通过上述步骤，完成了\n\n- NioServerSocketChannel与ServerSocketChannel的创建\n- ServerSocketChannel绑定到EventLoop的Selecot中，并添加NioServerSocketChannel附件\n- 绑定了对应的端口\n- 关注了Accept事件\n\n\n\n<br />\n<a name=\"fFNbn\"></a>\n# NioEventLoop剖析\n<a name=\"CJGhF\"></a>\n## 组成\nNioEventLoop的重要组成部分有三个\n\n- **Selector**\n```java\npublic final class NioEventLoop extends SingleThreadEventLoop {\n    \n    ...\n        \n    // selector中的selectedKeys是基于数组的\n    // unwrappedSelector中的selectedKeys是基于HashSet的    \n    private Selector selector;\n    private Selector unwrappedSelector;\n    private SelectedSelectionKeySet selectedKeys;\n    \n    ...\n}\n```\n\n- **Thread与TaskQueue**\n\n<br />\n```java\npublic abstract class SingleThreadEventExecutor extends AbstractScheduledEventExecutor implements OrderedEventExecutor {\n    // 任务队列\n    private final Queue<Runnable> taskQueue;\n\n    // 线程\n    private volatile Thread thread;\n}\n```\n<a name=\"LDc5h\"></a>\n### Selector的创建\n> Selector是在NioEventLoop的构造方法中被创建的\n\n```java\nNioEventLoop(NioEventLoopGroup parent, Executor executor, SelectorProvider selectorProvider, SelectStrategy strategy, RejectedExecutionHandler rejectedExecutionHandler, EventLoopTaskQueueFactory queueFactory) {\n    \n        ...\n           \n        // 初始化selector，初始化过程在openSelector中\n        final SelectorTuple selectorTuple = openSelector();\n        this.selector = selectorTuple.selector;\n        this.unwrappedSelector = selectorTuple.unwrappedSelector;\n}\n\n\nprivate SelectorTuple openSelector() {\n    final Selector unwrappedSelector;\n    try {\n        // 此处等同于 Selector.open()方法\n        // 创建了unwrappedSelector对象\n        unwrappedSelector = provider.openSelector();\n    } catch (IOException e) {\n        throw new ChannelException(\"failed to open a new selector\", e);\n    }\n}\n```\nNioEventLoop的构造方法中，调用了openSelector()方法， 该方法会返回一个<br />SelectorTuple对象，该方法是创建Selector的核心方法。openSelector()方法内部调用了\n```java\nunwrappedSelector = provider.openSelector();\n```\n获得了Selector对象**unwrappedSelector**<br />​\n\n后面会通过反射，修改**unwrappedSelector**中SelectedKeys的实现，然后通过**SelectedSelectionKeySetSelector**方法获得selector。**最后通过SelectorTuple的构造方法，将该Selector的值赋给SelectorTuple类中的selector与unwrappedSelector**\n```java\nprivate static final class SelectorTuple {\n    final Selector unwrappedSelector;\n    final Selector selector;\n\n    SelectorTuple(Selector unwrappedSelector) {\n        this.unwrappedSelector = unwrappedSelector;\n        this.selector = unwrappedSelector;\n    }\n\n    /**\n    * 一般调用的是这个构造方法\n    */\n    SelectorTuple(Selector unwrappedSelector, Selector selector) {\n        this.unwrappedSelector = unwrappedSelector;\n        this.selector = selector;\n    }\n}\n```\n再通过NioEventLoop的构造方法，将SelectorTuple中的Selector赋值给NioEventLoop中的Selector<br />**​**\n\n**​**<br />\n<a name=\"h6t7t\"></a>\n### 两个Selector\nNioEventLoop中有selector和unwrappedSelector两个Selector，**它们的区别主要在于SelectedKeys的数据结构**\n\n- selector中的SelectedKeys是**基于数组**的\n- unwrappedSelector中的是**基于HashSet**的\n\n这样做的主要目的是，**数组的遍历效率要高于HashSet**<br /> \n```java\nprivate SelectorTuple openSelector() {\n    final Selector unwrappedSelector;\n    try {\n        unwrappedSelector = provider.openSelector();\n    } catch (IOException e) {\n        throw new ChannelException(\"failed to open a new selector\", e);\n    }\n\n    ...\n    \n    // 获得基于数组的selectedKeySet实现\n    final SelectedSelectionKeySet selectedKeySet = new SelectedSelectionKeySet();\n\n\n    Object maybeException = AccessController.doPrivileged(new PrivilegedAction<Object>() {\n        @Override\n        public Object run() {\n            try {\n                // 通过反射拿到unwrappedSelector中的selectedKeys属性\n                Field selectedKeysField = selectorImplClass.getDeclaredField(\"selectedKeys\");\n                Field publicSelectedKeysField = selectorImplClass.getDeclaredField(\"publicSelectedKeys\");\n\n                ...\n\t\n                // 暴力反射，修改私有属性\n                Throwable cause = ReflectionUtil.trySetAccessible(selectedKeysField, true);\n                if (cause != null) {\n                    return cause;\n                }\n                cause = ReflectionUtil.trySetAccessible(publicSelectedKeysField, true);\n                if (cause != null) {\n                    return cause;\n                }\n\n                // 替换为基于数组的selectedKeys实现\n                selectedKeysField.set(unwrappedSelector, selectedKeySet);\n                publicSelectedKeysField.set(unwrappedSelector, selectedKeySet);\n                return null;\n            } catch (NoSuchFieldException e) {\n                return e;\n            } catch (IllegalAccessException e) {\n                return e;\n            }\n        }\n    });\n\n    selectedKeys = selectedKeySet;\n    \n    // 调用构造函数，创建unwrappedSelector与selector\n    return new SelectorTuple(unwrappedSelector,\n                             new SelectedSelectionKeySetSelector(unwrappedSelector, selectedKeySet));\n}\n```\n\n\n获得数组实现SelectedKeys的Selector的原理是反射，主要步骤如下\n\n- 获得**基于数组**的selectedKeySet实现\n```java\n// 获得基于数组的selectedKeySet实现\nfinal SelectedSelectionKeySet selectedKeySet = new SelectedSelectionKeySet();\n\nSelectedSelectionKeySet() {\n\tkeys = new SelectionKey[1024];\n}\n```\n\n- 通过**反射**拿到unwrappedSelector中的SelectedKeySet并将其**替换为selectedKeySet**\n- **通过Selector的构造方法**获得selector\n```java\nnew SelectedSelectionKeySetSelector(unwrappedSelector, selectedKeySet)\n```\n\n- **通过SelectorTuple的构造方法**获得拥有两种Selector的SelectorTuple对象，并返回给NioEventLoop\n```java\n// 调用构造函数，创建unwrappedSelector与selector\nreturn new SelectorTuple(unwrappedSelector, new SelectedSelectionKeySetSelector(unwrappedSelector, selectedKeySet));\n```\n<a name=\"F9Aje\"></a>\n## NIO线程启动时机\n**启动**<br />NioEventLoop中的线程，**在首次执行任务时，才会被创建，且只会被创建一次**<br />**测试代码**\n```java\npublic class TestNioEventLoop {\n    public static void main(String[] args) {\n        EventLoop eventLoop = new NioEventLoopGroup().next();\n        // 使用NioEventLoop执行任务\n        eventLoop.execute(()->{\n            System.out.println(\"hello\");\n        });\n    }\n}\n```\n进入execute执行任务\n```java\n@Override\npublic void execute(Runnable task) {\n    // 检测传入的任务是否为空，为空会抛出NullPointerException\n    ObjectUtil.checkNotNull(task, \"task\");\n    // 执行任务\n    // 此处判断了任务是否为懒加载任务，wakesUpForTask的返回值只会为true\n    execute(task, !(task instanceof LazyRunnable) && wakesUpForTask(task));\n}\n```\n进入上述代码的execute方法\n```java\nprivate void execute(Runnable task, boolean immediate) {\n    // 判断当前线程是否为NIO线程\n    // 判断方法为 return thread == this.thread;\n    // this.thread即为NIO线程，首次执行任务时，其为null\n    boolean inEventLoop = inEventLoop();\n    \n    // 向任务队列taskQueue中添加任务\n    addTask(task);\n    \n    // 当前线程不是NIO线程，则进入if语句\n    if (!inEventLoop) {\n        // 启动NIO线程的核心方法\n        startThread();\n        \n        ...\n        \n    }\n\t\n    // 有任务需要被执行时，唤醒阻塞的NIO线程\n    if (!addTaskWakesUp && immediate) {\n        wakeup(inEventLoop);\n    }\n}\n```\n进入startThread方法\n```java\nprivate void startThread() {\n    // 查看NIO线程状态是否为未启动\n    // 该if代码块只会执行一次\n    // state一开始的值就是ST_NOT_STARTED\n    // private volatile int state = ST_NOT_STARTED;\n    if (state == ST_NOT_STARTED) {\n        // 通过原子属性更新器将状态更新为启动（ST_STARTED）\n        if (STATE_UPDATER.compareAndSet(this, ST_NOT_STARTED, ST_STARTED)) {\n            boolean success = false;\n            try {\n                // 执行启动线程\n                doStartThread();\n                success = true;\n            } finally {\n                if (!success) {\n                    STATE_UPDATER.compareAndSet(this, ST_STARTED, ST_NOT_STARTED);\n                }\n            }\n        }\n    }\n}\n```\n**进入doStartThread，真正创建NIO线程并执行任务**\n```java\nprivate void doStartThread() {\n    assert thread == null;\n    // 创建NIO线程并执行任务\n    executor.execute(new Runnable() {\n        @Override\n        public void run() {\n            // thread即为NIO线程\n            thread = Thread.currentThread();\n            if (interrupted) {\n                thread.interrupt();\n            }\n\n            boolean success = false;\n            updateLastExecutionTime();\n            try {\n                // 执行内部run方法\n                SingleThreadEventExecutor.this.run();\n                success = true;\n            } \n            \n            ...\n    });\n}\n```\n通过SingleThreadEventExecutor.this.run()执行传入的任务（task）<br />该run方法是**NioEvnetLoop的run方法**\n```java\n@Override\nprotected void run() {\n    int selectCnt = 0;\n    // 死循环，不断地从任务队列中获取各种任务来执行\n    for (;;) {\t\n      \t// 执行各种任务\n   \t\ttry {\n            int strategy;\n            try {\n                strategy = selectStrategy.calculateStrategy(selectNowSupplier, hasTasks());\n                switch (strategy) {\n                case SelectStrategy.CONTINUE:\n                    continue;\n\n                case SelectStrategy.BUSY_WAIT:\n                    // fall-through to SELECT since the busy-wait is not supported with NIO\n\n                case SelectStrategy.SELECT:\n                    long curDeadlineNanos = nextScheduledTaskDeadlineNanos();\n                    if (curDeadlineNanos == -1L) {\n                        curDeadlineNanos = NONE; // nothing on the calendar\n                    }\n                    nextWakeupNanos.set(curDeadlineNanos);\n                    try {\n                        if (!hasTasks()) {\n                            strategy = select(curDeadlineNanos);\n                        }\n                    } finally {\n                        // This update is just to help block unnecessary selector wakeups\n                        // so use of lazySet is ok (no race condition)\n                        nextWakeupNanos.lazySet(AWAKE);\n                    }\n                    // fall through\n                default:\n                }\n       \t\t}\n    \t}\n\t}\n```\n<a name=\"TVNbW\"></a>\n### 唤醒\nNioEvnetLoop需要IO事件、普通任务以及定时任务，任务在run方法的for循环中<br />\n\n```java\n@Override\nprotected void run() {\n    int selectCnt = 0;\n    // 死循环，不断地从任务队列中获取各种任务来执行\n    for (;;) {\n      \t// 执行各种任务\n   \t\t...\n    }\n}\n```\n中被执行，但**该循环不会空转，执行到某些代码时，会被阻塞**<br />run方法中有SELECT分支\n```java\ncase SelectStrategy.SELECT:\n\tlong curDeadlineNanos = nextScheduledTaskDeadlineNanos();\n\tif (curDeadlineNanos == -1L) {\n        curDeadlineNanos = NONE; // nothing on the calendar\n    }\n\tnextWakeupNanos.set(curDeadlineNanos);\n\ttry {\n    \tif (!hasTasks()) {\n            // 执行select方法\n            strategy = select(curDeadlineNanos);\n        }\n    }\n```\n会执行NioEvnetLoop的select方法，**该方法内部会根据情况，执行selector的有参和无参的select方法**\n```java\nprivate int select(long deadlineNanos) throws IOException {\n    // 如果没有指定阻塞事件，就调用select()\n    if (deadlineNanos == NONE) {\n        return selector.select();\n    }\n    // 否则调用select(timeoutMillis)，指定时间内未发生事件就停止阻塞\n    // Timeout will only be 0 if deadline is within 5 microsecs\n    long timeoutMillis = deadlineToDelayNanos(deadlineNanos + 995000L) / 1000000L;\n    return timeoutMillis <= 0 ? selector.selectNow() : selector.select(timeoutMillis);\n}\n```\n但需要注意的是，**select方法是会阻塞线程的，当没有IO事件，但有其他任务需要执行时，需要唤醒线程**<br />唤醒是通过execute最后的if代码块来完成的\n```java\n// 有任务需要被执行时，唤醒阻塞的NIO线程\nif (!addTaskWakesUp && immediate) {\n    wakeup(inEventLoop);\n}\n```\nNioEventLoop.wakeup唤醒被selector.select方法阻塞的NIO线程\n```java\n@Override\nprotected void wakeup(boolean inEventLoop) {\n    // 只有当其他线程给当前NIO线程提交任务时（如执行execute），才会被唤醒\n    // 通过AtomicLong进行更新，保证每次只能有一个线程唤醒成功\n    if (!inEventLoop && nextWakeupNanos.getAndSet(AWAKE) != AWAKE) {\n        // 唤醒被selector.select方法阻塞的NIO线程\n        selector.wakeup();\n    }\n}\n```\n唤醒时需要进行两个判断\n\n- 判断提交任务的**是否为NIO线程**\n   - 若是其他线程，才能唤醒NIO线程\n   - 若是NIO线程自己，则不能唤醒\n- 通过**AtomicLong**保证有多个线程同时提交任务时，只有一个线程能够唤醒NIO线程\n\n\n\n<br />\n<a name=\"f9FLE\"></a>\n### SELECT分支\nrun方法的switch语句有多条分支，具体执行分支的代码由strategy变量控制\n```java\nint strategy = selectStrategy.calculateStrategy(selectNowSupplier, hasTasks());\nswitch (strategy) {\n\t...\n}\n```\nstrategy的值由calculateStrategy方法确定\n```java\n@Override\npublic int calculateStrategy(IntSupplier selectSupplier, boolean hasTasks) throws Exception {\n    // selectSupplier.get() 底层是 selector.selectNow();\n    return hasTasks ? selectSupplier.get() : SelectStrategy.SELECT;\n}\n```\n该方法会**根据hasTaks变量判断任务队列中是否有任务**\n\n- 若有任务，则**通过selectSupplier获得strategy的值**\n   - **get方法会selectNow方法，顺便拿到IO事件**\n```java\nprivate final IntSupplier selectNowSupplier = new IntSupplier() {\n    public int get() throws Exception {\n        return NioEventLoop.this.selectNow();\n    }\n};\n\nint selectNow() throws IOException {\n    return this.selector.selectNow();\n}\n```\n\n- 没有任务，就会进入SELECT分支\n\n也就说，**当任务队列中没有任务时，才会进入SELECT分支，让NIO线程阻塞，而不是空转。若有任务，则会通过get方法调用selector.selectNow方法，顺便拿到IO事件**\n\n\n<a name=\"xwaxz\"></a>\n## Java NIO空轮询BUG\nJava NIO空轮询BUG也就是JavaNIO在Linux系统下的epoll空轮询问题<br />**在NioEventLoop中，因为run方法中存在一个死循环，需要通过selector.select方法来阻塞线程。但是select方法因为BUG，可能无法阻塞线程，导致循环一直执行，使得CPU负载升高**\n```java\n@Override\nprotected void run() {\n    ...\n    for(;;){\n        ...\n        // 可能发生空轮询，无法阻塞NIO线程\n        strategy = select(curDeadlineNanos);  \n        ...     \n    \n     \tif(...) {\n\t\t\t...\n     \t} else if (unexpectedSelectorWakeup(selectCnt) ){\n            // 通过unexpectedSelectorWakeup方法中的rebuildSelector重建selector\n            // 并将selectCnt重置为0\n            selectCnt = 0;\n        }\n\t}\n}\n```\n**Netty中通过selectCnt变量来检测select方法是否发生空轮询BUG**<br />若发生空轮询BUG，那么selectCnt的值会**增长是十分迅速**。当selectCnt的值大于等于SELECTOR_AUTO_REBUILD_THRESHOLD（默认512）时，Netty则判断其出现了空轮询BUG，进行如下处理\n```java\nif (SELECTOR_AUTO_REBUILD_THRESHOLD > 0 && selectCnt >= SELECTOR_AUTO_REBUILD_THRESHOLD) {\n    // The selector returned prematurely many times in a row.\n    // Rebuild the selector to work around the problem.\n    logger.warn(\"Selector.select() returned prematurely {} times in a row; rebuilding Selector {}.\",selectCnt, selector);\n    // 重建selector，将原selector的配置信息传给新selector\n    // 再用新selector覆盖旧selector\n    rebuildSelector();\n    return true;\n}\n```\n**通过rebuildSelector方法重建selector，将原selector的配置信息传给新selector，再用新selector覆盖旧selector。同时将selectCnt的值设置为0**\n<a name=\"YwSEi\"></a>\n## ioRatio\nNioEventLoop可以处理IO事件和其他任务。不同的操作所耗费的时间是不同的，**想要控制NioEventLoop处理IO事件花费时间占执行所有操作的总时间的比例，需要通过ioRatio来控制**<br />**NioEventLoop.run方法**\n```java\n// 处理IO事件时间比例，默认为50%\nfinal int ioRatio = this.ioRatio;\n\n// 如果IO事件时间比例设置为100%\nif (ioRatio == 100) {\n    try {\n        // 如果需要去处理IO事件\n        if (strategy > 0) {\n            // 先处理IO事件\n            processSelectedKeys();\n        }\n    } finally {\n        // Ensure we always run tasks.\n        // 剩下的时间都去处理普通任务和定时任务\n        ranTasks = runAllTasks();\n    }\n} else if (strategy > 0) { // 如果需要去处理IO事件\n    // 记录处理IO事件前的时间\n    final long ioStartTime = System.nanoTime();\n    try {\n        // 去处理IO事件\n        processSelectedKeys();\n    } finally {\n        // Ensure we always run tasks.\n        // ioTime为处理IO事件耗费的事件\n        final long ioTime = System.nanoTime() - ioStartTime;\n        // 计算出处理其他任务的事件\n        // 超过设定的时间后，将会停止任务的执行，会在下一次循环中再继续执行\n        ranTasks = runAllTasks(ioTime * (100 - ioRatio) / ioRatio);\n    }\n} else { // 没有IO事件需要处理\n    // This will run the minimum number of tasks\n    // 直接处理普通和定时任务\n    ranTasks = runAllTasks(0); \n}\n```\n**通过ioRatio控制各个任务执行的过程如下**\n\n- 判断ioRatio是否为100\n   - 若是，判断是否需要处理IO事件（strategy>0）\n      - 若需要处理IO事件，则先处理IO事件\n   - 若否（或IO事件已经处理完毕），**接下来去执行所有的普通任务和定时任务，直到所有任务都被处理完**\n```java\n// 没有指定执行任务的时间\nranTasks = runAllTasks();\n```\n若ioRatio不为100\n\n- 先去处理IO事件，**记录处理IO事件所花费的事件保存在ioTime中**\n- 接下来去处理其他任务，**根据ioTime与ioRatio计算执行其他任务可用的时间**\n```java\n// 比如ioTime为10s，ioRatio为50\n// 那么通过 10*(100-50)/50=10 计算出其他任务可用的时间为 10s\n// 处理IO事件占用的事件总比例为50%\nranTasks = runAllTasks(ioTime * (100 - ioRatio) / ioRatio);\n```\n\n   - 执行其他任务一旦超过可用时间，则会停止执行，在下一次循环中再继续执行\n- 若没有IO事件需要处理，则去执行**最少数量**的普通任务和定时任务\n```java\n// 运行最少数量的任务\nranTasks = runAllTasks(0);\n```\n<a name=\"MsGBx\"></a>\n## 处理事件\nIO事件是通过NioEventLoop.processSelectedKeys()方法处理的\n```java\nprivate void processSelectedKeys() {\n    // 如果selectedKeys是基于数组的\n    // 一般情况下都走这个分支\n    if (selectedKeys != null) {\n        // 处理各种IO事件\n        processSelectedKeysOptimized();\n    } else {\n        processSelectedKeysPlain(selector.selectedKeys());\n    }\n}\n```\nprocessSelectedKeysOptimized方法\n```java\nprivate void processSelectedKeysOptimized() {\n    for (int i = 0; i < selectedKeys.size; ++i) {\n        // 拿到SelectionKeyec\n        final SelectionKey k = selectedKeys.keys[i];\n        // null out entry in the array to allow to have it GC'ed once the Channel close\n        // See https://github.com/netty/netty/issues/2363\n        selectedKeys.keys[i] = null;\n\n        // 获取SelectionKey上的附件，即NioServerSocketChannel\n        final Object a = k.attachment();\n\n        if (a instanceof AbstractNioChannel) {\n            // 处理事件，传入附件NioServerSocketChannel\n            processSelectedKey(k, (AbstractNioChannel) a);\n        } else {\n            @SuppressWarnings(\"unchecked\")\n            NioTask<SelectableChannel> task = (NioTask<SelectableChannel>) a;\n            processSelectedKey(k, task);\n        }\n\n        if (needsToSelectAgain) {\n            // null out entries in the array to allow to have it GC'ed once the Channel close\n            // See https://github.com/netty/netty/issues/2363\n            selectedKeys.reset(i + 1);\n\n            selectAgain();\n            i = -1;\n        }\n    }\n}\n```\n该方法中通过fori的方法，遍历基于数组的SelectedKey，通过\n```java\nfinal SelectionKey k = selectedKeys.keys[i];\n```\n获取到SelectionKey，**然后获取其再Register时添加的附件NioServerSocketChannel**\n```java\n// 获取SelectionKey上的附件，即NioServerSocketChannel\nfinal Object a = k.attachment();\n```\n如果附件继承自AbstractNioChannel，则会调用\n```java\n// 处理事件，传入附件NioServerSocketChannel\nprocessSelectedKey(k, (AbstractNioChannel) a);\n```\n去处理各个事件<br />**真正处理各种事件的方法processSelectedKey**<br />获取SelectionKey的事件，然后进行相应处理\n```java\nprivate void processSelectedKey(SelectionKey k, AbstractNioChannel ch) {\n    final AbstractNioChannel.NioUnsafe unsafe = ch.unsafe();\n    if (!k.isValid()) {\n        final EventLoop eventLoop;\n        try {\n            eventLoop = ch.eventLoop();\n        } catch (Throwable ignored) {\n            // If the channel implementation throws an exception because there is no event loop, we ignore this\n            // because we are only trying to determine if ch is registered to this event loop and thus has authority\n            // to close ch.\n            return;\n        }\n        // Only close ch if ch is still registered to this EventLoop. ch could have deregistered from the event loop\n        // and thus the SelectionKey could be cancelled as part of the deregistration process, but the channel is\n        // still healthy and should not be closed.\n        // See https://github.com/netty/netty/issues/5125\n        if (eventLoop == this) {\n            // close the channel if the key is not valid anymore\n            unsafe.close(unsafe.voidPromise());\n        }\n        return;\n    }\n\n    try {\n        int readyOps = k.readyOps();\n        // We first need to call finishConnect() before try to trigger a read(...) or write(...) as otherwise\n        // the NIO JDK channel implementation may throw a NotYetConnectedException.\n        if ((readyOps & SelectionKey.OP_CONNECT) != 0) {\n            // remove OP_CONNECT as otherwise Selector.select(..) will always return without blocking\n            // See https://github.com/netty/netty/issues/924\n            int ops = k.interestOps();\n            ops &= ~SelectionKey.OP_CONNECT;\n            k.interestOps(ops);\n\n            unsafe.finishConnect();\n        }\n\n        // Process OP_WRITE first as we may be able to write some queued buffers and so free memory.\n        if ((readyOps & SelectionKey.OP_WRITE) != 0) {\n            // Call forceFlush which will also take care of clear the OP_WRITE once there is nothing left to write\n            ch.unsafe().forceFlush();\n        }\n\n        // Also check for readOps of 0 to workaround possible JDK bug which may otherwise lead\n        // to a spin loop\n        if ((readyOps & (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != 0 || readyOps == 0) {\n            unsafe.read();\n        }\n    } catch (CancelledKeyException ignored) {\n        unsafe.close(unsafe.voidPromise());\n    }\n}\n```\n<a name=\"l58Kn\"></a>\n# Accept剖析\n<a name=\"vKDhU\"></a>\n## NIO中处理Accept事件流程\n\n- selector.select()阻塞线程，直到事件发生\n- 遍历selectionKeys\n- 获取一个key，判断事件类型是否为Accept\n\n---\n\n- 创建SocketChannel，设置为非阻塞\n- 将SocketChannel注册到selector中\n- 关注selectionKeys的read事件\n\n代码如下\n```java\n// 阻塞直到事件发生\nselector.select();\n\nIterator<SelectionKey> iter = selector.selectionKeys().iterator();\nwhile (iter.hasNext()) {    \n    // 拿到一个事件\n    SelectionKey key = iter.next();\n    \n    // 如果是 accept 事件\n    if (key.isAcceptable()) {\n        \n        // 执行accept，获得SocketChannel\n        SocketChannel channel = serverSocketChannel.accept();\n        channel.configureBlocking(false);\n        \n        // 将SocketChannel注册到selector中，并关注read事件\n        channel.register(selector, SelectionKey.OP_READ);\n    }\n    // ...\n}\n```\n**其中前三步，在NioEventLoop剖析中已经分析过了，所以接下来主要分析后三步**\n\n\n<a name=\"jbFsY\"></a>\n## SocketChannel的创建与注册\n发生Accept事件后，会执行NioEventLoop.run方法的如下if分支\n```java\nif ((readyOps & (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != 0 || readyOps == 0) {\n\tunsafe.read();\n}\n```\nNioMessageUnsafe.read方法\n```java\npublic void read() {\n\n    ...\n    \n    try {\n        try {\n            do {\n\t\t\t\t// doReadMessages中执行了accept获得了SocketChannel\n                // 并创建NioSocketChannel作为消息放入readBuf\n                // readBuf是一个ArrayList用来缓存消息\n                // private final List<Object> readBuf = new ArrayList<Object>();\n                int localRead = doReadMessages(readBuf);\n                \n                ...\n                \n\t\t\t\t// localRead值为1，就一条消息，即接收一个客户端连接\n                allocHandle.incMessagesRead(localRead);\n            } while (allocHandle.continueReading());\n        } catch (Throwable t) {\n            exception = t;\n        }\n\n        int size = readBuf.size();\n        for (int i = 0; i < size; i ++) {\n            readPending = false;\n            // 触发read事件，让pipeline上的handler处理\n            // ServerBootstrapAcceptor.channelRead\n            pipeline.fireChannelRead(readBuf.get(i));\n        }\n        \n        ...\n        \n    } finally {\n        if (!readPending && !config.isAutoRead()) {\n            removeReadOp();\n        }\n    }\n}\n```\nNioSocketChannel.doReadMessages方法<br />该方法中处理accpet事件，**获得SocketChannel**，同时**创建了NioSocketChannel**，作为消息放在了readBuf中\n```java\n@Override\nprotected int doReadMessages(List<Object> buf) throws Exception {\n    // 处理accpet事件，获得SocketChannel\n    SocketChannel ch = SocketUtils.accept(javaChannel());\n\n    try {\n        if (ch != null) {\n            // 创建了NioSocketChannel，作为消息放在了readBuf中\n            buf.add(new NioSocketChannel(this, ch));\n            return 1;\n        }\n    } catch (Throwable t) {\n       ...\n    }\n\n    return 0;\n}\n```\nServerBootstrapAcceptor.channelRead\n```java\npublic void channelRead(ChannelHandlerContext ctx, Object msg) {\n    // 这时的msg是NioSocketChannel\n    final Channel child = (Channel) msg;\n\n    // NioSocketChannel添加childHandler，即初始化器\n    child.pipeline().addLast(childHandler);\n\n    // 设置选项\n    setChannelOptions(child, childOptions, logger);\n\n    for (Entry<AttributeKey<?>, Object> e: childAttrs) {\n        child.attr((AttributeKey<Object>) e.getKey()).set(e.getValue());\n    }\n\n    try {\n        // 注册 NioSocketChannel到nio worker线程，接下来的处理也移交至nio worker线程\n        childGroup.register(child).addListener(new ChannelFutureListener() {\n            @Override\n            public void operationComplete(ChannelFuture future) throws Exception {\n                if (!future.isSuccess()) {\n                    forceClose(child, future.cause());\n                }\n            }\n        });\n    } catch (Throwable t) {\n        forceClose(child, t);\n    }\n}\n```\n通过AbstractUnsafe.register 方法，将SocketChannel注册到了Selector中，**过程与启动流程中的Register过程类似**\n```java\npublic final void register(EventLoop eventLoop, final ChannelPromise promise) {\n    \n    ...\n\n    AbstractChannel.this.eventLoop = eventLoop;\n\n    if (eventLoop.inEventLoop()) {\n        register0(promise);\n    } else {\n        try {\n            // 这行代码完成的是nio boss -> nio worker线程的切换\n            eventLoop.execute(new Runnable() {\n                @Override\n                public void run() {\n                    // 真正的注册操作\n                    register0(promise);\n                }\n            });\n        } catch (Throwable t) {\n            ...\n        }\n    }\n}\n```\nAbstractChannel.AbstractUnsafe.register0\n```java\nprivate void register0(ChannelPromise promise) {\n    try {\n        \n        ...\n            \n        // 该方法将SocketChannel注册到Selector中\n        doRegister();\n        \n        // 执行初始化器，执行前 pipeline 中只有 head -> 初始化器 -> tail\n        pipeline.invokeHandlerAddedIfNeeded();\n        // 执行后就是 head -> logging handler -> my handler -> tail\n\n        safeSetSuccess(promise);\n        pipeline.fireChannelRegistered();\n        \n        if (isActive()) {\n            if (firstRegistration) {\n                // 触发pipeline上active事件\n                pipeline.fireChannelActive();\n            } else if (config().isAutoRead()) {\n                beginRead();\n            }\n        }\n    } catch (Throwable t) {\n        closeForcibly();\n        closeFuture.setClosed();\n        safeSetFailure(promise, t);\n    }\n}\n```\nAbstractNioChannel.doRegister将SocketChannel注册到Selector中\n```java\n@Override\nprotected void doRegister() throws Exception {\n    boolean selected = false;\n    for (;;) {\n        try {\n            // 将Selector注册到Selector中\n            selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), 0, this);\n            return;\n        } catch (CancelledKeyException e) {\n            ...\n        }\n    }\n}\n```\nHeadContext.channelActive\n```java\npublic void channelActive(ChannelHandlerContext ctx) {\n    ctx.fireChannelActive();\n\t// 触发read(NioSocketChannel这里read只是为了触发channel的事件注册，还未涉及数据读取)\n    readIfIsAutoRead();\n}\n```\nAbstractNioChannel.doBeginRead，通过该方法，SocketChannel关注了read事件\n```java\nprotected void doBeginRead() throws Exception {\n    // Channel.read() or ChannelHandlerContext.read() was called\n    final SelectionKey selectionKey = this.selectionKey;\n    if (!selectionKey.isValid()) {\n        return;\n    }\n\n    readPending = true;\n\t// 这时候 interestOps是0\n    final int interestOps = selectionKey.interestOps();\n    if ((interestOps & readInterestOp) == 0) {\n        // 关注read事件\n        selectionKey.interestOps(interestOps | readInterestOp);\n    }\n}\n```\n<a name=\"pEzHa\"></a>\n# Read剖析\nread事件的处理也是在\n```java\nif ((readyOps & (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != 0 || readyOps == 0) {\n\tunsafe.read();\n}\n```\n分支中，通过unsafe.read()方法处理的，**不过此处调用的方法在AbstractNioByteChannel.NioByteUnsafe类中**\n```java\n@Override\npublic final void read() {\n    // 获得Channel的配置\n    final ChannelConfig config = config();\n    if (shouldBreakReadReady(config)) {\n        clearReadPending();\n        return;\n    }\n    final ChannelPipeline pipeline = pipeline();\n\t// 根据配置创建ByteBufAllocator（池化非池化、直接非直接内存）\n\tfinal ByteBufAllocator allocator = config.getAllocator();\n    // 用来分配 byteBuf，确定单次读取大小\n    final RecvByteBufAllocator.Handle allocHandle = recvBufAllocHandle();\n    allocHandle.reset(config);\n\n    ByteBuf byteBuf = null;\n    boolean close = false;\n    try {\n        do {\n            // 创建ByteBuf\n            byteBuf = allocHandle.allocate(allocator);\n            // 读取内容，放入ByteBUf中\n            allocHandle.lastBytesRead(doReadBytes(byteBuf));\n            if (allocHandle.lastBytesRead() <= 0) {\n                byteBuf.release();\n                byteBuf = null;\n                close = allocHandle.lastBytesRead() < 0;\n                if (close) {\n                    readPending = false;\n                }\n                break;\n            }\n\n            allocHandle.incMessagesRead(1);\n            readPending = false;\n            // 触发read 事件，让pipeline上的handler处理\n            // 这时是处理NioSocketChannel上的handler\n            pipeline.fireChannelRead(byteBuf);\n            byteBuf = null;\n        } \n        // 是否要继续循环\n        while (allocHandle.continueReading());\n\n        allocHandle.readComplete();\n        // 触发 read complete事件\n        pipeline.fireChannelReadComplete();\n\n        if (close) {\n            closeOnRead(pipeline);\n        }\n    } catch (Throwable t) {\n        handleReadException(pipeline, byteBuf, t, close, allocHandle);\n    } finally {\n         // Check if there is a readPending which was not processed yet.\n         // This could be for two reasons:\n         // * The user called Channel.read() or ChannelHandlerContext.read() in channelRead(...) method\n         // * The user called Channel.read() or ChannelHandlerContext.read() in channelReadComplete(...) method\n         //\n         // See https://github.com/netty/netty/issues/2254\n        if (!readPending && !config.isAutoRead()) {\n            removeReadOp();\n        }\n    }\n}\n```\nDefaultMaxMessagesRecvByteBufAllocator.MaxMessageHandle.continueReading(io.netty.util.UncheckedBooleanSupplier)\n```java\npublic boolean continueReading(UncheckedBooleanSupplier maybeMoreDataSupplier) {\n    return \n           // 一般为true\n           config.isAutoRead() &&\n           // respectMaybeMoreData默认为true\n           // maybeMoreDataSupplier的逻辑是如果预期读取字节与实际读取字节相等，返回true\n           (!respectMaybeMoreData || maybeMoreDataSupplier.get()) &&\n           // 小于最大次数，maxMessagePerRead默认16\n           totalMessages < maxMessagePerRead &&\n           // 实际读到了数据\n           totalBytesRead > 0;\n}\n```\n","slug":"netty","published":1,"updated":"2024-02-29T09:09:55.630Z","_id":"ckzvacrng001lkeuqe7vnhb08","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a name=\"ul6Ap\"></a></p>\n<h1 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h1><p>Netty启动流程可以简化成如下代码<br />​<br /></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// netty 中使用 NioEventLoopGroup （简称 nio boss 线程）来封装线程和 selector</span><br>Selector selector = Selector.open(); <br><br><span class=\"hljs-comment\">// 创建 NioServerSocketChannel，同时会初始化它关联的 handler，以及为原生 ssc 存储 config</span><br>NioServerSocketChannel attachment = <span class=\"hljs-keyword\">new</span> NioServerSocketChannel();<br><br><span class=\"hljs-comment\">// 创建 NioServerSocketChannel 时，创建了 java 原生的 ServerSocketChannel</span><br>ServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); <br>serverSocketChannel.configureBlocking(<span class=\"hljs-keyword\">false</span>);<br><br><span class=\"hljs-comment\">// 启动 nio boss 线程执行接下来的操作</span><br><br><span class=\"hljs-comment\">//注册（仅关联 selector 和 NioServerSocketChannel），未关注事件</span><br>SelectionKey selectionKey = serverSocketChannel.register(selector, <span class=\"hljs-number\">0</span>, attachment);<br><br><span class=\"hljs-comment\">// head -&gt; 初始化器 -&gt; ServerBootstrapAcceptor -&gt; tail，初始化器是一次性的，只为添加 acceptor</span><br><br><span class=\"hljs-comment\">// 绑定端口</span><br>serverSocketChannel.bind(<span class=\"hljs-keyword\">new</span> InetSocketAddress(<span class=\"hljs-number\">8080</span>));<br><br><span class=\"hljs-comment\">// 触发 channel active 事件，在 head 中关注 op_accept 事件</span><br>selectionKey.interestOps(SelectionKey.OP_ACCEPT);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>获得选择器Selector，Netty中使用NioEventloopGroup中的NioEventloop封装了线程和选择器</li>\n<li>创建<strong>NioServerSocketChannel</strong>，该Channel<strong>作为附件</strong>添加到<strong>ServerSocketChannel</strong>中</li>\n<li>创建<strong>ServerSocketChannel</strong>，将其设置为非阻塞模式，并注册到Selector中，<strong>此时未关注事件，但是添加了附件NioServerSocketChannel</strong></li>\n<li>绑定端口</li>\n<li>通过<strong>interestOps</strong>设置感兴趣的事件</li>\n</ul>\n<br />\n<a name=\"aOWtJ\"></a>\n## bind\n> 选择器Selector的创建是在NioEventloopGroup中完成的。NioServerSocketChannel与ServerSocketChannel的创建，ServerSocketChannel注册到Selector中以及绑定操作都是由bind方法完成的\n\n<p>所以服务器启动的入口便是io.netty.bootstrap.ServerBootstrap.bind​</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ChannelFuture <span class=\"hljs-title\">bind</span><span class=\"hljs-params\">(SocketAddress localAddress)</span> </span>&#123;<br>\tvalidate();<br>\t<span class=\"hljs-keyword\">return</span> doBind(ObjectUtil.checkNotNull(localAddress, <span class=\"hljs-string\">&quot;localAddress&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<br />\n\n<p><a name=\"PoYa8\"></a></p>\n<h2 id=\"doBind\"><a href=\"#doBind\" class=\"headerlink\" title=\"doBind\"></a>doBind</h2><blockquote>\n<p>真正完成初始化、注册以及绑定的方法是io.netty.bootstrap.AbstractBootstrap.doBind</p>\n</blockquote>\n<p><strong>dobind方法在主线程中执行</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> ChannelFuture <span class=\"hljs-title\">doBind</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> SocketAddress localAddress)</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 负责NioServerSocketChannel和ServerSocketChannel的创建</span><br>    <span class=\"hljs-comment\">// ServerSocketChannel的注册工作</span><br>    <span class=\"hljs-comment\">// init由main线程完成，regisetr由NIO线程完成</span><br>    <span class=\"hljs-keyword\">final</span> ChannelFuture regFuture = initAndRegister();<br>    <span class=\"hljs-keyword\">final</span> Channel channel = regFuture.channel();<br>    <span class=\"hljs-keyword\">if</span> (regFuture.cause() != <span class=\"hljs-keyword\">null</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> regFuture;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 因为register操作是异步的</span><br>    <span class=\"hljs-comment\">// 所以要判断主线程执行到这里时，register操作是否已经执行完毕</span><br>    <span class=\"hljs-keyword\">if</span> (regFuture.isDone()) &#123;<br>        <span class=\"hljs-comment\">// At this point we know that the registration was complete and successful.</span><br>        ChannelPromise promise = channel.newPromise();<br>        <br>        <span class=\"hljs-comment\">// 执行doBind0绑定操作</span><br>        doBind0(regFuture, channel, localAddress, promise);<br>        <span class=\"hljs-keyword\">return</span> promise;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-comment\">// Registration future is almost always fulfilled already, but just in case it&#x27;s not.</span><br>        <span class=\"hljs-comment\">// 如果register操作还没执行完，就会到这个分支中来</span><br>        <span class=\"hljs-keyword\">final</span> PendingRegistrationPromise promise = <span class=\"hljs-keyword\">new</span> PendingRegistrationPromise(channel);<br>        <br>        <span class=\"hljs-comment\">// 添加监听器，NIO线程异步进行doBind0操作</span><br>        regFuture.addListener(<span class=\"hljs-keyword\">new</span> ChannelFutureListener() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">operationComplete</span><span class=\"hljs-params\">(ChannelFuture future)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>                Throwable cause = future.cause();<br>                <span class=\"hljs-keyword\">if</span> (cause != <span class=\"hljs-keyword\">null</span>) &#123;<br>                    <span class=\"hljs-comment\">// Registration on the EventLoop failed so fail the ChannelPromise directly to not cause an</span><br>                    <span class=\"hljs-comment\">// IllegalStateException once we try to access the EventLoop of the Channel.</span><br>                    promise.setFailure(cause);<br>                &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                    <span class=\"hljs-comment\">// Registration was successful, so set the correct executor to use.</span><br>                    <span class=\"hljs-comment\">// See https://github.com/netty/netty/issues/2586</span><br>                    promise.registered();<br><br>                    doBind0(regFuture, channel, localAddress, promise);<br>                &#125;<br>            &#125;<br>        &#125;);<br>        <span class=\"hljs-keyword\">return</span> promise;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>doBind()中有两个重要方法<strong>initAndRegister()<strong>和</strong>doBind0(regFuture, channel, localAddress, promise)</strong></li>\n<li>initAndRegister主要负责NioServerSocketChannel和ServerSocketChannel的创建（主线程中完成）与ServerSocketChannel注册（NIO线程中完成）工作</li>\n<li>doBind0则负责连接的创建工作</li>\n</ul>\n<br />\n\n<p><a name=\"LNV9d\"></a></p>\n<h2 id=\"initAndRegisterd\"><a href=\"#initAndRegisterd\" class=\"headerlink\" title=\"initAndRegisterd\"></a>initAndRegisterd</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">final</span> ChannelFuture <span class=\"hljs-title\">initAndRegister</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    Channel channel = <span class=\"hljs-keyword\">null</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        channel = channelFactory.newChannel();<br>        init(channel);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        <span class=\"hljs-keyword\">if</span> (channel != <span class=\"hljs-keyword\">null</span>) &#123;<br>            <span class=\"hljs-comment\">// channel can be null if newChannel crashed (eg SocketException(&quot;too many open files&quot;))</span><br>            channel.unsafe().closeForcibly();<br>            <span class=\"hljs-comment\">// as the Channel is not registered yet we need to force the usage of the GlobalEventExecutor</span><br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> DefaultChannelPromise(channel, GlobalEventExecutor.INSTANCE).setFailure(t);<br>        &#125;<br>        <span class=\"hljs-comment\">// as the Channel is not registered yet we need to force the usage of the GlobalEventExecutor</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> DefaultChannelPromise(<span class=\"hljs-keyword\">new</span> FailedChannel(), GlobalEventExecutor.INSTANCE).setFailure(t);<br>    &#125;<br><br>    ChannelFuture regFuture = config().group().register(channel);<br>    <span class=\"hljs-keyword\">if</span> (regFuture.cause() != <span class=\"hljs-keyword\">null</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (channel.isRegistered()) &#123;<br>            channel.close();<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            channel.unsafe().closeForcibly();<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// If we are here and the promise is not failed, it&#x27;s one of the following cases:</span><br>    <span class=\"hljs-comment\">// 1) If we attempted registration from the event loop, the registration has been completed at this point.</span><br>    <span class=\"hljs-comment\">//    i.e. It&#x27;s safe to attempt bind() or connect() now because the channel has been registered.</span><br>    <span class=\"hljs-comment\">// 2) If we attempted registration from the other thread, the registration request has been successfully</span><br>    <span class=\"hljs-comment\">//    added to the event loop&#x27;s task queue for later execution.</span><br>    <span class=\"hljs-comment\">//    i.e. It&#x27;s safe to attempt bind() or connect() now:</span><br>    <span class=\"hljs-comment\">//         because bind() or connect() will be executed *after* the scheduled registration task is executed</span><br>    <span class=\"hljs-comment\">//         because register(), bind(), and connect() are all bound to the same thread.</span><br><br>    <span class=\"hljs-keyword\">return</span> regFuture;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>init</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">Channel channel = <span class=\"hljs-keyword\">null</span>;<br><span class=\"hljs-keyword\">try</span> &#123;<br>    <span class=\"hljs-comment\">// 通过反射初始化NioServerSocketChannel</span><br>    channel = channelFactory.newChannel();<br>    init(channel);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>newChannel方法<br /> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title\">newChannel</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 通过反射调用NioServerSocketChannel的构造方法</span><br>        <span class=\"hljs-comment\">// 创建NioServerSocketChannel对象</span><br>        <span class=\"hljs-keyword\">return</span> constructor.newInstance();<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ChannelException(<span class=\"hljs-string\">&quot;Unable to create Channel from class &quot;</span> + constructor.getDeclaringClass(), t);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>NioServerSocketChannel构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">NioServerSocketChannel</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 创建了ServerSocketChannel实例</span><br>    <span class=\"hljs-keyword\">this</span>(newSocket(DEFAULT_SELECTOR_PROVIDER));<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>newSocket方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> ServerSocketChannel <span class=\"hljs-title\">newSocket</span><span class=\"hljs-params\">(SelectorProvider provider)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// ServerSocketChannel.open方法：</span><br>        <span class=\"hljs-comment\">// SelectorProvider.provider().openServerSocketChannel()</span><br>\t    <span class=\"hljs-comment\">// 所以此处相当于ServerSocketChannel.open()</span><br>        <span class=\"hljs-comment\">// 创建了ServerSocketChannel实例</span><br>    \t<span class=\"hljs-keyword\">return</span> provider.openServerSocketChannel();<br>\t&#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>  \t  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ChannelException(<span class=\"hljs-string\">&quot;Failed to open a server socket.&quot;</span>, e);<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>Register</strong></p>\n<blockquote>\n<p>init执行完毕后，便执行**ChannelFuture regFuture = config().group().register(channel)<strong>操作<br>该方法最终调用的是</strong>promise.channel().unsafe().register(this, promise)**方法</p>\n</blockquote>\n<p><strong>promise.channel().unsafe().register(this, promise)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">register</span><span class=\"hljs-params\">(EventLoop eventLoop, <span class=\"hljs-keyword\">final</span> ChannelPromise promise)</span> </span>&#123;<br>    ...<br><br>    <span class=\"hljs-comment\">// 获取EventLoop</span><br>    AbstractChannel.<span class=\"hljs-keyword\">this</span>.eventLoop = eventLoop;<br><br>   \t<span class=\"hljs-comment\">// 此处完成了由 主线程 到 NIO线程 的切换</span><br>    <span class=\"hljs-comment\">// eventLoop.inEventLoop()用于判断当前线程是否为NIO线程</span><br>    <span class=\"hljs-keyword\">if</span> (eventLoop.inEventLoop()) &#123;<br>        register0(promise);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-comment\">// 向NIO线程中添加任务</span><br>            eventLoop.execute(<span class=\"hljs-keyword\">new</span> Runnable() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>                    <span class=\"hljs-comment\">// 该方法中会执行doRegister</span><br>                    <span class=\"hljs-comment\">// 执行真正的注册操作</span><br>                    register0(promise);<br>                &#125;<br>            &#125;);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>           ...<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>register0方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">register0</span><span class=\"hljs-params\">(ChannelPromise promise)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>       \t...<br>            <br>        <span class=\"hljs-comment\">// 执行真正的注册操作</span><br>        doRegister();<br>        neverRegistered = <span class=\"hljs-keyword\">false</span>;<br>        registered = <span class=\"hljs-keyword\">true</span>;<br><br>        <span class=\"hljs-comment\">// Ensure we call handlerAdded(...) before we actually notify the promise. This is needed as the</span><br>        <span class=\"hljs-comment\">// user may already fire events through the pipeline in the ChannelFutureListener.</span><br>        <br>        <span class=\"hljs-comment\">// 调用init中的initChannel方法</span><br>        pipeline.invokeHandlerAddedIfNeeded();<br><br>        ...<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>doRegister方法</strong><br />​<br /></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doRegister</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>    <span class=\"hljs-keyword\">boolean</span> selected = <span class=\"hljs-keyword\">false</span>;<br>    <span class=\"hljs-keyword\">for</span> (;;) &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-comment\">// javaChannel()即为ServerSocketChannel</span><br>            <span class=\"hljs-comment\">// eventLoop().unwrappedSelector()获取eventLoop中的Selector</span><br>            <span class=\"hljs-comment\">// this为NIOServerSocketChannel，作为附件</span><br>            selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">this</span>);<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (CancelledKeyException e) &#123;<br>            ...<br>           <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>回调initChannel</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">initChannel</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Channel ch)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">final</span> ChannelPipeline pipeline = ch.pipeline();<br>    ChannelHandler handler = config.handler();<br>    <span class=\"hljs-keyword\">if</span> (handler != <span class=\"hljs-keyword\">null</span>) &#123;<br>        pipeline.addLast(handler);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 添加新任务，任务负责添加handler</span><br>    <span class=\"hljs-comment\">// 该handler负责发生Accepet事件后建立连接</span><br>    ch.eventLoop().execute(<span class=\"hljs-keyword\">new</span> Runnable() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>            pipeline.addLast(<span class=\"hljs-keyword\">new</span> ServerBootstrapAcceptor(<br>                    ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>Register主要完成了以下三个操作<br />​<br /></p>\n<ul>\n<li><p>完成了主线程到NIO的<strong>线程切换</strong></p>\n<ul>\n<li><p>通过**eventLoop.inEventLoop()**进行线程判断，判断当前线程是否为NIO线程</p>\n</li>\n<li><p>切换的方式为让eventLoop执行register的操作</p>\n</li>\n<li><p><strong>register的操作在NIO线程中完成调用doRegister方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// javaChannel()即为ServerSocketChannel</span><br><span class=\"hljs-comment\">// eventLoop().unwrappedSelector()获取eventLoop中的Selector</span><br><span class=\"hljs-comment\">// this为NIOServerSocketChannel，作为附件</span><br>selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">this</span>);<br></code></pre></td></tr></table></figure></li>\n<li><p><strong>将ServerSocketChannel注册到EventLoop的Selector中</strong></p>\n</li>\n<li><p>此时还未关注事件</p>\n</li>\n<li><p>添加NioServerSocketChannel附件</p>\n</li>\n</ul>\n</li>\n<li><p>通过<strong>invokeHandlerAddedIfNeeded</strong>调用init中的<strong>initChannel</strong>方法</p>\n<ul>\n<li>initChannel方法主要创建了<strong>两个handler</strong><ul>\n<li>一个handler负责设置配置</li>\n<li>一个handler负责发生Accept事件后建立连接</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br />\n\n<p><a name=\"gYTpl\"></a></p>\n<h2 id=\"doBind0\"><a href=\"#doBind0\" class=\"headerlink\" title=\"doBind0\"></a>doBind0</h2><p><strong>绑定端口</strong><br />在<strong>doRegister</strong>和<strong>invokeHandlerAddedIfNeeded</strong>操作中的完成后，会调用<strong>safeSetSuccess(promise)<strong>方法，向Promise中设置执行成功的结果。此时</strong>doBind</strong>方法中由<strong>initAndRegister</strong>返回的ChannelFuture对象regFuture便会由NIO线程异步执行doBind0绑定操作<br /> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// initAndRegister为异步方法，会返回ChannelFuture对象</span><br><span class=\"hljs-keyword\">final</span> ChannelFuture regFuture = initAndRegister();<br>regFuture.addListener(<span class=\"hljs-keyword\">new</span> ChannelFutureListener() &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">operationComplete</span><span class=\"hljs-params\">(ChannelFuture future)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>        Throwable cause = future.cause();<br>        <span class=\"hljs-keyword\">if</span> (cause != <span class=\"hljs-keyword\">null</span>) &#123;<br>            <span class=\"hljs-comment\">// Registration on the EventLoop failed so fail the ChannelPromise directly to not cause an</span><br>            <span class=\"hljs-comment\">// IllegalStateException once we try to access the EventLoop of the Channel.</span><br>            promise.setFailure(cause);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-comment\">// Registration was successful, so set the correct executor to use.</span><br>            <span class=\"hljs-comment\">// See https://github.com/netty/netty/issues/2586</span><br>            promise.registered();<br>            <span class=\"hljs-comment\">// 如果没有异常，则执行绑定操作</span><br>            doBind0(regFuture, channel, localAddress, promise);<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>doBind0最底层调用的是ServerSocketChannel的bind方法</strong><br /> NioServerSocketChannel.doBind方法</p>\n</blockquote>\n<p>通过该方法，绑定了对应的端口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@SuppressJava6Requirement(reason = &quot;Usage guarded by java version check&quot;)</span><br><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doBind</span><span class=\"hljs-params\">(SocketAddress localAddress)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (PlatformDependent.javaVersion() &gt;= <span class=\"hljs-number\">7</span>) &#123;<br>        <span class=\"hljs-comment\">// 调用ServerSocketChannel的bind方法，绑定端口</span><br>        javaChannel().bind(localAddress, config.getBacklog());<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        javaChannel().socket().bind(localAddress, config.getBacklog());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>关注事件</strong><br />在绑定端口操作完成后，会判断各种所有初始化操作是否已经完成，若完成，则会添加ServerSocketChannel感兴趣的事件<br />​<br /></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">if</span> (!wasActive &amp;&amp; isActive()) &#123;<br>    invokeLater(<span class=\"hljs-keyword\">new</span> Runnable() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>            pipeline.fireChannelActive();<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>最终在<strong>AbstractNioChannel.doBeginRead</strong>方法中，会添加ServerSocketChannel添加Accept事件</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doBeginRead</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>    <span class=\"hljs-comment\">// Channel.read() or ChannelHandlerContext.read() was called</span><br>    <span class=\"hljs-keyword\">final</span> SelectionKey selectionKey = <span class=\"hljs-keyword\">this</span>.selectionKey;<br>    <span class=\"hljs-keyword\">if</span> (!selectionKey.isValid()) &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    readPending = <span class=\"hljs-keyword\">true</span>;<br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> interestOps = selectionKey.interestOps();<br>    <span class=\"hljs-comment\">// 如果ServerSocketChannel没有关注Accept事件</span><br>    <span class=\"hljs-keyword\">if</span> ((interestOps &amp; readInterestOp) == <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-comment\">// 则让其关注Accepet事件</span><br>        <span class=\"hljs-comment\">// readInterestOp 取值是 16</span><br>        <span class=\"hljs-comment\">// 在 NioServerSocketChannel 创建时初始化</span><br>        selectionKey.interestOps(interestOps | readInterestOp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>注意</strong>：此处设置interestOps时使用的方法，<strong>避免覆盖关注的其他事件</strong></p>\n<ul>\n<li><p>首先获取Channel所有感兴趣的事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> interestOps = selectionKey.interestOps();<br></code></pre></td></tr></table></figure></li>\n<li><p>然后再设置其感兴趣的事件</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">selectionKey.interestOps(interestOps | readInterestOp);<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>各个事件对应的值</strong></p>\n</blockquote>\n<p><img src=\"/image/blog/20210506090047.png\"><br><a name=\"KD021\"></a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过上述步骤，完成了</p>\n<ul>\n<li>NioServerSocketChannel与ServerSocketChannel的创建</li>\n<li>ServerSocketChannel绑定到EventLoop的Selecot中，并添加NioServerSocketChannel附件</li>\n<li>绑定了对应的端口</li>\n<li>关注了Accept事件</li>\n</ul>\n<br />\n<a name=\"fFNbn\"></a>\n# NioEventLoop剖析\n<a name=\"CJGhF\"></a>\n## 组成\nNioEventLoop的重要组成部分有三个\n\n<ul>\n<li><p><strong>Selector</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NioEventLoop</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">SingleThreadEventLoop</span> </span>&#123;<br>    <br>    ...<br>        <br>    <span class=\"hljs-comment\">// selector中的selectedKeys是基于数组的</span><br>    <span class=\"hljs-comment\">// unwrappedSelector中的selectedKeys是基于HashSet的    </span><br>    <span class=\"hljs-keyword\">private</span> Selector selector;<br>    <span class=\"hljs-keyword\">private</span> Selector unwrappedSelector;<br>    <span class=\"hljs-keyword\">private</span> SelectedSelectionKeySet selectedKeys;<br>    <br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p><strong>Thread与TaskQueue</strong></p>\n</li>\n</ul>\n<br />\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SingleThreadEventExecutor</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractScheduledEventExecutor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">OrderedEventExecutor</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 任务队列</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> Queue&lt;Runnable&gt; taskQueue;<br><br>    <span class=\"hljs-comment\">// 线程</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">volatile</span> Thread thread;<br>&#125;<br></code></pre></td></tr></table></figure>\n<a name=\"LDc5h\"></a>\n### Selector的创建\n> Selector是在NioEventLoop的构造方法中被创建的\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">NioEventLoop(NioEventLoopGroup parent, Executor executor, SelectorProvider selectorProvider, SelectStrategy strategy, RejectedExecutionHandler rejectedExecutionHandler, EventLoopTaskQueueFactory queueFactory) &#123;<br>    <br>        ...<br>           <br>        <span class=\"hljs-comment\">// 初始化selector，初始化过程在openSelector中</span><br>        <span class=\"hljs-keyword\">final</span> SelectorTuple selectorTuple = openSelector();<br>        <span class=\"hljs-keyword\">this</span>.selector = selectorTuple.selector;<br>        <span class=\"hljs-keyword\">this</span>.unwrappedSelector = selectorTuple.unwrappedSelector;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> SelectorTuple <span class=\"hljs-title\">openSelector</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">final</span> Selector unwrappedSelector;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 此处等同于 Selector.open()方法</span><br>        <span class=\"hljs-comment\">// 创建了unwrappedSelector对象</span><br>        unwrappedSelector = provider.openSelector();<br>    &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ChannelException(<span class=\"hljs-string\">&quot;failed to open a new selector&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>NioEventLoop的构造方法中，调用了openSelector()方法， 该方法会返回一个<br />SelectorTuple对象，该方法是创建Selector的核心方法。openSelector()方法内部调用了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">unwrappedSelector = provider.openSelector();<br></code></pre></td></tr></table></figure>\n<p>获得了Selector对象<strong>unwrappedSelector</strong><br />​</p>\n<p>后面会通过反射，修改<strong>unwrappedSelector</strong>中SelectedKeys的实现，然后通过<strong>SelectedSelectionKeySetSelector</strong>方法获得selector。<strong>最后通过SelectorTuple的构造方法，将该Selector的值赋给SelectorTuple类中的selector与unwrappedSelector</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SelectorTuple</span> </span>&#123;<br>    <span class=\"hljs-keyword\">final</span> Selector unwrappedSelector;<br>    <span class=\"hljs-keyword\">final</span> Selector selector;<br><br>    SelectorTuple(Selector unwrappedSelector) &#123;<br>        <span class=\"hljs-keyword\">this</span>.unwrappedSelector = unwrappedSelector;<br>        <span class=\"hljs-keyword\">this</span>.selector = unwrappedSelector;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">    * 一般调用的是这个构造方法</span><br><span class=\"hljs-comment\">    */</span><br>    SelectorTuple(Selector unwrappedSelector, Selector selector) &#123;<br>        <span class=\"hljs-keyword\">this</span>.unwrappedSelector = unwrappedSelector;<br>        <span class=\"hljs-keyword\">this</span>.selector = selector;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>再通过NioEventLoop的构造方法，将SelectorTuple中的Selector赋值给NioEventLoop中的Selector<br /><strong>​</strong></p>\n<p><strong>​</strong><br /><br><a name=\"h6t7t\"></a></p>\n<h3 id=\"两个Selector\"><a href=\"#两个Selector\" class=\"headerlink\" title=\"两个Selector\"></a>两个Selector</h3><p>NioEventLoop中有selector和unwrappedSelector两个Selector，<strong>它们的区别主要在于SelectedKeys的数据结构</strong></p>\n<ul>\n<li>selector中的SelectedKeys是<strong>基于数组</strong>的</li>\n<li>unwrappedSelector中的是<strong>基于HashSet</strong>的</li>\n</ul>\n<p>这样做的主要目的是，<strong>数组的遍历效率要高于HashSet</strong><br /> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> SelectorTuple <span class=\"hljs-title\">openSelector</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">final</span> Selector unwrappedSelector;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        unwrappedSelector = provider.openSelector();<br>    &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ChannelException(<span class=\"hljs-string\">&quot;failed to open a new selector&quot;</span>, e);<br>    &#125;<br><br>    ...<br>    <br>    <span class=\"hljs-comment\">// 获得基于数组的selectedKeySet实现</span><br>    <span class=\"hljs-keyword\">final</span> SelectedSelectionKeySet selectedKeySet = <span class=\"hljs-keyword\">new</span> SelectedSelectionKeySet();<br><br><br>    Object maybeException = AccessController.doPrivileged(<span class=\"hljs-keyword\">new</span> PrivilegedAction&lt;Object&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-comment\">// 通过反射拿到unwrappedSelector中的selectedKeys属性</span><br>                Field selectedKeysField = selectorImplClass.getDeclaredField(<span class=\"hljs-string\">&quot;selectedKeys&quot;</span>);<br>                Field publicSelectedKeysField = selectorImplClass.getDeclaredField(<span class=\"hljs-string\">&quot;publicSelectedKeys&quot;</span>);<br><br>                ...<br>\t<br>                <span class=\"hljs-comment\">// 暴力反射，修改私有属性</span><br>                Throwable cause = ReflectionUtil.trySetAccessible(selectedKeysField, <span class=\"hljs-keyword\">true</span>);<br>                <span class=\"hljs-keyword\">if</span> (cause != <span class=\"hljs-keyword\">null</span>) &#123;<br>                    <span class=\"hljs-keyword\">return</span> cause;<br>                &#125;<br>                cause = ReflectionUtil.trySetAccessible(publicSelectedKeysField, <span class=\"hljs-keyword\">true</span>);<br>                <span class=\"hljs-keyword\">if</span> (cause != <span class=\"hljs-keyword\">null</span>) &#123;<br>                    <span class=\"hljs-keyword\">return</span> cause;<br>                &#125;<br><br>                <span class=\"hljs-comment\">// 替换为基于数组的selectedKeys实现</span><br>                selectedKeysField.set(unwrappedSelector, selectedKeySet);<br>                publicSelectedKeysField.set(unwrappedSelector, selectedKeySet);<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>            &#125; <span class=\"hljs-keyword\">catch</span> (NoSuchFieldException e) &#123;<br>                <span class=\"hljs-keyword\">return</span> e;<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IllegalAccessException e) &#123;<br>                <span class=\"hljs-keyword\">return</span> e;<br>            &#125;<br>        &#125;<br>    &#125;);<br><br>    selectedKeys = selectedKeySet;<br>    <br>    <span class=\"hljs-comment\">// 调用构造函数，创建unwrappedSelector与selector</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> SelectorTuple(unwrappedSelector,<br>                             <span class=\"hljs-keyword\">new</span> SelectedSelectionKeySetSelector(unwrappedSelector, selectedKeySet));<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<p>获得数组实现SelectedKeys的Selector的原理是反射，主要步骤如下</p>\n<ul>\n<li><p>获得<strong>基于数组</strong>的selectedKeySet实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 获得基于数组的selectedKeySet实现</span><br><span class=\"hljs-keyword\">final</span> SelectedSelectionKeySet selectedKeySet = <span class=\"hljs-keyword\">new</span> SelectedSelectionKeySet();<br><br>SelectedSelectionKeySet() &#123;<br>\tkeys = <span class=\"hljs-keyword\">new</span> SelectionKey[<span class=\"hljs-number\">1024</span>];<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>通过<strong>反射</strong>拿到unwrappedSelector中的SelectedKeySet并将其<strong>替换为selectedKeySet</strong></p>\n</li>\n<li><p><strong>通过Selector的构造方法</strong>获得selector</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">new</span> SelectedSelectionKeySetSelector(unwrappedSelector, selectedKeySet)<br></code></pre></td></tr></table></figure></li>\n<li><p><strong>通过SelectorTuple的构造方法</strong>获得拥有两种Selector的SelectorTuple对象，并返回给NioEventLoop</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 调用构造函数，创建unwrappedSelector与selector</span><br><span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> SelectorTuple(unwrappedSelector, <span class=\"hljs-keyword\">new</span> SelectedSelectionKeySetSelector(unwrappedSelector, selectedKeySet));<br></code></pre></td></tr></table></figure>\n<p><a name=\"F9Aje\"></a></p>\n<h2 id=\"NIO线程启动时机\"><a href=\"#NIO线程启动时机\" class=\"headerlink\" title=\"NIO线程启动时机\"></a>NIO线程启动时机</h2></li>\n</ul>\n<p><strong>启动</strong><br />NioEventLoop中的线程，<strong>在首次执行任务时，才会被创建，且只会被创建一次</strong><br /><strong>测试代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestNioEventLoop</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        EventLoop eventLoop = <span class=\"hljs-keyword\">new</span> NioEventLoopGroup().next();<br>        <span class=\"hljs-comment\">// 使用NioEventLoop执行任务</span><br>        eventLoop.execute(()-&gt;&#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;hello&quot;</span>);<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>进入execute执行任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">execute</span><span class=\"hljs-params\">(Runnable task)</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 检测传入的任务是否为空，为空会抛出NullPointerException</span><br>    ObjectUtil.checkNotNull(task, <span class=\"hljs-string\">&quot;task&quot;</span>);<br>    <span class=\"hljs-comment\">// 执行任务</span><br>    <span class=\"hljs-comment\">// 此处判断了任务是否为懒加载任务，wakesUpForTask的返回值只会为true</span><br>    execute(task, !(task <span class=\"hljs-keyword\">instanceof</span> LazyRunnable) &amp;&amp; wakesUpForTask(task));<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>进入上述代码的execute方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">execute</span><span class=\"hljs-params\">(Runnable task, <span class=\"hljs-keyword\">boolean</span> immediate)</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 判断当前线程是否为NIO线程</span><br>    <span class=\"hljs-comment\">// 判断方法为 return thread == this.thread;</span><br>    <span class=\"hljs-comment\">// this.thread即为NIO线程，首次执行任务时，其为null</span><br>    <span class=\"hljs-keyword\">boolean</span> inEventLoop = inEventLoop();<br>    <br>    <span class=\"hljs-comment\">// 向任务队列taskQueue中添加任务</span><br>    addTask(task);<br>    <br>    <span class=\"hljs-comment\">// 当前线程不是NIO线程，则进入if语句</span><br>    <span class=\"hljs-keyword\">if</span> (!inEventLoop) &#123;<br>        <span class=\"hljs-comment\">// 启动NIO线程的核心方法</span><br>        startThread();<br>        <br>        ...<br>        <br>    &#125;<br>\t<br>    <span class=\"hljs-comment\">// 有任务需要被执行时，唤醒阻塞的NIO线程</span><br>    <span class=\"hljs-keyword\">if</span> (!addTaskWakesUp &amp;&amp; immediate) &#123;<br>        wakeup(inEventLoop);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>进入startThread方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">startThread</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 查看NIO线程状态是否为未启动</span><br>    <span class=\"hljs-comment\">// 该if代码块只会执行一次</span><br>    <span class=\"hljs-comment\">// state一开始的值就是ST_NOT_STARTED</span><br>    <span class=\"hljs-comment\">// private volatile int state = ST_NOT_STARTED;</span><br>    <span class=\"hljs-keyword\">if</span> (state == ST_NOT_STARTED) &#123;<br>        <span class=\"hljs-comment\">// 通过原子属性更新器将状态更新为启动（ST_STARTED）</span><br>        <span class=\"hljs-keyword\">if</span> (STATE_UPDATER.compareAndSet(<span class=\"hljs-keyword\">this</span>, ST_NOT_STARTED, ST_STARTED)) &#123;<br>            <span class=\"hljs-keyword\">boolean</span> success = <span class=\"hljs-keyword\">false</span>;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-comment\">// 执行启动线程</span><br>                doStartThread();<br>                success = <span class=\"hljs-keyword\">true</span>;<br>            &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>                <span class=\"hljs-keyword\">if</span> (!success) &#123;<br>                    STATE_UPDATER.compareAndSet(<span class=\"hljs-keyword\">this</span>, ST_STARTED, ST_NOT_STARTED);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>进入doStartThread，真正创建NIO线程并执行任务</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doStartThread</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">assert</span> thread == <span class=\"hljs-keyword\">null</span>;<br>    <span class=\"hljs-comment\">// 创建NIO线程并执行任务</span><br>    executor.execute(<span class=\"hljs-keyword\">new</span> Runnable() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>            <span class=\"hljs-comment\">// thread即为NIO线程</span><br>            thread = Thread.currentThread();<br>            <span class=\"hljs-keyword\">if</span> (interrupted) &#123;<br>                thread.interrupt();<br>            &#125;<br><br>            <span class=\"hljs-keyword\">boolean</span> success = <span class=\"hljs-keyword\">false</span>;<br>            updateLastExecutionTime();<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-comment\">// 执行内部run方法</span><br>                SingleThreadEventExecutor.<span class=\"hljs-keyword\">this</span>.run();<br>                success = <span class=\"hljs-keyword\">true</span>;<br>            &#125; <br>            <br>            ...<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>通过SingleThreadEventExecutor.this.run()执行传入的任务（task）<br />该run方法是<strong>NioEvnetLoop的run方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">int</span> selectCnt = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">// 死循环，不断地从任务队列中获取各种任务来执行</span><br>    <span class=\"hljs-keyword\">for</span> (;;) &#123;\t<br>      \t<span class=\"hljs-comment\">// 执行各种任务</span><br>   \t\t<span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">int</span> strategy;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                strategy = selectStrategy.calculateStrategy(selectNowSupplier, hasTasks());<br>                <span class=\"hljs-keyword\">switch</span> (strategy) &#123;<br>                <span class=\"hljs-keyword\">case</span> SelectStrategy.CONTINUE:<br>                    <span class=\"hljs-keyword\">continue</span>;<br><br>                <span class=\"hljs-keyword\">case</span> SelectStrategy.BUSY_WAIT:<br>                    <span class=\"hljs-comment\">// fall-through to SELECT since the busy-wait is not supported with NIO</span><br><br>                <span class=\"hljs-keyword\">case</span> SelectStrategy.SELECT:<br>                    <span class=\"hljs-keyword\">long</span> curDeadlineNanos = nextScheduledTaskDeadlineNanos();<br>                    <span class=\"hljs-keyword\">if</span> (curDeadlineNanos == -<span class=\"hljs-number\">1L</span>) &#123;<br>                        curDeadlineNanos = NONE; <span class=\"hljs-comment\">// nothing on the calendar</span><br>                    &#125;<br>                    nextWakeupNanos.set(curDeadlineNanos);<br>                    <span class=\"hljs-keyword\">try</span> &#123;<br>                        <span class=\"hljs-keyword\">if</span> (!hasTasks()) &#123;<br>                            strategy = select(curDeadlineNanos);<br>                        &#125;<br>                    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>                        <span class=\"hljs-comment\">// This update is just to help block unnecessary selector wakeups</span><br>                        <span class=\"hljs-comment\">// so use of lazySet is ok (no race condition)</span><br>                        nextWakeupNanos.lazySet(AWAKE);<br>                    &#125;<br>                    <span class=\"hljs-comment\">// fall through</span><br>                <span class=\"hljs-keyword\">default</span>:<br>                &#125;<br>       \t\t&#125;<br>    \t&#125;<br>\t&#125;<br></code></pre></td></tr></table></figure>\n<p><a name=\"TVNbW\"></a></p>\n<h3 id=\"唤醒\"><a href=\"#唤醒\" class=\"headerlink\" title=\"唤醒\"></a>唤醒</h3><p>NioEvnetLoop需要IO事件、普通任务以及定时任务，任务在run方法的for循环中<br /></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">int</span> selectCnt = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">// 死循环，不断地从任务队列中获取各种任务来执行</span><br>    <span class=\"hljs-keyword\">for</span> (;;) &#123;<br>      \t<span class=\"hljs-comment\">// 执行各种任务</span><br>   \t\t...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>中被执行，但<strong>该循环不会空转，执行到某些代码时，会被阻塞</strong><br />run方法中有SELECT分支</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">case</span> SelectStrategy.SELECT:<br>\t<span class=\"hljs-keyword\">long</span> curDeadlineNanos = nextScheduledTaskDeadlineNanos();<br>\t<span class=\"hljs-keyword\">if</span> (curDeadlineNanos == -<span class=\"hljs-number\">1L</span>) &#123;<br>        curDeadlineNanos = NONE; <span class=\"hljs-comment\">// nothing on the calendar</span><br>    &#125;<br>\tnextWakeupNanos.set(curDeadlineNanos);<br>\t<span class=\"hljs-keyword\">try</span> &#123;<br>    \t<span class=\"hljs-keyword\">if</span> (!hasTasks()) &#123;<br>            <span class=\"hljs-comment\">// 执行select方法</span><br>            strategy = select(curDeadlineNanos);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>会执行NioEvnetLoop的select方法，<strong>该方法内部会根据情况，执行selector的有参和无参的select方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">select</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span> deadlineNanos)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>&#123;<br>    <span class=\"hljs-comment\">// 如果没有指定阻塞事件，就调用select()</span><br>    <span class=\"hljs-keyword\">if</span> (deadlineNanos == NONE) &#123;<br>        <span class=\"hljs-keyword\">return</span> selector.select();<br>    &#125;<br>    <span class=\"hljs-comment\">// 否则调用select(timeoutMillis)，指定时间内未发生事件就停止阻塞</span><br>    <span class=\"hljs-comment\">// Timeout will only be 0 if deadline is within 5 microsecs</span><br>    <span class=\"hljs-keyword\">long</span> timeoutMillis = deadlineToDelayNanos(deadlineNanos + <span class=\"hljs-number\">995000L</span>) / <span class=\"hljs-number\">1000000L</span>;<br>    <span class=\"hljs-keyword\">return</span> timeoutMillis &lt;= <span class=\"hljs-number\">0</span> ? selector.selectNow() : selector.select(timeoutMillis);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>但需要注意的是，<strong>select方法是会阻塞线程的，当没有IO事件，但有其他任务需要执行时，需要唤醒线程</strong><br />唤醒是通过execute最后的if代码块来完成的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 有任务需要被执行时，唤醒阻塞的NIO线程</span><br><span class=\"hljs-keyword\">if</span> (!addTaskWakesUp &amp;&amp; immediate) &#123;<br>    wakeup(inEventLoop);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>NioEventLoop.wakeup唤醒被selector.select方法阻塞的NIO线程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">wakeup</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">boolean</span> inEventLoop)</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 只有当其他线程给当前NIO线程提交任务时（如执行execute），才会被唤醒</span><br>    <span class=\"hljs-comment\">// 通过AtomicLong进行更新，保证每次只能有一个线程唤醒成功</span><br>    <span class=\"hljs-keyword\">if</span> (!inEventLoop &amp;&amp; nextWakeupNanos.getAndSet(AWAKE) != AWAKE) &#123;<br>        <span class=\"hljs-comment\">// 唤醒被selector.select方法阻塞的NIO线程</span><br>        selector.wakeup();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>唤醒时需要进行两个判断</p>\n<ul>\n<li>判断提交任务的<strong>是否为NIO线程</strong><ul>\n<li>若是其他线程，才能唤醒NIO线程</li>\n<li>若是NIO线程自己，则不能唤醒</li>\n</ul>\n</li>\n<li>通过<strong>AtomicLong</strong>保证有多个线程同时提交任务时，只有一个线程能够唤醒NIO线程</li>\n</ul>\n<br />\n<a name=\"f9FLE\"></a>\n### SELECT分支\nrun方法的switch语句有多条分支，具体执行分支的代码由strategy变量控制\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">int</span> strategy = selectStrategy.calculateStrategy(selectNowSupplier, hasTasks());<br><span class=\"hljs-keyword\">switch</span> (strategy) &#123;<br>\t...<br>&#125;<br></code></pre></td></tr></table></figure>\nstrategy的值由calculateStrategy方法确定\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">calculateStrategy</span><span class=\"hljs-params\">(IntSupplier selectSupplier, <span class=\"hljs-keyword\">boolean</span> hasTasks)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>    <span class=\"hljs-comment\">// selectSupplier.get() 底层是 selector.selectNow();</span><br>    <span class=\"hljs-keyword\">return</span> hasTasks ? selectSupplier.get() : SelectStrategy.SELECT;<br>&#125;<br></code></pre></td></tr></table></figure>\n该方法会**根据hasTaks变量判断任务队列中是否有任务**\n\n<ul>\n<li><p>若有任务，则<strong>通过selectSupplier获得strategy的值</strong></p>\n<ul>\n<li><strong>get方法会selectNow方法，顺便拿到IO事件</strong><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> IntSupplier selectNowSupplier = <span class=\"hljs-keyword\">new</span> IntSupplier() &#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">get</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> NioEventLoop.<span class=\"hljs-keyword\">this</span>.selectNow();<br>    &#125;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">selectNow</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.selector.selectNow();<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>没有任务，就会进入SELECT分支</p>\n</li>\n</ul>\n<p>也就说，<strong>当任务队列中没有任务时，才会进入SELECT分支，让NIO线程阻塞，而不是空转。若有任务，则会通过get方法调用selector.selectNow方法，顺便拿到IO事件</strong></p>\n<p><a name=\"xwaxz\"></a></p>\n<h2 id=\"Java-NIO空轮询BUG\"><a href=\"#Java-NIO空轮询BUG\" class=\"headerlink\" title=\"Java NIO空轮询BUG\"></a>Java NIO空轮询BUG</h2><p>Java NIO空轮询BUG也就是JavaNIO在Linux系统下的epoll空轮询问题<br /><strong>在NioEventLoop中，因为run方法中存在一个死循环，需要通过selector.select方法来阻塞线程。但是select方法因为BUG，可能无法阻塞线程，导致循环一直执行，使得CPU负载升高</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    ...<br>    <span class=\"hljs-keyword\">for</span>(;;)&#123;<br>        ...<br>        <span class=\"hljs-comment\">// 可能发生空轮询，无法阻塞NIO线程</span><br>        strategy = select(curDeadlineNanos);  <br>        ...     <br>    <br>     \t<span class=\"hljs-keyword\">if</span>(...) &#123;<br>\t\t\t...<br>     \t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (unexpectedSelectorWakeup(selectCnt) )&#123;<br>            <span class=\"hljs-comment\">// 通过unexpectedSelectorWakeup方法中的rebuildSelector重建selector</span><br>            <span class=\"hljs-comment\">// 并将selectCnt重置为0</span><br>            selectCnt = <span class=\"hljs-number\">0</span>;<br>        &#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>Netty中通过selectCnt变量来检测select方法是否发生空轮询BUG</strong><br />若发生空轮询BUG，那么selectCnt的值会<strong>增长是十分迅速</strong>。当selectCnt的值大于等于SELECTOR_AUTO_REBUILD_THRESHOLD（默认512）时，Netty则判断其出现了空轮询BUG，进行如下处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">if</span> (SELECTOR_AUTO_REBUILD_THRESHOLD &gt; <span class=\"hljs-number\">0</span> &amp;&amp; selectCnt &gt;= SELECTOR_AUTO_REBUILD_THRESHOLD) &#123;<br>    <span class=\"hljs-comment\">// The selector returned prematurely many times in a row.</span><br>    <span class=\"hljs-comment\">// Rebuild the selector to work around the problem.</span><br>    logger.warn(<span class=\"hljs-string\">&quot;Selector.select() returned prematurely &#123;&#125; times in a row; rebuilding Selector &#123;&#125;.&quot;</span>,selectCnt, selector);<br>    <span class=\"hljs-comment\">// 重建selector，将原selector的配置信息传给新selector</span><br>    <span class=\"hljs-comment\">// 再用新selector覆盖旧selector</span><br>    rebuildSelector();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>通过rebuildSelector方法重建selector，将原selector的配置信息传给新selector，再用新selector覆盖旧selector。同时将selectCnt的值设置为0</strong><br><a name=\"YwSEi\"></a></p>\n<h2 id=\"ioRatio\"><a href=\"#ioRatio\" class=\"headerlink\" title=\"ioRatio\"></a>ioRatio</h2><p>NioEventLoop可以处理IO事件和其他任务。不同的操作所耗费的时间是不同的，<strong>想要控制NioEventLoop处理IO事件花费时间占执行所有操作的总时间的比例，需要通过ioRatio来控制</strong><br /><strong>NioEventLoop.run方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 处理IO事件时间比例，默认为50%</span><br><span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> ioRatio = <span class=\"hljs-keyword\">this</span>.ioRatio;<br><br><span class=\"hljs-comment\">// 如果IO事件时间比例设置为100%</span><br><span class=\"hljs-keyword\">if</span> (ioRatio == <span class=\"hljs-number\">100</span>) &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 如果需要去处理IO事件</span><br>        <span class=\"hljs-keyword\">if</span> (strategy &gt; <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-comment\">// 先处理IO事件</span><br>            processSelectedKeys();<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>        <span class=\"hljs-comment\">// Ensure we always run tasks.</span><br>        <span class=\"hljs-comment\">// 剩下的时间都去处理普通任务和定时任务</span><br>        ranTasks = runAllTasks();<br>    &#125;<br>&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (strategy &gt; <span class=\"hljs-number\">0</span>) &#123; <span class=\"hljs-comment\">// 如果需要去处理IO事件</span><br>    <span class=\"hljs-comment\">// 记录处理IO事件前的时间</span><br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> ioStartTime = System.nanoTime();<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 去处理IO事件</span><br>        processSelectedKeys();<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>        <span class=\"hljs-comment\">// Ensure we always run tasks.</span><br>        <span class=\"hljs-comment\">// ioTime为处理IO事件耗费的事件</span><br>        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> ioTime = System.nanoTime() - ioStartTime;<br>        <span class=\"hljs-comment\">// 计算出处理其他任务的事件</span><br>        <span class=\"hljs-comment\">// 超过设定的时间后，将会停止任务的执行，会在下一次循环中再继续执行</span><br>        ranTasks = runAllTasks(ioTime * (<span class=\"hljs-number\">100</span> - ioRatio) / ioRatio);<br>    &#125;<br>&#125; <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">// 没有IO事件需要处理</span><br>    <span class=\"hljs-comment\">// This will run the minimum number of tasks</span><br>    <span class=\"hljs-comment\">// 直接处理普通和定时任务</span><br>    ranTasks = runAllTasks(<span class=\"hljs-number\">0</span>); <br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>通过ioRatio控制各个任务执行的过程如下</strong></p>\n<ul>\n<li><p>判断ioRatio是否为100</p>\n<ul>\n<li>若是，判断是否需要处理IO事件（strategy&gt;0）<ul>\n<li>若需要处理IO事件，则先处理IO事件</li>\n</ul>\n</li>\n<li>若否（或IO事件已经处理完毕），<strong>接下来去执行所有的普通任务和定时任务，直到所有任务都被处理完</strong><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 没有指定执行任务的时间</span><br>ranTasks = runAllTasks();<br></code></pre></td></tr></table></figure>\n若ioRatio不为100</li>\n</ul>\n</li>\n<li><p>先去处理IO事件，<strong>记录处理IO事件所花费的事件保存在ioTime中</strong></p>\n</li>\n<li><p>接下来去处理其他任务，<strong>根据ioTime与ioRatio计算执行其他任务可用的时间</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 比如ioTime为10s，ioRatio为50</span><br><span class=\"hljs-comment\">// 那么通过 10*(100-50)/50=10 计算出其他任务可用的时间为 10s</span><br><span class=\"hljs-comment\">// 处理IO事件占用的事件总比例为50%</span><br>ranTasks = runAllTasks(ioTime * (<span class=\"hljs-number\">100</span> - ioRatio) / ioRatio);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>执行其他任务一旦超过可用时间，则会停止执行，在下一次循环中再继续执行</li>\n</ul>\n</li>\n<li><p>若没有IO事件需要处理，则去执行<strong>最少数量</strong>的普通任务和定时任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 运行最少数量的任务</span><br>ranTasks = runAllTasks(<span class=\"hljs-number\">0</span>);<br></code></pre></td></tr></table></figure>\n<p><a name=\"MsGBx\"></a></p>\n<h2 id=\"处理事件\"><a href=\"#处理事件\" class=\"headerlink\" title=\"处理事件\"></a>处理事件</h2><p>IO事件是通过NioEventLoop.processSelectedKeys()方法处理的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">processSelectedKeys</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 如果selectedKeys是基于数组的</span><br>    <span class=\"hljs-comment\">// 一般情况下都走这个分支</span><br>    <span class=\"hljs-keyword\">if</span> (selectedKeys != <span class=\"hljs-keyword\">null</span>) &#123;<br>        <span class=\"hljs-comment\">// 处理各种IO事件</span><br>        processSelectedKeysOptimized();<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        processSelectedKeysPlain(selector.selectedKeys());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>processSelectedKeysOptimized方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">processSelectedKeysOptimized</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; selectedKeys.size; ++i) &#123;<br>        <span class=\"hljs-comment\">// 拿到SelectionKeyec</span><br>        <span class=\"hljs-keyword\">final</span> SelectionKey k = selectedKeys.keys[i];<br>        <span class=\"hljs-comment\">// null out entry in the array to allow to have it GC&#x27;ed once the Channel close</span><br>        <span class=\"hljs-comment\">// See https://github.com/netty/netty/issues/2363</span><br>        selectedKeys.keys[i] = <span class=\"hljs-keyword\">null</span>;<br><br>        <span class=\"hljs-comment\">// 获取SelectionKey上的附件，即NioServerSocketChannel</span><br>        <span class=\"hljs-keyword\">final</span> Object a = k.attachment();<br><br>        <span class=\"hljs-keyword\">if</span> (a <span class=\"hljs-keyword\">instanceof</span> AbstractNioChannel) &#123;<br>            <span class=\"hljs-comment\">// 处理事件，传入附件NioServerSocketChannel</span><br>            processSelectedKey(k, (AbstractNioChannel) a);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-meta\">@SuppressWarnings(&quot;unchecked&quot;)</span><br>            NioTask&lt;SelectableChannel&gt; task = (NioTask&lt;SelectableChannel&gt;) a;<br>            processSelectedKey(k, task);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> (needsToSelectAgain) &#123;<br>            <span class=\"hljs-comment\">// null out entries in the array to allow to have it GC&#x27;ed once the Channel close</span><br>            <span class=\"hljs-comment\">// See https://github.com/netty/netty/issues/2363</span><br>            selectedKeys.reset(i + <span class=\"hljs-number\">1</span>);<br><br>            selectAgain();<br>            i = -<span class=\"hljs-number\">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>该方法中通过fori的方法，遍历基于数组的SelectedKey，通过</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">final</span> SelectionKey k = selectedKeys.keys[i];<br></code></pre></td></tr></table></figure>\n<p>获取到SelectionKey，<strong>然后获取其再Register时添加的附件NioServerSocketChannel</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 获取SelectionKey上的附件，即NioServerSocketChannel</span><br><span class=\"hljs-keyword\">final</span> Object a = k.attachment();<br></code></pre></td></tr></table></figure>\n<p>如果附件继承自AbstractNioChannel，则会调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 处理事件，传入附件NioServerSocketChannel</span><br>processSelectedKey(k, (AbstractNioChannel) a);<br></code></pre></td></tr></table></figure>\n<p>去处理各个事件<br /><strong>真正处理各种事件的方法processSelectedKey</strong><br />获取SelectionKey的事件，然后进行相应处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">processSelectedKey</span><span class=\"hljs-params\">(SelectionKey k, AbstractNioChannel ch)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">final</span> AbstractNioChannel.NioUnsafe unsafe = ch.unsafe();<br>    <span class=\"hljs-keyword\">if</span> (!k.isValid()) &#123;<br>        <span class=\"hljs-keyword\">final</span> EventLoop eventLoop;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            eventLoop = ch.eventLoop();<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Throwable ignored) &#123;<br>            <span class=\"hljs-comment\">// If the channel implementation throws an exception because there is no event loop, we ignore this</span><br>            <span class=\"hljs-comment\">// because we are only trying to determine if ch is registered to this event loop and thus has authority</span><br>            <span class=\"hljs-comment\">// to close ch.</span><br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-comment\">// Only close ch if ch is still registered to this EventLoop. ch could have deregistered from the event loop</span><br>        <span class=\"hljs-comment\">// and thus the SelectionKey could be cancelled as part of the deregistration process, but the channel is</span><br>        <span class=\"hljs-comment\">// still healthy and should not be closed.</span><br>        <span class=\"hljs-comment\">// See https://github.com/netty/netty/issues/5125</span><br>        <span class=\"hljs-keyword\">if</span> (eventLoop == <span class=\"hljs-keyword\">this</span>) &#123;<br>            <span class=\"hljs-comment\">// close the channel if the key is not valid anymore</span><br>            unsafe.close(unsafe.voidPromise());<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-keyword\">int</span> readyOps = k.readyOps();<br>        <span class=\"hljs-comment\">// We first need to call finishConnect() before try to trigger a read(...) or write(...) as otherwise</span><br>        <span class=\"hljs-comment\">// the NIO JDK channel implementation may throw a NotYetConnectedException.</span><br>        <span class=\"hljs-keyword\">if</span> ((readyOps &amp; SelectionKey.OP_CONNECT) != <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-comment\">// remove OP_CONNECT as otherwise Selector.select(..) will always return without blocking</span><br>            <span class=\"hljs-comment\">// See https://github.com/netty/netty/issues/924</span><br>            <span class=\"hljs-keyword\">int</span> ops = k.interestOps();<br>            ops &amp;= ~SelectionKey.OP_CONNECT;<br>            k.interestOps(ops);<br><br>            unsafe.finishConnect();<br>        &#125;<br><br>        <span class=\"hljs-comment\">// Process OP_WRITE first as we may be able to write some queued buffers and so free memory.</span><br>        <span class=\"hljs-keyword\">if</span> ((readyOps &amp; SelectionKey.OP_WRITE) != <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-comment\">// Call forceFlush which will also take care of clear the OP_WRITE once there is nothing left to write</span><br>            ch.unsafe().forceFlush();<br>        &#125;<br><br>        <span class=\"hljs-comment\">// Also check for readOps of 0 to workaround possible JDK bug which may otherwise lead</span><br>        <span class=\"hljs-comment\">// to a spin loop</span><br>        <span class=\"hljs-keyword\">if</span> ((readyOps &amp; (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != <span class=\"hljs-number\">0</span> || readyOps == <span class=\"hljs-number\">0</span>) &#123;<br>            unsafe.read();<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">catch</span> (CancelledKeyException ignored) &#123;<br>        unsafe.close(unsafe.voidPromise());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><a name=\"l58Kn\"></a></p>\n<h1 id=\"Accept剖析\"><a href=\"#Accept剖析\" class=\"headerlink\" title=\"Accept剖析\"></a>Accept剖析</h1><p><a name=\"vKDhU\"></a></p>\n<h2 id=\"NIO中处理Accept事件流程\"><a href=\"#NIO中处理Accept事件流程\" class=\"headerlink\" title=\"NIO中处理Accept事件流程\"></a>NIO中处理Accept事件流程</h2></li>\n<li><p>selector.select()阻塞线程，直到事件发生</p>\n</li>\n<li><p>遍历selectionKeys</p>\n</li>\n<li><p>获取一个key，判断事件类型是否为Accept</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li>创建SocketChannel，设置为非阻塞</li>\n<li>将SocketChannel注册到selector中</li>\n<li>关注selectionKeys的read事件</li>\n</ul>\n<p>代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 阻塞直到事件发生</span><br>selector.select();<br><br>Iterator&lt;SelectionKey&gt; iter = selector.selectionKeys().iterator();<br><span class=\"hljs-keyword\">while</span> (iter.hasNext()) &#123;    <br>    <span class=\"hljs-comment\">// 拿到一个事件</span><br>    SelectionKey key = iter.next();<br>    <br>    <span class=\"hljs-comment\">// 如果是 accept 事件</span><br>    <span class=\"hljs-keyword\">if</span> (key.isAcceptable()) &#123;<br>        <br>        <span class=\"hljs-comment\">// 执行accept，获得SocketChannel</span><br>        SocketChannel channel = serverSocketChannel.accept();<br>        channel.configureBlocking(<span class=\"hljs-keyword\">false</span>);<br>        <br>        <span class=\"hljs-comment\">// 将SocketChannel注册到selector中，并关注read事件</span><br>        channel.register(selector, SelectionKey.OP_READ);<br>    &#125;<br>    <span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>其中前三步，在NioEventLoop剖析中已经分析过了，所以接下来主要分析后三步</strong></p>\n<p><a name=\"jbFsY\"></a></p>\n<h2 id=\"SocketChannel的创建与注册\"><a href=\"#SocketChannel的创建与注册\" class=\"headerlink\" title=\"SocketChannel的创建与注册\"></a>SocketChannel的创建与注册</h2><p>发生Accept事件后，会执行NioEventLoop.run方法的如下if分支</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">if</span> ((readyOps &amp; (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != <span class=\"hljs-number\">0</span> || readyOps == <span class=\"hljs-number\">0</span>) &#123;<br>\tunsafe.read();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>NioMessageUnsafe.read方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">read</span><span class=\"hljs-params\">()</span> </span>&#123;<br><br>    ...<br>    <br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">do</span> &#123;<br>\t\t\t\t<span class=\"hljs-comment\">// doReadMessages中执行了accept获得了SocketChannel</span><br>                <span class=\"hljs-comment\">// 并创建NioSocketChannel作为消息放入readBuf</span><br>                <span class=\"hljs-comment\">// readBuf是一个ArrayList用来缓存消息</span><br>                <span class=\"hljs-comment\">// private final List&lt;Object&gt; readBuf = new ArrayList&lt;Object&gt;();</span><br>                <span class=\"hljs-keyword\">int</span> localRead = doReadMessages(readBuf);<br>                <br>                ...<br>                <br>\t\t\t\t<span class=\"hljs-comment\">// localRead值为1，就一条消息，即接收一个客户端连接</span><br>                allocHandle.incMessagesRead(localRead);<br>            &#125; <span class=\"hljs-keyword\">while</span> (allocHandle.continueReading());<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>            exception = t;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">int</span> size = readBuf.size();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; i ++) &#123;<br>            readPending = <span class=\"hljs-keyword\">false</span>;<br>            <span class=\"hljs-comment\">// 触发read事件，让pipeline上的handler处理</span><br>            <span class=\"hljs-comment\">// ServerBootstrapAcceptor.channelRead</span><br>            pipeline.fireChannelRead(readBuf.get(i));<br>        &#125;<br>        <br>        ...<br>        <br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (!readPending &amp;&amp; !config.isAutoRead()) &#123;<br>            removeReadOp();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>NioSocketChannel.doReadMessages方法<br />该方法中处理accpet事件，<strong>获得SocketChannel</strong>，同时<strong>创建了NioSocketChannel</strong>，作为消息放在了readBuf中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">doReadMessages</span><span class=\"hljs-params\">(List&lt;Object&gt; buf)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>    <span class=\"hljs-comment\">// 处理accpet事件，获得SocketChannel</span><br>    SocketChannel ch = SocketUtils.accept(javaChannel());<br><br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (ch != <span class=\"hljs-keyword\">null</span>) &#123;<br>            <span class=\"hljs-comment\">// 创建了NioSocketChannel，作为消息放在了readBuf中</span><br>            buf.add(<span class=\"hljs-keyword\">new</span> NioSocketChannel(<span class=\"hljs-keyword\">this</span>, ch));<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>       ...<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>ServerBootstrapAcceptor.channelRead</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 这时的msg是NioSocketChannel</span><br>    <span class=\"hljs-keyword\">final</span> Channel child = (Channel) msg;<br><br>    <span class=\"hljs-comment\">// NioSocketChannel添加childHandler，即初始化器</span><br>    child.pipeline().addLast(childHandler);<br><br>    <span class=\"hljs-comment\">// 设置选项</span><br>    setChannelOptions(child, childOptions, logger);<br><br>    <span class=\"hljs-keyword\">for</span> (Entry&lt;AttributeKey&lt;?&gt;, Object&gt; e: childAttrs) &#123;<br>        child.attr((AttributeKey&lt;Object&gt;) e.getKey()).set(e.getValue());<br>    &#125;<br><br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 注册 NioSocketChannel到nio worker线程，接下来的处理也移交至nio worker线程</span><br>        childGroup.register(child).addListener(<span class=\"hljs-keyword\">new</span> ChannelFutureListener() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">operationComplete</span><span class=\"hljs-params\">(ChannelFuture future)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>                <span class=\"hljs-keyword\">if</span> (!future.isSuccess()) &#123;<br>                    forceClose(child, future.cause());<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        forceClose(child, t);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>通过AbstractUnsafe.register 方法，将SocketChannel注册到了Selector中，<strong>过程与启动流程中的Register过程类似</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">register</span><span class=\"hljs-params\">(EventLoop eventLoop, <span class=\"hljs-keyword\">final</span> ChannelPromise promise)</span> </span>&#123;<br>    <br>    ...<br><br>    AbstractChannel.<span class=\"hljs-keyword\">this</span>.eventLoop = eventLoop;<br><br>    <span class=\"hljs-keyword\">if</span> (eventLoop.inEventLoop()) &#123;<br>        register0(promise);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-comment\">// 这行代码完成的是nio boss -&gt; nio worker线程的切换</span><br>            eventLoop.execute(<span class=\"hljs-keyword\">new</span> Runnable() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>                    <span class=\"hljs-comment\">// 真正的注册操作</span><br>                    register0(promise);<br>                &#125;<br>            &#125;);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>            ...<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>AbstractChannel.AbstractUnsafe.register0</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">register0</span><span class=\"hljs-params\">(ChannelPromise promise)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <br>        ...<br>            <br>        <span class=\"hljs-comment\">// 该方法将SocketChannel注册到Selector中</span><br>        doRegister();<br>        <br>        <span class=\"hljs-comment\">// 执行初始化器，执行前 pipeline 中只有 head -&gt; 初始化器 -&gt; tail</span><br>        pipeline.invokeHandlerAddedIfNeeded();<br>        <span class=\"hljs-comment\">// 执行后就是 head -&gt; logging handler -&gt; my handler -&gt; tail</span><br><br>        safeSetSuccess(promise);<br>        pipeline.fireChannelRegistered();<br>        <br>        <span class=\"hljs-keyword\">if</span> (isActive()) &#123;<br>            <span class=\"hljs-keyword\">if</span> (firstRegistration) &#123;<br>                <span class=\"hljs-comment\">// 触发pipeline上active事件</span><br>                pipeline.fireChannelActive();<br>            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (config().isAutoRead()) &#123;<br>                beginRead();<br>            &#125;<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        closeForcibly();<br>        closeFuture.setClosed();<br>        safeSetFailure(promise, t);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>AbstractNioChannel.doRegister将SocketChannel注册到Selector中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doRegister</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>    <span class=\"hljs-keyword\">boolean</span> selected = <span class=\"hljs-keyword\">false</span>;<br>    <span class=\"hljs-keyword\">for</span> (;;) &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-comment\">// 将Selector注册到Selector中</span><br>            selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">this</span>);<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (CancelledKeyException e) &#123;<br>            ...<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>HeadContext.channelActive</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">channelActive</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> </span>&#123;<br>    ctx.fireChannelActive();<br>\t<span class=\"hljs-comment\">// 触发read(NioSocketChannel这里read只是为了触发channel的事件注册，还未涉及数据读取)</span><br>    readIfIsAutoRead();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>AbstractNioChannel.doBeginRead，通过该方法，SocketChannel关注了read事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doBeginRead</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>    <span class=\"hljs-comment\">// Channel.read() or ChannelHandlerContext.read() was called</span><br>    <span class=\"hljs-keyword\">final</span> SelectionKey selectionKey = <span class=\"hljs-keyword\">this</span>.selectionKey;<br>    <span class=\"hljs-keyword\">if</span> (!selectionKey.isValid()) &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br><br>    readPending = <span class=\"hljs-keyword\">true</span>;<br>\t<span class=\"hljs-comment\">// 这时候 interestOps是0</span><br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> interestOps = selectionKey.interestOps();<br>    <span class=\"hljs-keyword\">if</span> ((interestOps &amp; readInterestOp) == <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-comment\">// 关注read事件</span><br>        selectionKey.interestOps(interestOps | readInterestOp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><a name=\"pEzHa\"></a></p>\n<h1 id=\"Read剖析\"><a href=\"#Read剖析\" class=\"headerlink\" title=\"Read剖析\"></a>Read剖析</h1><p>read事件的处理也是在</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">if</span> ((readyOps &amp; (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != <span class=\"hljs-number\">0</span> || readyOps == <span class=\"hljs-number\">0</span>) &#123;<br>\tunsafe.read();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>分支中，通过unsafe.read()方法处理的，<strong>不过此处调用的方法在AbstractNioByteChannel.NioByteUnsafe类中</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">read</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 获得Channel的配置</span><br>    <span class=\"hljs-keyword\">final</span> ChannelConfig config = config();<br>    <span class=\"hljs-keyword\">if</span> (shouldBreakReadReady(config)) &#123;<br>        clearReadPending();<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">final</span> ChannelPipeline pipeline = pipeline();<br>\t<span class=\"hljs-comment\">// 根据配置创建ByteBufAllocator（池化非池化、直接非直接内存）</span><br>\t<span class=\"hljs-keyword\">final</span> ByteBufAllocator allocator = config.getAllocator();<br>    <span class=\"hljs-comment\">// 用来分配 byteBuf，确定单次读取大小</span><br>    <span class=\"hljs-keyword\">final</span> RecvByteBufAllocator.Handle allocHandle = recvBufAllocHandle();<br>    allocHandle.reset(config);<br><br>    ByteBuf byteBuf = <span class=\"hljs-keyword\">null</span>;<br>    <span class=\"hljs-keyword\">boolean</span> close = <span class=\"hljs-keyword\">false</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-keyword\">do</span> &#123;<br>            <span class=\"hljs-comment\">// 创建ByteBuf</span><br>            byteBuf = allocHandle.allocate(allocator);<br>            <span class=\"hljs-comment\">// 读取内容，放入ByteBUf中</span><br>            allocHandle.lastBytesRead(doReadBytes(byteBuf));<br>            <span class=\"hljs-keyword\">if</span> (allocHandle.lastBytesRead() &lt;= <span class=\"hljs-number\">0</span>) &#123;<br>                byteBuf.release();<br>                byteBuf = <span class=\"hljs-keyword\">null</span>;<br>                close = allocHandle.lastBytesRead() &lt; <span class=\"hljs-number\">0</span>;<br>                <span class=\"hljs-keyword\">if</span> (close) &#123;<br>                    readPending = <span class=\"hljs-keyword\">false</span>;<br>                &#125;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br><br>            allocHandle.incMessagesRead(<span class=\"hljs-number\">1</span>);<br>            readPending = <span class=\"hljs-keyword\">false</span>;<br>            <span class=\"hljs-comment\">// 触发read 事件，让pipeline上的handler处理</span><br>            <span class=\"hljs-comment\">// 这时是处理NioSocketChannel上的handler</span><br>            pipeline.fireChannelRead(byteBuf);<br>            byteBuf = <span class=\"hljs-keyword\">null</span>;<br>        &#125; <br>        <span class=\"hljs-comment\">// 是否要继续循环</span><br>        <span class=\"hljs-keyword\">while</span> (allocHandle.continueReading());<br><br>        allocHandle.readComplete();<br>        <span class=\"hljs-comment\">// 触发 read complete事件</span><br>        pipeline.fireChannelReadComplete();<br><br>        <span class=\"hljs-keyword\">if</span> (close) &#123;<br>            closeOnRead(pipeline);<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        handleReadException(pipeline, byteBuf, t, close, allocHandle);<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>         <span class=\"hljs-comment\">// Check if there is a readPending which was not processed yet.</span><br>         <span class=\"hljs-comment\">// This could be for two reasons:</span><br>         <span class=\"hljs-comment\">// * The user called Channel.read() or ChannelHandlerContext.read() in channelRead(...) method</span><br>         <span class=\"hljs-comment\">// * The user called Channel.read() or ChannelHandlerContext.read() in channelReadComplete(...) method</span><br>         <span class=\"hljs-comment\">//</span><br>         <span class=\"hljs-comment\">// See https://github.com/netty/netty/issues/2254</span><br>        <span class=\"hljs-keyword\">if</span> (!readPending &amp;&amp; !config.isAutoRead()) &#123;<br>            removeReadOp();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>DefaultMaxMessagesRecvByteBufAllocator.MaxMessageHandle.continueReading(io.netty.util.UncheckedBooleanSupplier)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">continueReading</span><span class=\"hljs-params\">(UncheckedBooleanSupplier maybeMoreDataSupplier)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <br>           <span class=\"hljs-comment\">// 一般为true</span><br>           config.isAutoRead() &amp;&amp;<br>           <span class=\"hljs-comment\">// respectMaybeMoreData默认为true</span><br>           <span class=\"hljs-comment\">// maybeMoreDataSupplier的逻辑是如果预期读取字节与实际读取字节相等，返回true</span><br>           (!respectMaybeMoreData || maybeMoreDataSupplier.get()) &amp;&amp;<br>           <span class=\"hljs-comment\">// 小于最大次数，maxMessagePerRead默认16</span><br>           totalMessages &lt; maxMessagePerRead &amp;&amp;<br>           <span class=\"hljs-comment\">// 实际读到了数据</span><br>           totalBytesRead &gt; <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"more":"<p><a name=\"ul6Ap\"></a></p>\n<h1 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h1><p>Netty启动流程可以简化成如下代码<br />​<br /></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// netty 中使用 NioEventLoopGroup （简称 nio boss 线程）来封装线程和 selector</span><br>Selector selector = Selector.open(); <br><br><span class=\"hljs-comment\">// 创建 NioServerSocketChannel，同时会初始化它关联的 handler，以及为原生 ssc 存储 config</span><br>NioServerSocketChannel attachment = <span class=\"hljs-keyword\">new</span> NioServerSocketChannel();<br><br><span class=\"hljs-comment\">// 创建 NioServerSocketChannel 时，创建了 java 原生的 ServerSocketChannel</span><br>ServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); <br>serverSocketChannel.configureBlocking(<span class=\"hljs-keyword\">false</span>);<br><br><span class=\"hljs-comment\">// 启动 nio boss 线程执行接下来的操作</span><br><br><span class=\"hljs-comment\">//注册（仅关联 selector 和 NioServerSocketChannel），未关注事件</span><br>SelectionKey selectionKey = serverSocketChannel.register(selector, <span class=\"hljs-number\">0</span>, attachment);<br><br><span class=\"hljs-comment\">// head -&gt; 初始化器 -&gt; ServerBootstrapAcceptor -&gt; tail，初始化器是一次性的，只为添加 acceptor</span><br><br><span class=\"hljs-comment\">// 绑定端口</span><br>serverSocketChannel.bind(<span class=\"hljs-keyword\">new</span> InetSocketAddress(<span class=\"hljs-number\">8080</span>));<br><br><span class=\"hljs-comment\">// 触发 channel active 事件，在 head 中关注 op_accept 事件</span><br>selectionKey.interestOps(SelectionKey.OP_ACCEPT);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>获得选择器Selector，Netty中使用NioEventloopGroup中的NioEventloop封装了线程和选择器</li>\n<li>创建<strong>NioServerSocketChannel</strong>，该Channel<strong>作为附件</strong>添加到<strong>ServerSocketChannel</strong>中</li>\n<li>创建<strong>ServerSocketChannel</strong>，将其设置为非阻塞模式，并注册到Selector中，<strong>此时未关注事件，但是添加了附件NioServerSocketChannel</strong></li>\n<li>绑定端口</li>\n<li>通过<strong>interestOps</strong>设置感兴趣的事件</li>\n</ul>\n<br />\n<a name=\"aOWtJ\"></a>\n## bind\n> 选择器Selector的创建是在NioEventloopGroup中完成的。NioServerSocketChannel与ServerSocketChannel的创建，ServerSocketChannel注册到Selector中以及绑定操作都是由bind方法完成的\n\n<p>所以服务器启动的入口便是io.netty.bootstrap.ServerBootstrap.bind​</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ChannelFuture <span class=\"hljs-title\">bind</span><span class=\"hljs-params\">(SocketAddress localAddress)</span> </span>&#123;<br>\tvalidate();<br>\t<span class=\"hljs-keyword\">return</span> doBind(ObjectUtil.checkNotNull(localAddress, <span class=\"hljs-string\">&quot;localAddress&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<br />\n\n<p><a name=\"PoYa8\"></a></p>\n<h2 id=\"doBind\"><a href=\"#doBind\" class=\"headerlink\" title=\"doBind\"></a>doBind</h2><blockquote>\n<p>真正完成初始化、注册以及绑定的方法是io.netty.bootstrap.AbstractBootstrap.doBind</p>\n</blockquote>\n<p><strong>dobind方法在主线程中执行</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> ChannelFuture <span class=\"hljs-title\">doBind</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> SocketAddress localAddress)</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 负责NioServerSocketChannel和ServerSocketChannel的创建</span><br>    <span class=\"hljs-comment\">// ServerSocketChannel的注册工作</span><br>    <span class=\"hljs-comment\">// init由main线程完成，regisetr由NIO线程完成</span><br>    <span class=\"hljs-keyword\">final</span> ChannelFuture regFuture = initAndRegister();<br>    <span class=\"hljs-keyword\">final</span> Channel channel = regFuture.channel();<br>    <span class=\"hljs-keyword\">if</span> (regFuture.cause() != <span class=\"hljs-keyword\">null</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> regFuture;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 因为register操作是异步的</span><br>    <span class=\"hljs-comment\">// 所以要判断主线程执行到这里时，register操作是否已经执行完毕</span><br>    <span class=\"hljs-keyword\">if</span> (regFuture.isDone()) &#123;<br>        <span class=\"hljs-comment\">// At this point we know that the registration was complete and successful.</span><br>        ChannelPromise promise = channel.newPromise();<br>        <br>        <span class=\"hljs-comment\">// 执行doBind0绑定操作</span><br>        doBind0(regFuture, channel, localAddress, promise);<br>        <span class=\"hljs-keyword\">return</span> promise;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-comment\">// Registration future is almost always fulfilled already, but just in case it&#x27;s not.</span><br>        <span class=\"hljs-comment\">// 如果register操作还没执行完，就会到这个分支中来</span><br>        <span class=\"hljs-keyword\">final</span> PendingRegistrationPromise promise = <span class=\"hljs-keyword\">new</span> PendingRegistrationPromise(channel);<br>        <br>        <span class=\"hljs-comment\">// 添加监听器，NIO线程异步进行doBind0操作</span><br>        regFuture.addListener(<span class=\"hljs-keyword\">new</span> ChannelFutureListener() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">operationComplete</span><span class=\"hljs-params\">(ChannelFuture future)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>                Throwable cause = future.cause();<br>                <span class=\"hljs-keyword\">if</span> (cause != <span class=\"hljs-keyword\">null</span>) &#123;<br>                    <span class=\"hljs-comment\">// Registration on the EventLoop failed so fail the ChannelPromise directly to not cause an</span><br>                    <span class=\"hljs-comment\">// IllegalStateException once we try to access the EventLoop of the Channel.</span><br>                    promise.setFailure(cause);<br>                &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                    <span class=\"hljs-comment\">// Registration was successful, so set the correct executor to use.</span><br>                    <span class=\"hljs-comment\">// See https://github.com/netty/netty/issues/2586</span><br>                    promise.registered();<br><br>                    doBind0(regFuture, channel, localAddress, promise);<br>                &#125;<br>            &#125;<br>        &#125;);<br>        <span class=\"hljs-keyword\">return</span> promise;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>doBind()中有两个重要方法<strong>initAndRegister()<strong>和</strong>doBind0(regFuture, channel, localAddress, promise)</strong></li>\n<li>initAndRegister主要负责NioServerSocketChannel和ServerSocketChannel的创建（主线程中完成）与ServerSocketChannel注册（NIO线程中完成）工作</li>\n<li>doBind0则负责连接的创建工作</li>\n</ul>\n<br />\n\n<p><a name=\"LNV9d\"></a></p>\n<h2 id=\"initAndRegisterd\"><a href=\"#initAndRegisterd\" class=\"headerlink\" title=\"initAndRegisterd\"></a>initAndRegisterd</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">final</span> ChannelFuture <span class=\"hljs-title\">initAndRegister</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    Channel channel = <span class=\"hljs-keyword\">null</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        channel = channelFactory.newChannel();<br>        init(channel);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        <span class=\"hljs-keyword\">if</span> (channel != <span class=\"hljs-keyword\">null</span>) &#123;<br>            <span class=\"hljs-comment\">// channel can be null if newChannel crashed (eg SocketException(&quot;too many open files&quot;))</span><br>            channel.unsafe().closeForcibly();<br>            <span class=\"hljs-comment\">// as the Channel is not registered yet we need to force the usage of the GlobalEventExecutor</span><br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> DefaultChannelPromise(channel, GlobalEventExecutor.INSTANCE).setFailure(t);<br>        &#125;<br>        <span class=\"hljs-comment\">// as the Channel is not registered yet we need to force the usage of the GlobalEventExecutor</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> DefaultChannelPromise(<span class=\"hljs-keyword\">new</span> FailedChannel(), GlobalEventExecutor.INSTANCE).setFailure(t);<br>    &#125;<br><br>    ChannelFuture regFuture = config().group().register(channel);<br>    <span class=\"hljs-keyword\">if</span> (regFuture.cause() != <span class=\"hljs-keyword\">null</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (channel.isRegistered()) &#123;<br>            channel.close();<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            channel.unsafe().closeForcibly();<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// If we are here and the promise is not failed, it&#x27;s one of the following cases:</span><br>    <span class=\"hljs-comment\">// 1) If we attempted registration from the event loop, the registration has been completed at this point.</span><br>    <span class=\"hljs-comment\">//    i.e. It&#x27;s safe to attempt bind() or connect() now because the channel has been registered.</span><br>    <span class=\"hljs-comment\">// 2) If we attempted registration from the other thread, the registration request has been successfully</span><br>    <span class=\"hljs-comment\">//    added to the event loop&#x27;s task queue for later execution.</span><br>    <span class=\"hljs-comment\">//    i.e. It&#x27;s safe to attempt bind() or connect() now:</span><br>    <span class=\"hljs-comment\">//         because bind() or connect() will be executed *after* the scheduled registration task is executed</span><br>    <span class=\"hljs-comment\">//         because register(), bind(), and connect() are all bound to the same thread.</span><br><br>    <span class=\"hljs-keyword\">return</span> regFuture;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>init</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">Channel channel = <span class=\"hljs-keyword\">null</span>;<br><span class=\"hljs-keyword\">try</span> &#123;<br>    <span class=\"hljs-comment\">// 通过反射初始化NioServerSocketChannel</span><br>    channel = channelFactory.newChannel();<br>    init(channel);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>newChannel方法<br /> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title\">newChannel</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 通过反射调用NioServerSocketChannel的构造方法</span><br>        <span class=\"hljs-comment\">// 创建NioServerSocketChannel对象</span><br>        <span class=\"hljs-keyword\">return</span> constructor.newInstance();<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ChannelException(<span class=\"hljs-string\">&quot;Unable to create Channel from class &quot;</span> + constructor.getDeclaringClass(), t);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>NioServerSocketChannel构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">NioServerSocketChannel</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 创建了ServerSocketChannel实例</span><br>    <span class=\"hljs-keyword\">this</span>(newSocket(DEFAULT_SELECTOR_PROVIDER));<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>newSocket方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> ServerSocketChannel <span class=\"hljs-title\">newSocket</span><span class=\"hljs-params\">(SelectorProvider provider)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// ServerSocketChannel.open方法：</span><br>        <span class=\"hljs-comment\">// SelectorProvider.provider().openServerSocketChannel()</span><br>\t    <span class=\"hljs-comment\">// 所以此处相当于ServerSocketChannel.open()</span><br>        <span class=\"hljs-comment\">// 创建了ServerSocketChannel实例</span><br>    \t<span class=\"hljs-keyword\">return</span> provider.openServerSocketChannel();<br>\t&#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>  \t  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ChannelException(<span class=\"hljs-string\">&quot;Failed to open a server socket.&quot;</span>, e);<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>Register</strong></p>\n<blockquote>\n<p>init执行完毕后，便执行**ChannelFuture regFuture = config().group().register(channel)<strong>操作<br>该方法最终调用的是</strong>promise.channel().unsafe().register(this, promise)**方法</p>\n</blockquote>\n<p><strong>promise.channel().unsafe().register(this, promise)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">register</span><span class=\"hljs-params\">(EventLoop eventLoop, <span class=\"hljs-keyword\">final</span> ChannelPromise promise)</span> </span>&#123;<br>    ...<br><br>    <span class=\"hljs-comment\">// 获取EventLoop</span><br>    AbstractChannel.<span class=\"hljs-keyword\">this</span>.eventLoop = eventLoop;<br><br>   \t<span class=\"hljs-comment\">// 此处完成了由 主线程 到 NIO线程 的切换</span><br>    <span class=\"hljs-comment\">// eventLoop.inEventLoop()用于判断当前线程是否为NIO线程</span><br>    <span class=\"hljs-keyword\">if</span> (eventLoop.inEventLoop()) &#123;<br>        register0(promise);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-comment\">// 向NIO线程中添加任务</span><br>            eventLoop.execute(<span class=\"hljs-keyword\">new</span> Runnable() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>                    <span class=\"hljs-comment\">// 该方法中会执行doRegister</span><br>                    <span class=\"hljs-comment\">// 执行真正的注册操作</span><br>                    register0(promise);<br>                &#125;<br>            &#125;);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>           ...<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>register0方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">register0</span><span class=\"hljs-params\">(ChannelPromise promise)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>       \t...<br>            <br>        <span class=\"hljs-comment\">// 执行真正的注册操作</span><br>        doRegister();<br>        neverRegistered = <span class=\"hljs-keyword\">false</span>;<br>        registered = <span class=\"hljs-keyword\">true</span>;<br><br>        <span class=\"hljs-comment\">// Ensure we call handlerAdded(...) before we actually notify the promise. This is needed as the</span><br>        <span class=\"hljs-comment\">// user may already fire events through the pipeline in the ChannelFutureListener.</span><br>        <br>        <span class=\"hljs-comment\">// 调用init中的initChannel方法</span><br>        pipeline.invokeHandlerAddedIfNeeded();<br><br>        ...<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>doRegister方法</strong><br />​<br /></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doRegister</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>    <span class=\"hljs-keyword\">boolean</span> selected = <span class=\"hljs-keyword\">false</span>;<br>    <span class=\"hljs-keyword\">for</span> (;;) &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-comment\">// javaChannel()即为ServerSocketChannel</span><br>            <span class=\"hljs-comment\">// eventLoop().unwrappedSelector()获取eventLoop中的Selector</span><br>            <span class=\"hljs-comment\">// this为NIOServerSocketChannel，作为附件</span><br>            selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">this</span>);<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (CancelledKeyException e) &#123;<br>            ...<br>           <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>回调initChannel</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">initChannel</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Channel ch)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">final</span> ChannelPipeline pipeline = ch.pipeline();<br>    ChannelHandler handler = config.handler();<br>    <span class=\"hljs-keyword\">if</span> (handler != <span class=\"hljs-keyword\">null</span>) &#123;<br>        pipeline.addLast(handler);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 添加新任务，任务负责添加handler</span><br>    <span class=\"hljs-comment\">// 该handler负责发生Accepet事件后建立连接</span><br>    ch.eventLoop().execute(<span class=\"hljs-keyword\">new</span> Runnable() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>            pipeline.addLast(<span class=\"hljs-keyword\">new</span> ServerBootstrapAcceptor(<br>                    ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>Register主要完成了以下三个操作<br />​<br /></p>\n<ul>\n<li><p>完成了主线程到NIO的<strong>线程切换</strong></p>\n<ul>\n<li><p>通过**eventLoop.inEventLoop()**进行线程判断，判断当前线程是否为NIO线程</p>\n</li>\n<li><p>切换的方式为让eventLoop执行register的操作</p>\n</li>\n<li><p><strong>register的操作在NIO线程中完成调用doRegister方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// javaChannel()即为ServerSocketChannel</span><br><span class=\"hljs-comment\">// eventLoop().unwrappedSelector()获取eventLoop中的Selector</span><br><span class=\"hljs-comment\">// this为NIOServerSocketChannel，作为附件</span><br>selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">this</span>);<br></code></pre></td></tr></table></figure></li>\n<li><p><strong>将ServerSocketChannel注册到EventLoop的Selector中</strong></p>\n</li>\n<li><p>此时还未关注事件</p>\n</li>\n<li><p>添加NioServerSocketChannel附件</p>\n</li>\n</ul>\n</li>\n<li><p>通过<strong>invokeHandlerAddedIfNeeded</strong>调用init中的<strong>initChannel</strong>方法</p>\n<ul>\n<li>initChannel方法主要创建了<strong>两个handler</strong><ul>\n<li>一个handler负责设置配置</li>\n<li>一个handler负责发生Accept事件后建立连接</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br />\n\n<p><a name=\"gYTpl\"></a></p>\n<h2 id=\"doBind0\"><a href=\"#doBind0\" class=\"headerlink\" title=\"doBind0\"></a>doBind0</h2><p><strong>绑定端口</strong><br />在<strong>doRegister</strong>和<strong>invokeHandlerAddedIfNeeded</strong>操作中的完成后，会调用<strong>safeSetSuccess(promise)<strong>方法，向Promise中设置执行成功的结果。此时</strong>doBind</strong>方法中由<strong>initAndRegister</strong>返回的ChannelFuture对象regFuture便会由NIO线程异步执行doBind0绑定操作<br /> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// initAndRegister为异步方法，会返回ChannelFuture对象</span><br><span class=\"hljs-keyword\">final</span> ChannelFuture regFuture = initAndRegister();<br>regFuture.addListener(<span class=\"hljs-keyword\">new</span> ChannelFutureListener() &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">operationComplete</span><span class=\"hljs-params\">(ChannelFuture future)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>        Throwable cause = future.cause();<br>        <span class=\"hljs-keyword\">if</span> (cause != <span class=\"hljs-keyword\">null</span>) &#123;<br>            <span class=\"hljs-comment\">// Registration on the EventLoop failed so fail the ChannelPromise directly to not cause an</span><br>            <span class=\"hljs-comment\">// IllegalStateException once we try to access the EventLoop of the Channel.</span><br>            promise.setFailure(cause);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-comment\">// Registration was successful, so set the correct executor to use.</span><br>            <span class=\"hljs-comment\">// See https://github.com/netty/netty/issues/2586</span><br>            promise.registered();<br>            <span class=\"hljs-comment\">// 如果没有异常，则执行绑定操作</span><br>            doBind0(regFuture, channel, localAddress, promise);<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>doBind0最底层调用的是ServerSocketChannel的bind方法</strong><br /> NioServerSocketChannel.doBind方法</p>\n</blockquote>\n<p>通过该方法，绑定了对应的端口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@SuppressJava6Requirement(reason = &quot;Usage guarded by java version check&quot;)</span><br><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doBind</span><span class=\"hljs-params\">(SocketAddress localAddress)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (PlatformDependent.javaVersion() &gt;= <span class=\"hljs-number\">7</span>) &#123;<br>        <span class=\"hljs-comment\">// 调用ServerSocketChannel的bind方法，绑定端口</span><br>        javaChannel().bind(localAddress, config.getBacklog());<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        javaChannel().socket().bind(localAddress, config.getBacklog());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>关注事件</strong><br />在绑定端口操作完成后，会判断各种所有初始化操作是否已经完成，若完成，则会添加ServerSocketChannel感兴趣的事件<br />​<br /></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">if</span> (!wasActive &amp;&amp; isActive()) &#123;<br>    invokeLater(<span class=\"hljs-keyword\">new</span> Runnable() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>            pipeline.fireChannelActive();<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>最终在<strong>AbstractNioChannel.doBeginRead</strong>方法中，会添加ServerSocketChannel添加Accept事件</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doBeginRead</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>    <span class=\"hljs-comment\">// Channel.read() or ChannelHandlerContext.read() was called</span><br>    <span class=\"hljs-keyword\">final</span> SelectionKey selectionKey = <span class=\"hljs-keyword\">this</span>.selectionKey;<br>    <span class=\"hljs-keyword\">if</span> (!selectionKey.isValid()) &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    readPending = <span class=\"hljs-keyword\">true</span>;<br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> interestOps = selectionKey.interestOps();<br>    <span class=\"hljs-comment\">// 如果ServerSocketChannel没有关注Accept事件</span><br>    <span class=\"hljs-keyword\">if</span> ((interestOps &amp; readInterestOp) == <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-comment\">// 则让其关注Accepet事件</span><br>        <span class=\"hljs-comment\">// readInterestOp 取值是 16</span><br>        <span class=\"hljs-comment\">// 在 NioServerSocketChannel 创建时初始化</span><br>        selectionKey.interestOps(interestOps | readInterestOp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>注意</strong>：此处设置interestOps时使用的方法，<strong>避免覆盖关注的其他事件</strong></p>\n<ul>\n<li><p>首先获取Channel所有感兴趣的事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> interestOps = selectionKey.interestOps();<br></code></pre></td></tr></table></figure></li>\n<li><p>然后再设置其感兴趣的事件</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">selectionKey.interestOps(interestOps | readInterestOp);<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>各个事件对应的值</strong></p>\n</blockquote>\n<p><img src=\"/image/blog/20210506090047.png\"><br><a name=\"KD021\"></a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过上述步骤，完成了</p>\n<ul>\n<li>NioServerSocketChannel与ServerSocketChannel的创建</li>\n<li>ServerSocketChannel绑定到EventLoop的Selecot中，并添加NioServerSocketChannel附件</li>\n<li>绑定了对应的端口</li>\n<li>关注了Accept事件</li>\n</ul>\n<br />\n<a name=\"fFNbn\"></a>\n# NioEventLoop剖析\n<a name=\"CJGhF\"></a>\n## 组成\nNioEventLoop的重要组成部分有三个\n\n<ul>\n<li><p><strong>Selector</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NioEventLoop</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">SingleThreadEventLoop</span> </span>&#123;<br>    <br>    ...<br>        <br>    <span class=\"hljs-comment\">// selector中的selectedKeys是基于数组的</span><br>    <span class=\"hljs-comment\">// unwrappedSelector中的selectedKeys是基于HashSet的    </span><br>    <span class=\"hljs-keyword\">private</span> Selector selector;<br>    <span class=\"hljs-keyword\">private</span> Selector unwrappedSelector;<br>    <span class=\"hljs-keyword\">private</span> SelectedSelectionKeySet selectedKeys;<br>    <br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p><strong>Thread与TaskQueue</strong></p>\n</li>\n</ul>\n<br />\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SingleThreadEventExecutor</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractScheduledEventExecutor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">OrderedEventExecutor</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 任务队列</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> Queue&lt;Runnable&gt; taskQueue;<br><br>    <span class=\"hljs-comment\">// 线程</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">volatile</span> Thread thread;<br>&#125;<br></code></pre></td></tr></table></figure>\n<a name=\"LDc5h\"></a>\n### Selector的创建\n> Selector是在NioEventLoop的构造方法中被创建的\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">NioEventLoop(NioEventLoopGroup parent, Executor executor, SelectorProvider selectorProvider, SelectStrategy strategy, RejectedExecutionHandler rejectedExecutionHandler, EventLoopTaskQueueFactory queueFactory) &#123;<br>    <br>        ...<br>           <br>        <span class=\"hljs-comment\">// 初始化selector，初始化过程在openSelector中</span><br>        <span class=\"hljs-keyword\">final</span> SelectorTuple selectorTuple = openSelector();<br>        <span class=\"hljs-keyword\">this</span>.selector = selectorTuple.selector;<br>        <span class=\"hljs-keyword\">this</span>.unwrappedSelector = selectorTuple.unwrappedSelector;<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> SelectorTuple <span class=\"hljs-title\">openSelector</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">final</span> Selector unwrappedSelector;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 此处等同于 Selector.open()方法</span><br>        <span class=\"hljs-comment\">// 创建了unwrappedSelector对象</span><br>        unwrappedSelector = provider.openSelector();<br>    &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ChannelException(<span class=\"hljs-string\">&quot;failed to open a new selector&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>NioEventLoop的构造方法中，调用了openSelector()方法， 该方法会返回一个<br />SelectorTuple对象，该方法是创建Selector的核心方法。openSelector()方法内部调用了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">unwrappedSelector = provider.openSelector();<br></code></pre></td></tr></table></figure>\n<p>获得了Selector对象<strong>unwrappedSelector</strong><br />​</p>\n<p>后面会通过反射，修改<strong>unwrappedSelector</strong>中SelectedKeys的实现，然后通过<strong>SelectedSelectionKeySetSelector</strong>方法获得selector。<strong>最后通过SelectorTuple的构造方法，将该Selector的值赋给SelectorTuple类中的selector与unwrappedSelector</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SelectorTuple</span> </span>&#123;<br>    <span class=\"hljs-keyword\">final</span> Selector unwrappedSelector;<br>    <span class=\"hljs-keyword\">final</span> Selector selector;<br><br>    SelectorTuple(Selector unwrappedSelector) &#123;<br>        <span class=\"hljs-keyword\">this</span>.unwrappedSelector = unwrappedSelector;<br>        <span class=\"hljs-keyword\">this</span>.selector = unwrappedSelector;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">    * 一般调用的是这个构造方法</span><br><span class=\"hljs-comment\">    */</span><br>    SelectorTuple(Selector unwrappedSelector, Selector selector) &#123;<br>        <span class=\"hljs-keyword\">this</span>.unwrappedSelector = unwrappedSelector;<br>        <span class=\"hljs-keyword\">this</span>.selector = selector;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>再通过NioEventLoop的构造方法，将SelectorTuple中的Selector赋值给NioEventLoop中的Selector<br /><strong>​</strong></p>\n<p><strong>​</strong><br /><br><a name=\"h6t7t\"></a></p>\n<h3 id=\"两个Selector\"><a href=\"#两个Selector\" class=\"headerlink\" title=\"两个Selector\"></a>两个Selector</h3><p>NioEventLoop中有selector和unwrappedSelector两个Selector，<strong>它们的区别主要在于SelectedKeys的数据结构</strong></p>\n<ul>\n<li>selector中的SelectedKeys是<strong>基于数组</strong>的</li>\n<li>unwrappedSelector中的是<strong>基于HashSet</strong>的</li>\n</ul>\n<p>这样做的主要目的是，<strong>数组的遍历效率要高于HashSet</strong><br /> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> SelectorTuple <span class=\"hljs-title\">openSelector</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">final</span> Selector unwrappedSelector;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        unwrappedSelector = provider.openSelector();<br>    &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ChannelException(<span class=\"hljs-string\">&quot;failed to open a new selector&quot;</span>, e);<br>    &#125;<br><br>    ...<br>    <br>    <span class=\"hljs-comment\">// 获得基于数组的selectedKeySet实现</span><br>    <span class=\"hljs-keyword\">final</span> SelectedSelectionKeySet selectedKeySet = <span class=\"hljs-keyword\">new</span> SelectedSelectionKeySet();<br><br><br>    Object maybeException = AccessController.doPrivileged(<span class=\"hljs-keyword\">new</span> PrivilegedAction&lt;Object&gt;() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-comment\">// 通过反射拿到unwrappedSelector中的selectedKeys属性</span><br>                Field selectedKeysField = selectorImplClass.getDeclaredField(<span class=\"hljs-string\">&quot;selectedKeys&quot;</span>);<br>                Field publicSelectedKeysField = selectorImplClass.getDeclaredField(<span class=\"hljs-string\">&quot;publicSelectedKeys&quot;</span>);<br><br>                ...<br>\t<br>                <span class=\"hljs-comment\">// 暴力反射，修改私有属性</span><br>                Throwable cause = ReflectionUtil.trySetAccessible(selectedKeysField, <span class=\"hljs-keyword\">true</span>);<br>                <span class=\"hljs-keyword\">if</span> (cause != <span class=\"hljs-keyword\">null</span>) &#123;<br>                    <span class=\"hljs-keyword\">return</span> cause;<br>                &#125;<br>                cause = ReflectionUtil.trySetAccessible(publicSelectedKeysField, <span class=\"hljs-keyword\">true</span>);<br>                <span class=\"hljs-keyword\">if</span> (cause != <span class=\"hljs-keyword\">null</span>) &#123;<br>                    <span class=\"hljs-keyword\">return</span> cause;<br>                &#125;<br><br>                <span class=\"hljs-comment\">// 替换为基于数组的selectedKeys实现</span><br>                selectedKeysField.set(unwrappedSelector, selectedKeySet);<br>                publicSelectedKeysField.set(unwrappedSelector, selectedKeySet);<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>            &#125; <span class=\"hljs-keyword\">catch</span> (NoSuchFieldException e) &#123;<br>                <span class=\"hljs-keyword\">return</span> e;<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IllegalAccessException e) &#123;<br>                <span class=\"hljs-keyword\">return</span> e;<br>            &#125;<br>        &#125;<br>    &#125;);<br><br>    selectedKeys = selectedKeySet;<br>    <br>    <span class=\"hljs-comment\">// 调用构造函数，创建unwrappedSelector与selector</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> SelectorTuple(unwrappedSelector,<br>                             <span class=\"hljs-keyword\">new</span> SelectedSelectionKeySetSelector(unwrappedSelector, selectedKeySet));<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<p>获得数组实现SelectedKeys的Selector的原理是反射，主要步骤如下</p>\n<ul>\n<li><p>获得<strong>基于数组</strong>的selectedKeySet实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 获得基于数组的selectedKeySet实现</span><br><span class=\"hljs-keyword\">final</span> SelectedSelectionKeySet selectedKeySet = <span class=\"hljs-keyword\">new</span> SelectedSelectionKeySet();<br><br>SelectedSelectionKeySet() &#123;<br>\tkeys = <span class=\"hljs-keyword\">new</span> SelectionKey[<span class=\"hljs-number\">1024</span>];<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>通过<strong>反射</strong>拿到unwrappedSelector中的SelectedKeySet并将其<strong>替换为selectedKeySet</strong></p>\n</li>\n<li><p><strong>通过Selector的构造方法</strong>获得selector</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">new</span> SelectedSelectionKeySetSelector(unwrappedSelector, selectedKeySet)<br></code></pre></td></tr></table></figure></li>\n<li><p><strong>通过SelectorTuple的构造方法</strong>获得拥有两种Selector的SelectorTuple对象，并返回给NioEventLoop</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 调用构造函数，创建unwrappedSelector与selector</span><br><span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> SelectorTuple(unwrappedSelector, <span class=\"hljs-keyword\">new</span> SelectedSelectionKeySetSelector(unwrappedSelector, selectedKeySet));<br></code></pre></td></tr></table></figure>\n<p><a name=\"F9Aje\"></a></p>\n<h2 id=\"NIO线程启动时机\"><a href=\"#NIO线程启动时机\" class=\"headerlink\" title=\"NIO线程启动时机\"></a>NIO线程启动时机</h2></li>\n</ul>\n<p><strong>启动</strong><br />NioEventLoop中的线程，<strong>在首次执行任务时，才会被创建，且只会被创建一次</strong><br /><strong>测试代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestNioEventLoop</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        EventLoop eventLoop = <span class=\"hljs-keyword\">new</span> NioEventLoopGroup().next();<br>        <span class=\"hljs-comment\">// 使用NioEventLoop执行任务</span><br>        eventLoop.execute(()-&gt;&#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;hello&quot;</span>);<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>进入execute执行任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">execute</span><span class=\"hljs-params\">(Runnable task)</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 检测传入的任务是否为空，为空会抛出NullPointerException</span><br>    ObjectUtil.checkNotNull(task, <span class=\"hljs-string\">&quot;task&quot;</span>);<br>    <span class=\"hljs-comment\">// 执行任务</span><br>    <span class=\"hljs-comment\">// 此处判断了任务是否为懒加载任务，wakesUpForTask的返回值只会为true</span><br>    execute(task, !(task <span class=\"hljs-keyword\">instanceof</span> LazyRunnable) &amp;&amp; wakesUpForTask(task));<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>进入上述代码的execute方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">execute</span><span class=\"hljs-params\">(Runnable task, <span class=\"hljs-keyword\">boolean</span> immediate)</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 判断当前线程是否为NIO线程</span><br>    <span class=\"hljs-comment\">// 判断方法为 return thread == this.thread;</span><br>    <span class=\"hljs-comment\">// this.thread即为NIO线程，首次执行任务时，其为null</span><br>    <span class=\"hljs-keyword\">boolean</span> inEventLoop = inEventLoop();<br>    <br>    <span class=\"hljs-comment\">// 向任务队列taskQueue中添加任务</span><br>    addTask(task);<br>    <br>    <span class=\"hljs-comment\">// 当前线程不是NIO线程，则进入if语句</span><br>    <span class=\"hljs-keyword\">if</span> (!inEventLoop) &#123;<br>        <span class=\"hljs-comment\">// 启动NIO线程的核心方法</span><br>        startThread();<br>        <br>        ...<br>        <br>    &#125;<br>\t<br>    <span class=\"hljs-comment\">// 有任务需要被执行时，唤醒阻塞的NIO线程</span><br>    <span class=\"hljs-keyword\">if</span> (!addTaskWakesUp &amp;&amp; immediate) &#123;<br>        wakeup(inEventLoop);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>进入startThread方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">startThread</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 查看NIO线程状态是否为未启动</span><br>    <span class=\"hljs-comment\">// 该if代码块只会执行一次</span><br>    <span class=\"hljs-comment\">// state一开始的值就是ST_NOT_STARTED</span><br>    <span class=\"hljs-comment\">// private volatile int state = ST_NOT_STARTED;</span><br>    <span class=\"hljs-keyword\">if</span> (state == ST_NOT_STARTED) &#123;<br>        <span class=\"hljs-comment\">// 通过原子属性更新器将状态更新为启动（ST_STARTED）</span><br>        <span class=\"hljs-keyword\">if</span> (STATE_UPDATER.compareAndSet(<span class=\"hljs-keyword\">this</span>, ST_NOT_STARTED, ST_STARTED)) &#123;<br>            <span class=\"hljs-keyword\">boolean</span> success = <span class=\"hljs-keyword\">false</span>;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-comment\">// 执行启动线程</span><br>                doStartThread();<br>                success = <span class=\"hljs-keyword\">true</span>;<br>            &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>                <span class=\"hljs-keyword\">if</span> (!success) &#123;<br>                    STATE_UPDATER.compareAndSet(<span class=\"hljs-keyword\">this</span>, ST_STARTED, ST_NOT_STARTED);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>进入doStartThread，真正创建NIO线程并执行任务</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doStartThread</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">assert</span> thread == <span class=\"hljs-keyword\">null</span>;<br>    <span class=\"hljs-comment\">// 创建NIO线程并执行任务</span><br>    executor.execute(<span class=\"hljs-keyword\">new</span> Runnable() &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>            <span class=\"hljs-comment\">// thread即为NIO线程</span><br>            thread = Thread.currentThread();<br>            <span class=\"hljs-keyword\">if</span> (interrupted) &#123;<br>                thread.interrupt();<br>            &#125;<br><br>            <span class=\"hljs-keyword\">boolean</span> success = <span class=\"hljs-keyword\">false</span>;<br>            updateLastExecutionTime();<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-comment\">// 执行内部run方法</span><br>                SingleThreadEventExecutor.<span class=\"hljs-keyword\">this</span>.run();<br>                success = <span class=\"hljs-keyword\">true</span>;<br>            &#125; <br>            <br>            ...<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>通过SingleThreadEventExecutor.this.run()执行传入的任务（task）<br />该run方法是<strong>NioEvnetLoop的run方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">int</span> selectCnt = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">// 死循环，不断地从任务队列中获取各种任务来执行</span><br>    <span class=\"hljs-keyword\">for</span> (;;) &#123;\t<br>      \t<span class=\"hljs-comment\">// 执行各种任务</span><br>   \t\t<span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">int</span> strategy;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                strategy = selectStrategy.calculateStrategy(selectNowSupplier, hasTasks());<br>                <span class=\"hljs-keyword\">switch</span> (strategy) &#123;<br>                <span class=\"hljs-keyword\">case</span> SelectStrategy.CONTINUE:<br>                    <span class=\"hljs-keyword\">continue</span>;<br><br>                <span class=\"hljs-keyword\">case</span> SelectStrategy.BUSY_WAIT:<br>                    <span class=\"hljs-comment\">// fall-through to SELECT since the busy-wait is not supported with NIO</span><br><br>                <span class=\"hljs-keyword\">case</span> SelectStrategy.SELECT:<br>                    <span class=\"hljs-keyword\">long</span> curDeadlineNanos = nextScheduledTaskDeadlineNanos();<br>                    <span class=\"hljs-keyword\">if</span> (curDeadlineNanos == -<span class=\"hljs-number\">1L</span>) &#123;<br>                        curDeadlineNanos = NONE; <span class=\"hljs-comment\">// nothing on the calendar</span><br>                    &#125;<br>                    nextWakeupNanos.set(curDeadlineNanos);<br>                    <span class=\"hljs-keyword\">try</span> &#123;<br>                        <span class=\"hljs-keyword\">if</span> (!hasTasks()) &#123;<br>                            strategy = select(curDeadlineNanos);<br>                        &#125;<br>                    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>                        <span class=\"hljs-comment\">// This update is just to help block unnecessary selector wakeups</span><br>                        <span class=\"hljs-comment\">// so use of lazySet is ok (no race condition)</span><br>                        nextWakeupNanos.lazySet(AWAKE);<br>                    &#125;<br>                    <span class=\"hljs-comment\">// fall through</span><br>                <span class=\"hljs-keyword\">default</span>:<br>                &#125;<br>       \t\t&#125;<br>    \t&#125;<br>\t&#125;<br></code></pre></td></tr></table></figure>\n<p><a name=\"TVNbW\"></a></p>\n<h3 id=\"唤醒\"><a href=\"#唤醒\" class=\"headerlink\" title=\"唤醒\"></a>唤醒</h3><p>NioEvnetLoop需要IO事件、普通任务以及定时任务，任务在run方法的for循环中<br /></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">int</span> selectCnt = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">// 死循环，不断地从任务队列中获取各种任务来执行</span><br>    <span class=\"hljs-keyword\">for</span> (;;) &#123;<br>      \t<span class=\"hljs-comment\">// 执行各种任务</span><br>   \t\t...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>中被执行，但<strong>该循环不会空转，执行到某些代码时，会被阻塞</strong><br />run方法中有SELECT分支</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">case</span> SelectStrategy.SELECT:<br>\t<span class=\"hljs-keyword\">long</span> curDeadlineNanos = nextScheduledTaskDeadlineNanos();<br>\t<span class=\"hljs-keyword\">if</span> (curDeadlineNanos == -<span class=\"hljs-number\">1L</span>) &#123;<br>        curDeadlineNanos = NONE; <span class=\"hljs-comment\">// nothing on the calendar</span><br>    &#125;<br>\tnextWakeupNanos.set(curDeadlineNanos);<br>\t<span class=\"hljs-keyword\">try</span> &#123;<br>    \t<span class=\"hljs-keyword\">if</span> (!hasTasks()) &#123;<br>            <span class=\"hljs-comment\">// 执行select方法</span><br>            strategy = select(curDeadlineNanos);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>会执行NioEvnetLoop的select方法，<strong>该方法内部会根据情况，执行selector的有参和无参的select方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">select</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span> deadlineNanos)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>&#123;<br>    <span class=\"hljs-comment\">// 如果没有指定阻塞事件，就调用select()</span><br>    <span class=\"hljs-keyword\">if</span> (deadlineNanos == NONE) &#123;<br>        <span class=\"hljs-keyword\">return</span> selector.select();<br>    &#125;<br>    <span class=\"hljs-comment\">// 否则调用select(timeoutMillis)，指定时间内未发生事件就停止阻塞</span><br>    <span class=\"hljs-comment\">// Timeout will only be 0 if deadline is within 5 microsecs</span><br>    <span class=\"hljs-keyword\">long</span> timeoutMillis = deadlineToDelayNanos(deadlineNanos + <span class=\"hljs-number\">995000L</span>) / <span class=\"hljs-number\">1000000L</span>;<br>    <span class=\"hljs-keyword\">return</span> timeoutMillis &lt;= <span class=\"hljs-number\">0</span> ? selector.selectNow() : selector.select(timeoutMillis);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>但需要注意的是，<strong>select方法是会阻塞线程的，当没有IO事件，但有其他任务需要执行时，需要唤醒线程</strong><br />唤醒是通过execute最后的if代码块来完成的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 有任务需要被执行时，唤醒阻塞的NIO线程</span><br><span class=\"hljs-keyword\">if</span> (!addTaskWakesUp &amp;&amp; immediate) &#123;<br>    wakeup(inEventLoop);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>NioEventLoop.wakeup唤醒被selector.select方法阻塞的NIO线程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">wakeup</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">boolean</span> inEventLoop)</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 只有当其他线程给当前NIO线程提交任务时（如执行execute），才会被唤醒</span><br>    <span class=\"hljs-comment\">// 通过AtomicLong进行更新，保证每次只能有一个线程唤醒成功</span><br>    <span class=\"hljs-keyword\">if</span> (!inEventLoop &amp;&amp; nextWakeupNanos.getAndSet(AWAKE) != AWAKE) &#123;<br>        <span class=\"hljs-comment\">// 唤醒被selector.select方法阻塞的NIO线程</span><br>        selector.wakeup();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>唤醒时需要进行两个判断</p>\n<ul>\n<li>判断提交任务的<strong>是否为NIO线程</strong><ul>\n<li>若是其他线程，才能唤醒NIO线程</li>\n<li>若是NIO线程自己，则不能唤醒</li>\n</ul>\n</li>\n<li>通过<strong>AtomicLong</strong>保证有多个线程同时提交任务时，只有一个线程能够唤醒NIO线程</li>\n</ul>\n<br />\n<a name=\"f9FLE\"></a>\n### SELECT分支\nrun方法的switch语句有多条分支，具体执行分支的代码由strategy变量控制\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">int</span> strategy = selectStrategy.calculateStrategy(selectNowSupplier, hasTasks());<br><span class=\"hljs-keyword\">switch</span> (strategy) &#123;<br>\t...<br>&#125;<br></code></pre></td></tr></table></figure>\nstrategy的值由calculateStrategy方法确定\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">calculateStrategy</span><span class=\"hljs-params\">(IntSupplier selectSupplier, <span class=\"hljs-keyword\">boolean</span> hasTasks)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>    <span class=\"hljs-comment\">// selectSupplier.get() 底层是 selector.selectNow();</span><br>    <span class=\"hljs-keyword\">return</span> hasTasks ? selectSupplier.get() : SelectStrategy.SELECT;<br>&#125;<br></code></pre></td></tr></table></figure>\n该方法会**根据hasTaks变量判断任务队列中是否有任务**\n\n<ul>\n<li><p>若有任务，则<strong>通过selectSupplier获得strategy的值</strong></p>\n<ul>\n<li><strong>get方法会selectNow方法，顺便拿到IO事件</strong><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> IntSupplier selectNowSupplier = <span class=\"hljs-keyword\">new</span> IntSupplier() &#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">get</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> NioEventLoop.<span class=\"hljs-keyword\">this</span>.selectNow();<br>    &#125;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">selectNow</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.selector.selectNow();<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>没有任务，就会进入SELECT分支</p>\n</li>\n</ul>\n<p>也就说，<strong>当任务队列中没有任务时，才会进入SELECT分支，让NIO线程阻塞，而不是空转。若有任务，则会通过get方法调用selector.selectNow方法，顺便拿到IO事件</strong></p>\n<p><a name=\"xwaxz\"></a></p>\n<h2 id=\"Java-NIO空轮询BUG\"><a href=\"#Java-NIO空轮询BUG\" class=\"headerlink\" title=\"Java NIO空轮询BUG\"></a>Java NIO空轮询BUG</h2><p>Java NIO空轮询BUG也就是JavaNIO在Linux系统下的epoll空轮询问题<br /><strong>在NioEventLoop中，因为run方法中存在一个死循环，需要通过selector.select方法来阻塞线程。但是select方法因为BUG，可能无法阻塞线程，导致循环一直执行，使得CPU负载升高</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    ...<br>    <span class=\"hljs-keyword\">for</span>(;;)&#123;<br>        ...<br>        <span class=\"hljs-comment\">// 可能发生空轮询，无法阻塞NIO线程</span><br>        strategy = select(curDeadlineNanos);  <br>        ...     <br>    <br>     \t<span class=\"hljs-keyword\">if</span>(...) &#123;<br>\t\t\t...<br>     \t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (unexpectedSelectorWakeup(selectCnt) )&#123;<br>            <span class=\"hljs-comment\">// 通过unexpectedSelectorWakeup方法中的rebuildSelector重建selector</span><br>            <span class=\"hljs-comment\">// 并将selectCnt重置为0</span><br>            selectCnt = <span class=\"hljs-number\">0</span>;<br>        &#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>Netty中通过selectCnt变量来检测select方法是否发生空轮询BUG</strong><br />若发生空轮询BUG，那么selectCnt的值会<strong>增长是十分迅速</strong>。当selectCnt的值大于等于SELECTOR_AUTO_REBUILD_THRESHOLD（默认512）时，Netty则判断其出现了空轮询BUG，进行如下处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">if</span> (SELECTOR_AUTO_REBUILD_THRESHOLD &gt; <span class=\"hljs-number\">0</span> &amp;&amp; selectCnt &gt;= SELECTOR_AUTO_REBUILD_THRESHOLD) &#123;<br>    <span class=\"hljs-comment\">// The selector returned prematurely many times in a row.</span><br>    <span class=\"hljs-comment\">// Rebuild the selector to work around the problem.</span><br>    logger.warn(<span class=\"hljs-string\">&quot;Selector.select() returned prematurely &#123;&#125; times in a row; rebuilding Selector &#123;&#125;.&quot;</span>,selectCnt, selector);<br>    <span class=\"hljs-comment\">// 重建selector，将原selector的配置信息传给新selector</span><br>    <span class=\"hljs-comment\">// 再用新selector覆盖旧selector</span><br>    rebuildSelector();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>通过rebuildSelector方法重建selector，将原selector的配置信息传给新selector，再用新selector覆盖旧selector。同时将selectCnt的值设置为0</strong><br><a name=\"YwSEi\"></a></p>\n<h2 id=\"ioRatio\"><a href=\"#ioRatio\" class=\"headerlink\" title=\"ioRatio\"></a>ioRatio</h2><p>NioEventLoop可以处理IO事件和其他任务。不同的操作所耗费的时间是不同的，<strong>想要控制NioEventLoop处理IO事件花费时间占执行所有操作的总时间的比例，需要通过ioRatio来控制</strong><br /><strong>NioEventLoop.run方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 处理IO事件时间比例，默认为50%</span><br><span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> ioRatio = <span class=\"hljs-keyword\">this</span>.ioRatio;<br><br><span class=\"hljs-comment\">// 如果IO事件时间比例设置为100%</span><br><span class=\"hljs-keyword\">if</span> (ioRatio == <span class=\"hljs-number\">100</span>) &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 如果需要去处理IO事件</span><br>        <span class=\"hljs-keyword\">if</span> (strategy &gt; <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-comment\">// 先处理IO事件</span><br>            processSelectedKeys();<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>        <span class=\"hljs-comment\">// Ensure we always run tasks.</span><br>        <span class=\"hljs-comment\">// 剩下的时间都去处理普通任务和定时任务</span><br>        ranTasks = runAllTasks();<br>    &#125;<br>&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (strategy &gt; <span class=\"hljs-number\">0</span>) &#123; <span class=\"hljs-comment\">// 如果需要去处理IO事件</span><br>    <span class=\"hljs-comment\">// 记录处理IO事件前的时间</span><br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> ioStartTime = System.nanoTime();<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 去处理IO事件</span><br>        processSelectedKeys();<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>        <span class=\"hljs-comment\">// Ensure we always run tasks.</span><br>        <span class=\"hljs-comment\">// ioTime为处理IO事件耗费的事件</span><br>        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> ioTime = System.nanoTime() - ioStartTime;<br>        <span class=\"hljs-comment\">// 计算出处理其他任务的事件</span><br>        <span class=\"hljs-comment\">// 超过设定的时间后，将会停止任务的执行，会在下一次循环中再继续执行</span><br>        ranTasks = runAllTasks(ioTime * (<span class=\"hljs-number\">100</span> - ioRatio) / ioRatio);<br>    &#125;<br>&#125; <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">// 没有IO事件需要处理</span><br>    <span class=\"hljs-comment\">// This will run the minimum number of tasks</span><br>    <span class=\"hljs-comment\">// 直接处理普通和定时任务</span><br>    ranTasks = runAllTasks(<span class=\"hljs-number\">0</span>); <br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>通过ioRatio控制各个任务执行的过程如下</strong></p>\n<ul>\n<li><p>判断ioRatio是否为100</p>\n<ul>\n<li>若是，判断是否需要处理IO事件（strategy&gt;0）<ul>\n<li>若需要处理IO事件，则先处理IO事件</li>\n</ul>\n</li>\n<li>若否（或IO事件已经处理完毕），<strong>接下来去执行所有的普通任务和定时任务，直到所有任务都被处理完</strong><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 没有指定执行任务的时间</span><br>ranTasks = runAllTasks();<br></code></pre></td></tr></table></figure>\n若ioRatio不为100</li>\n</ul>\n</li>\n<li><p>先去处理IO事件，<strong>记录处理IO事件所花费的事件保存在ioTime中</strong></p>\n</li>\n<li><p>接下来去处理其他任务，<strong>根据ioTime与ioRatio计算执行其他任务可用的时间</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 比如ioTime为10s，ioRatio为50</span><br><span class=\"hljs-comment\">// 那么通过 10*(100-50)/50=10 计算出其他任务可用的时间为 10s</span><br><span class=\"hljs-comment\">// 处理IO事件占用的事件总比例为50%</span><br>ranTasks = runAllTasks(ioTime * (<span class=\"hljs-number\">100</span> - ioRatio) / ioRatio);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>执行其他任务一旦超过可用时间，则会停止执行，在下一次循环中再继续执行</li>\n</ul>\n</li>\n<li><p>若没有IO事件需要处理，则去执行<strong>最少数量</strong>的普通任务和定时任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 运行最少数量的任务</span><br>ranTasks = runAllTasks(<span class=\"hljs-number\">0</span>);<br></code></pre></td></tr></table></figure>\n<p><a name=\"MsGBx\"></a></p>\n<h2 id=\"处理事件\"><a href=\"#处理事件\" class=\"headerlink\" title=\"处理事件\"></a>处理事件</h2><p>IO事件是通过NioEventLoop.processSelectedKeys()方法处理的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">processSelectedKeys</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 如果selectedKeys是基于数组的</span><br>    <span class=\"hljs-comment\">// 一般情况下都走这个分支</span><br>    <span class=\"hljs-keyword\">if</span> (selectedKeys != <span class=\"hljs-keyword\">null</span>) &#123;<br>        <span class=\"hljs-comment\">// 处理各种IO事件</span><br>        processSelectedKeysOptimized();<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        processSelectedKeysPlain(selector.selectedKeys());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>processSelectedKeysOptimized方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">processSelectedKeysOptimized</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; selectedKeys.size; ++i) &#123;<br>        <span class=\"hljs-comment\">// 拿到SelectionKeyec</span><br>        <span class=\"hljs-keyword\">final</span> SelectionKey k = selectedKeys.keys[i];<br>        <span class=\"hljs-comment\">// null out entry in the array to allow to have it GC&#x27;ed once the Channel close</span><br>        <span class=\"hljs-comment\">// See https://github.com/netty/netty/issues/2363</span><br>        selectedKeys.keys[i] = <span class=\"hljs-keyword\">null</span>;<br><br>        <span class=\"hljs-comment\">// 获取SelectionKey上的附件，即NioServerSocketChannel</span><br>        <span class=\"hljs-keyword\">final</span> Object a = k.attachment();<br><br>        <span class=\"hljs-keyword\">if</span> (a <span class=\"hljs-keyword\">instanceof</span> AbstractNioChannel) &#123;<br>            <span class=\"hljs-comment\">// 处理事件，传入附件NioServerSocketChannel</span><br>            processSelectedKey(k, (AbstractNioChannel) a);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-meta\">@SuppressWarnings(&quot;unchecked&quot;)</span><br>            NioTask&lt;SelectableChannel&gt; task = (NioTask&lt;SelectableChannel&gt;) a;<br>            processSelectedKey(k, task);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> (needsToSelectAgain) &#123;<br>            <span class=\"hljs-comment\">// null out entries in the array to allow to have it GC&#x27;ed once the Channel close</span><br>            <span class=\"hljs-comment\">// See https://github.com/netty/netty/issues/2363</span><br>            selectedKeys.reset(i + <span class=\"hljs-number\">1</span>);<br><br>            selectAgain();<br>            i = -<span class=\"hljs-number\">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>该方法中通过fori的方法，遍历基于数组的SelectedKey，通过</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">final</span> SelectionKey k = selectedKeys.keys[i];<br></code></pre></td></tr></table></figure>\n<p>获取到SelectionKey，<strong>然后获取其再Register时添加的附件NioServerSocketChannel</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 获取SelectionKey上的附件，即NioServerSocketChannel</span><br><span class=\"hljs-keyword\">final</span> Object a = k.attachment();<br></code></pre></td></tr></table></figure>\n<p>如果附件继承自AbstractNioChannel，则会调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 处理事件，传入附件NioServerSocketChannel</span><br>processSelectedKey(k, (AbstractNioChannel) a);<br></code></pre></td></tr></table></figure>\n<p>去处理各个事件<br /><strong>真正处理各种事件的方法processSelectedKey</strong><br />获取SelectionKey的事件，然后进行相应处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">processSelectedKey</span><span class=\"hljs-params\">(SelectionKey k, AbstractNioChannel ch)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">final</span> AbstractNioChannel.NioUnsafe unsafe = ch.unsafe();<br>    <span class=\"hljs-keyword\">if</span> (!k.isValid()) &#123;<br>        <span class=\"hljs-keyword\">final</span> EventLoop eventLoop;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            eventLoop = ch.eventLoop();<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Throwable ignored) &#123;<br>            <span class=\"hljs-comment\">// If the channel implementation throws an exception because there is no event loop, we ignore this</span><br>            <span class=\"hljs-comment\">// because we are only trying to determine if ch is registered to this event loop and thus has authority</span><br>            <span class=\"hljs-comment\">// to close ch.</span><br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-comment\">// Only close ch if ch is still registered to this EventLoop. ch could have deregistered from the event loop</span><br>        <span class=\"hljs-comment\">// and thus the SelectionKey could be cancelled as part of the deregistration process, but the channel is</span><br>        <span class=\"hljs-comment\">// still healthy and should not be closed.</span><br>        <span class=\"hljs-comment\">// See https://github.com/netty/netty/issues/5125</span><br>        <span class=\"hljs-keyword\">if</span> (eventLoop == <span class=\"hljs-keyword\">this</span>) &#123;<br>            <span class=\"hljs-comment\">// close the channel if the key is not valid anymore</span><br>            unsafe.close(unsafe.voidPromise());<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-keyword\">int</span> readyOps = k.readyOps();<br>        <span class=\"hljs-comment\">// We first need to call finishConnect() before try to trigger a read(...) or write(...) as otherwise</span><br>        <span class=\"hljs-comment\">// the NIO JDK channel implementation may throw a NotYetConnectedException.</span><br>        <span class=\"hljs-keyword\">if</span> ((readyOps &amp; SelectionKey.OP_CONNECT) != <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-comment\">// remove OP_CONNECT as otherwise Selector.select(..) will always return without blocking</span><br>            <span class=\"hljs-comment\">// See https://github.com/netty/netty/issues/924</span><br>            <span class=\"hljs-keyword\">int</span> ops = k.interestOps();<br>            ops &amp;= ~SelectionKey.OP_CONNECT;<br>            k.interestOps(ops);<br><br>            unsafe.finishConnect();<br>        &#125;<br><br>        <span class=\"hljs-comment\">// Process OP_WRITE first as we may be able to write some queued buffers and so free memory.</span><br>        <span class=\"hljs-keyword\">if</span> ((readyOps &amp; SelectionKey.OP_WRITE) != <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-comment\">// Call forceFlush which will also take care of clear the OP_WRITE once there is nothing left to write</span><br>            ch.unsafe().forceFlush();<br>        &#125;<br><br>        <span class=\"hljs-comment\">// Also check for readOps of 0 to workaround possible JDK bug which may otherwise lead</span><br>        <span class=\"hljs-comment\">// to a spin loop</span><br>        <span class=\"hljs-keyword\">if</span> ((readyOps &amp; (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != <span class=\"hljs-number\">0</span> || readyOps == <span class=\"hljs-number\">0</span>) &#123;<br>            unsafe.read();<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">catch</span> (CancelledKeyException ignored) &#123;<br>        unsafe.close(unsafe.voidPromise());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><a name=\"l58Kn\"></a></p>\n<h1 id=\"Accept剖析\"><a href=\"#Accept剖析\" class=\"headerlink\" title=\"Accept剖析\"></a>Accept剖析</h1><p><a name=\"vKDhU\"></a></p>\n<h2 id=\"NIO中处理Accept事件流程\"><a href=\"#NIO中处理Accept事件流程\" class=\"headerlink\" title=\"NIO中处理Accept事件流程\"></a>NIO中处理Accept事件流程</h2></li>\n<li><p>selector.select()阻塞线程，直到事件发生</p>\n</li>\n<li><p>遍历selectionKeys</p>\n</li>\n<li><p>获取一个key，判断事件类型是否为Accept</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li>创建SocketChannel，设置为非阻塞</li>\n<li>将SocketChannel注册到selector中</li>\n<li>关注selectionKeys的read事件</li>\n</ul>\n<p>代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 阻塞直到事件发生</span><br>selector.select();<br><br>Iterator&lt;SelectionKey&gt; iter = selector.selectionKeys().iterator();<br><span class=\"hljs-keyword\">while</span> (iter.hasNext()) &#123;    <br>    <span class=\"hljs-comment\">// 拿到一个事件</span><br>    SelectionKey key = iter.next();<br>    <br>    <span class=\"hljs-comment\">// 如果是 accept 事件</span><br>    <span class=\"hljs-keyword\">if</span> (key.isAcceptable()) &#123;<br>        <br>        <span class=\"hljs-comment\">// 执行accept，获得SocketChannel</span><br>        SocketChannel channel = serverSocketChannel.accept();<br>        channel.configureBlocking(<span class=\"hljs-keyword\">false</span>);<br>        <br>        <span class=\"hljs-comment\">// 将SocketChannel注册到selector中，并关注read事件</span><br>        channel.register(selector, SelectionKey.OP_READ);<br>    &#125;<br>    <span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>其中前三步，在NioEventLoop剖析中已经分析过了，所以接下来主要分析后三步</strong></p>\n<p><a name=\"jbFsY\"></a></p>\n<h2 id=\"SocketChannel的创建与注册\"><a href=\"#SocketChannel的创建与注册\" class=\"headerlink\" title=\"SocketChannel的创建与注册\"></a>SocketChannel的创建与注册</h2><p>发生Accept事件后，会执行NioEventLoop.run方法的如下if分支</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">if</span> ((readyOps &amp; (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != <span class=\"hljs-number\">0</span> || readyOps == <span class=\"hljs-number\">0</span>) &#123;<br>\tunsafe.read();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>NioMessageUnsafe.read方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">read</span><span class=\"hljs-params\">()</span> </span>&#123;<br><br>    ...<br>    <br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">do</span> &#123;<br>\t\t\t\t<span class=\"hljs-comment\">// doReadMessages中执行了accept获得了SocketChannel</span><br>                <span class=\"hljs-comment\">// 并创建NioSocketChannel作为消息放入readBuf</span><br>                <span class=\"hljs-comment\">// readBuf是一个ArrayList用来缓存消息</span><br>                <span class=\"hljs-comment\">// private final List&lt;Object&gt; readBuf = new ArrayList&lt;Object&gt;();</span><br>                <span class=\"hljs-keyword\">int</span> localRead = doReadMessages(readBuf);<br>                <br>                ...<br>                <br>\t\t\t\t<span class=\"hljs-comment\">// localRead值为1，就一条消息，即接收一个客户端连接</span><br>                allocHandle.incMessagesRead(localRead);<br>            &#125; <span class=\"hljs-keyword\">while</span> (allocHandle.continueReading());<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>            exception = t;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">int</span> size = readBuf.size();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; i ++) &#123;<br>            readPending = <span class=\"hljs-keyword\">false</span>;<br>            <span class=\"hljs-comment\">// 触发read事件，让pipeline上的handler处理</span><br>            <span class=\"hljs-comment\">// ServerBootstrapAcceptor.channelRead</span><br>            pipeline.fireChannelRead(readBuf.get(i));<br>        &#125;<br>        <br>        ...<br>        <br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (!readPending &amp;&amp; !config.isAutoRead()) &#123;<br>            removeReadOp();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>NioSocketChannel.doReadMessages方法<br />该方法中处理accpet事件，<strong>获得SocketChannel</strong>，同时<strong>创建了NioSocketChannel</strong>，作为消息放在了readBuf中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">doReadMessages</span><span class=\"hljs-params\">(List&lt;Object&gt; buf)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>    <span class=\"hljs-comment\">// 处理accpet事件，获得SocketChannel</span><br>    SocketChannel ch = SocketUtils.accept(javaChannel());<br><br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (ch != <span class=\"hljs-keyword\">null</span>) &#123;<br>            <span class=\"hljs-comment\">// 创建了NioSocketChannel，作为消息放在了readBuf中</span><br>            buf.add(<span class=\"hljs-keyword\">new</span> NioSocketChannel(<span class=\"hljs-keyword\">this</span>, ch));<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>       ...<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>ServerBootstrapAcceptor.channelRead</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">channelRead</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 这时的msg是NioSocketChannel</span><br>    <span class=\"hljs-keyword\">final</span> Channel child = (Channel) msg;<br><br>    <span class=\"hljs-comment\">// NioSocketChannel添加childHandler，即初始化器</span><br>    child.pipeline().addLast(childHandler);<br><br>    <span class=\"hljs-comment\">// 设置选项</span><br>    setChannelOptions(child, childOptions, logger);<br><br>    <span class=\"hljs-keyword\">for</span> (Entry&lt;AttributeKey&lt;?&gt;, Object&gt; e: childAttrs) &#123;<br>        child.attr((AttributeKey&lt;Object&gt;) e.getKey()).set(e.getValue());<br>    &#125;<br><br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 注册 NioSocketChannel到nio worker线程，接下来的处理也移交至nio worker线程</span><br>        childGroup.register(child).addListener(<span class=\"hljs-keyword\">new</span> ChannelFutureListener() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">operationComplete</span><span class=\"hljs-params\">(ChannelFuture future)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>                <span class=\"hljs-keyword\">if</span> (!future.isSuccess()) &#123;<br>                    forceClose(child, future.cause());<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        forceClose(child, t);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>通过AbstractUnsafe.register 方法，将SocketChannel注册到了Selector中，<strong>过程与启动流程中的Register过程类似</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">register</span><span class=\"hljs-params\">(EventLoop eventLoop, <span class=\"hljs-keyword\">final</span> ChannelPromise promise)</span> </span>&#123;<br>    <br>    ...<br><br>    AbstractChannel.<span class=\"hljs-keyword\">this</span>.eventLoop = eventLoop;<br><br>    <span class=\"hljs-keyword\">if</span> (eventLoop.inEventLoop()) &#123;<br>        register0(promise);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-comment\">// 这行代码完成的是nio boss -&gt; nio worker线程的切换</span><br>            eventLoop.execute(<span class=\"hljs-keyword\">new</span> Runnable() &#123;<br>                <span class=\"hljs-meta\">@Override</span><br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>                    <span class=\"hljs-comment\">// 真正的注册操作</span><br>                    register0(promise);<br>                &#125;<br>            &#125;);<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>            ...<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>AbstractChannel.AbstractUnsafe.register0</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">register0</span><span class=\"hljs-params\">(ChannelPromise promise)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <br>        ...<br>            <br>        <span class=\"hljs-comment\">// 该方法将SocketChannel注册到Selector中</span><br>        doRegister();<br>        <br>        <span class=\"hljs-comment\">// 执行初始化器，执行前 pipeline 中只有 head -&gt; 初始化器 -&gt; tail</span><br>        pipeline.invokeHandlerAddedIfNeeded();<br>        <span class=\"hljs-comment\">// 执行后就是 head -&gt; logging handler -&gt; my handler -&gt; tail</span><br><br>        safeSetSuccess(promise);<br>        pipeline.fireChannelRegistered();<br>        <br>        <span class=\"hljs-keyword\">if</span> (isActive()) &#123;<br>            <span class=\"hljs-keyword\">if</span> (firstRegistration) &#123;<br>                <span class=\"hljs-comment\">// 触发pipeline上active事件</span><br>                pipeline.fireChannelActive();<br>            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (config().isAutoRead()) &#123;<br>                beginRead();<br>            &#125;<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        closeForcibly();<br>        closeFuture.setClosed();<br>        safeSetFailure(promise, t);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>AbstractNioChannel.doRegister将SocketChannel注册到Selector中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doRegister</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>    <span class=\"hljs-keyword\">boolean</span> selected = <span class=\"hljs-keyword\">false</span>;<br>    <span class=\"hljs-keyword\">for</span> (;;) &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-comment\">// 将Selector注册到Selector中</span><br>            selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">this</span>);<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (CancelledKeyException e) &#123;<br>            ...<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>HeadContext.channelActive</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">channelActive</span><span class=\"hljs-params\">(ChannelHandlerContext ctx)</span> </span>&#123;<br>    ctx.fireChannelActive();<br>\t<span class=\"hljs-comment\">// 触发read(NioSocketChannel这里read只是为了触发channel的事件注册，还未涉及数据读取)</span><br>    readIfIsAutoRead();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>AbstractNioChannel.doBeginRead，通过该方法，SocketChannel关注了read事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doBeginRead</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>    <span class=\"hljs-comment\">// Channel.read() or ChannelHandlerContext.read() was called</span><br>    <span class=\"hljs-keyword\">final</span> SelectionKey selectionKey = <span class=\"hljs-keyword\">this</span>.selectionKey;<br>    <span class=\"hljs-keyword\">if</span> (!selectionKey.isValid()) &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br><br>    readPending = <span class=\"hljs-keyword\">true</span>;<br>\t<span class=\"hljs-comment\">// 这时候 interestOps是0</span><br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> interestOps = selectionKey.interestOps();<br>    <span class=\"hljs-keyword\">if</span> ((interestOps &amp; readInterestOp) == <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-comment\">// 关注read事件</span><br>        selectionKey.interestOps(interestOps | readInterestOp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><a name=\"pEzHa\"></a></p>\n<h1 id=\"Read剖析\"><a href=\"#Read剖析\" class=\"headerlink\" title=\"Read剖析\"></a>Read剖析</h1><p>read事件的处理也是在</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">if</span> ((readyOps &amp; (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != <span class=\"hljs-number\">0</span> || readyOps == <span class=\"hljs-number\">0</span>) &#123;<br>\tunsafe.read();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>分支中，通过unsafe.read()方法处理的，<strong>不过此处调用的方法在AbstractNioByteChannel.NioByteUnsafe类中</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">read</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 获得Channel的配置</span><br>    <span class=\"hljs-keyword\">final</span> ChannelConfig config = config();<br>    <span class=\"hljs-keyword\">if</span> (shouldBreakReadReady(config)) &#123;<br>        clearReadPending();<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">final</span> ChannelPipeline pipeline = pipeline();<br>\t<span class=\"hljs-comment\">// 根据配置创建ByteBufAllocator（池化非池化、直接非直接内存）</span><br>\t<span class=\"hljs-keyword\">final</span> ByteBufAllocator allocator = config.getAllocator();<br>    <span class=\"hljs-comment\">// 用来分配 byteBuf，确定单次读取大小</span><br>    <span class=\"hljs-keyword\">final</span> RecvByteBufAllocator.Handle allocHandle = recvBufAllocHandle();<br>    allocHandle.reset(config);<br><br>    ByteBuf byteBuf = <span class=\"hljs-keyword\">null</span>;<br>    <span class=\"hljs-keyword\">boolean</span> close = <span class=\"hljs-keyword\">false</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-keyword\">do</span> &#123;<br>            <span class=\"hljs-comment\">// 创建ByteBuf</span><br>            byteBuf = allocHandle.allocate(allocator);<br>            <span class=\"hljs-comment\">// 读取内容，放入ByteBUf中</span><br>            allocHandle.lastBytesRead(doReadBytes(byteBuf));<br>            <span class=\"hljs-keyword\">if</span> (allocHandle.lastBytesRead() &lt;= <span class=\"hljs-number\">0</span>) &#123;<br>                byteBuf.release();<br>                byteBuf = <span class=\"hljs-keyword\">null</span>;<br>                close = allocHandle.lastBytesRead() &lt; <span class=\"hljs-number\">0</span>;<br>                <span class=\"hljs-keyword\">if</span> (close) &#123;<br>                    readPending = <span class=\"hljs-keyword\">false</span>;<br>                &#125;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br><br>            allocHandle.incMessagesRead(<span class=\"hljs-number\">1</span>);<br>            readPending = <span class=\"hljs-keyword\">false</span>;<br>            <span class=\"hljs-comment\">// 触发read 事件，让pipeline上的handler处理</span><br>            <span class=\"hljs-comment\">// 这时是处理NioSocketChannel上的handler</span><br>            pipeline.fireChannelRead(byteBuf);<br>            byteBuf = <span class=\"hljs-keyword\">null</span>;<br>        &#125; <br>        <span class=\"hljs-comment\">// 是否要继续循环</span><br>        <span class=\"hljs-keyword\">while</span> (allocHandle.continueReading());<br><br>        allocHandle.readComplete();<br>        <span class=\"hljs-comment\">// 触发 read complete事件</span><br>        pipeline.fireChannelReadComplete();<br><br>        <span class=\"hljs-keyword\">if</span> (close) &#123;<br>            closeOnRead(pipeline);<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        handleReadException(pipeline, byteBuf, t, close, allocHandle);<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>         <span class=\"hljs-comment\">// Check if there is a readPending which was not processed yet.</span><br>         <span class=\"hljs-comment\">// This could be for two reasons:</span><br>         <span class=\"hljs-comment\">// * The user called Channel.read() or ChannelHandlerContext.read() in channelRead(...) method</span><br>         <span class=\"hljs-comment\">// * The user called Channel.read() or ChannelHandlerContext.read() in channelReadComplete(...) method</span><br>         <span class=\"hljs-comment\">//</span><br>         <span class=\"hljs-comment\">// See https://github.com/netty/netty/issues/2254</span><br>        <span class=\"hljs-keyword\">if</span> (!readPending &amp;&amp; !config.isAutoRead()) &#123;<br>            removeReadOp();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>DefaultMaxMessagesRecvByteBufAllocator.MaxMessageHandle.continueReading(io.netty.util.UncheckedBooleanSupplier)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">continueReading</span><span class=\"hljs-params\">(UncheckedBooleanSupplier maybeMoreDataSupplier)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <br>           <span class=\"hljs-comment\">// 一般为true</span><br>           config.isAutoRead() &amp;&amp;<br>           <span class=\"hljs-comment\">// respectMaybeMoreData默认为true</span><br>           <span class=\"hljs-comment\">// maybeMoreDataSupplier的逻辑是如果预期读取字节与实际读取字节相等，返回true</span><br>           (!respectMaybeMoreData || maybeMoreDataSupplier.get()) &amp;&amp;<br>           <span class=\"hljs-comment\">// 小于最大次数，maxMessagePerRead默认16</span><br>           totalMessages &lt; maxMessagePerRead &amp;&amp;<br>           <span class=\"hljs-comment\">// 实际读到了数据</span><br>           totalBytesRead &gt; <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"实现一个简易Map","excerpt":"实现一个简易Map","date":"2021-06-11T01:10:03.000Z","cover":"/image/blog/map.png?raw=true","_content":"\n![](/image/blog/%E6%9C%AA%E5%91%BD%E5%90%8D1645368182.png?raw=true)\n\n\n```java\npackage com.susu.utils;\n\nimport java.util.*;\n\n/**\n * <p>Description: Implement the map interface and use the hash principle</p>\n * <p>实现Map接口并利用散列原理</p>\n * @author sujay\n * @version 21:59 2022/2/20\n * @see Map\n * @since JDK1.8\n */\npublic class SujayMap implements Map {\n\n    public static void main(String[] args) {\n        SujayMap hgcMap = new SujayMap();\n        hgcMap.put(1,1);\n        hgcMap.put(\"asd\",\"211\");\n        Set entrySet = hgcMap.entrySet();\n        System.out.println(hgcMap);\n        Data entry = (Data) entrySet.iterator().next();\n        entry.setKey(\"123123\");\n        System.out.println(entry);\n    }\n\n    private final static int SLOT = 997;\n\n    private LinkedList[] bucket = new LinkedList[SLOT];\n\n    int size = 0;\n\n    class Data implements Entry, Comparable {\n        Object key, value;\n\n        public Data(Object key, Object value) {\n            this.key = key;\n            this.value = value;\n        }\n\n        @Override\n        public int compareTo(Object o) {\n            Data data = (Data) o;\n            return ((Comparable) key).compareTo(data.key);\n        }\n\n        @Override\n        public Object getKey() {\n            return key;\n        }\n\n        @Override\n        public Object getValue() {\n            return value;\n        }\n\n        @Override\n        public Object setValue(Object value) {\n            Object result = this.value;\n            this.value = value;\n            return result;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            Data data = (Data) obj;\n            return this.key.equals(data.key);\n        }\n\n        @Override\n        public String toString() {\n            return \"[\" + key + \":\" + value + \"]\";\n        }\n\n        public void setKey(Object key) {\n            this.key = key;\n        }\n    }\n\n    @Override\n    public int size() {\n        return size;\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return size == 0;\n    }\n\n    @Override\n    public boolean containsKey(Object key) {\n        boolean found = false;\n        int index = key.hashCode() % SLOT;\n        if(index < 0 ) {\n            index= -index;\n        }\n        if(bucket[index]==null) {\n            return found;\n        }\n        Iterator iterator = bucket[index].listIterator();\n        while(iterator.hasNext()){\n            if(iterator.next().equals((new Data(key,null)))) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    @Override\n    public boolean containsValue(Object value) {\n        for(int i = 0 ; i < SLOT;i++){\n            if(bucket[i]!=null){\n                Iterator iterator = bucket[i].listIterator();\n                while(iterator.hasNext()){\n                    if(((Data)iterator.next()).getValue().equals(value)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    @Override\n    public Object get(Object key) {\n        Data getData = new Data(key, null);\n        int index = key.hashCode() % SLOT;\n        if (index < 0) {\n            index = -index;\n        }\n        if (bucket[index] == null) {\n            return null;\n        }\n        LinkedList linkedList = bucket[index];\n        ListIterator iterator = linkedList.listIterator();\n        while (iterator.hasNext()) {\n            Data data = (Data) iterator.next();\n            if (data.equals(getData)) {\n                return data.value;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Object put(Object key, Object value) {\n        Object result = new Object();\n        Data putdata = new Data(key, value);\n        int index = key.hashCode() % 997;\n        if (index < 0) {\n            index = -index;\n        }\n        if (bucket[index] == null) {\n            bucket[index] = new LinkedList();\n        }\n        LinkedList linkedList = bucket[index];\n        ListIterator iterator = linkedList.listIterator();\n        boolean found = false;\n        while (iterator.hasNext()) {\n            Data data = (Data) iterator.next();\n            if (data.equals(putdata)) {\n                found = true;\n                result = data.value;\n                iterator.set(putdata);\n            }\n        }\n        if (!found) {\n            bucket[index].add(putdata);\n            size++;\n        }\n        return result;\n    }\n\n    @Override\n    public Object remove(Object key) {\n        Data removeData = new Data(key, null);\n        int index = key.hashCode() % SLOT;\n        if (index < 0) {\n            index = -index;\n        }\n        if (bucket[index] == null) {\n            return null;\n        }\n        LinkedList linkedList = bucket[index];\n        size--;\n        return linkedList.remove(removeData);\n    }\n\n    @Override\n    public void putAll(Map m) {\n        Set set = m.entrySet();\n        for(Object o : set){\n            Map.Entry oo = (Map.Entry)o;\n            put(oo.getKey(),oo.getValue());\n        }\n    }\n\n    @Override\n    public void clear() {\n        for(Object key : keySet()){\n            remove(key);\n        }\n        size=0;\n    }\n\n    @Override\n    public Set keySet() {\n        Set set = new HashSet();\n        for(int i = 0 ; i< SLOT ;i++){\n            if(bucket[i]!=null){\n                Iterator iterator = bucket[i].listIterator();\n                while(iterator.hasNext()){\n                    set.add(((Data)iterator.next()).getKey());\n                }\n            }\n        }\n        return set;\n    }\n\n    @Override\n    public Collection values() {\n        List list = new ArrayList();\n        for(int i = 0 ; i< SLOT ;i++){\n            if(bucket[i]!=null){\n                Iterator iterator = bucket[i].listIterator();\n                while(iterator.hasNext()){\n                    list.add(((Data)iterator.next()).getValue());\n                }\n            }\n        }\n        return list;\n    }\n\n    @Override\n    public Set<Entry> entrySet() {\n        Set set = new HashSet();\n        for(int i = 0 ; i< SLOT ;i++){\n            if(bucket[i]!=null){\n                Iterator iterator = bucket[i].listIterator();\n                while(iterator.hasNext()){\n                    set.add(iterator.next());\n                }\n            }\n        }\n        return set;\n    }\n\n    @Override\n    public int hashCode() {\n        int j = 0;\n        for (int i = 0; i < SLOT; i++) {\n            if (bucket[i] != null) {\n                Iterator iterator = bucket[i].iterator();\n                Data data = (Data) iterator.next();\n                j = j + data.getKey().hashCode();\n            }\n        }\n        return j;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"[\").append(\"\\n\");\n        for(int i = 0 ; i < SLOT;i++){\n            if(bucket[i]!=null){\n                Iterator iterator = bucket[i].listIterator();\n                while(iterator.hasNext()){\n                    Data data = (Data)iterator.next();\n                    builder.append(data.getKey()).append(\":\").append(data.getValue()).append(\"\\n\");\n                }\n            }\n        }\n        builder.append(\"]\");\n        return builder.toString();\n    }\n\n}\n```\n\n","source":"_posts/mymap.md","raw":"---\ntitle: 实现一个简易Map\ncategories:  日常学习\ntags:\n  - java\nexcerpt: 实现一个简易Map\ndate: 2021-06-11 9:10:03\ncover: '/image/blog/map.png?raw=true'\n---\n\n![](/image/blog/%E6%9C%AA%E5%91%BD%E5%90%8D1645368182.png?raw=true)\n\n\n```java\npackage com.susu.utils;\n\nimport java.util.*;\n\n/**\n * <p>Description: Implement the map interface and use the hash principle</p>\n * <p>实现Map接口并利用散列原理</p>\n * @author sujay\n * @version 21:59 2022/2/20\n * @see Map\n * @since JDK1.8\n */\npublic class SujayMap implements Map {\n\n    public static void main(String[] args) {\n        SujayMap hgcMap = new SujayMap();\n        hgcMap.put(1,1);\n        hgcMap.put(\"asd\",\"211\");\n        Set entrySet = hgcMap.entrySet();\n        System.out.println(hgcMap);\n        Data entry = (Data) entrySet.iterator().next();\n        entry.setKey(\"123123\");\n        System.out.println(entry);\n    }\n\n    private final static int SLOT = 997;\n\n    private LinkedList[] bucket = new LinkedList[SLOT];\n\n    int size = 0;\n\n    class Data implements Entry, Comparable {\n        Object key, value;\n\n        public Data(Object key, Object value) {\n            this.key = key;\n            this.value = value;\n        }\n\n        @Override\n        public int compareTo(Object o) {\n            Data data = (Data) o;\n            return ((Comparable) key).compareTo(data.key);\n        }\n\n        @Override\n        public Object getKey() {\n            return key;\n        }\n\n        @Override\n        public Object getValue() {\n            return value;\n        }\n\n        @Override\n        public Object setValue(Object value) {\n            Object result = this.value;\n            this.value = value;\n            return result;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            Data data = (Data) obj;\n            return this.key.equals(data.key);\n        }\n\n        @Override\n        public String toString() {\n            return \"[\" + key + \":\" + value + \"]\";\n        }\n\n        public void setKey(Object key) {\n            this.key = key;\n        }\n    }\n\n    @Override\n    public int size() {\n        return size;\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return size == 0;\n    }\n\n    @Override\n    public boolean containsKey(Object key) {\n        boolean found = false;\n        int index = key.hashCode() % SLOT;\n        if(index < 0 ) {\n            index= -index;\n        }\n        if(bucket[index]==null) {\n            return found;\n        }\n        Iterator iterator = bucket[index].listIterator();\n        while(iterator.hasNext()){\n            if(iterator.next().equals((new Data(key,null)))) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    @Override\n    public boolean containsValue(Object value) {\n        for(int i = 0 ; i < SLOT;i++){\n            if(bucket[i]!=null){\n                Iterator iterator = bucket[i].listIterator();\n                while(iterator.hasNext()){\n                    if(((Data)iterator.next()).getValue().equals(value)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    @Override\n    public Object get(Object key) {\n        Data getData = new Data(key, null);\n        int index = key.hashCode() % SLOT;\n        if (index < 0) {\n            index = -index;\n        }\n        if (bucket[index] == null) {\n            return null;\n        }\n        LinkedList linkedList = bucket[index];\n        ListIterator iterator = linkedList.listIterator();\n        while (iterator.hasNext()) {\n            Data data = (Data) iterator.next();\n            if (data.equals(getData)) {\n                return data.value;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Object put(Object key, Object value) {\n        Object result = new Object();\n        Data putdata = new Data(key, value);\n        int index = key.hashCode() % 997;\n        if (index < 0) {\n            index = -index;\n        }\n        if (bucket[index] == null) {\n            bucket[index] = new LinkedList();\n        }\n        LinkedList linkedList = bucket[index];\n        ListIterator iterator = linkedList.listIterator();\n        boolean found = false;\n        while (iterator.hasNext()) {\n            Data data = (Data) iterator.next();\n            if (data.equals(putdata)) {\n                found = true;\n                result = data.value;\n                iterator.set(putdata);\n            }\n        }\n        if (!found) {\n            bucket[index].add(putdata);\n            size++;\n        }\n        return result;\n    }\n\n    @Override\n    public Object remove(Object key) {\n        Data removeData = new Data(key, null);\n        int index = key.hashCode() % SLOT;\n        if (index < 0) {\n            index = -index;\n        }\n        if (bucket[index] == null) {\n            return null;\n        }\n        LinkedList linkedList = bucket[index];\n        size--;\n        return linkedList.remove(removeData);\n    }\n\n    @Override\n    public void putAll(Map m) {\n        Set set = m.entrySet();\n        for(Object o : set){\n            Map.Entry oo = (Map.Entry)o;\n            put(oo.getKey(),oo.getValue());\n        }\n    }\n\n    @Override\n    public void clear() {\n        for(Object key : keySet()){\n            remove(key);\n        }\n        size=0;\n    }\n\n    @Override\n    public Set keySet() {\n        Set set = new HashSet();\n        for(int i = 0 ; i< SLOT ;i++){\n            if(bucket[i]!=null){\n                Iterator iterator = bucket[i].listIterator();\n                while(iterator.hasNext()){\n                    set.add(((Data)iterator.next()).getKey());\n                }\n            }\n        }\n        return set;\n    }\n\n    @Override\n    public Collection values() {\n        List list = new ArrayList();\n        for(int i = 0 ; i< SLOT ;i++){\n            if(bucket[i]!=null){\n                Iterator iterator = bucket[i].listIterator();\n                while(iterator.hasNext()){\n                    list.add(((Data)iterator.next()).getValue());\n                }\n            }\n        }\n        return list;\n    }\n\n    @Override\n    public Set<Entry> entrySet() {\n        Set set = new HashSet();\n        for(int i = 0 ; i< SLOT ;i++){\n            if(bucket[i]!=null){\n                Iterator iterator = bucket[i].listIterator();\n                while(iterator.hasNext()){\n                    set.add(iterator.next());\n                }\n            }\n        }\n        return set;\n    }\n\n    @Override\n    public int hashCode() {\n        int j = 0;\n        for (int i = 0; i < SLOT; i++) {\n            if (bucket[i] != null) {\n                Iterator iterator = bucket[i].iterator();\n                Data data = (Data) iterator.next();\n                j = j + data.getKey().hashCode();\n            }\n        }\n        return j;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"[\").append(\"\\n\");\n        for(int i = 0 ; i < SLOT;i++){\n            if(bucket[i]!=null){\n                Iterator iterator = bucket[i].listIterator();\n                while(iterator.hasNext()){\n                    Data data = (Data)iterator.next();\n                    builder.append(data.getKey()).append(\":\").append(data.getValue()).append(\"\\n\");\n                }\n            }\n        }\n        builder.append(\"]\");\n        return builder.toString();\n    }\n\n}\n```\n\n","slug":"mymap","published":1,"updated":"2024-02-29T09:09:55.110Z","_id":"ckzvdpfg00026keuq8l4d5htc","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/image/blog/%E6%9C%AA%E5%91%BD%E5%90%8D1645368182.png?raw=true\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.susu.utils;<br><br><span class=\"hljs-keyword\">import</span> java.util.*;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * &lt;p&gt;Description: Implement the map interface and use the hash principle&lt;/p&gt;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;实现Map接口并利用散列原理&lt;/p&gt;</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> sujay</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@version</span> 21:59 2022/2/20</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@see</span> Map</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@since</span> JDK1.8</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SujayMap</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Map</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        SujayMap hgcMap = <span class=\"hljs-keyword\">new</span> SujayMap();<br>        hgcMap.put(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>);<br>        hgcMap.put(<span class=\"hljs-string\">&quot;asd&quot;</span>,<span class=\"hljs-string\">&quot;211&quot;</span>);<br>        Set entrySet = hgcMap.entrySet();<br>        System.out.println(hgcMap);<br>        Data entry = (Data) entrySet.iterator().next();<br>        entry.setKey(<span class=\"hljs-string\">&quot;123123&quot;</span>);<br>        System.out.println(entry);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> SLOT = <span class=\"hljs-number\">997</span>;<br><br>    <span class=\"hljs-keyword\">private</span> LinkedList[] bucket = <span class=\"hljs-keyword\">new</span> LinkedList[SLOT];<br><br>    <span class=\"hljs-keyword\">int</span> size = <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Data</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Entry</span>, <span class=\"hljs-title\">Comparable</span> </span>&#123;<br>        Object key, value;<br><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Data</span><span class=\"hljs-params\">(Object key, Object value)</span> </span>&#123;<br>            <span class=\"hljs-keyword\">this</span>.key = key;<br>            <span class=\"hljs-keyword\">this</span>.value = value;<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">compareTo</span><span class=\"hljs-params\">(Object o)</span> </span>&#123;<br>            Data data = (Data) o;<br>            <span class=\"hljs-keyword\">return</span> ((Comparable) key).compareTo(data.key);<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">getKey</span><span class=\"hljs-params\">()</span> </span>&#123;<br>            <span class=\"hljs-keyword\">return</span> key;<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">getValue</span><span class=\"hljs-params\">()</span> </span>&#123;<br>            <span class=\"hljs-keyword\">return</span> value;<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">setValue</span><span class=\"hljs-params\">(Object value)</span> </span>&#123;<br>            Object result = <span class=\"hljs-keyword\">this</span>.value;<br>            <span class=\"hljs-keyword\">this</span>.value = value;<br>            <span class=\"hljs-keyword\">return</span> result;<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">equals</span><span class=\"hljs-params\">(Object obj)</span> </span>&#123;<br>            Data data = (Data) obj;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.key.equals(data.key);<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;[&quot;</span> + key + <span class=\"hljs-string\">&quot;:&quot;</span> + value + <span class=\"hljs-string\">&quot;]&quot;</span>;<br>        &#125;<br><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setKey</span><span class=\"hljs-params\">(Object key)</span> </span>&#123;<br>            <span class=\"hljs-keyword\">this</span>.key = key;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">size</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> size;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> size == <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">containsKey</span><span class=\"hljs-params\">(Object key)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">boolean</span> found = <span class=\"hljs-keyword\">false</span>;<br>        <span class=\"hljs-keyword\">int</span> index = key.hashCode() % SLOT;<br>        <span class=\"hljs-keyword\">if</span>(index &lt; <span class=\"hljs-number\">0</span> ) &#123;<br>            index= -index;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(bucket[index]==<span class=\"hljs-keyword\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> found;<br>        &#125;<br>        Iterator iterator = bucket[index].listIterator();<br>        <span class=\"hljs-keyword\">while</span>(iterator.hasNext())&#123;<br>            <span class=\"hljs-keyword\">if</span>(iterator.next().equals((<span class=\"hljs-keyword\">new</span> Data(key,<span class=\"hljs-keyword\">null</span>)))) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">containsValue</span><span class=\"hljs-params\">(Object value)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span> ; i &lt; SLOT;i++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(bucket[i]!=<span class=\"hljs-keyword\">null</span>)&#123;<br>                Iterator iterator = bucket[i].listIterator();<br>                <span class=\"hljs-keyword\">while</span>(iterator.hasNext())&#123;<br>                    <span class=\"hljs-keyword\">if</span>(((Data)iterator.next()).getValue().equals(value)) &#123;<br>                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">get</span><span class=\"hljs-params\">(Object key)</span> </span>&#123;<br>        Data getData = <span class=\"hljs-keyword\">new</span> Data(key, <span class=\"hljs-keyword\">null</span>);<br>        <span class=\"hljs-keyword\">int</span> index = key.hashCode() % SLOT;<br>        <span class=\"hljs-keyword\">if</span> (index &lt; <span class=\"hljs-number\">0</span>) &#123;<br>            index = -index;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (bucket[index] == <span class=\"hljs-keyword\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>        &#125;<br>        LinkedList linkedList = bucket[index];<br>        ListIterator iterator = linkedList.listIterator();<br>        <span class=\"hljs-keyword\">while</span> (iterator.hasNext()) &#123;<br>            Data data = (Data) iterator.next();<br>            <span class=\"hljs-keyword\">if</span> (data.equals(getData)) &#123;<br>                <span class=\"hljs-keyword\">return</span> data.value;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">put</span><span class=\"hljs-params\">(Object key, Object value)</span> </span>&#123;<br>        Object result = <span class=\"hljs-keyword\">new</span> Object();<br>        Data putdata = <span class=\"hljs-keyword\">new</span> Data(key, value);<br>        <span class=\"hljs-keyword\">int</span> index = key.hashCode() % <span class=\"hljs-number\">997</span>;<br>        <span class=\"hljs-keyword\">if</span> (index &lt; <span class=\"hljs-number\">0</span>) &#123;<br>            index = -index;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (bucket[index] == <span class=\"hljs-keyword\">null</span>) &#123;<br>            bucket[index] = <span class=\"hljs-keyword\">new</span> LinkedList();<br>        &#125;<br>        LinkedList linkedList = bucket[index];<br>        ListIterator iterator = linkedList.listIterator();<br>        <span class=\"hljs-keyword\">boolean</span> found = <span class=\"hljs-keyword\">false</span>;<br>        <span class=\"hljs-keyword\">while</span> (iterator.hasNext()) &#123;<br>            Data data = (Data) iterator.next();<br>            <span class=\"hljs-keyword\">if</span> (data.equals(putdata)) &#123;<br>                found = <span class=\"hljs-keyword\">true</span>;<br>                result = data.value;<br>                iterator.set(putdata);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (!found) &#123;<br>            bucket[index].add(putdata);<br>            size++;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">remove</span><span class=\"hljs-params\">(Object key)</span> </span>&#123;<br>        Data removeData = <span class=\"hljs-keyword\">new</span> Data(key, <span class=\"hljs-keyword\">null</span>);<br>        <span class=\"hljs-keyword\">int</span> index = key.hashCode() % SLOT;<br>        <span class=\"hljs-keyword\">if</span> (index &lt; <span class=\"hljs-number\">0</span>) &#123;<br>            index = -index;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (bucket[index] == <span class=\"hljs-keyword\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>        &#125;<br>        LinkedList linkedList = bucket[index];<br>        size--;<br>        <span class=\"hljs-keyword\">return</span> linkedList.remove(removeData);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">putAll</span><span class=\"hljs-params\">(Map m)</span> </span>&#123;<br>        Set set = m.entrySet();<br>        <span class=\"hljs-keyword\">for</span>(Object o : set)&#123;<br>            Map.Entry oo = (Map.Entry)o;<br>            put(oo.getKey(),oo.getValue());<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">clear</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">for</span>(Object key : keySet())&#123;<br>            remove(key);<br>        &#125;<br>        size=<span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Set <span class=\"hljs-title\">keySet</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        Set set = <span class=\"hljs-keyword\">new</span> HashSet();<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span> ; i&lt; SLOT ;i++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(bucket[i]!=<span class=\"hljs-keyword\">null</span>)&#123;<br>                Iterator iterator = bucket[i].listIterator();<br>                <span class=\"hljs-keyword\">while</span>(iterator.hasNext())&#123;<br>                    set.add(((Data)iterator.next()).getKey());<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> set;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Collection <span class=\"hljs-title\">values</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        List list = <span class=\"hljs-keyword\">new</span> ArrayList();<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span> ; i&lt; SLOT ;i++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(bucket[i]!=<span class=\"hljs-keyword\">null</span>)&#123;<br>                Iterator iterator = bucket[i].listIterator();<br>                <span class=\"hljs-keyword\">while</span>(iterator.hasNext())&#123;<br>                    list.add(((Data)iterator.next()).getValue());<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> list;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Set&lt;Entry&gt; <span class=\"hljs-title\">entrySet</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        Set set = <span class=\"hljs-keyword\">new</span> HashSet();<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span> ; i&lt; SLOT ;i++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(bucket[i]!=<span class=\"hljs-keyword\">null</span>)&#123;<br>                Iterator iterator = bucket[i].listIterator();<br>                <span class=\"hljs-keyword\">while</span>(iterator.hasNext())&#123;<br>                    set.add(iterator.next());<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> set;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">hashCode</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; SLOT; i++) &#123;<br>            <span class=\"hljs-keyword\">if</span> (bucket[i] != <span class=\"hljs-keyword\">null</span>) &#123;<br>                Iterator iterator = bucket[i].iterator();<br>                Data data = (Data) iterator.next();<br>                j = j + data.getKey().hashCode();<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> j;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        StringBuilder builder = <span class=\"hljs-keyword\">new</span> StringBuilder();<br>        builder.append(<span class=\"hljs-string\">&quot;[&quot;</span>).append(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span> ; i &lt; SLOT;i++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(bucket[i]!=<span class=\"hljs-keyword\">null</span>)&#123;<br>                Iterator iterator = bucket[i].listIterator();<br>                <span class=\"hljs-keyword\">while</span>(iterator.hasNext())&#123;<br>                    Data data = (Data)iterator.next();<br>                    builder.append(data.getKey()).append(<span class=\"hljs-string\">&quot;:&quot;</span>).append(data.getValue()).append(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        builder.append(<span class=\"hljs-string\">&quot;]&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> builder.toString();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"more":"<p><img src=\"/image/blog/%E6%9C%AA%E5%91%BD%E5%90%8D1645368182.png?raw=true\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.susu.utils;<br><br><span class=\"hljs-keyword\">import</span> java.util.*;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * &lt;p&gt;Description: Implement the map interface and use the hash principle&lt;/p&gt;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;实现Map接口并利用散列原理&lt;/p&gt;</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> sujay</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@version</span> 21:59 2022/2/20</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@see</span> Map</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@since</span> JDK1.8</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SujayMap</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Map</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        SujayMap hgcMap = <span class=\"hljs-keyword\">new</span> SujayMap();<br>        hgcMap.put(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>);<br>        hgcMap.put(<span class=\"hljs-string\">&quot;asd&quot;</span>,<span class=\"hljs-string\">&quot;211&quot;</span>);<br>        Set entrySet = hgcMap.entrySet();<br>        System.out.println(hgcMap);<br>        Data entry = (Data) entrySet.iterator().next();<br>        entry.setKey(<span class=\"hljs-string\">&quot;123123&quot;</span>);<br>        System.out.println(entry);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> SLOT = <span class=\"hljs-number\">997</span>;<br><br>    <span class=\"hljs-keyword\">private</span> LinkedList[] bucket = <span class=\"hljs-keyword\">new</span> LinkedList[SLOT];<br><br>    <span class=\"hljs-keyword\">int</span> size = <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Data</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Entry</span>, <span class=\"hljs-title\">Comparable</span> </span>&#123;<br>        Object key, value;<br><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Data</span><span class=\"hljs-params\">(Object key, Object value)</span> </span>&#123;<br>            <span class=\"hljs-keyword\">this</span>.key = key;<br>            <span class=\"hljs-keyword\">this</span>.value = value;<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">compareTo</span><span class=\"hljs-params\">(Object o)</span> </span>&#123;<br>            Data data = (Data) o;<br>            <span class=\"hljs-keyword\">return</span> ((Comparable) key).compareTo(data.key);<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">getKey</span><span class=\"hljs-params\">()</span> </span>&#123;<br>            <span class=\"hljs-keyword\">return</span> key;<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">getValue</span><span class=\"hljs-params\">()</span> </span>&#123;<br>            <span class=\"hljs-keyword\">return</span> value;<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">setValue</span><span class=\"hljs-params\">(Object value)</span> </span>&#123;<br>            Object result = <span class=\"hljs-keyword\">this</span>.value;<br>            <span class=\"hljs-keyword\">this</span>.value = value;<br>            <span class=\"hljs-keyword\">return</span> result;<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">equals</span><span class=\"hljs-params\">(Object obj)</span> </span>&#123;<br>            Data data = (Data) obj;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.key.equals(data.key);<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;[&quot;</span> + key + <span class=\"hljs-string\">&quot;:&quot;</span> + value + <span class=\"hljs-string\">&quot;]&quot;</span>;<br>        &#125;<br><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setKey</span><span class=\"hljs-params\">(Object key)</span> </span>&#123;<br>            <span class=\"hljs-keyword\">this</span>.key = key;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">size</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> size;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> size == <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">containsKey</span><span class=\"hljs-params\">(Object key)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">boolean</span> found = <span class=\"hljs-keyword\">false</span>;<br>        <span class=\"hljs-keyword\">int</span> index = key.hashCode() % SLOT;<br>        <span class=\"hljs-keyword\">if</span>(index &lt; <span class=\"hljs-number\">0</span> ) &#123;<br>            index= -index;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(bucket[index]==<span class=\"hljs-keyword\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> found;<br>        &#125;<br>        Iterator iterator = bucket[index].listIterator();<br>        <span class=\"hljs-keyword\">while</span>(iterator.hasNext())&#123;<br>            <span class=\"hljs-keyword\">if</span>(iterator.next().equals((<span class=\"hljs-keyword\">new</span> Data(key,<span class=\"hljs-keyword\">null</span>)))) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">containsValue</span><span class=\"hljs-params\">(Object value)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span> ; i &lt; SLOT;i++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(bucket[i]!=<span class=\"hljs-keyword\">null</span>)&#123;<br>                Iterator iterator = bucket[i].listIterator();<br>                <span class=\"hljs-keyword\">while</span>(iterator.hasNext())&#123;<br>                    <span class=\"hljs-keyword\">if</span>(((Data)iterator.next()).getValue().equals(value)) &#123;<br>                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">get</span><span class=\"hljs-params\">(Object key)</span> </span>&#123;<br>        Data getData = <span class=\"hljs-keyword\">new</span> Data(key, <span class=\"hljs-keyword\">null</span>);<br>        <span class=\"hljs-keyword\">int</span> index = key.hashCode() % SLOT;<br>        <span class=\"hljs-keyword\">if</span> (index &lt; <span class=\"hljs-number\">0</span>) &#123;<br>            index = -index;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (bucket[index] == <span class=\"hljs-keyword\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>        &#125;<br>        LinkedList linkedList = bucket[index];<br>        ListIterator iterator = linkedList.listIterator();<br>        <span class=\"hljs-keyword\">while</span> (iterator.hasNext()) &#123;<br>            Data data = (Data) iterator.next();<br>            <span class=\"hljs-keyword\">if</span> (data.equals(getData)) &#123;<br>                <span class=\"hljs-keyword\">return</span> data.value;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">put</span><span class=\"hljs-params\">(Object key, Object value)</span> </span>&#123;<br>        Object result = <span class=\"hljs-keyword\">new</span> Object();<br>        Data putdata = <span class=\"hljs-keyword\">new</span> Data(key, value);<br>        <span class=\"hljs-keyword\">int</span> index = key.hashCode() % <span class=\"hljs-number\">997</span>;<br>        <span class=\"hljs-keyword\">if</span> (index &lt; <span class=\"hljs-number\">0</span>) &#123;<br>            index = -index;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (bucket[index] == <span class=\"hljs-keyword\">null</span>) &#123;<br>            bucket[index] = <span class=\"hljs-keyword\">new</span> LinkedList();<br>        &#125;<br>        LinkedList linkedList = bucket[index];<br>        ListIterator iterator = linkedList.listIterator();<br>        <span class=\"hljs-keyword\">boolean</span> found = <span class=\"hljs-keyword\">false</span>;<br>        <span class=\"hljs-keyword\">while</span> (iterator.hasNext()) &#123;<br>            Data data = (Data) iterator.next();<br>            <span class=\"hljs-keyword\">if</span> (data.equals(putdata)) &#123;<br>                found = <span class=\"hljs-keyword\">true</span>;<br>                result = data.value;<br>                iterator.set(putdata);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (!found) &#123;<br>            bucket[index].add(putdata);<br>            size++;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">remove</span><span class=\"hljs-params\">(Object key)</span> </span>&#123;<br>        Data removeData = <span class=\"hljs-keyword\">new</span> Data(key, <span class=\"hljs-keyword\">null</span>);<br>        <span class=\"hljs-keyword\">int</span> index = key.hashCode() % SLOT;<br>        <span class=\"hljs-keyword\">if</span> (index &lt; <span class=\"hljs-number\">0</span>) &#123;<br>            index = -index;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (bucket[index] == <span class=\"hljs-keyword\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>        &#125;<br>        LinkedList linkedList = bucket[index];<br>        size--;<br>        <span class=\"hljs-keyword\">return</span> linkedList.remove(removeData);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">putAll</span><span class=\"hljs-params\">(Map m)</span> </span>&#123;<br>        Set set = m.entrySet();<br>        <span class=\"hljs-keyword\">for</span>(Object o : set)&#123;<br>            Map.Entry oo = (Map.Entry)o;<br>            put(oo.getKey(),oo.getValue());<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">clear</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">for</span>(Object key : keySet())&#123;<br>            remove(key);<br>        &#125;<br>        size=<span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Set <span class=\"hljs-title\">keySet</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        Set set = <span class=\"hljs-keyword\">new</span> HashSet();<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span> ; i&lt; SLOT ;i++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(bucket[i]!=<span class=\"hljs-keyword\">null</span>)&#123;<br>                Iterator iterator = bucket[i].listIterator();<br>                <span class=\"hljs-keyword\">while</span>(iterator.hasNext())&#123;<br>                    set.add(((Data)iterator.next()).getKey());<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> set;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Collection <span class=\"hljs-title\">values</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        List list = <span class=\"hljs-keyword\">new</span> ArrayList();<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span> ; i&lt; SLOT ;i++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(bucket[i]!=<span class=\"hljs-keyword\">null</span>)&#123;<br>                Iterator iterator = bucket[i].listIterator();<br>                <span class=\"hljs-keyword\">while</span>(iterator.hasNext())&#123;<br>                    list.add(((Data)iterator.next()).getValue());<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> list;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Set&lt;Entry&gt; <span class=\"hljs-title\">entrySet</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        Set set = <span class=\"hljs-keyword\">new</span> HashSet();<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span> ; i&lt; SLOT ;i++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(bucket[i]!=<span class=\"hljs-keyword\">null</span>)&#123;<br>                Iterator iterator = bucket[i].listIterator();<br>                <span class=\"hljs-keyword\">while</span>(iterator.hasNext())&#123;<br>                    set.add(iterator.next());<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> set;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">hashCode</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; SLOT; i++) &#123;<br>            <span class=\"hljs-keyword\">if</span> (bucket[i] != <span class=\"hljs-keyword\">null</span>) &#123;<br>                Iterator iterator = bucket[i].iterator();<br>                Data data = (Data) iterator.next();<br>                j = j + data.getKey().hashCode();<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> j;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        StringBuilder builder = <span class=\"hljs-keyword\">new</span> StringBuilder();<br>        builder.append(<span class=\"hljs-string\">&quot;[&quot;</span>).append(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span> ; i &lt; SLOT;i++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(bucket[i]!=<span class=\"hljs-keyword\">null</span>)&#123;<br>                Iterator iterator = bucket[i].listIterator();<br>                <span class=\"hljs-keyword\">while</span>(iterator.hasNext())&#123;<br>                    Data data = (Data)iterator.next();<br>                    builder.append(data.getKey()).append(<span class=\"hljs-string\">&quot;:&quot;</span>).append(data.getValue()).append(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        builder.append(<span class=\"hljs-string\">&quot;]&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> builder.toString();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"分布式事务","excerpt":"分布式事务","date":"2021-04-21T01:10:03.000Z","cover":"/image/blog/seata.png?raw=true","_content":"\n\n\n# Seata\n\n\n\n# 事务的解决方案\n\n## 方案1：2PC\n\n2PC，Two-phase commit protocol，即 **两阶段提交协议**。它引入了一个 **事务协调者** 角色，来管理各个 **参与者**（就是各数据库资源）<br />整体分为两个阶段，分别是 **准备阶段** 和 **提交/回滚阶段**\n\n### 第一个阶段：准备阶段\n\n![image.png](/image/blog/%E4%BA%8B%E5%8A%A11.png?raw=true)\n\n1. 由事务协调者给每个参与者发送准备命令，每个参与者收到命令之后会执行相关事务操作，你可以认为除了事务的提交啥都做了。\n1. 然后每个参与者会返回响应告知协调者自己是否准备成功。\n1. 协调者收到每个参与者的响应之后就进入第二阶段，根据收集的响应，如果有一个参与者响应准备失败那么就向所有参与者发送回滚命令，反之发送提交命令\n\n\n### 第二个阶段：提交 / 回滚阶段\n\n![image.png](/image/blog/%E4%BA%8B%E5%8A%A12.png?raw=true)\n\n这个协议其实很符合正常的思维，就像上课点名的时候，老师就是协调者的角色，学生都是参与者。\n\n老师一个一个的点名，我们一个一个的喊到，最后老师收到所有同学的到之后就开始了今天的讲课。<br />而和点名有所不同的是，老师发现某几个学生不在还是能继续上课，而我们的事务可不允许这样。\n\n事务协调者在第一阶段未收到个别参与者的响应，则等待一定时间就会认为事务失败，会发送回滚命令，所以在 2PC 中事务协调者有超时机制。\n\n\n\n### 2PC 的优缺点\n\n2PC 的优点是能利用数据库自身的功能进行本地事务的提交和回滚，也就是说提交和回滚实际操作不需要我们实现，不侵入业务逻辑由数据库完成，在之后讲解 TCC 之后相信大家对这点会有所体会。\n\n2PC 主要有 三大缺点：同步阻塞、单点故障、数据不一致 问题\n\n**同步阻塞**\n\n可以看到在第一阶段执行了准备命令后，我们每个本地资源都处于锁定状态，因为除了事务的提交之外啥都做了。所以这时候如果本地的其他请求要访问同一个资源，比如要修改商品表 id 等于 100 的那条数据，那么此时是被阻塞住的，必须等待前面事务的完结，收到提交/回滚命令执行完释放资源后，这个请求才能得以继续。所以假设这个分布式事务涉及到很多参与者，然后有些参与者处理又特别复杂，特别慢，那么那些处理快的节点也得等着，所以说效率有点低。\n\n**单点故障**\n\n可以看到这个单点就是协调者，如果协调者挂了整个事务就执行不下去了。如果协调者在发送准备命令前挂了还行，毕竟每个资源都还未执行命令，那么资源是没被锁定的。可怕的是在发送完准备命令之后挂了，这时候每个本地资源都执行完处于锁定状态了，都杵着了，这就很僵硬了，如果是某个热点资源都阻塞了，这估计就要GG了。\n\n**数据不一致问题**\n\n因为协调者和参与者之间的交流是经过网络的，而网络有时候就会抽风的或者发生局部网络异常。那么就有可能导致某些参与者无法收到协调者的请求，而某些收到了。比如是提交请求，然后那些收到命令的参与者就提交事务了，此时就产生了数据不一致的问题\n\n### 2PC小结\n\n它是一个 同步阻塞 的 强一致性两阶段提交协议，分别是准备阶段和提交/回滚阶段。<br />2PC 的优势在于对业务没有侵入，可以利用数据库自身机制来进行事务的提交和回滚。<br />它的缺点：是一个同步阻塞协议，会导致高延迟和性能的下降，并且存在协调者单点故障问题，极端情况下会有数据不一致的问题<br />当然这只是协议，具体的落地还是可以变通了，比如协调者单点问题，我就搞个主从来实现协调者，对吧<br />分布式数据库的 2PC 改进模型<br />可能有些人对分布式数据库不熟悉，没有关系，我们主要学的是思想，看看人家的思路。\n\n简单的讲下 Percolator 模型，它是基于分布式存储系统 BigTable 建立的模型，BigTable 是啥也不清楚的同学没有关系影响不大。\n\n还是拿转账的例子来说，我现在有 200 块钱，你现在有 100 块钱，为了突出重点我也不按正常的结构来画这个表<br />![image.png](/image/blog/%E4%BA%8B%E5%8A%A13.png?raw=true)<br />然后我要转 100 块给你。<br />![image.png](/image/blog/%E4%BA%8B%E5%8A%A14.png?raw=true)\n\n1. 此时事务管理器发起了准备请求，然后我账上的钱就少了，你账上的钱就多了，而且事务管理器还记录下这次操作的日志\n1. 此时的数据还是私有版本，别的事务是读不到的，简单的理解 Lock 上有值就还是私有的。可以看到我的记录Lock 标记的是 PK，你的记录标记的是指向我的记录指针，这个 PK是随机选择的\n1. 然后事务管理器会向被选择作为 PK 的那条记录发起提交指令\n\n此时就会把我的记录的锁给抹去了，这等于我的记录不再是私有版本了，别的事务就都能访问了。\n\n那你的记录上还有锁啊？不用更新吗？<br />答案是：不需要及时更新，因为访问你的这条记录的时候会去根据指针找我的那个记录，发现记录已经提交了所以你的记录就可以被访问了。\n\n有人说这效率不就差了，每次都要去找一次，别急。后台会有个线程来扫描，然后更新把锁记录给去了。这不就稳了嘛。\n\n\n\n### 相比于 2PC 的改进\n\n1. 首先 Percolator 在提交阶段不需要和所有的参与者交互，只需要和一个参与者打交道，所以这个提交是原子的！解决了数据不一致问题\n1. 然后事务管理器会记录操作日志，这样当事务管理器挂了之后选举的新事务管理器就可以通过日志来得知当前的情况从而继续工作，解决了单点故障问题\n1. 并且 Percolator 还会有后台线程，会扫描事务状况，在事务管理器宕机之后会回滚各个参与者上的事务。\n\n> 可以看到相对于 2PC 还是做了很多改进的，也是巧妙的。 其实分布式数据库还有别的事务模型，有兴趣的同学可以自行了解\n\n\n---\n\n\n### XA 规范\n\n让我们再回来 2PC，既然说到 2PC 了那么也简单的提一下 XA 规范，XA 规范是基于两阶段提交的，它实现了两阶段提交协议。<br />在说 XA 规范之前又得先提一下 DTP （Distributed Transaction Processing）模型，这模型规范了分布式事务的模型设计。<br />而 XA 规范又约束了 DTP 模型中的事务管理器（TM） 和资源管理器（RM）之间的交互，简单的说就是你们两之间要按照一定的格式规范来交流！<br />我们先来看下 XA 约束下的 DTP 模型。<br />![image.png](/image/blog/%E4%BA%8B%E5%8A%A15.png?raw=true)\n\nAP 应用程序，就是我们的应用，事务的发起者。<br />RM 资源管理器，简单的认为就是数据库，具备事务提交和回滚能力，对应我们上面的 2PC 就是参与者。<br />TM 事务管理器，就是协调者了，和每个 RM 通信。\n\n简单的说就是 AP 通过 TM 来定义事务操作，TM 和 RM 之间会通过 XA 规范进行通信，执行两阶段提交，而 AP 的资源是从 RM 拿的。\n\n从模型上看有三个角色，而实际实现可以由一个角色实现两个功能，比如 AP 来实现 TM 的功能，TM 没必要抽出来单独部署。\n\n### MySQL XA\n\n知晓了 DTP 之后，我们就来看看 XA 在 MySQL 中是如何操作的，不过只有 InnoDB 支持。\n\n简单的说就是要先定义一个全局唯一的 XID，然后告知每个事务分支要进行的操作。<br />可以看到图中执行了两个操作，分别是改名字和插入日志，等于先注册下要做的事情，通过 XA START XID 和 XA END XID 来包裹要执行的 SQL。<br />![image.png](/image/blog/%E4%BA%8B%E5%8A%A16.png?raw=true)<br />然后需要发送准备命令，来执行第一阶段，也就是除了事务的提交啥都干了的阶段。<br />![image.png](/image/blog/%E4%BA%8B%E5%8A%A17.png?raw=true)<br />然后根据准备的情况来选择执行提交事务命令还是回滚事务命令。<br />![image.png](/image/blog/%E4%BA%8B%E5%8A%A18.png?raw=true)<br />基本上就是这么个流程，不过 MySQL XA 的性能不高这点是需要注意的。\n\n可以看到虽说 2PC 有缺点，但是还是有基于 2PC 的落地实现的，而 3PC 的引出是为了解决 2PC 的一些缺点，但是它整体下来开销更大，也解决不了网络分区的问题，我也没有找到 3PC 的落地实现。\n\n不过我还是稍微提一下，知晓一下就行，纯理论\n\n\n## 方案2：3PC\n\n3PC 的引入是为了解决 2PC 同步阻塞和减少数据不一致的情况。<br />3PC 也就是多了一个阶段，一个询问的阶段，分别是** 准备、预提交、提交** 这三个阶段\n\n1. 准备阶段单纯就是协调者去访问参与者，类似于你还好吗？能接请求不。\n1. 预提交其实就是 2PC 的准备阶段，除了事务的提交啥都干了。\n1. 提交阶段和 2PC 的提交一致。\n\n![image.png](/image/blog/%E4%BA%8B%E5%8A%A19.png?raw=true)<br />3PC 多了一个阶段其实就是在执行事务之前来确认参与者是否正常，防止个别参与者不正常的情况下，其他参与者都执行了事务，锁定资源。出发点是好的，**但是绝大部分情况下肯定是正常的，所以每次都多了一个交互阶段就很不划算**。\n\n然后 3**PC 在参与者处也引入了超时机制，这样在协调者挂了的情况下，如果已经到了提交阶段了，参与者等半天没收到协调者的情况的话就会自动提交事务**。\n\n不过万一协调者发的是回滚命令呢？你看这就出错了，数据不一致了。\n\n还有维基百科上说 2PC 参与者准备阶段之后，如果协调者挂了，参与者是无法得知整体的情况的，因为大局是协调者掌控的，所以参与者相互之间的状况它们不清楚。而 3PC 经过了第一阶段的确认，即使协调者挂了参与者也知道自己所处预提交阶段是因为已经得到准备阶段所有参与者的认可了。\n\n简单的说就像加了个围栏，使得各参与者的状态得以统一<br />[<br />](https://blog.csdn.net/QiuHaoqian/article/details/111572037)\n\n### 小结 2PC 和 3PC\n\n从上面已经知晓了 2PC 是一个强一致性的同步阻塞协议，性能已经是比较差的了。\n\n而 3PC 的出发点是为了解决 2PC 的缺点，但是多了一个阶段就多了一次通讯的开销，而且是绝大部分情况下无用的通讯。虽说引入参与者超时来解决协调者挂了的阻塞问题，但是数据还是会不一致。\n\n可以看到 3PC 的引入并没什么实际突破，而且性能更差了，所以实际只有 2PC 的落地实现\n\n> 再提一下，2PC 还是 3PC 都是协议，可以认为是一种指导思想，和真正的落地还是有差别的\n\n![image.png](/image/blog/%E4%BA%8B%E5%8A%A110.png?raw=true)\n\n## 方案3：TCC\n\n不知道大家注意到没，不管是 2PC 还是 3PC 都是依赖于数据库的事务提交和回滚。\n\n而有时候一些业务它不仅仅涉及到数据库，可能是发送一条短信，也可能是上传一张图片。所以说事务的提交和回滚就得提升到业务层面而不是数据库层面了。\n\n而** TCC 就是一种业务层面或者是应用层的两阶段提交**\n\nTCC 分为指代 **Try、Confirm、Cancel** ，也就是 业务层面需要写对应的三个方法，主要用于跨数据库、跨服务的业务操作的数据一致性问题。\n\nTCC 分为两个阶段：\n\n1. 第一阶段是资源检查预留阶段即 Try\n1. 第二阶段是提交或回滚，如果是提交的话就是执行真正的业务操作，如果是回滚则是执行预留资源的取消，恢复初始状态\n\n比如有一个扣款服务，我需要写 **Try 方法，用来冻结扣款资金**，还需要一个 **Confirm 方法来执行真正的扣款**，最后还需要提供 **Cancel 来进行冻结操作的回滚**，对应的一个事务的所有服务都需要提供这三个方法。\n\n可以看到本来就一个方法，现在需要膨胀成三个方法，所以说** TCC 对业务有很大的侵入**，像如果没有冻结的那个字段，还需要改表结构。\n\n我们来看下流程<br />![image.png](/image/blog/%E4%BA%8B%E5%8A%A111.png?raw=true)<br />虽说对业务有侵入，但是 TCC 没有资源的阻塞，每一个方法都是直接提交事务的，如果出错是通过业务层面的 Cancel 来进行补偿，所以也称补偿性事务方法。\n\n这里有人说那要是所有人 Try 都成功了，都执行 Comfirm 了，但是个别 Confirm 失败了怎么办？\n\n这时候只能是不停地重试调失败了的 Confirm 直到成功为止，如果真的不行只能记录下来，到时候人工介入了\n\n### TCC 的注意点\n\n这几个点很关键，在实现的时候一定得注意了<br />![image.png](/image/blog/%E4%BA%8B%E5%8A%A112.png?raw=true)<br />**幂等问题**<br />因为网络调用无法保证请求一定能到达，所以都会有重调机制，因此对于 Try、Confirm、Cancel 三个方法都需要幂等实现，避免重复执行产生错误。\n\n**空回滚问题**<br />这个问题是指的是 Try 方法由于网络问题没收到超时了，此时事务管理器就会发出 Cancel 命令，那么需要支持 Cancel 在未执行 Try 的情况下能正常的 Cancel。\n\n**悬挂问题**<br />这个问题也是指 Try 方法由于网络阻塞超时触发了事务管理器发出了 Cancel 命令，但是执行了 Cancel 命令之后 Try 请求到了，你说气不气。这都 Cancel 了你来个 Try，对于事务管理器来说这时候事务已经是结束了的，这冻结操作就被“悬挂”了，所以空回滚之后还得记录一下，防止 Try 的再调用<br />[<br />](https://blog.csdn.net/QiuHaoqian/article/details/111572037)\n\n### TCC 变体\n\n上面我们说的是通用型的 TCC，它需要改造以前的实现，但是有一种情况是无法改造的，就是你调用的是别的公司的接口。\n\n**没有 Try 的 TCC**\n\n比如坐飞机需要换乘，换乘的又是不同的航空公司，比如从 A 飞到 B，再从 B 飞到 C，只有 A - B 和 B - C 都买到票了才有意义。\n\n这时候的选择就没得 Try 了，直接调用航空公司的买票操作，当两个航空公司都买成功了那就直接成功了，如果某个公司买失败了，那就需要调用取消订票接口。\n\n也就是在第一阶段直接就执行完整个业务操作了，所以要重点关注回滚操作，如果回滚失败得有提醒，要人工介入等。\n\n这其实就是 TCC 的思想：\n\n1. 一阶段：直接执行真正的操作\n1. 二阶段：补偿一阶段的真正操作后果，如果一阶段都成功则不用执行\n\n![image.png](/image/blog/%E4%BA%8B%E5%8A%A113.png?raw=true)\n\n**利用可靠消息服务实现 异步 TCC**<br />这 TCC 还能异步？其实也是一种折中，比如某些服务很难改造，并且它又不会影响主业务决策，也就是它不那么重要，不需要及时的执行\n\n这时候可以引入可靠消息服务，通过消息服务来替代个别服务来进行 Try、Confirm、Cancel 。<br />Try 的时候只是写入消息，消息还不能被消费，Confirm 就是真正发消息的操作，Cancel 就是取消消息的发送。<br />这可靠消息服务其实就类似于等下要提到的事务消息，这个方案等于糅合了事务消息和 TCC。\n\n### TCC 小结\n\n可以看到 TCC 是通过业务代码来实现事务的提交和回滚，对业务的侵入较大，它是**业务层面的两阶段提交**。\n\n它的性能比 2PC 要高，因为不会有资源的阻塞，并且适用范围也大于 2PC，在实现上要注意上面提到的几个注意点\n\n它是业界比较常用的分布式事务实现方式，而且从变体也可以得知，**还是得看业务变通的，不是说你要用 TCC 一定就得死板的让所有的服务都改造成那三个方法**<br />[<br />](https://blog.csdn.net/QiuHaoqian/article/details/111572037)\n\n# 本地消息表\n\n本地消息就是利用了本地事务，会在数据库中存放一份本地事务消息表，在进行本地事务操作时加入了本地消息的插入，即将业务的执行和将消息放入消息表中的操作放在同一个事务中提交。\n\n这样本地事务执行成功的话，消息肯定也插入成功，然后再调用其他服务，如果调用成功就修改这条本地消息的状态。\n\n如果失败也不要紧，会有一个后台线程扫描，发现这些状态的消息，会一直调用相应的服务，一般会设置重试的次数，如果一直不行则特殊记录，待人工介入处理。\n\n可以看到还是很简单的，也是一种最大努力通知思想<br />![image.png](/image/blog/%E4%BA%8B%E5%8A%A114.png?raw=true)\n\n# Seata的实现\n\n## AT模式\n\nAT 模式就是两阶段提交，前面我们提到了两阶段提交有同步阻塞的问题，效率太低了，那 Seata 是怎么解决的呢？\n\nAT 的 一阶段直接就把事务提交了，直接释放了本地锁，这么草率直接提交的嘛？当然不是，这里和本地消息表有点类似，就是 利用本地事务，执行真正的事务操作中还会插入回滚日志，然后在一个事务中提交。\n\n这回滚日志怎么来的？\n\n通过框架代理 JDBC 的一些类，在执行 SQL 的时候解析 SQL 得到执行前的数据镜像，然后执行 SQL ，再得到执行后的数据镜像，然后把这些数据组装成回滚日志。\n\n再伴随的这个本地事务的提交把回滚日志也插入到数据库的 UNDO_LOG 表中(所以数据库需要有一张UNDO_LOG 表)。\n\n这波操作下来在一阶段就可以没有后顾之忧的提交事务了。\n\n然后一阶段如果成功，那么二阶段可以异步的删除那些回滚日志，如果一阶段失败那么可以通过回滚日志来反向补偿恢复。\n\n这时候有细心的同学想到了，万一中间有人改了这条数据怎么办？你这镜像就不对了啊？\n\n所以说还有个全局锁的概念，在事务提交前需要拿到全局锁（可以理解为对这条数据的锁），然后才能顺利提交本地事务。如果一直拿不到那就需要回滚本地事务了\n\n官网的示例很好，以下部分内容摘抄自 Seata 官网的示例：\n\n1. 有两个事务，分别是 tx1、和 tx2，分别对 a 表的 m 字段进行更新操作，m 的初始值 1000\n1. tx1 先开始，开启本地事务，拿到本地锁，更新操作 m = 1000 - 100 = 900。本地事务提交前，先拿到该记录的 全局锁 ，本地提交释放本地锁\n1. tx2 后开始，开启本地事务，拿到本地锁，更新操作 m = 900 - 100 = 800。本地事务提交前，尝试拿该记录的 全局锁 ，tx1 全局提交前，该记录的全局锁被 tx1 持有，tx2 需要重试等待全局锁 \n\n![image.png](/image/blog/%E4%BA%8B%E5%8A%A115.png?raw=true)<br />可以看到 tx2 的修改被阻塞了，之后重试拿到全局锁之后就能提交然后释放本地锁\n\n如果 tx1 的二阶段全局回滚，则 tx1 需要重新获取该数据的本地锁，进行反向补偿的更新操作，实现分支的回滚。<br />此时，如果 tx2 仍在等待该数据的全局锁，同时持有本地锁，则 tx1 的分支回滚会失败。分支的回滚会一直重试，直到 tx2 的全局锁等锁超时，放弃全局锁并回滚本地事务释放本地锁，tx1 的分支回滚最终成功<br />![image.png](/image/blog/%E4%BA%8B%E5%8A%A116.png?raw=true)<br />然后 **AT 模式默认全局是读未提交的隔离级别**，如果应用在特定场景下，必需要求全局的读已提交 ，可以通过 SELECT FOR UPDATE 语句的代理\n\n当然前提是你本地事务隔离级别是读已提交及以上\n\n## AT 模式小结\n\n1. 可以看到通过代理来无侵入的得到数据的前后镜像，组装成回滚日志伴随本地事务一起提交，解决了两阶段的同步阻塞问题\n1. 并且利用全局锁来实现写隔离\n1. 为了总体性能的考虑，默认是读未提交隔离级别，只代理了 SELECT FOR UPDATE 来进行读已提交的隔离\n\n这其实就是两阶段提交的变体实现\n\n## TCC 模式\n\n![image.png](/image/blog/%E4%BA%8B%E5%8A%A117.png?raw=true)\n\n### Saga 模式\n\n这个 Saga 是 Seata 提供的长事务解决方案，适用于业务流程多且长的情况下，这种情况如果要实现一般的 TCC 啥的可能得嵌套多个事务了。\n\n并且有些系统无法提供 TCC 这三种接口，比如老项目或者别人公司的，所以就搞了个 Saga 模式，这个 Saga 是在 1987 年 Hector & Kenneth 发表的论⽂中提出的。\n\n那 Saga 如何做呢？来看下这个图<br />![image.png](/image/blog/%E4%BA%8B%E5%8A%A118.png?raw=true)<br />假设有 N 个操作，直接从 T1 开始就是直接执行提交事务，然后再执行 T2，可以看到就是无锁的直接提交，到 T3 发现执行失败了，然后就进入 Compenstaing 阶段，开始一个一个倒回补偿了。\n\n思想就是: 一开始蒙着头干，别怂，出了问题咱们再一个一个改回去呗。\n\n可以看到这种情况是不保证事务的隔离性的，并且 Saga 也有 TCC 的一样的注意点，需要空补偿，防悬挂和幂等。\n\n而且极端情况下会因为数据被改变了导致无法回滚的情况。比如第一步给我打了 2 万块钱，我给取出来花了，这时候你回滚，我账上余额已经 0 了，你说怎么办嘛？难道给我还搞负的不成?\n\n这种情况只能在业务流程上入手，我写代码其实一直是这样写的，就拿买皮肤的场景来说，我都是先扣钱再给皮肤。假设先给皮肤扣钱失败了不就白给了嘛？这钱你来补啊？你觉得用户会来反馈说皮肤给了钱没扣嘛？可能有小机灵鬼说我到时候把皮肤给改回去，嘿嘿这种事情确实发生过，啧啧，被骂的真惨。\n\n所以正确的流程应该是先扣钱再给皮肤，钱到自己袋里先，皮肤没给成功用户自然而然会找过来，这时候再给他呗，虽说可能你写出了个 BUG ，但是还好不是个白给的 BUG。\n\n所以说这点在编码的时候还是得注意下的<br />[<br />](https://blog.csdn.net/QiuHaoqian/article/details/111572037)\n\n[<br />](https://blog.csdn.net/QiuHaoqian/article/details/111572037)\n\n# Seata的使用说明\n\n> [官网](http://seata.io/zh-cn/)\n\n## TC/TM/RM三大组件\n\n分布式事务的执行流程\n\n- TM开启分布式事务(TM向TC注册全局事务记录)\n- 换业务场景，编排数据库，服务等事务内资源（RM向TC汇报资源准备状态）\n- TM结束分布式事务，事务一阶段结束（TM通知TC提交/回滚分布式事务）\n- TC汇总事务信息，决定分布式事务是提交还是回滚\n- TC通知所有RM提交/回滚资源，事务二阶段结束。\n\n![image.png](/image/blog/seata1.png?raw=true)\n\n## 配置文件\n\n```json\nregistry {\n  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa\n  type = \"file\"\n  nacos {\n    application = \"seata-server\"\n    serverAddr = \"127.0.0.1:8848\"\n    group = \"SEATA_GROUP\"\n    namespace = \"\"\n    cluster = \"default\"\n    username = \"\"\n    password = \"\"\n  }\n  file {\n    name = \"file.conf\"\n  }\n}\n\nconfig {\n  # file、nacos 、apollo、zk、consul、etcd3\n  type = \"file\"\n\n  nacos {\n    serverAddr = \"127.0.0.1:8848\"\n    namespace = \"\"\n    group = \"SEATA_GROUP\"\n    username = \"\"\n    password = \"\"\n    dataId = \"seataServer.properties\"\n  }\n  file {\n    name = \"file.conf\"\n  }\n}\n\n```\n```json\n## transaction log store, only used in seata-server\nstore {\n  ## store mode: file、db、redis\n  mode = \"file\"\n  ## rsa decryption public key\n  publicKey = \"\"\n  ## file store property\n  file {\n    ## store location dir\n    dir = \"sessionStore\"\n    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions\n    maxBranchSessionSize = 16384\n    # globe session size , if exceeded throws exceptions\n    maxGlobalSessionSize = 512\n    # file buffer size , if exceeded allocate new buffer\n    fileWriteBufferCacheSize = 16384\n    # when recover batch read size\n    sessionReloadReadSize = 100\n    # async, sync\n    flushDiskMode = async\n  }\n\n  ## database store property\n  db {\n    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.\n    datasource = \"druid\"\n    ## mysql/oracle/postgresql/h2/oceanbase etc.\n    dbType = \"mysql\"\n    driverClassName = \"com.mysql.jdbc.Driver\"\n    ## if using mysql to store the data, recommend add rewriteBatchedStatements=true in jdbc connection param\n    url = \"jdbc:mysql://127.0.0.1:3306/seata?rewriteBatchedStatements=true\"\n    user = \"mysql\"\n    password = \"mysql\"\n    minConn = 5\n    maxConn = 100\n    globalTable = \"global_table\"\n    branchTable = \"branch_table\"\n    lockTable = \"lock_table\"\n    queryLimit = 100\n    maxWait = 5000\n  }\n\n  ## redis store property\n  redis {\n    ## redis mode: single、sentinel\n    mode = \"single\"\n    ## single mode property\n    single {\n      host = \"127.0.0.1\"\n      port = \"6379\"\n    }\n    ## sentinel mode property\n    sentinel {\n      masterName = \"\"\n      ## such as \"10.28.235.65:26379,10.28.235.65:26380,10.28.235.65:26381\"\n      sentinelHosts = \"\"\n    }\n    password = \"\"\n    database = \"0\"\n    minConn = 1\n    maxConn = 10\n    maxTotal = 100\n    queryLimit = 100\n  }\n}\n\n```\n```json\nregistry {\n  type = \"nacos\"\n\n  nacos {\n    application = \"seata-server\"\n    serverAddr = \"localhost:8848\"\n    group = \"SEATA_GROUP\"\n    namespace = \"4388013f-6618-4de0-bb88-8bf280069254\"\n    cluster = \"default\"\n    username = \"nacos\"\n    password = \"nacos\"\n  }\n}#   \n#   \nconfig {\n \n  type = \"nacos\"\n  nacos {\n    serverAddr = \"localhost:8848\"\n    namespace = \"4388013f-6618-4de0-bb88-8bf280069254\"\n    group = \"SEATA_GROUP\"\n    username = \"nacos\"\n    password = \"nacos\"\n    dataId = \"seataServer.properties\"\n  }\n}\n\n```\n![image.png](/image/blog/seata2.png?raw=true)\n```properties\ntransport.type=TCP\ntransport.server=NIO\ntransport.heartbeat=true\ntransport.enableClientBatchSendRequest=true\ntransport.threadFactory.bossThreadPrefix=NettyBoss\ntransport.threadFactory.workerThreadPrefix=NettyServerNIOWorker\ntransport.threadFactory.serverExecutorThreadPrefix=NettyServerBizHandler\ntransport.threadFactory.shareBossWorker=false\ntransport.threadFactory.clientSelectorThreadPrefix=NettyClientSelector\ntransport.threadFactory.clientSelectorThreadSize=1\ntransport.threadFactory.clientWorkerThreadPrefix=NettyClientWorkerThread\ntransport.threadFactory.bossThreadSize=1\ntransport.threadFactory.workerThreadSize=default\ntransport.shutdown.wait=3\ntransport.serialization=seata\ntransport.compressor=none\n\n# store\n#model改为db\nstore.mode=db\nstore.lock.mode=file\nstore.session.mode=file\n# store.publicKey=\"\"\nstore.file.dir=file_store/data\nstore.file.maxBranchSessionSize=16384\nstore.file.maxGlobalSessionSize=512\nstore.file.fileWriteBufferCacheSize=16384\nstore.file.flushDiskMode=async\nstore.file.sessionReloadReadSize=100\nstore.db.datasource=druid\nstore.db.dbType=mysql\n#修改数据驱动，这里是mysql8，使用mysql5的话请修改\nstore.db.driverClassName=com.mysql.cj.jdbc.Driver\n# 改为上面创建的seata服务数据库\nstore.db.url=jdbc:mysql://127.0.0.1:3306/seata?rewriteBatchedStatements=true&serverTimezone=UTC\n# 改为自己的数据库用户名\nstore.db.user=root\n# 改为自己的数据库密码\nstore.db.password=123456\nstore.db.minConn=5\nstore.db.maxConn=30\nstore.db.globalTable=global_table\nstore.db.branchTable=branch_table\nstore.db.distributedLockTable=distributed_lock\nstore.db.queryLimit=100\nstore.db.lockTable=lock_table\nstore.db.maxWait=5000\n# log\nlog.exceptionRate=100\n# metrics\nmetrics.enabled=false\nmetrics.registryType=compact\nmetrics.exporterList=prometheus\nmetrics.exporterPrometheusPort=9898\n# service\n# 自己命名一个vgroupMapping\nservice.vgroupMapping.fsp_tx_group=default\nservice.default.grouplist=127.0.0.1:8091\nservice.enableDegrade=false\nservice.disableGlobalTransaction=false\n# client\nclient.rm.asyncCommitBufferLimit=10000\nclient.rm.lock.retryInterval=10\nclient.rm.lock.retryTimes=30\nclient.rm.lock.retryPolicyBranchRollbackOnConflict=true\nclient.rm.reportRetryCount=5\nclient.rm.tableMetaCheckEnable=false\nclient.rm.tableMetaCheckerInterval=60000\nclient.rm.sqlParserType=druid\nclient.rm.reportSuccessEnable=false\nclient.rm.sagaBranchRegisterEnable=false\nclient.rm.tccActionInterceptorOrder=-2147482648\nclient.tm.commitRetryCount=5\nclient.tm.rollbackRetryCount=5\nclient.tm.defaultGlobalTransactionTimeout=60000\nclient.tm.degradeCheck=false\nclient.tm.degradeCheckAllowTimes=10\nclient.tm.degradeCheckPeriod=2000\nclient.tm.interceptorOrder=-2147482648\nclient.undo.dataValidation=true\nclient.undo.logSerialization=jackson\nclient.undo.onlyCareUpdateColumns=true\nclient.undo.logTable=undo_log\nclient.undo.compress.enable=true\nclient.undo.compress.type=zip\nclient.undo.compress.threshold=64k\n```\n\n## 执行SQL进行持久化\n![image.png](/image/blog/seata3.png?raw=true)\n```sql\n-- for AT mode you must to init this sql for you business database. the seata server not need it.\nCREATE TABLE IF NOT EXISTS `undo_log`\n(\n    `branch_id`     BIGINT       NOT NULL COMMENT 'branch transaction id',\n    `xid`           VARCHAR(128) NOT NULL COMMENT 'global transaction id',\n    `context`       VARCHAR(128) NOT NULL COMMENT 'undo_log context,such as serialization',\n    `rollback_info` LONGBLOB     NOT NULL COMMENT 'rollback info',\n    `log_status`    INT(11)      NOT NULL COMMENT '0:normal status,1:defense status',\n    `log_created`   DATETIME(6)  NOT NULL COMMENT 'create datetime',\n    `log_modified`  DATETIME(6)  NOT NULL COMMENT 'modify datetime',\n    UNIQUE KEY `ux_undo_log` (`xid`, `branch_id`)\n) ENGINE = InnoDB\n  AUTO_INCREMENT = 1\n  DEFAULT CHARSET = utf8mb4 COMMENT ='AT transaction mode undo table';\n-- -------------------------------- The script used when storeMode is 'db' --------------------------------\n-- the table to store GlobalSession data\nCREATE TABLE IF NOT EXISTS `global_table`\n(\n    `xid`                       VARCHAR(128) NOT NULL,\n    `transaction_id`            BIGINT,\n    `status`                    TINYINT      NOT NULL,\n    `application_id`            VARCHAR(32),\n    `transaction_service_group` VARCHAR(32),\n    `transaction_name`          VARCHAR(128),\n    `timeout`                   INT,\n    `begin_time`                BIGINT,\n    `application_data`          VARCHAR(2000),\n    `gmt_create`                DATETIME,\n    `gmt_modified`              DATETIME,\n    PRIMARY KEY (`xid`),\n    KEY `idx_status_gmt_modified` (`status` , `gmt_modified`),\n    KEY `idx_transaction_id` (`transaction_id`)\n) ENGINE = InnoDB\n  DEFAULT CHARSET = utf8mb4;\n\n-- the table to store BranchSession data\nCREATE TABLE IF NOT EXISTS `branch_table`\n(\n    `branch_id`         BIGINT       NOT NULL,\n    `xid`               VARCHAR(128) NOT NULL,\n    `transaction_id`    BIGINT,\n    `resource_group_id` VARCHAR(32),\n    `resource_id`       VARCHAR(256),\n    `branch_type`       VARCHAR(8),\n    `status`            TINYINT,\n    `client_id`         VARCHAR(64),\n    `application_data`  VARCHAR(2000),\n    `gmt_create`        DATETIME(6),\n    `gmt_modified`      DATETIME(6),\n    PRIMARY KEY (`branch_id`),\n    KEY `idx_xid` (`xid`)\n) ENGINE = InnoDB\n  DEFAULT CHARSET = utf8mb4;\n\n-- the table to store lock data\nCREATE TABLE IF NOT EXISTS `lock_table`\n(\n    `row_key`        VARCHAR(128) NOT NULL,\n    `xid`            VARCHAR(128),\n    `transaction_id` BIGINT,\n    `branch_id`      BIGINT       NOT NULL,\n    `resource_id`    VARCHAR(256),\n    `table_name`     VARCHAR(32),\n    `pk`             VARCHAR(36),\n    `status`         TINYINT      NOT NULL DEFAULT '0' COMMENT '0:locked ,1:rollbacking',\n    `gmt_create`     DATETIME,\n    `gmt_modified`   DATETIME,\n    PRIMARY KEY (`row_key`),\n    KEY `idx_status` (`status`),\n    KEY `idx_branch_id` (`branch_id`),\n    KEY `idx_xid_and_branch_id` (`xid` , `branch_id`)\n) ENGINE = InnoDB\n  DEFAULT CHARSET = utf8mb4;\n\nCREATE TABLE IF NOT EXISTS `distributed_lock`\n(\n    `lock_key`       CHAR(20) NOT NULL,\n    `lock_value`     VARCHAR(20) NOT NULL,\n    `expire`         BIGINT,\n    primary key (`lock_key`)\n) ENGINE = InnoDB\n  DEFAULT CHARSET = utf8mb4;\n\nINSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES ('AsyncCommitting', ' ', 0);\nINSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES ('RetryCommitting', ' ', 0);\nINSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES ('RetryRollbacking', ' ', 0);\nINSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES ('TxTimeoutCheck', ' ', 0);\n```\n\n## YML\n```yaml\nseata:\n  #事务群组（可以每个应用独立取名，也可以使用相同的名字），要与服务端nacos-config.txt中service.vgroup_mapping中存在,并且要保证多个群组情况下后缀名要保持一致-tx_group\n  enabled: true\n  enable-auto-data-source-proxy: true #是否开启数据源自动代理,默认为true\n  tx-service-group: fsp_tx_group  #要与配置文件中的vgroupMapping一致\n  application-id: seata-server\n  registry:  #registry根据seata服务端的registry配置\n    type: nacos #默认为file\n    nacos:\n      application: seata-server #配置自己的seata服务\n      server-addr: ${spring.cloud.nacos.discovery.server-addr} #根据自己的seata服务配置\n      username: nacos #根据自己的seata服务配置\n      password: nacos #根据自己的seata服务配置\n      cluster: default # 配置自己的seata服务cluster, 默认为 default\n      group: SEATA_GROUP #根据自己的seata服务配置\n      namespace: 4388013f-6618-4de0-bb88-8bf280069254\n  config:\n    type: nacos #默认file,如果使用file不配置下面的nacos,直接配置seata.service\n    nacos:\n      server-addr: ${spring.cloud.nacos.discovery.server-addr} #配置自己的nacos地址\n      group: SEATA_GROUP #配置自己的dev\n      username: nacos #配置自己的username\n      password: nacos #配置自己的password\n      dataId: seataServer.properties # #配置自己的dataId,由于搭建服务端时把客户端的配置也写在了seataServer.properties,所以这里用了和服务端一样的配置文件,实际客户端和服务端的配置文件分离出来更好\n      namespace: 4388013f-6618-4de0-bb88-8bf280069254\n```\n```java\n@Service\n@Slf4j\npublic class OrderServiceImpl implements OrderService {\n    \n    @Resource\n    private OrderDao orderDao;\n    \n    @Autowired\n    private StorageService storageService;\n    \n    @Autowired\n    private AccountService accountService;\n    \n    @Override\n    @GlobalTransactional(name = \"fsp_order_insert\",rollbackFor = Exception.class)\n    public void insert(Order order) {\n        \n        log.info(\"----------> 新建订单\");\n        orderDao.insert(order);\n        \n        log.info(\"----------> 订单微服务开始调用库存服务，做扣减\");\n        storageService.decrease(order.getProductId(),order.getCount());\n        \n        log.info(\"----------> 订单微服务开始调用账户，做扣减\");\n        accountService.decrease(order.getUserId(),order.getMoney());\n        \n        log.info(\"----------> 修改订单状态 0 -> 1\");\n        orderDao.update(order.getUserId(),0);\n        \n        log.info(\"----------> 订单结束\");\n    }\n    \n    @Override\n    public void update(Order order) {\n        \n    }\n}\n\n@Component\n@FeignClient(name = \"seata-account-service\")\npublic interface AccountService {\n\n    @PostMapping(\"/account/decrease\")\n    Result<Boolean> decrease(@RequestParam(\"userId\") Long userId, @RequestParam(\"money\") BigDecimal money);\n}\n\n@Component\n@FeignClient(name = \"seata-storage-service\")\npublic interface StorageService {\n\n    @PostMapping(\"/storage/decrease\")\n    Result<Boolean> decrease(@RequestParam(\"productId\") Long productId,@RequestParam(\"count\") Integer count);\n}\n\n```\n","source":"_posts/shiwu.md","raw":"---\ntitle: 分布式事务\ncategories: 原理分析\ntags:\n  - java\n  - 分布式\nexcerpt: 分布式事务\ndate: 2021-04-21 9:10:03\ncover: '/image/blog/seata.png?raw=true'\n---\n\n\n\n# Seata\n\n\n\n# 事务的解决方案\n\n## 方案1：2PC\n\n2PC，Two-phase commit protocol，即 **两阶段提交协议**。它引入了一个 **事务协调者** 角色，来管理各个 **参与者**（就是各数据库资源）<br />整体分为两个阶段，分别是 **准备阶段** 和 **提交/回滚阶段**\n\n### 第一个阶段：准备阶段\n\n![image.png](/image/blog/%E4%BA%8B%E5%8A%A11.png?raw=true)\n\n1. 由事务协调者给每个参与者发送准备命令，每个参与者收到命令之后会执行相关事务操作，你可以认为除了事务的提交啥都做了。\n1. 然后每个参与者会返回响应告知协调者自己是否准备成功。\n1. 协调者收到每个参与者的响应之后就进入第二阶段，根据收集的响应，如果有一个参与者响应准备失败那么就向所有参与者发送回滚命令，反之发送提交命令\n\n\n### 第二个阶段：提交 / 回滚阶段\n\n![image.png](/image/blog/%E4%BA%8B%E5%8A%A12.png?raw=true)\n\n这个协议其实很符合正常的思维，就像上课点名的时候，老师就是协调者的角色，学生都是参与者。\n\n老师一个一个的点名，我们一个一个的喊到，最后老师收到所有同学的到之后就开始了今天的讲课。<br />而和点名有所不同的是，老师发现某几个学生不在还是能继续上课，而我们的事务可不允许这样。\n\n事务协调者在第一阶段未收到个别参与者的响应，则等待一定时间就会认为事务失败，会发送回滚命令，所以在 2PC 中事务协调者有超时机制。\n\n\n\n### 2PC 的优缺点\n\n2PC 的优点是能利用数据库自身的功能进行本地事务的提交和回滚，也就是说提交和回滚实际操作不需要我们实现，不侵入业务逻辑由数据库完成，在之后讲解 TCC 之后相信大家对这点会有所体会。\n\n2PC 主要有 三大缺点：同步阻塞、单点故障、数据不一致 问题\n\n**同步阻塞**\n\n可以看到在第一阶段执行了准备命令后，我们每个本地资源都处于锁定状态，因为除了事务的提交之外啥都做了。所以这时候如果本地的其他请求要访问同一个资源，比如要修改商品表 id 等于 100 的那条数据，那么此时是被阻塞住的，必须等待前面事务的完结，收到提交/回滚命令执行完释放资源后，这个请求才能得以继续。所以假设这个分布式事务涉及到很多参与者，然后有些参与者处理又特别复杂，特别慢，那么那些处理快的节点也得等着，所以说效率有点低。\n\n**单点故障**\n\n可以看到这个单点就是协调者，如果协调者挂了整个事务就执行不下去了。如果协调者在发送准备命令前挂了还行，毕竟每个资源都还未执行命令，那么资源是没被锁定的。可怕的是在发送完准备命令之后挂了，这时候每个本地资源都执行完处于锁定状态了，都杵着了，这就很僵硬了，如果是某个热点资源都阻塞了，这估计就要GG了。\n\n**数据不一致问题**\n\n因为协调者和参与者之间的交流是经过网络的，而网络有时候就会抽风的或者发生局部网络异常。那么就有可能导致某些参与者无法收到协调者的请求，而某些收到了。比如是提交请求，然后那些收到命令的参与者就提交事务了，此时就产生了数据不一致的问题\n\n### 2PC小结\n\n它是一个 同步阻塞 的 强一致性两阶段提交协议，分别是准备阶段和提交/回滚阶段。<br />2PC 的优势在于对业务没有侵入，可以利用数据库自身机制来进行事务的提交和回滚。<br />它的缺点：是一个同步阻塞协议，会导致高延迟和性能的下降，并且存在协调者单点故障问题，极端情况下会有数据不一致的问题<br />当然这只是协议，具体的落地还是可以变通了，比如协调者单点问题，我就搞个主从来实现协调者，对吧<br />分布式数据库的 2PC 改进模型<br />可能有些人对分布式数据库不熟悉，没有关系，我们主要学的是思想，看看人家的思路。\n\n简单的讲下 Percolator 模型，它是基于分布式存储系统 BigTable 建立的模型，BigTable 是啥也不清楚的同学没有关系影响不大。\n\n还是拿转账的例子来说，我现在有 200 块钱，你现在有 100 块钱，为了突出重点我也不按正常的结构来画这个表<br />![image.png](/image/blog/%E4%BA%8B%E5%8A%A13.png?raw=true)<br />然后我要转 100 块给你。<br />![image.png](/image/blog/%E4%BA%8B%E5%8A%A14.png?raw=true)\n\n1. 此时事务管理器发起了准备请求，然后我账上的钱就少了，你账上的钱就多了，而且事务管理器还记录下这次操作的日志\n1. 此时的数据还是私有版本，别的事务是读不到的，简单的理解 Lock 上有值就还是私有的。可以看到我的记录Lock 标记的是 PK，你的记录标记的是指向我的记录指针，这个 PK是随机选择的\n1. 然后事务管理器会向被选择作为 PK 的那条记录发起提交指令\n\n此时就会把我的记录的锁给抹去了，这等于我的记录不再是私有版本了，别的事务就都能访问了。\n\n那你的记录上还有锁啊？不用更新吗？<br />答案是：不需要及时更新，因为访问你的这条记录的时候会去根据指针找我的那个记录，发现记录已经提交了所以你的记录就可以被访问了。\n\n有人说这效率不就差了，每次都要去找一次，别急。后台会有个线程来扫描，然后更新把锁记录给去了。这不就稳了嘛。\n\n\n\n### 相比于 2PC 的改进\n\n1. 首先 Percolator 在提交阶段不需要和所有的参与者交互，只需要和一个参与者打交道，所以这个提交是原子的！解决了数据不一致问题\n1. 然后事务管理器会记录操作日志，这样当事务管理器挂了之后选举的新事务管理器就可以通过日志来得知当前的情况从而继续工作，解决了单点故障问题\n1. 并且 Percolator 还会有后台线程，会扫描事务状况，在事务管理器宕机之后会回滚各个参与者上的事务。\n\n> 可以看到相对于 2PC 还是做了很多改进的，也是巧妙的。 其实分布式数据库还有别的事务模型，有兴趣的同学可以自行了解\n\n\n---\n\n\n### XA 规范\n\n让我们再回来 2PC，既然说到 2PC 了那么也简单的提一下 XA 规范，XA 规范是基于两阶段提交的，它实现了两阶段提交协议。<br />在说 XA 规范之前又得先提一下 DTP （Distributed Transaction Processing）模型，这模型规范了分布式事务的模型设计。<br />而 XA 规范又约束了 DTP 模型中的事务管理器（TM） 和资源管理器（RM）之间的交互，简单的说就是你们两之间要按照一定的格式规范来交流！<br />我们先来看下 XA 约束下的 DTP 模型。<br />![image.png](/image/blog/%E4%BA%8B%E5%8A%A15.png?raw=true)\n\nAP 应用程序，就是我们的应用，事务的发起者。<br />RM 资源管理器，简单的认为就是数据库，具备事务提交和回滚能力，对应我们上面的 2PC 就是参与者。<br />TM 事务管理器，就是协调者了，和每个 RM 通信。\n\n简单的说就是 AP 通过 TM 来定义事务操作，TM 和 RM 之间会通过 XA 规范进行通信，执行两阶段提交，而 AP 的资源是从 RM 拿的。\n\n从模型上看有三个角色，而实际实现可以由一个角色实现两个功能，比如 AP 来实现 TM 的功能，TM 没必要抽出来单独部署。\n\n### MySQL XA\n\n知晓了 DTP 之后，我们就来看看 XA 在 MySQL 中是如何操作的，不过只有 InnoDB 支持。\n\n简单的说就是要先定义一个全局唯一的 XID，然后告知每个事务分支要进行的操作。<br />可以看到图中执行了两个操作，分别是改名字和插入日志，等于先注册下要做的事情，通过 XA START XID 和 XA END XID 来包裹要执行的 SQL。<br />![image.png](/image/blog/%E4%BA%8B%E5%8A%A16.png?raw=true)<br />然后需要发送准备命令，来执行第一阶段，也就是除了事务的提交啥都干了的阶段。<br />![image.png](/image/blog/%E4%BA%8B%E5%8A%A17.png?raw=true)<br />然后根据准备的情况来选择执行提交事务命令还是回滚事务命令。<br />![image.png](/image/blog/%E4%BA%8B%E5%8A%A18.png?raw=true)<br />基本上就是这么个流程，不过 MySQL XA 的性能不高这点是需要注意的。\n\n可以看到虽说 2PC 有缺点，但是还是有基于 2PC 的落地实现的，而 3PC 的引出是为了解决 2PC 的一些缺点，但是它整体下来开销更大，也解决不了网络分区的问题，我也没有找到 3PC 的落地实现。\n\n不过我还是稍微提一下，知晓一下就行，纯理论\n\n\n## 方案2：3PC\n\n3PC 的引入是为了解决 2PC 同步阻塞和减少数据不一致的情况。<br />3PC 也就是多了一个阶段，一个询问的阶段，分别是** 准备、预提交、提交** 这三个阶段\n\n1. 准备阶段单纯就是协调者去访问参与者，类似于你还好吗？能接请求不。\n1. 预提交其实就是 2PC 的准备阶段，除了事务的提交啥都干了。\n1. 提交阶段和 2PC 的提交一致。\n\n![image.png](/image/blog/%E4%BA%8B%E5%8A%A19.png?raw=true)<br />3PC 多了一个阶段其实就是在执行事务之前来确认参与者是否正常，防止个别参与者不正常的情况下，其他参与者都执行了事务，锁定资源。出发点是好的，**但是绝大部分情况下肯定是正常的，所以每次都多了一个交互阶段就很不划算**。\n\n然后 3**PC 在参与者处也引入了超时机制，这样在协调者挂了的情况下，如果已经到了提交阶段了，参与者等半天没收到协调者的情况的话就会自动提交事务**。\n\n不过万一协调者发的是回滚命令呢？你看这就出错了，数据不一致了。\n\n还有维基百科上说 2PC 参与者准备阶段之后，如果协调者挂了，参与者是无法得知整体的情况的，因为大局是协调者掌控的，所以参与者相互之间的状况它们不清楚。而 3PC 经过了第一阶段的确认，即使协调者挂了参与者也知道自己所处预提交阶段是因为已经得到准备阶段所有参与者的认可了。\n\n简单的说就像加了个围栏，使得各参与者的状态得以统一<br />[<br />](https://blog.csdn.net/QiuHaoqian/article/details/111572037)\n\n### 小结 2PC 和 3PC\n\n从上面已经知晓了 2PC 是一个强一致性的同步阻塞协议，性能已经是比较差的了。\n\n而 3PC 的出发点是为了解决 2PC 的缺点，但是多了一个阶段就多了一次通讯的开销，而且是绝大部分情况下无用的通讯。虽说引入参与者超时来解决协调者挂了的阻塞问题，但是数据还是会不一致。\n\n可以看到 3PC 的引入并没什么实际突破，而且性能更差了，所以实际只有 2PC 的落地实现\n\n> 再提一下，2PC 还是 3PC 都是协议，可以认为是一种指导思想，和真正的落地还是有差别的\n\n![image.png](/image/blog/%E4%BA%8B%E5%8A%A110.png?raw=true)\n\n## 方案3：TCC\n\n不知道大家注意到没，不管是 2PC 还是 3PC 都是依赖于数据库的事务提交和回滚。\n\n而有时候一些业务它不仅仅涉及到数据库，可能是发送一条短信，也可能是上传一张图片。所以说事务的提交和回滚就得提升到业务层面而不是数据库层面了。\n\n而** TCC 就是一种业务层面或者是应用层的两阶段提交**\n\nTCC 分为指代 **Try、Confirm、Cancel** ，也就是 业务层面需要写对应的三个方法，主要用于跨数据库、跨服务的业务操作的数据一致性问题。\n\nTCC 分为两个阶段：\n\n1. 第一阶段是资源检查预留阶段即 Try\n1. 第二阶段是提交或回滚，如果是提交的话就是执行真正的业务操作，如果是回滚则是执行预留资源的取消，恢复初始状态\n\n比如有一个扣款服务，我需要写 **Try 方法，用来冻结扣款资金**，还需要一个 **Confirm 方法来执行真正的扣款**，最后还需要提供 **Cancel 来进行冻结操作的回滚**，对应的一个事务的所有服务都需要提供这三个方法。\n\n可以看到本来就一个方法，现在需要膨胀成三个方法，所以说** TCC 对业务有很大的侵入**，像如果没有冻结的那个字段，还需要改表结构。\n\n我们来看下流程<br />![image.png](/image/blog/%E4%BA%8B%E5%8A%A111.png?raw=true)<br />虽说对业务有侵入，但是 TCC 没有资源的阻塞，每一个方法都是直接提交事务的，如果出错是通过业务层面的 Cancel 来进行补偿，所以也称补偿性事务方法。\n\n这里有人说那要是所有人 Try 都成功了，都执行 Comfirm 了，但是个别 Confirm 失败了怎么办？\n\n这时候只能是不停地重试调失败了的 Confirm 直到成功为止，如果真的不行只能记录下来，到时候人工介入了\n\n### TCC 的注意点\n\n这几个点很关键，在实现的时候一定得注意了<br />![image.png](/image/blog/%E4%BA%8B%E5%8A%A112.png?raw=true)<br />**幂等问题**<br />因为网络调用无法保证请求一定能到达，所以都会有重调机制，因此对于 Try、Confirm、Cancel 三个方法都需要幂等实现，避免重复执行产生错误。\n\n**空回滚问题**<br />这个问题是指的是 Try 方法由于网络问题没收到超时了，此时事务管理器就会发出 Cancel 命令，那么需要支持 Cancel 在未执行 Try 的情况下能正常的 Cancel。\n\n**悬挂问题**<br />这个问题也是指 Try 方法由于网络阻塞超时触发了事务管理器发出了 Cancel 命令，但是执行了 Cancel 命令之后 Try 请求到了，你说气不气。这都 Cancel 了你来个 Try，对于事务管理器来说这时候事务已经是结束了的，这冻结操作就被“悬挂”了，所以空回滚之后还得记录一下，防止 Try 的再调用<br />[<br />](https://blog.csdn.net/QiuHaoqian/article/details/111572037)\n\n### TCC 变体\n\n上面我们说的是通用型的 TCC，它需要改造以前的实现，但是有一种情况是无法改造的，就是你调用的是别的公司的接口。\n\n**没有 Try 的 TCC**\n\n比如坐飞机需要换乘，换乘的又是不同的航空公司，比如从 A 飞到 B，再从 B 飞到 C，只有 A - B 和 B - C 都买到票了才有意义。\n\n这时候的选择就没得 Try 了，直接调用航空公司的买票操作，当两个航空公司都买成功了那就直接成功了，如果某个公司买失败了，那就需要调用取消订票接口。\n\n也就是在第一阶段直接就执行完整个业务操作了，所以要重点关注回滚操作，如果回滚失败得有提醒，要人工介入等。\n\n这其实就是 TCC 的思想：\n\n1. 一阶段：直接执行真正的操作\n1. 二阶段：补偿一阶段的真正操作后果，如果一阶段都成功则不用执行\n\n![image.png](/image/blog/%E4%BA%8B%E5%8A%A113.png?raw=true)\n\n**利用可靠消息服务实现 异步 TCC**<br />这 TCC 还能异步？其实也是一种折中，比如某些服务很难改造，并且它又不会影响主业务决策，也就是它不那么重要，不需要及时的执行\n\n这时候可以引入可靠消息服务，通过消息服务来替代个别服务来进行 Try、Confirm、Cancel 。<br />Try 的时候只是写入消息，消息还不能被消费，Confirm 就是真正发消息的操作，Cancel 就是取消消息的发送。<br />这可靠消息服务其实就类似于等下要提到的事务消息，这个方案等于糅合了事务消息和 TCC。\n\n### TCC 小结\n\n可以看到 TCC 是通过业务代码来实现事务的提交和回滚，对业务的侵入较大，它是**业务层面的两阶段提交**。\n\n它的性能比 2PC 要高，因为不会有资源的阻塞，并且适用范围也大于 2PC，在实现上要注意上面提到的几个注意点\n\n它是业界比较常用的分布式事务实现方式，而且从变体也可以得知，**还是得看业务变通的，不是说你要用 TCC 一定就得死板的让所有的服务都改造成那三个方法**<br />[<br />](https://blog.csdn.net/QiuHaoqian/article/details/111572037)\n\n# 本地消息表\n\n本地消息就是利用了本地事务，会在数据库中存放一份本地事务消息表，在进行本地事务操作时加入了本地消息的插入，即将业务的执行和将消息放入消息表中的操作放在同一个事务中提交。\n\n这样本地事务执行成功的话，消息肯定也插入成功，然后再调用其他服务，如果调用成功就修改这条本地消息的状态。\n\n如果失败也不要紧，会有一个后台线程扫描，发现这些状态的消息，会一直调用相应的服务，一般会设置重试的次数，如果一直不行则特殊记录，待人工介入处理。\n\n可以看到还是很简单的，也是一种最大努力通知思想<br />![image.png](/image/blog/%E4%BA%8B%E5%8A%A114.png?raw=true)\n\n# Seata的实现\n\n## AT模式\n\nAT 模式就是两阶段提交，前面我们提到了两阶段提交有同步阻塞的问题，效率太低了，那 Seata 是怎么解决的呢？\n\nAT 的 一阶段直接就把事务提交了，直接释放了本地锁，这么草率直接提交的嘛？当然不是，这里和本地消息表有点类似，就是 利用本地事务，执行真正的事务操作中还会插入回滚日志，然后在一个事务中提交。\n\n这回滚日志怎么来的？\n\n通过框架代理 JDBC 的一些类，在执行 SQL 的时候解析 SQL 得到执行前的数据镜像，然后执行 SQL ，再得到执行后的数据镜像，然后把这些数据组装成回滚日志。\n\n再伴随的这个本地事务的提交把回滚日志也插入到数据库的 UNDO_LOG 表中(所以数据库需要有一张UNDO_LOG 表)。\n\n这波操作下来在一阶段就可以没有后顾之忧的提交事务了。\n\n然后一阶段如果成功，那么二阶段可以异步的删除那些回滚日志，如果一阶段失败那么可以通过回滚日志来反向补偿恢复。\n\n这时候有细心的同学想到了，万一中间有人改了这条数据怎么办？你这镜像就不对了啊？\n\n所以说还有个全局锁的概念，在事务提交前需要拿到全局锁（可以理解为对这条数据的锁），然后才能顺利提交本地事务。如果一直拿不到那就需要回滚本地事务了\n\n官网的示例很好，以下部分内容摘抄自 Seata 官网的示例：\n\n1. 有两个事务，分别是 tx1、和 tx2，分别对 a 表的 m 字段进行更新操作，m 的初始值 1000\n1. tx1 先开始，开启本地事务，拿到本地锁，更新操作 m = 1000 - 100 = 900。本地事务提交前，先拿到该记录的 全局锁 ，本地提交释放本地锁\n1. tx2 后开始，开启本地事务，拿到本地锁，更新操作 m = 900 - 100 = 800。本地事务提交前，尝试拿该记录的 全局锁 ，tx1 全局提交前，该记录的全局锁被 tx1 持有，tx2 需要重试等待全局锁 \n\n![image.png](/image/blog/%E4%BA%8B%E5%8A%A115.png?raw=true)<br />可以看到 tx2 的修改被阻塞了，之后重试拿到全局锁之后就能提交然后释放本地锁\n\n如果 tx1 的二阶段全局回滚，则 tx1 需要重新获取该数据的本地锁，进行反向补偿的更新操作，实现分支的回滚。<br />此时，如果 tx2 仍在等待该数据的全局锁，同时持有本地锁，则 tx1 的分支回滚会失败。分支的回滚会一直重试，直到 tx2 的全局锁等锁超时，放弃全局锁并回滚本地事务释放本地锁，tx1 的分支回滚最终成功<br />![image.png](/image/blog/%E4%BA%8B%E5%8A%A116.png?raw=true)<br />然后 **AT 模式默认全局是读未提交的隔离级别**，如果应用在特定场景下，必需要求全局的读已提交 ，可以通过 SELECT FOR UPDATE 语句的代理\n\n当然前提是你本地事务隔离级别是读已提交及以上\n\n## AT 模式小结\n\n1. 可以看到通过代理来无侵入的得到数据的前后镜像，组装成回滚日志伴随本地事务一起提交，解决了两阶段的同步阻塞问题\n1. 并且利用全局锁来实现写隔离\n1. 为了总体性能的考虑，默认是读未提交隔离级别，只代理了 SELECT FOR UPDATE 来进行读已提交的隔离\n\n这其实就是两阶段提交的变体实现\n\n## TCC 模式\n\n![image.png](/image/blog/%E4%BA%8B%E5%8A%A117.png?raw=true)\n\n### Saga 模式\n\n这个 Saga 是 Seata 提供的长事务解决方案，适用于业务流程多且长的情况下，这种情况如果要实现一般的 TCC 啥的可能得嵌套多个事务了。\n\n并且有些系统无法提供 TCC 这三种接口，比如老项目或者别人公司的，所以就搞了个 Saga 模式，这个 Saga 是在 1987 年 Hector & Kenneth 发表的论⽂中提出的。\n\n那 Saga 如何做呢？来看下这个图<br />![image.png](/image/blog/%E4%BA%8B%E5%8A%A118.png?raw=true)<br />假设有 N 个操作，直接从 T1 开始就是直接执行提交事务，然后再执行 T2，可以看到就是无锁的直接提交，到 T3 发现执行失败了，然后就进入 Compenstaing 阶段，开始一个一个倒回补偿了。\n\n思想就是: 一开始蒙着头干，别怂，出了问题咱们再一个一个改回去呗。\n\n可以看到这种情况是不保证事务的隔离性的，并且 Saga 也有 TCC 的一样的注意点，需要空补偿，防悬挂和幂等。\n\n而且极端情况下会因为数据被改变了导致无法回滚的情况。比如第一步给我打了 2 万块钱，我给取出来花了，这时候你回滚，我账上余额已经 0 了，你说怎么办嘛？难道给我还搞负的不成?\n\n这种情况只能在业务流程上入手，我写代码其实一直是这样写的，就拿买皮肤的场景来说，我都是先扣钱再给皮肤。假设先给皮肤扣钱失败了不就白给了嘛？这钱你来补啊？你觉得用户会来反馈说皮肤给了钱没扣嘛？可能有小机灵鬼说我到时候把皮肤给改回去，嘿嘿这种事情确实发生过，啧啧，被骂的真惨。\n\n所以正确的流程应该是先扣钱再给皮肤，钱到自己袋里先，皮肤没给成功用户自然而然会找过来，这时候再给他呗，虽说可能你写出了个 BUG ，但是还好不是个白给的 BUG。\n\n所以说这点在编码的时候还是得注意下的<br />[<br />](https://blog.csdn.net/QiuHaoqian/article/details/111572037)\n\n[<br />](https://blog.csdn.net/QiuHaoqian/article/details/111572037)\n\n# Seata的使用说明\n\n> [官网](http://seata.io/zh-cn/)\n\n## TC/TM/RM三大组件\n\n分布式事务的执行流程\n\n- TM开启分布式事务(TM向TC注册全局事务记录)\n- 换业务场景，编排数据库，服务等事务内资源（RM向TC汇报资源准备状态）\n- TM结束分布式事务，事务一阶段结束（TM通知TC提交/回滚分布式事务）\n- TC汇总事务信息，决定分布式事务是提交还是回滚\n- TC通知所有RM提交/回滚资源，事务二阶段结束。\n\n![image.png](/image/blog/seata1.png?raw=true)\n\n## 配置文件\n\n```json\nregistry {\n  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa\n  type = \"file\"\n  nacos {\n    application = \"seata-server\"\n    serverAddr = \"127.0.0.1:8848\"\n    group = \"SEATA_GROUP\"\n    namespace = \"\"\n    cluster = \"default\"\n    username = \"\"\n    password = \"\"\n  }\n  file {\n    name = \"file.conf\"\n  }\n}\n\nconfig {\n  # file、nacos 、apollo、zk、consul、etcd3\n  type = \"file\"\n\n  nacos {\n    serverAddr = \"127.0.0.1:8848\"\n    namespace = \"\"\n    group = \"SEATA_GROUP\"\n    username = \"\"\n    password = \"\"\n    dataId = \"seataServer.properties\"\n  }\n  file {\n    name = \"file.conf\"\n  }\n}\n\n```\n```json\n## transaction log store, only used in seata-server\nstore {\n  ## store mode: file、db、redis\n  mode = \"file\"\n  ## rsa decryption public key\n  publicKey = \"\"\n  ## file store property\n  file {\n    ## store location dir\n    dir = \"sessionStore\"\n    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions\n    maxBranchSessionSize = 16384\n    # globe session size , if exceeded throws exceptions\n    maxGlobalSessionSize = 512\n    # file buffer size , if exceeded allocate new buffer\n    fileWriteBufferCacheSize = 16384\n    # when recover batch read size\n    sessionReloadReadSize = 100\n    # async, sync\n    flushDiskMode = async\n  }\n\n  ## database store property\n  db {\n    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.\n    datasource = \"druid\"\n    ## mysql/oracle/postgresql/h2/oceanbase etc.\n    dbType = \"mysql\"\n    driverClassName = \"com.mysql.jdbc.Driver\"\n    ## if using mysql to store the data, recommend add rewriteBatchedStatements=true in jdbc connection param\n    url = \"jdbc:mysql://127.0.0.1:3306/seata?rewriteBatchedStatements=true\"\n    user = \"mysql\"\n    password = \"mysql\"\n    minConn = 5\n    maxConn = 100\n    globalTable = \"global_table\"\n    branchTable = \"branch_table\"\n    lockTable = \"lock_table\"\n    queryLimit = 100\n    maxWait = 5000\n  }\n\n  ## redis store property\n  redis {\n    ## redis mode: single、sentinel\n    mode = \"single\"\n    ## single mode property\n    single {\n      host = \"127.0.0.1\"\n      port = \"6379\"\n    }\n    ## sentinel mode property\n    sentinel {\n      masterName = \"\"\n      ## such as \"10.28.235.65:26379,10.28.235.65:26380,10.28.235.65:26381\"\n      sentinelHosts = \"\"\n    }\n    password = \"\"\n    database = \"0\"\n    minConn = 1\n    maxConn = 10\n    maxTotal = 100\n    queryLimit = 100\n  }\n}\n\n```\n```json\nregistry {\n  type = \"nacos\"\n\n  nacos {\n    application = \"seata-server\"\n    serverAddr = \"localhost:8848\"\n    group = \"SEATA_GROUP\"\n    namespace = \"4388013f-6618-4de0-bb88-8bf280069254\"\n    cluster = \"default\"\n    username = \"nacos\"\n    password = \"nacos\"\n  }\n}#   \n#   \nconfig {\n \n  type = \"nacos\"\n  nacos {\n    serverAddr = \"localhost:8848\"\n    namespace = \"4388013f-6618-4de0-bb88-8bf280069254\"\n    group = \"SEATA_GROUP\"\n    username = \"nacos\"\n    password = \"nacos\"\n    dataId = \"seataServer.properties\"\n  }\n}\n\n```\n![image.png](/image/blog/seata2.png?raw=true)\n```properties\ntransport.type=TCP\ntransport.server=NIO\ntransport.heartbeat=true\ntransport.enableClientBatchSendRequest=true\ntransport.threadFactory.bossThreadPrefix=NettyBoss\ntransport.threadFactory.workerThreadPrefix=NettyServerNIOWorker\ntransport.threadFactory.serverExecutorThreadPrefix=NettyServerBizHandler\ntransport.threadFactory.shareBossWorker=false\ntransport.threadFactory.clientSelectorThreadPrefix=NettyClientSelector\ntransport.threadFactory.clientSelectorThreadSize=1\ntransport.threadFactory.clientWorkerThreadPrefix=NettyClientWorkerThread\ntransport.threadFactory.bossThreadSize=1\ntransport.threadFactory.workerThreadSize=default\ntransport.shutdown.wait=3\ntransport.serialization=seata\ntransport.compressor=none\n\n# store\n#model改为db\nstore.mode=db\nstore.lock.mode=file\nstore.session.mode=file\n# store.publicKey=\"\"\nstore.file.dir=file_store/data\nstore.file.maxBranchSessionSize=16384\nstore.file.maxGlobalSessionSize=512\nstore.file.fileWriteBufferCacheSize=16384\nstore.file.flushDiskMode=async\nstore.file.sessionReloadReadSize=100\nstore.db.datasource=druid\nstore.db.dbType=mysql\n#修改数据驱动，这里是mysql8，使用mysql5的话请修改\nstore.db.driverClassName=com.mysql.cj.jdbc.Driver\n# 改为上面创建的seata服务数据库\nstore.db.url=jdbc:mysql://127.0.0.1:3306/seata?rewriteBatchedStatements=true&serverTimezone=UTC\n# 改为自己的数据库用户名\nstore.db.user=root\n# 改为自己的数据库密码\nstore.db.password=123456\nstore.db.minConn=5\nstore.db.maxConn=30\nstore.db.globalTable=global_table\nstore.db.branchTable=branch_table\nstore.db.distributedLockTable=distributed_lock\nstore.db.queryLimit=100\nstore.db.lockTable=lock_table\nstore.db.maxWait=5000\n# log\nlog.exceptionRate=100\n# metrics\nmetrics.enabled=false\nmetrics.registryType=compact\nmetrics.exporterList=prometheus\nmetrics.exporterPrometheusPort=9898\n# service\n# 自己命名一个vgroupMapping\nservice.vgroupMapping.fsp_tx_group=default\nservice.default.grouplist=127.0.0.1:8091\nservice.enableDegrade=false\nservice.disableGlobalTransaction=false\n# client\nclient.rm.asyncCommitBufferLimit=10000\nclient.rm.lock.retryInterval=10\nclient.rm.lock.retryTimes=30\nclient.rm.lock.retryPolicyBranchRollbackOnConflict=true\nclient.rm.reportRetryCount=5\nclient.rm.tableMetaCheckEnable=false\nclient.rm.tableMetaCheckerInterval=60000\nclient.rm.sqlParserType=druid\nclient.rm.reportSuccessEnable=false\nclient.rm.sagaBranchRegisterEnable=false\nclient.rm.tccActionInterceptorOrder=-2147482648\nclient.tm.commitRetryCount=5\nclient.tm.rollbackRetryCount=5\nclient.tm.defaultGlobalTransactionTimeout=60000\nclient.tm.degradeCheck=false\nclient.tm.degradeCheckAllowTimes=10\nclient.tm.degradeCheckPeriod=2000\nclient.tm.interceptorOrder=-2147482648\nclient.undo.dataValidation=true\nclient.undo.logSerialization=jackson\nclient.undo.onlyCareUpdateColumns=true\nclient.undo.logTable=undo_log\nclient.undo.compress.enable=true\nclient.undo.compress.type=zip\nclient.undo.compress.threshold=64k\n```\n\n## 执行SQL进行持久化\n![image.png](/image/blog/seata3.png?raw=true)\n```sql\n-- for AT mode you must to init this sql for you business database. the seata server not need it.\nCREATE TABLE IF NOT EXISTS `undo_log`\n(\n    `branch_id`     BIGINT       NOT NULL COMMENT 'branch transaction id',\n    `xid`           VARCHAR(128) NOT NULL COMMENT 'global transaction id',\n    `context`       VARCHAR(128) NOT NULL COMMENT 'undo_log context,such as serialization',\n    `rollback_info` LONGBLOB     NOT NULL COMMENT 'rollback info',\n    `log_status`    INT(11)      NOT NULL COMMENT '0:normal status,1:defense status',\n    `log_created`   DATETIME(6)  NOT NULL COMMENT 'create datetime',\n    `log_modified`  DATETIME(6)  NOT NULL COMMENT 'modify datetime',\n    UNIQUE KEY `ux_undo_log` (`xid`, `branch_id`)\n) ENGINE = InnoDB\n  AUTO_INCREMENT = 1\n  DEFAULT CHARSET = utf8mb4 COMMENT ='AT transaction mode undo table';\n-- -------------------------------- The script used when storeMode is 'db' --------------------------------\n-- the table to store GlobalSession data\nCREATE TABLE IF NOT EXISTS `global_table`\n(\n    `xid`                       VARCHAR(128) NOT NULL,\n    `transaction_id`            BIGINT,\n    `status`                    TINYINT      NOT NULL,\n    `application_id`            VARCHAR(32),\n    `transaction_service_group` VARCHAR(32),\n    `transaction_name`          VARCHAR(128),\n    `timeout`                   INT,\n    `begin_time`                BIGINT,\n    `application_data`          VARCHAR(2000),\n    `gmt_create`                DATETIME,\n    `gmt_modified`              DATETIME,\n    PRIMARY KEY (`xid`),\n    KEY `idx_status_gmt_modified` (`status` , `gmt_modified`),\n    KEY `idx_transaction_id` (`transaction_id`)\n) ENGINE = InnoDB\n  DEFAULT CHARSET = utf8mb4;\n\n-- the table to store BranchSession data\nCREATE TABLE IF NOT EXISTS `branch_table`\n(\n    `branch_id`         BIGINT       NOT NULL,\n    `xid`               VARCHAR(128) NOT NULL,\n    `transaction_id`    BIGINT,\n    `resource_group_id` VARCHAR(32),\n    `resource_id`       VARCHAR(256),\n    `branch_type`       VARCHAR(8),\n    `status`            TINYINT,\n    `client_id`         VARCHAR(64),\n    `application_data`  VARCHAR(2000),\n    `gmt_create`        DATETIME(6),\n    `gmt_modified`      DATETIME(6),\n    PRIMARY KEY (`branch_id`),\n    KEY `idx_xid` (`xid`)\n) ENGINE = InnoDB\n  DEFAULT CHARSET = utf8mb4;\n\n-- the table to store lock data\nCREATE TABLE IF NOT EXISTS `lock_table`\n(\n    `row_key`        VARCHAR(128) NOT NULL,\n    `xid`            VARCHAR(128),\n    `transaction_id` BIGINT,\n    `branch_id`      BIGINT       NOT NULL,\n    `resource_id`    VARCHAR(256),\n    `table_name`     VARCHAR(32),\n    `pk`             VARCHAR(36),\n    `status`         TINYINT      NOT NULL DEFAULT '0' COMMENT '0:locked ,1:rollbacking',\n    `gmt_create`     DATETIME,\n    `gmt_modified`   DATETIME,\n    PRIMARY KEY (`row_key`),\n    KEY `idx_status` (`status`),\n    KEY `idx_branch_id` (`branch_id`),\n    KEY `idx_xid_and_branch_id` (`xid` , `branch_id`)\n) ENGINE = InnoDB\n  DEFAULT CHARSET = utf8mb4;\n\nCREATE TABLE IF NOT EXISTS `distributed_lock`\n(\n    `lock_key`       CHAR(20) NOT NULL,\n    `lock_value`     VARCHAR(20) NOT NULL,\n    `expire`         BIGINT,\n    primary key (`lock_key`)\n) ENGINE = InnoDB\n  DEFAULT CHARSET = utf8mb4;\n\nINSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES ('AsyncCommitting', ' ', 0);\nINSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES ('RetryCommitting', ' ', 0);\nINSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES ('RetryRollbacking', ' ', 0);\nINSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES ('TxTimeoutCheck', ' ', 0);\n```\n\n## YML\n```yaml\nseata:\n  #事务群组（可以每个应用独立取名，也可以使用相同的名字），要与服务端nacos-config.txt中service.vgroup_mapping中存在,并且要保证多个群组情况下后缀名要保持一致-tx_group\n  enabled: true\n  enable-auto-data-source-proxy: true #是否开启数据源自动代理,默认为true\n  tx-service-group: fsp_tx_group  #要与配置文件中的vgroupMapping一致\n  application-id: seata-server\n  registry:  #registry根据seata服务端的registry配置\n    type: nacos #默认为file\n    nacos:\n      application: seata-server #配置自己的seata服务\n      server-addr: ${spring.cloud.nacos.discovery.server-addr} #根据自己的seata服务配置\n      username: nacos #根据自己的seata服务配置\n      password: nacos #根据自己的seata服务配置\n      cluster: default # 配置自己的seata服务cluster, 默认为 default\n      group: SEATA_GROUP #根据自己的seata服务配置\n      namespace: 4388013f-6618-4de0-bb88-8bf280069254\n  config:\n    type: nacos #默认file,如果使用file不配置下面的nacos,直接配置seata.service\n    nacos:\n      server-addr: ${spring.cloud.nacos.discovery.server-addr} #配置自己的nacos地址\n      group: SEATA_GROUP #配置自己的dev\n      username: nacos #配置自己的username\n      password: nacos #配置自己的password\n      dataId: seataServer.properties # #配置自己的dataId,由于搭建服务端时把客户端的配置也写在了seataServer.properties,所以这里用了和服务端一样的配置文件,实际客户端和服务端的配置文件分离出来更好\n      namespace: 4388013f-6618-4de0-bb88-8bf280069254\n```\n```java\n@Service\n@Slf4j\npublic class OrderServiceImpl implements OrderService {\n    \n    @Resource\n    private OrderDao orderDao;\n    \n    @Autowired\n    private StorageService storageService;\n    \n    @Autowired\n    private AccountService accountService;\n    \n    @Override\n    @GlobalTransactional(name = \"fsp_order_insert\",rollbackFor = Exception.class)\n    public void insert(Order order) {\n        \n        log.info(\"----------> 新建订单\");\n        orderDao.insert(order);\n        \n        log.info(\"----------> 订单微服务开始调用库存服务，做扣减\");\n        storageService.decrease(order.getProductId(),order.getCount());\n        \n        log.info(\"----------> 订单微服务开始调用账户，做扣减\");\n        accountService.decrease(order.getUserId(),order.getMoney());\n        \n        log.info(\"----------> 修改订单状态 0 -> 1\");\n        orderDao.update(order.getUserId(),0);\n        \n        log.info(\"----------> 订单结束\");\n    }\n    \n    @Override\n    public void update(Order order) {\n        \n    }\n}\n\n@Component\n@FeignClient(name = \"seata-account-service\")\npublic interface AccountService {\n\n    @PostMapping(\"/account/decrease\")\n    Result<Boolean> decrease(@RequestParam(\"userId\") Long userId, @RequestParam(\"money\") BigDecimal money);\n}\n\n@Component\n@FeignClient(name = \"seata-storage-service\")\npublic interface StorageService {\n\n    @PostMapping(\"/storage/decrease\")\n    Result<Boolean> decrease(@RequestParam(\"productId\") Long productId,@RequestParam(\"count\") Integer count);\n}\n\n```\n","slug":"shiwu","published":1,"updated":"2024-02-29T09:09:55.487Z","_id":"ckzve8xjj002ckeuq2fhkam4d","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Seata\"><a href=\"#Seata\" class=\"headerlink\" title=\"Seata\"></a>Seata</h1><h1 id=\"事务的解决方案\"><a href=\"#事务的解决方案\" class=\"headerlink\" title=\"事务的解决方案\"></a>事务的解决方案</h1><h2 id=\"方案1：2PC\"><a href=\"#方案1：2PC\" class=\"headerlink\" title=\"方案1：2PC\"></a>方案1：2PC</h2><p>2PC，Two-phase commit protocol，即 <strong>两阶段提交协议</strong>。它引入了一个 <strong>事务协调者</strong> 角色，来管理各个 <strong>参与者</strong>（就是各数据库资源）<br />整体分为两个阶段，分别是 <strong>准备阶段</strong> 和 <strong>提交/回滚阶段</strong></p>\n<h3 id=\"第一个阶段：准备阶段\"><a href=\"#第一个阶段：准备阶段\" class=\"headerlink\" title=\"第一个阶段：准备阶段\"></a>第一个阶段：准备阶段</h3><p><img src=\"/image/blog/%E4%BA%8B%E5%8A%A11.png?raw=true\" alt=\"image.png\"></p>\n<ol>\n<li>由事务协调者给每个参与者发送准备命令，每个参与者收到命令之后会执行相关事务操作，你可以认为除了事务的提交啥都做了。</li>\n<li>然后每个参与者会返回响应告知协调者自己是否准备成功。</li>\n<li>协调者收到每个参与者的响应之后就进入第二阶段，根据收集的响应，如果有一个参与者响应准备失败那么就向所有参与者发送回滚命令，反之发送提交命令</li>\n</ol>\n<h3 id=\"第二个阶段：提交-回滚阶段\"><a href=\"#第二个阶段：提交-回滚阶段\" class=\"headerlink\" title=\"第二个阶段：提交 / 回滚阶段\"></a>第二个阶段：提交 / 回滚阶段</h3><p><img src=\"/image/blog/%E4%BA%8B%E5%8A%A12.png?raw=true\" alt=\"image.png\"></p>\n<p>这个协议其实很符合正常的思维，就像上课点名的时候，老师就是协调者的角色，学生都是参与者。</p>\n<p>老师一个一个的点名，我们一个一个的喊到，最后老师收到所有同学的到之后就开始了今天的讲课。<br />而和点名有所不同的是，老师发现某几个学生不在还是能继续上课，而我们的事务可不允许这样。</p>\n<p>事务协调者在第一阶段未收到个别参与者的响应，则等待一定时间就会认为事务失败，会发送回滚命令，所以在 2PC 中事务协调者有超时机制。</p>\n<h3 id=\"2PC-的优缺点\"><a href=\"#2PC-的优缺点\" class=\"headerlink\" title=\"2PC 的优缺点\"></a>2PC 的优缺点</h3><p>2PC 的优点是能利用数据库自身的功能进行本地事务的提交和回滚，也就是说提交和回滚实际操作不需要我们实现，不侵入业务逻辑由数据库完成，在之后讲解 TCC 之后相信大家对这点会有所体会。</p>\n<p>2PC 主要有 三大缺点：同步阻塞、单点故障、数据不一致 问题</p>\n<p><strong>同步阻塞</strong></p>\n<p>可以看到在第一阶段执行了准备命令后，我们每个本地资源都处于锁定状态，因为除了事务的提交之外啥都做了。所以这时候如果本地的其他请求要访问同一个资源，比如要修改商品表 id 等于 100 的那条数据，那么此时是被阻塞住的，必须等待前面事务的完结，收到提交/回滚命令执行完释放资源后，这个请求才能得以继续。所以假设这个分布式事务涉及到很多参与者，然后有些参与者处理又特别复杂，特别慢，那么那些处理快的节点也得等着，所以说效率有点低。</p>\n<p><strong>单点故障</strong></p>\n<p>可以看到这个单点就是协调者，如果协调者挂了整个事务就执行不下去了。如果协调者在发送准备命令前挂了还行，毕竟每个资源都还未执行命令，那么资源是没被锁定的。可怕的是在发送完准备命令之后挂了，这时候每个本地资源都执行完处于锁定状态了，都杵着了，这就很僵硬了，如果是某个热点资源都阻塞了，这估计就要GG了。</p>\n<p><strong>数据不一致问题</strong></p>\n<p>因为协调者和参与者之间的交流是经过网络的，而网络有时候就会抽风的或者发生局部网络异常。那么就有可能导致某些参与者无法收到协调者的请求，而某些收到了。比如是提交请求，然后那些收到命令的参与者就提交事务了，此时就产生了数据不一致的问题</p>\n<h3 id=\"2PC小结\"><a href=\"#2PC小结\" class=\"headerlink\" title=\"2PC小结\"></a>2PC小结</h3><p>它是一个 同步阻塞 的 强一致性两阶段提交协议，分别是准备阶段和提交/回滚阶段。<br />2PC 的优势在于对业务没有侵入，可以利用数据库自身机制来进行事务的提交和回滚。<br />它的缺点：是一个同步阻塞协议，会导致高延迟和性能的下降，并且存在协调者单点故障问题，极端情况下会有数据不一致的问题<br />当然这只是协议，具体的落地还是可以变通了，比如协调者单点问题，我就搞个主从来实现协调者，对吧<br />分布式数据库的 2PC 改进模型<br />可能有些人对分布式数据库不熟悉，没有关系，我们主要学的是思想，看看人家的思路。</p>\n<p>简单的讲下 Percolator 模型，它是基于分布式存储系统 BigTable 建立的模型，BigTable 是啥也不清楚的同学没有关系影响不大。</p>\n<p>还是拿转账的例子来说，我现在有 200 块钱，你现在有 100 块钱，为了突出重点我也不按正常的结构来画这个表<br /><img src=\"/image/blog/%E4%BA%8B%E5%8A%A13.png?raw=true\" alt=\"image.png\"><br />然后我要转 100 块给你。<br /><img src=\"/image/blog/%E4%BA%8B%E5%8A%A14.png?raw=true\" alt=\"image.png\"></p>\n<ol>\n<li>此时事务管理器发起了准备请求，然后我账上的钱就少了，你账上的钱就多了，而且事务管理器还记录下这次操作的日志</li>\n<li>此时的数据还是私有版本，别的事务是读不到的，简单的理解 Lock 上有值就还是私有的。可以看到我的记录Lock 标记的是 PK，你的记录标记的是指向我的记录指针，这个 PK是随机选择的</li>\n<li>然后事务管理器会向被选择作为 PK 的那条记录发起提交指令</li>\n</ol>\n<p>此时就会把我的记录的锁给抹去了，这等于我的记录不再是私有版本了，别的事务就都能访问了。</p>\n<p>那你的记录上还有锁啊？不用更新吗？<br />答案是：不需要及时更新，因为访问你的这条记录的时候会去根据指针找我的那个记录，发现记录已经提交了所以你的记录就可以被访问了。</p>\n<p>有人说这效率不就差了，每次都要去找一次，别急。后台会有个线程来扫描，然后更新把锁记录给去了。这不就稳了嘛。</p>\n<h3 id=\"相比于-2PC-的改进\"><a href=\"#相比于-2PC-的改进\" class=\"headerlink\" title=\"相比于 2PC 的改进\"></a>相比于 2PC 的改进</h3><ol>\n<li>首先 Percolator 在提交阶段不需要和所有的参与者交互，只需要和一个参与者打交道，所以这个提交是原子的！解决了数据不一致问题</li>\n<li>然后事务管理器会记录操作日志，这样当事务管理器挂了之后选举的新事务管理器就可以通过日志来得知当前的情况从而继续工作，解决了单点故障问题</li>\n<li>并且 Percolator 还会有后台线程，会扫描事务状况，在事务管理器宕机之后会回滚各个参与者上的事务。</li>\n</ol>\n<blockquote>\n<p>可以看到相对于 2PC 还是做了很多改进的，也是巧妙的。 其实分布式数据库还有别的事务模型，有兴趣的同学可以自行了解</p>\n</blockquote>\n<hr>\n<h3 id=\"XA-规范\"><a href=\"#XA-规范\" class=\"headerlink\" title=\"XA 规范\"></a>XA 规范</h3><p>让我们再回来 2PC，既然说到 2PC 了那么也简单的提一下 XA 规范，XA 规范是基于两阶段提交的，它实现了两阶段提交协议。<br />在说 XA 规范之前又得先提一下 DTP （Distributed Transaction Processing）模型，这模型规范了分布式事务的模型设计。<br />而 XA 规范又约束了 DTP 模型中的事务管理器（TM） 和资源管理器（RM）之间的交互，简单的说就是你们两之间要按照一定的格式规范来交流！<br />我们先来看下 XA 约束下的 DTP 模型。<br /><img src=\"/image/blog/%E4%BA%8B%E5%8A%A15.png?raw=true\" alt=\"image.png\"></p>\n<p>AP 应用程序，就是我们的应用，事务的发起者。<br />RM 资源管理器，简单的认为就是数据库，具备事务提交和回滚能力，对应我们上面的 2PC 就是参与者。<br />TM 事务管理器，就是协调者了，和每个 RM 通信。</p>\n<p>简单的说就是 AP 通过 TM 来定义事务操作，TM 和 RM 之间会通过 XA 规范进行通信，执行两阶段提交，而 AP 的资源是从 RM 拿的。</p>\n<p>从模型上看有三个角色，而实际实现可以由一个角色实现两个功能，比如 AP 来实现 TM 的功能，TM 没必要抽出来单独部署。</p>\n<h3 id=\"MySQL-XA\"><a href=\"#MySQL-XA\" class=\"headerlink\" title=\"MySQL XA\"></a>MySQL XA</h3><p>知晓了 DTP 之后，我们就来看看 XA 在 MySQL 中是如何操作的，不过只有 InnoDB 支持。</p>\n<p>简单的说就是要先定义一个全局唯一的 XID，然后告知每个事务分支要进行的操作。<br />可以看到图中执行了两个操作，分别是改名字和插入日志，等于先注册下要做的事情，通过 XA START XID 和 XA END XID 来包裹要执行的 SQL。<br /><img src=\"/image/blog/%E4%BA%8B%E5%8A%A16.png?raw=true\" alt=\"image.png\"><br />然后需要发送准备命令，来执行第一阶段，也就是除了事务的提交啥都干了的阶段。<br /><img src=\"/image/blog/%E4%BA%8B%E5%8A%A17.png?raw=true\" alt=\"image.png\"><br />然后根据准备的情况来选择执行提交事务命令还是回滚事务命令。<br /><img src=\"/image/blog/%E4%BA%8B%E5%8A%A18.png?raw=true\" alt=\"image.png\"><br />基本上就是这么个流程，不过 MySQL XA 的性能不高这点是需要注意的。</p>\n<p>可以看到虽说 2PC 有缺点，但是还是有基于 2PC 的落地实现的，而 3PC 的引出是为了解决 2PC 的一些缺点，但是它整体下来开销更大，也解决不了网络分区的问题，我也没有找到 3PC 的落地实现。</p>\n<p>不过我还是稍微提一下，知晓一下就行，纯理论</p>\n<h2 id=\"方案2：3PC\"><a href=\"#方案2：3PC\" class=\"headerlink\" title=\"方案2：3PC\"></a>方案2：3PC</h2><p>3PC 的引入是为了解决 2PC 同步阻塞和减少数据不一致的情况。<br />3PC 也就是多了一个阶段，一个询问的阶段，分别是** 准备、预提交、提交** 这三个阶段</p>\n<ol>\n<li>准备阶段单纯就是协调者去访问参与者，类似于你还好吗？能接请求不。</li>\n<li>预提交其实就是 2PC 的准备阶段，除了事务的提交啥都干了。</li>\n<li>提交阶段和 2PC 的提交一致。</li>\n</ol>\n<p><img src=\"/image/blog/%E4%BA%8B%E5%8A%A19.png?raw=true\" alt=\"image.png\"><br />3PC 多了一个阶段其实就是在执行事务之前来确认参与者是否正常，防止个别参与者不正常的情况下，其他参与者都执行了事务，锁定资源。出发点是好的，<strong>但是绝大部分情况下肯定是正常的，所以每次都多了一个交互阶段就很不划算</strong>。</p>\n<p>然后 3<strong>PC 在参与者处也引入了超时机制，这样在协调者挂了的情况下，如果已经到了提交阶段了，参与者等半天没收到协调者的情况的话就会自动提交事务</strong>。</p>\n<p>不过万一协调者发的是回滚命令呢？你看这就出错了，数据不一致了。</p>\n<p>还有维基百科上说 2PC 参与者准备阶段之后，如果协调者挂了，参与者是无法得知整体的情况的，因为大局是协调者掌控的，所以参与者相互之间的状况它们不清楚。而 3PC 经过了第一阶段的确认，即使协调者挂了参与者也知道自己所处预提交阶段是因为已经得到准备阶段所有参与者的认可了。</p>\n<p>简单的说就像加了个围栏，使得各参与者的状态得以统一<br /><a href=\"https://blog.csdn.net/QiuHaoqian/article/details/111572037\"><br /></a></p>\n<h3 id=\"小结-2PC-和-3PC\"><a href=\"#小结-2PC-和-3PC\" class=\"headerlink\" title=\"小结 2PC 和 3PC\"></a>小结 2PC 和 3PC</h3><p>从上面已经知晓了 2PC 是一个强一致性的同步阻塞协议，性能已经是比较差的了。</p>\n<p>而 3PC 的出发点是为了解决 2PC 的缺点，但是多了一个阶段就多了一次通讯的开销，而且是绝大部分情况下无用的通讯。虽说引入参与者超时来解决协调者挂了的阻塞问题，但是数据还是会不一致。</p>\n<p>可以看到 3PC 的引入并没什么实际突破，而且性能更差了，所以实际只有 2PC 的落地实现</p>\n<blockquote>\n<p>再提一下，2PC 还是 3PC 都是协议，可以认为是一种指导思想，和真正的落地还是有差别的</p>\n</blockquote>\n<p><img src=\"/image/blog/%E4%BA%8B%E5%8A%A110.png?raw=true\" alt=\"image.png\"></p>\n<h2 id=\"方案3：TCC\"><a href=\"#方案3：TCC\" class=\"headerlink\" title=\"方案3：TCC\"></a>方案3：TCC</h2><p>不知道大家注意到没，不管是 2PC 还是 3PC 都是依赖于数据库的事务提交和回滚。</p>\n<p>而有时候一些业务它不仅仅涉及到数据库，可能是发送一条短信，也可能是上传一张图片。所以说事务的提交和回滚就得提升到业务层面而不是数据库层面了。</p>\n<p>而** TCC 就是一种业务层面或者是应用层的两阶段提交**</p>\n<p>TCC 分为指代 <strong>Try、Confirm、Cancel</strong> ，也就是 业务层面需要写对应的三个方法，主要用于跨数据库、跨服务的业务操作的数据一致性问题。</p>\n<p>TCC 分为两个阶段：</p>\n<ol>\n<li>第一阶段是资源检查预留阶段即 Try</li>\n<li>第二阶段是提交或回滚，如果是提交的话就是执行真正的业务操作，如果是回滚则是执行预留资源的取消，恢复初始状态</li>\n</ol>\n<p>比如有一个扣款服务，我需要写 <strong>Try 方法，用来冻结扣款资金</strong>，还需要一个 <strong>Confirm 方法来执行真正的扣款</strong>，最后还需要提供 <strong>Cancel 来进行冻结操作的回滚</strong>，对应的一个事务的所有服务都需要提供这三个方法。</p>\n<p>可以看到本来就一个方法，现在需要膨胀成三个方法，所以说** TCC 对业务有很大的侵入**，像如果没有冻结的那个字段，还需要改表结构。</p>\n<p>我们来看下流程<br /><img src=\"/image/blog/%E4%BA%8B%E5%8A%A111.png?raw=true\" alt=\"image.png\"><br />虽说对业务有侵入，但是 TCC 没有资源的阻塞，每一个方法都是直接提交事务的，如果出错是通过业务层面的 Cancel 来进行补偿，所以也称补偿性事务方法。</p>\n<p>这里有人说那要是所有人 Try 都成功了，都执行 Comfirm 了，但是个别 Confirm 失败了怎么办？</p>\n<p>这时候只能是不停地重试调失败了的 Confirm 直到成功为止，如果真的不行只能记录下来，到时候人工介入了</p>\n<h3 id=\"TCC-的注意点\"><a href=\"#TCC-的注意点\" class=\"headerlink\" title=\"TCC 的注意点\"></a>TCC 的注意点</h3><p>这几个点很关键，在实现的时候一定得注意了<br /><img src=\"/image/blog/%E4%BA%8B%E5%8A%A112.png?raw=true\" alt=\"image.png\"><br /><strong>幂等问题</strong><br />因为网络调用无法保证请求一定能到达，所以都会有重调机制，因此对于 Try、Confirm、Cancel 三个方法都需要幂等实现，避免重复执行产生错误。</p>\n<p><strong>空回滚问题</strong><br />这个问题是指的是 Try 方法由于网络问题没收到超时了，此时事务管理器就会发出 Cancel 命令，那么需要支持 Cancel 在未执行 Try 的情况下能正常的 Cancel。</p>\n<p><strong>悬挂问题</strong><br />这个问题也是指 Try 方法由于网络阻塞超时触发了事务管理器发出了 Cancel 命令，但是执行了 Cancel 命令之后 Try 请求到了，你说气不气。这都 Cancel 了你来个 Try，对于事务管理器来说这时候事务已经是结束了的，这冻结操作就被“悬挂”了，所以空回滚之后还得记录一下，防止 Try 的再调用<br /><a href=\"https://blog.csdn.net/QiuHaoqian/article/details/111572037\"><br /></a></p>\n<h3 id=\"TCC-变体\"><a href=\"#TCC-变体\" class=\"headerlink\" title=\"TCC 变体\"></a>TCC 变体</h3><p>上面我们说的是通用型的 TCC，它需要改造以前的实现，但是有一种情况是无法改造的，就是你调用的是别的公司的接口。</p>\n<p><strong>没有 Try 的 TCC</strong></p>\n<p>比如坐飞机需要换乘，换乘的又是不同的航空公司，比如从 A 飞到 B，再从 B 飞到 C，只有 A - B 和 B - C 都买到票了才有意义。</p>\n<p>这时候的选择就没得 Try 了，直接调用航空公司的买票操作，当两个航空公司都买成功了那就直接成功了，如果某个公司买失败了，那就需要调用取消订票接口。</p>\n<p>也就是在第一阶段直接就执行完整个业务操作了，所以要重点关注回滚操作，如果回滚失败得有提醒，要人工介入等。</p>\n<p>这其实就是 TCC 的思想：</p>\n<ol>\n<li>一阶段：直接执行真正的操作</li>\n<li>二阶段：补偿一阶段的真正操作后果，如果一阶段都成功则不用执行</li>\n</ol>\n<p><img src=\"/image/blog/%E4%BA%8B%E5%8A%A113.png?raw=true\" alt=\"image.png\"></p>\n<p><strong>利用可靠消息服务实现 异步 TCC</strong><br />这 TCC 还能异步？其实也是一种折中，比如某些服务很难改造，并且它又不会影响主业务决策，也就是它不那么重要，不需要及时的执行</p>\n<p>这时候可以引入可靠消息服务，通过消息服务来替代个别服务来进行 Try、Confirm、Cancel 。<br />Try 的时候只是写入消息，消息还不能被消费，Confirm 就是真正发消息的操作，Cancel 就是取消消息的发送。<br />这可靠消息服务其实就类似于等下要提到的事务消息，这个方案等于糅合了事务消息和 TCC。</p>\n<h3 id=\"TCC-小结\"><a href=\"#TCC-小结\" class=\"headerlink\" title=\"TCC 小结\"></a>TCC 小结</h3><p>可以看到 TCC 是通过业务代码来实现事务的提交和回滚，对业务的侵入较大，它是<strong>业务层面的两阶段提交</strong>。</p>\n<p>它的性能比 2PC 要高，因为不会有资源的阻塞，并且适用范围也大于 2PC，在实现上要注意上面提到的几个注意点</p>\n<p>它是业界比较常用的分布式事务实现方式，而且从变体也可以得知，<strong>还是得看业务变通的，不是说你要用 TCC 一定就得死板的让所有的服务都改造成那三个方法</strong><br /><a href=\"https://blog.csdn.net/QiuHaoqian/article/details/111572037\"><br /></a></p>\n<h1 id=\"本地消息表\"><a href=\"#本地消息表\" class=\"headerlink\" title=\"本地消息表\"></a>本地消息表</h1><p>本地消息就是利用了本地事务，会在数据库中存放一份本地事务消息表，在进行本地事务操作时加入了本地消息的插入，即将业务的执行和将消息放入消息表中的操作放在同一个事务中提交。</p>\n<p>这样本地事务执行成功的话，消息肯定也插入成功，然后再调用其他服务，如果调用成功就修改这条本地消息的状态。</p>\n<p>如果失败也不要紧，会有一个后台线程扫描，发现这些状态的消息，会一直调用相应的服务，一般会设置重试的次数，如果一直不行则特殊记录，待人工介入处理。</p>\n<p>可以看到还是很简单的，也是一种最大努力通知思想<br /><img src=\"/image/blog/%E4%BA%8B%E5%8A%A114.png?raw=true\" alt=\"image.png\"></p>\n<h1 id=\"Seata的实现\"><a href=\"#Seata的实现\" class=\"headerlink\" title=\"Seata的实现\"></a>Seata的实现</h1><h2 id=\"AT模式\"><a href=\"#AT模式\" class=\"headerlink\" title=\"AT模式\"></a>AT模式</h2><p>AT 模式就是两阶段提交，前面我们提到了两阶段提交有同步阻塞的问题，效率太低了，那 Seata 是怎么解决的呢？</p>\n<p>AT 的 一阶段直接就把事务提交了，直接释放了本地锁，这么草率直接提交的嘛？当然不是，这里和本地消息表有点类似，就是 利用本地事务，执行真正的事务操作中还会插入回滚日志，然后在一个事务中提交。</p>\n<p>这回滚日志怎么来的？</p>\n<p>通过框架代理 JDBC 的一些类，在执行 SQL 的时候解析 SQL 得到执行前的数据镜像，然后执行 SQL ，再得到执行后的数据镜像，然后把这些数据组装成回滚日志。</p>\n<p>再伴随的这个本地事务的提交把回滚日志也插入到数据库的 UNDO_LOG 表中(所以数据库需要有一张UNDO_LOG 表)。</p>\n<p>这波操作下来在一阶段就可以没有后顾之忧的提交事务了。</p>\n<p>然后一阶段如果成功，那么二阶段可以异步的删除那些回滚日志，如果一阶段失败那么可以通过回滚日志来反向补偿恢复。</p>\n<p>这时候有细心的同学想到了，万一中间有人改了这条数据怎么办？你这镜像就不对了啊？</p>\n<p>所以说还有个全局锁的概念，在事务提交前需要拿到全局锁（可以理解为对这条数据的锁），然后才能顺利提交本地事务。如果一直拿不到那就需要回滚本地事务了</p>\n<p>官网的示例很好，以下部分内容摘抄自 Seata 官网的示例：</p>\n<ol>\n<li>有两个事务，分别是 tx1、和 tx2，分别对 a 表的 m 字段进行更新操作，m 的初始值 1000</li>\n<li>tx1 先开始，开启本地事务，拿到本地锁，更新操作 m = 1000 - 100 = 900。本地事务提交前，先拿到该记录的 全局锁 ，本地提交释放本地锁</li>\n<li>tx2 后开始，开启本地事务，拿到本地锁，更新操作 m = 900 - 100 = 800。本地事务提交前，尝试拿该记录的 全局锁 ，tx1 全局提交前，该记录的全局锁被 tx1 持有，tx2 需要重试等待全局锁 </li>\n</ol>\n<p><img src=\"/image/blog/%E4%BA%8B%E5%8A%A115.png?raw=true\" alt=\"image.png\"><br />可以看到 tx2 的修改被阻塞了，之后重试拿到全局锁之后就能提交然后释放本地锁</p>\n<p>如果 tx1 的二阶段全局回滚，则 tx1 需要重新获取该数据的本地锁，进行反向补偿的更新操作，实现分支的回滚。<br />此时，如果 tx2 仍在等待该数据的全局锁，同时持有本地锁，则 tx1 的分支回滚会失败。分支的回滚会一直重试，直到 tx2 的全局锁等锁超时，放弃全局锁并回滚本地事务释放本地锁，tx1 的分支回滚最终成功<br /><img src=\"/image/blog/%E4%BA%8B%E5%8A%A116.png?raw=true\" alt=\"image.png\"><br />然后 <strong>AT 模式默认全局是读未提交的隔离级别</strong>，如果应用在特定场景下，必需要求全局的读已提交 ，可以通过 SELECT FOR UPDATE 语句的代理</p>\n<p>当然前提是你本地事务隔离级别是读已提交及以上</p>\n<h2 id=\"AT-模式小结\"><a href=\"#AT-模式小结\" class=\"headerlink\" title=\"AT 模式小结\"></a>AT 模式小结</h2><ol>\n<li>可以看到通过代理来无侵入的得到数据的前后镜像，组装成回滚日志伴随本地事务一起提交，解决了两阶段的同步阻塞问题</li>\n<li>并且利用全局锁来实现写隔离</li>\n<li>为了总体性能的考虑，默认是读未提交隔离级别，只代理了 SELECT FOR UPDATE 来进行读已提交的隔离</li>\n</ol>\n<p>这其实就是两阶段提交的变体实现</p>\n<h2 id=\"TCC-模式\"><a href=\"#TCC-模式\" class=\"headerlink\" title=\"TCC 模式\"></a>TCC 模式</h2><p><img src=\"/image/blog/%E4%BA%8B%E5%8A%A117.png?raw=true\" alt=\"image.png\"></p>\n<h3 id=\"Saga-模式\"><a href=\"#Saga-模式\" class=\"headerlink\" title=\"Saga 模式\"></a>Saga 模式</h3><p>这个 Saga 是 Seata 提供的长事务解决方案，适用于业务流程多且长的情况下，这种情况如果要实现一般的 TCC 啥的可能得嵌套多个事务了。</p>\n<p>并且有些系统无法提供 TCC 这三种接口，比如老项目或者别人公司的，所以就搞了个 Saga 模式，这个 Saga 是在 1987 年 Hector &amp; Kenneth 发表的论⽂中提出的。</p>\n<p>那 Saga 如何做呢？来看下这个图<br /><img src=\"/image/blog/%E4%BA%8B%E5%8A%A118.png?raw=true\" alt=\"image.png\"><br />假设有 N 个操作，直接从 T1 开始就是直接执行提交事务，然后再执行 T2，可以看到就是无锁的直接提交，到 T3 发现执行失败了，然后就进入 Compenstaing 阶段，开始一个一个倒回补偿了。</p>\n<p>思想就是: 一开始蒙着头干，别怂，出了问题咱们再一个一个改回去呗。</p>\n<p>可以看到这种情况是不保证事务的隔离性的，并且 Saga 也有 TCC 的一样的注意点，需要空补偿，防悬挂和幂等。</p>\n<p>而且极端情况下会因为数据被改变了导致无法回滚的情况。比如第一步给我打了 2 万块钱，我给取出来花了，这时候你回滚，我账上余额已经 0 了，你说怎么办嘛？难道给我还搞负的不成?</p>\n<p>这种情况只能在业务流程上入手，我写代码其实一直是这样写的，就拿买皮肤的场景来说，我都是先扣钱再给皮肤。假设先给皮肤扣钱失败了不就白给了嘛？这钱你来补啊？你觉得用户会来反馈说皮肤给了钱没扣嘛？可能有小机灵鬼说我到时候把皮肤给改回去，嘿嘿这种事情确实发生过，啧啧，被骂的真惨。</p>\n<p>所以正确的流程应该是先扣钱再给皮肤，钱到自己袋里先，皮肤没给成功用户自然而然会找过来，这时候再给他呗，虽说可能你写出了个 BUG ，但是还好不是个白给的 BUG。</p>\n<p>所以说这点在编码的时候还是得注意下的<br /><a href=\"https://blog.csdn.net/QiuHaoqian/article/details/111572037\"><br /></a></p>\n<p><a href=\"https://blog.csdn.net/QiuHaoqian/article/details/111572037\"><br /></a></p>\n<h1 id=\"Seata的使用说明\"><a href=\"#Seata的使用说明\" class=\"headerlink\" title=\"Seata的使用说明\"></a>Seata的使用说明</h1><blockquote>\n<p><a href=\"http://seata.io/zh-cn/\">官网</a></p>\n</blockquote>\n<h2 id=\"TC-TM-RM三大组件\"><a href=\"#TC-TM-RM三大组件\" class=\"headerlink\" title=\"TC/TM/RM三大组件\"></a>TC/TM/RM三大组件</h2><p>分布式事务的执行流程</p>\n<ul>\n<li>TM开启分布式事务(TM向TC注册全局事务记录)</li>\n<li>换业务场景，编排数据库，服务等事务内资源（RM向TC汇报资源准备状态）</li>\n<li>TM结束分布式事务，事务一阶段结束（TM通知TC提交/回滚分布式事务）</li>\n<li>TC汇总事务信息，决定分布式事务是提交还是回滚</li>\n<li>TC通知所有RM提交/回滚资源，事务二阶段结束。</li>\n</ul>\n<p><img src=\"/image/blog/seata1.png?raw=true\" alt=\"image.png\"></p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">registry &#123;<br>  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa<br>  type = <span class=\"hljs-attr\">&quot;file&quot;</span><br>  nacos &#123;<br>    application = <span class=\"hljs-attr\">&quot;seata-server&quot;</span><br>    serverAddr = <span class=\"hljs-attr\">&quot;127.0.0.1:8848&quot;</span><br>    group = <span class=\"hljs-attr\">&quot;SEATA_GROUP&quot;</span><br>    namespace = <span class=\"hljs-attr\">&quot;&quot;</span><br>    cluster = <span class=\"hljs-attr\">&quot;default&quot;</span><br>    username = <span class=\"hljs-attr\">&quot;&quot;</span><br>    password = <span class=\"hljs-attr\">&quot;&quot;</span><br>  &#125;<br>  file &#123;<br>    name = <span class=\"hljs-attr\">&quot;file.conf&quot;</span><br>  &#125;<br>&#125;<br><br>config &#123;<br>  # file、nacos 、apollo、zk、consul、etcd3<br>  type = <span class=\"hljs-attr\">&quot;file&quot;</span><br><br>  nacos &#123;<br>    serverAddr = <span class=\"hljs-attr\">&quot;127.0.0.1:8848&quot;</span><br>    namespace = <span class=\"hljs-attr\">&quot;&quot;</span><br>    group = <span class=\"hljs-attr\">&quot;SEATA_GROUP&quot;</span><br>    username = <span class=\"hljs-attr\">&quot;&quot;</span><br>    password = <span class=\"hljs-attr\">&quot;&quot;</span><br>    dataId = <span class=\"hljs-attr\">&quot;seataServer.properties&quot;</span><br>  &#125;<br>  file &#123;<br>    name = <span class=\"hljs-attr\">&quot;file.conf&quot;</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">## transaction log store, only used in seata-server<br>store &#123;<br>  ## store mode: file、db、redis<br>  mode = <span class=\"hljs-string\">&quot;file&quot;</span><br>  ## rsa decryption public key<br>  publicKey = <span class=\"hljs-string\">&quot;&quot;</span><br>  ## file store property<br>  file &#123;<br>    ## store location dir<br>    dir = <span class=\"hljs-attr\">&quot;sessionStore&quot;</span><br>    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions<br>    maxBranchSessionSize = 16384<br>    # globe session size , if exceeded throws exceptions<br>    maxGlobalSessionSize = 512<br>    # file buffer size , if exceeded allocate new buffer<br>    fileWriteBufferCacheSize = 16384<br>    # when recover batch read size<br>    sessionReloadReadSize = 100<br>    # async, sync<br>    flushDiskMode = async<br>  &#125;<br><br>  ## database store property<br>  db &#123;<br>    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.<br>    datasource = <span class=\"hljs-attr\">&quot;druid&quot;</span><br>    ## mysql/oracle/postgresql/h2/oceanbase etc.<br>    dbType = <span class=\"hljs-attr\">&quot;mysql&quot;</span><br>    driverClassName = <span class=\"hljs-attr\">&quot;com.mysql.jdbc.Driver&quot;</span><br>    ## if using mysql to store the data, recommend add rewriteBatchedStatements=true in jdbc connection param<br>    url = <span class=\"hljs-attr\">&quot;jdbc:mysql://127.0.0.1:3306/seata?rewriteBatchedStatements=true&quot;</span><br>    user = <span class=\"hljs-attr\">&quot;mysql&quot;</span><br>    password = <span class=\"hljs-attr\">&quot;mysql&quot;</span><br>    minConn = 5<br>    maxConn = 100<br>    globalTable = <span class=\"hljs-attr\">&quot;global_table&quot;</span><br>    branchTable = <span class=\"hljs-attr\">&quot;branch_table&quot;</span><br>    lockTable = <span class=\"hljs-attr\">&quot;lock_table&quot;</span><br>    queryLimit = 100<br>    maxWait = 5000<br>  &#125;<br><br>  ## redis store property<br>  redis &#123;<br>    ## redis mode: single、sentinel<br>    mode = <span class=\"hljs-string\">&quot;single&quot;</span><br>    ## single mode property<br>    single &#123;<br>      host = <span class=\"hljs-attr\">&quot;127.0.0.1&quot;</span><br>      port = <span class=\"hljs-attr\">&quot;6379&quot;</span><br>    &#125;<br>    ## sentinel mode property<br>    sentinel &#123;<br>      masterName = <span class=\"hljs-attr\">&quot;&quot;</span><br>      ## such as <span class=\"hljs-attr\">&quot;10.28.235.65:26379,10.28.235.65:26380,10.28.235.65:26381&quot;</span><br>      sentinelHosts = <span class=\"hljs-attr\">&quot;&quot;</span><br>    &#125;<br>    password = <span class=\"hljs-string\">&quot;&quot;</span><br>    database = <span class=\"hljs-string\">&quot;0&quot;</span><br>    minConn = <span class=\"hljs-number\">1</span><br>    maxConn = <span class=\"hljs-number\">10</span><br>    maxTotal = <span class=\"hljs-number\">100</span><br>    queryLimit = <span class=\"hljs-number\">100</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">registry &#123;<br>  type = <span class=\"hljs-attr\">&quot;nacos&quot;</span><br><br>  nacos &#123;<br>    application = <span class=\"hljs-attr\">&quot;seata-server&quot;</span><br>    serverAddr = <span class=\"hljs-attr\">&quot;localhost:8848&quot;</span><br>    group = <span class=\"hljs-attr\">&quot;SEATA_GROUP&quot;</span><br>    namespace = <span class=\"hljs-attr\">&quot;4388013f-6618-4de0-bb88-8bf280069254&quot;</span><br>    cluster = <span class=\"hljs-attr\">&quot;default&quot;</span><br>    username = <span class=\"hljs-attr\">&quot;nacos&quot;</span><br>    password = <span class=\"hljs-attr\">&quot;nacos&quot;</span><br>  &#125;<br>&#125;#   <br>#   <br>config &#123;<br> <br>  type = <span class=\"hljs-attr\">&quot;nacos&quot;</span><br>  nacos &#123;<br>    serverAddr = <span class=\"hljs-attr\">&quot;localhost:8848&quot;</span><br>    namespace = <span class=\"hljs-attr\">&quot;4388013f-6618-4de0-bb88-8bf280069254&quot;</span><br>    group = <span class=\"hljs-attr\">&quot;SEATA_GROUP&quot;</span><br>    username = <span class=\"hljs-attr\">&quot;nacos&quot;</span><br>    password = <span class=\"hljs-attr\">&quot;nacos&quot;</span><br>    dataId = <span class=\"hljs-attr\">&quot;seataServer.properties&quot;</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p><img src=\"/image/blog/seata2.png?raw=true\" alt=\"image.png\"></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-meta\">transport.type</span>=<span class=\"hljs-string\">TCP</span><br><span class=\"hljs-meta\">transport.server</span>=<span class=\"hljs-string\">NIO</span><br><span class=\"hljs-meta\">transport.heartbeat</span>=<span class=\"hljs-string\">true</span><br><span class=\"hljs-meta\">transport.enableClientBatchSendRequest</span>=<span class=\"hljs-string\">true</span><br><span class=\"hljs-meta\">transport.threadFactory.bossThreadPrefix</span>=<span class=\"hljs-string\">NettyBoss</span><br><span class=\"hljs-meta\">transport.threadFactory.workerThreadPrefix</span>=<span class=\"hljs-string\">NettyServerNIOWorker</span><br><span class=\"hljs-meta\">transport.threadFactory.serverExecutorThreadPrefix</span>=<span class=\"hljs-string\">NettyServerBizHandler</span><br><span class=\"hljs-meta\">transport.threadFactory.shareBossWorker</span>=<span class=\"hljs-string\">false</span><br><span class=\"hljs-meta\">transport.threadFactory.clientSelectorThreadPrefix</span>=<span class=\"hljs-string\">NettyClientSelector</span><br><span class=\"hljs-meta\">transport.threadFactory.clientSelectorThreadSize</span>=<span class=\"hljs-string\">1</span><br><span class=\"hljs-meta\">transport.threadFactory.clientWorkerThreadPrefix</span>=<span class=\"hljs-string\">NettyClientWorkerThread</span><br><span class=\"hljs-meta\">transport.threadFactory.bossThreadSize</span>=<span class=\"hljs-string\">1</span><br><span class=\"hljs-meta\">transport.threadFactory.workerThreadSize</span>=<span class=\"hljs-string\">default</span><br><span class=\"hljs-meta\">transport.shutdown.wait</span>=<span class=\"hljs-string\">3</span><br><span class=\"hljs-meta\">transport.serialization</span>=<span class=\"hljs-string\">seata</span><br><span class=\"hljs-meta\">transport.compressor</span>=<span class=\"hljs-string\">none</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\"># store</span><br><span class=\"hljs-comment\">#model改为db</span><br><span class=\"hljs-meta\">store.mode</span>=<span class=\"hljs-string\">db</span><br><span class=\"hljs-meta\">store.lock.mode</span>=<span class=\"hljs-string\">file</span><br><span class=\"hljs-meta\">store.session.mode</span>=<span class=\"hljs-string\">file</span><br><span class=\"hljs-comment\"># store.publicKey=&quot;&quot;</span><br><span class=\"hljs-meta\">store.file.dir</span>=<span class=\"hljs-string\">file_store/data</span><br><span class=\"hljs-meta\">store.file.maxBranchSessionSize</span>=<span class=\"hljs-string\">16384</span><br><span class=\"hljs-meta\">store.file.maxGlobalSessionSize</span>=<span class=\"hljs-string\">512</span><br><span class=\"hljs-meta\">store.file.fileWriteBufferCacheSize</span>=<span class=\"hljs-string\">16384</span><br><span class=\"hljs-meta\">store.file.flushDiskMode</span>=<span class=\"hljs-string\">async</span><br><span class=\"hljs-meta\">store.file.sessionReloadReadSize</span>=<span class=\"hljs-string\">100</span><br><span class=\"hljs-meta\">store.db.datasource</span>=<span class=\"hljs-string\">druid</span><br><span class=\"hljs-meta\">store.db.dbType</span>=<span class=\"hljs-string\">mysql</span><br><span class=\"hljs-comment\">#修改数据驱动，这里是mysql8，使用mysql5的话请修改</span><br><span class=\"hljs-meta\">store.db.driverClassName</span>=<span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span><br><span class=\"hljs-comment\"># 改为上面创建的seata服务数据库</span><br><span class=\"hljs-meta\">store.db.url</span>=<span class=\"hljs-string\">jdbc:mysql://127.0.0.1:3306/seata?rewriteBatchedStatements=true&amp;serverTimezone=UTC</span><br><span class=\"hljs-comment\"># 改为自己的数据库用户名</span><br><span class=\"hljs-meta\">store.db.user</span>=<span class=\"hljs-string\">root</span><br><span class=\"hljs-comment\"># 改为自己的数据库密码</span><br><span class=\"hljs-meta\">store.db.password</span>=<span class=\"hljs-string\">123456</span><br><span class=\"hljs-meta\">store.db.minConn</span>=<span class=\"hljs-string\">5</span><br><span class=\"hljs-meta\">store.db.maxConn</span>=<span class=\"hljs-string\">30</span><br><span class=\"hljs-meta\">store.db.globalTable</span>=<span class=\"hljs-string\">global_table</span><br><span class=\"hljs-meta\">store.db.branchTable</span>=<span class=\"hljs-string\">branch_table</span><br><span class=\"hljs-meta\">store.db.distributedLockTable</span>=<span class=\"hljs-string\">distributed_lock</span><br><span class=\"hljs-meta\">store.db.queryLimit</span>=<span class=\"hljs-string\">100</span><br><span class=\"hljs-meta\">store.db.lockTable</span>=<span class=\"hljs-string\">lock_table</span><br><span class=\"hljs-meta\">store.db.maxWait</span>=<span class=\"hljs-string\">5000</span><br><span class=\"hljs-comment\"># log</span><br><span class=\"hljs-meta\">log.exceptionRate</span>=<span class=\"hljs-string\">100</span><br><span class=\"hljs-comment\"># metrics</span><br><span class=\"hljs-meta\">metrics.enabled</span>=<span class=\"hljs-string\">false</span><br><span class=\"hljs-meta\">metrics.registryType</span>=<span class=\"hljs-string\">compact</span><br><span class=\"hljs-meta\">metrics.exporterList</span>=<span class=\"hljs-string\">prometheus</span><br><span class=\"hljs-meta\">metrics.exporterPrometheusPort</span>=<span class=\"hljs-string\">9898</span><br><span class=\"hljs-comment\"># service</span><br><span class=\"hljs-comment\"># 自己命名一个vgroupMapping</span><br><span class=\"hljs-meta\">service.vgroupMapping.fsp_tx_group</span>=<span class=\"hljs-string\">default</span><br><span class=\"hljs-meta\">service.default.grouplist</span>=<span class=\"hljs-string\">127.0.0.1:8091</span><br><span class=\"hljs-meta\">service.enableDegrade</span>=<span class=\"hljs-string\">false</span><br><span class=\"hljs-meta\">service.disableGlobalTransaction</span>=<span class=\"hljs-string\">false</span><br><span class=\"hljs-comment\"># client</span><br><span class=\"hljs-meta\">client.rm.asyncCommitBufferLimit</span>=<span class=\"hljs-string\">10000</span><br><span class=\"hljs-meta\">client.rm.lock.retryInterval</span>=<span class=\"hljs-string\">10</span><br><span class=\"hljs-meta\">client.rm.lock.retryTimes</span>=<span class=\"hljs-string\">30</span><br><span class=\"hljs-meta\">client.rm.lock.retryPolicyBranchRollbackOnConflict</span>=<span class=\"hljs-string\">true</span><br><span class=\"hljs-meta\">client.rm.reportRetryCount</span>=<span class=\"hljs-string\">5</span><br><span class=\"hljs-meta\">client.rm.tableMetaCheckEnable</span>=<span class=\"hljs-string\">false</span><br><span class=\"hljs-meta\">client.rm.tableMetaCheckerInterval</span>=<span class=\"hljs-string\">60000</span><br><span class=\"hljs-meta\">client.rm.sqlParserType</span>=<span class=\"hljs-string\">druid</span><br><span class=\"hljs-meta\">client.rm.reportSuccessEnable</span>=<span class=\"hljs-string\">false</span><br><span class=\"hljs-meta\">client.rm.sagaBranchRegisterEnable</span>=<span class=\"hljs-string\">false</span><br><span class=\"hljs-meta\">client.rm.tccActionInterceptorOrder</span>=<span class=\"hljs-string\">-2147482648</span><br><span class=\"hljs-meta\">client.tm.commitRetryCount</span>=<span class=\"hljs-string\">5</span><br><span class=\"hljs-meta\">client.tm.rollbackRetryCount</span>=<span class=\"hljs-string\">5</span><br><span class=\"hljs-meta\">client.tm.defaultGlobalTransactionTimeout</span>=<span class=\"hljs-string\">60000</span><br><span class=\"hljs-meta\">client.tm.degradeCheck</span>=<span class=\"hljs-string\">false</span><br><span class=\"hljs-meta\">client.tm.degradeCheckAllowTimes</span>=<span class=\"hljs-string\">10</span><br><span class=\"hljs-meta\">client.tm.degradeCheckPeriod</span>=<span class=\"hljs-string\">2000</span><br><span class=\"hljs-meta\">client.tm.interceptorOrder</span>=<span class=\"hljs-string\">-2147482648</span><br><span class=\"hljs-meta\">client.undo.dataValidation</span>=<span class=\"hljs-string\">true</span><br><span class=\"hljs-meta\">client.undo.logSerialization</span>=<span class=\"hljs-string\">jackson</span><br><span class=\"hljs-meta\">client.undo.onlyCareUpdateColumns</span>=<span class=\"hljs-string\">true</span><br><span class=\"hljs-meta\">client.undo.logTable</span>=<span class=\"hljs-string\">undo_log</span><br><span class=\"hljs-meta\">client.undo.compress.enable</span>=<span class=\"hljs-string\">true</span><br><span class=\"hljs-meta\">client.undo.compress.type</span>=<span class=\"hljs-string\">zip</span><br><span class=\"hljs-meta\">client.undo.compress.threshold</span>=<span class=\"hljs-string\">64k</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"执行SQL进行持久化\"><a href=\"#执行SQL进行持久化\" class=\"headerlink\" title=\"执行SQL进行持久化\"></a>执行SQL进行持久化</h2><p><img src=\"/image/blog/seata3.png?raw=true\" alt=\"image.png\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">-- for AT mode you must to init this sql for you business database. the seata server not need it.</span><br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> IF <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">EXISTS</span> `undo_log`<br>(<br>    `branch_id`     <span class=\"hljs-type\">BIGINT</span>       <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;branch transaction id&#x27;</span>,<br>    `xid`           <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">128</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;global transaction id&#x27;</span>,<br>    `context`       <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">128</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;undo_log context,such as serialization&#x27;</span>,<br>    `rollback_info` LONGBLOB     <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;rollback info&#x27;</span>,<br>    `log_status`    <span class=\"hljs-type\">INT</span>(<span class=\"hljs-number\">11</span>)      <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;0:normal status,1:defense status&#x27;</span>,<br>    `log_created`   DATETIME(<span class=\"hljs-number\">6</span>)  <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;create datetime&#x27;</span>,<br>    `log_modified`  DATETIME(<span class=\"hljs-number\">6</span>)  <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;modify datetime&#x27;</span>,<br>    <span class=\"hljs-keyword\">UNIQUE</span> KEY `ux_undo_log` (`xid`, `branch_id`)<br>) ENGINE <span class=\"hljs-operator\">=</span> InnoDB<br>  AUTO_INCREMENT <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span><br>  <span class=\"hljs-keyword\">DEFAULT</span> CHARSET <span class=\"hljs-operator\">=</span> utf8mb4 COMMENT <span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;AT transaction mode undo table&#x27;</span>;<br><span class=\"hljs-comment\">-- -------------------------------- The script used when storeMode is &#x27;db&#x27; --------------------------------</span><br><span class=\"hljs-comment\">-- the table to store GlobalSession data</span><br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> IF <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">EXISTS</span> `global_table`<br>(<br>    `xid`                       <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">128</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>    `transaction_id`            <span class=\"hljs-type\">BIGINT</span>,<br>    `status`                    TINYINT      <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>    `application_id`            <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">32</span>),<br>    `transaction_service_group` <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">32</span>),<br>    `transaction_name`          <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">128</span>),<br>    `timeout`                   <span class=\"hljs-type\">INT</span>,<br>    `begin_time`                <span class=\"hljs-type\">BIGINT</span>,<br>    `application_data`          <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">2000</span>),<br>    `gmt_create`                DATETIME,<br>    `gmt_modified`              DATETIME,<br>    <span class=\"hljs-keyword\">PRIMARY</span> KEY (`xid`),<br>    KEY `idx_status_gmt_modified` (`status` , `gmt_modified`),<br>    KEY `idx_transaction_id` (`transaction_id`)<br>) ENGINE <span class=\"hljs-operator\">=</span> InnoDB<br>  <span class=\"hljs-keyword\">DEFAULT</span> CHARSET <span class=\"hljs-operator\">=</span> utf8mb4;<br><br><span class=\"hljs-comment\">-- the table to store BranchSession data</span><br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> IF <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">EXISTS</span> `branch_table`<br>(<br>    `branch_id`         <span class=\"hljs-type\">BIGINT</span>       <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>    `xid`               <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">128</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>    `transaction_id`    <span class=\"hljs-type\">BIGINT</span>,<br>    `resource_group_id` <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">32</span>),<br>    `resource_id`       <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">256</span>),<br>    `branch_type`       <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">8</span>),<br>    `status`            TINYINT,<br>    `client_id`         <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">64</span>),<br>    `application_data`  <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">2000</span>),<br>    `gmt_create`        DATETIME(<span class=\"hljs-number\">6</span>),<br>    `gmt_modified`      DATETIME(<span class=\"hljs-number\">6</span>),<br>    <span class=\"hljs-keyword\">PRIMARY</span> KEY (`branch_id`),<br>    KEY `idx_xid` (`xid`)<br>) ENGINE <span class=\"hljs-operator\">=</span> InnoDB<br>  <span class=\"hljs-keyword\">DEFAULT</span> CHARSET <span class=\"hljs-operator\">=</span> utf8mb4;<br><br><span class=\"hljs-comment\">-- the table to store lock data</span><br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> IF <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">EXISTS</span> `lock_table`<br>(<br>    `row_key`        <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">128</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>    `xid`            <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">128</span>),<br>    `transaction_id` <span class=\"hljs-type\">BIGINT</span>,<br>    `branch_id`      <span class=\"hljs-type\">BIGINT</span>       <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>    `resource_id`    <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">256</span>),<br>    `table_name`     <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">32</span>),<br>    `pk`             <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">36</span>),<br>    `status`         TINYINT      <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-string\">&#x27;0&#x27;</span> COMMENT <span class=\"hljs-string\">&#x27;0:locked ,1:rollbacking&#x27;</span>,<br>    `gmt_create`     DATETIME,<br>    `gmt_modified`   DATETIME,<br>    <span class=\"hljs-keyword\">PRIMARY</span> KEY (`row_key`),<br>    KEY `idx_status` (`status`),<br>    KEY `idx_branch_id` (`branch_id`),<br>    KEY `idx_xid_and_branch_id` (`xid` , `branch_id`)<br>) ENGINE <span class=\"hljs-operator\">=</span> InnoDB<br>  <span class=\"hljs-keyword\">DEFAULT</span> CHARSET <span class=\"hljs-operator\">=</span> utf8mb4;<br><br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> IF <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">EXISTS</span> `distributed_lock`<br>(<br>    `lock_key`       <span class=\"hljs-type\">CHAR</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>    `lock_value`     <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>    `expire`         <span class=\"hljs-type\">BIGINT</span>,<br>    <span class=\"hljs-keyword\">primary</span> key (`lock_key`)<br>) ENGINE <span class=\"hljs-operator\">=</span> InnoDB<br>  <span class=\"hljs-keyword\">DEFAULT</span> CHARSET <span class=\"hljs-operator\">=</span> utf8mb4;<br><br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;AsyncCommitting&#x27;</span>, <span class=\"hljs-string\">&#x27; &#x27;</span>, <span class=\"hljs-number\">0</span>);<br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;RetryCommitting&#x27;</span>, <span class=\"hljs-string\">&#x27; &#x27;</span>, <span class=\"hljs-number\">0</span>);<br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;RetryRollbacking&#x27;</span>, <span class=\"hljs-string\">&#x27; &#x27;</span>, <span class=\"hljs-number\">0</span>);<br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;TxTimeoutCheck&#x27;</span>, <span class=\"hljs-string\">&#x27; &#x27;</span>, <span class=\"hljs-number\">0</span>);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"YML\"><a href=\"#YML\" class=\"headerlink\" title=\"YML\"></a>YML</h2><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">seata:</span><br>  <span class=\"hljs-comment\">#事务群组（可以每个应用独立取名，也可以使用相同的名字），要与服务端nacos-config.txt中service.vgroup_mapping中存在,并且要保证多个群组情况下后缀名要保持一致-tx_group</span><br>  <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-attr\">enable-auto-data-source-proxy:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">#是否开启数据源自动代理,默认为true</span><br>  <span class=\"hljs-attr\">tx-service-group:</span> <span class=\"hljs-string\">fsp_tx_group</span>  <span class=\"hljs-comment\">#要与配置文件中的vgroupMapping一致</span><br>  <span class=\"hljs-attr\">application-id:</span> <span class=\"hljs-string\">seata-server</span><br>  <span class=\"hljs-attr\">registry:</span>  <span class=\"hljs-comment\">#registry根据seata服务端的registry配置</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">nacos</span> <span class=\"hljs-comment\">#默认为file</span><br>    <span class=\"hljs-attr\">nacos:</span><br>      <span class=\"hljs-attr\">application:</span> <span class=\"hljs-string\">seata-server</span> <span class=\"hljs-comment\">#配置自己的seata服务</span><br>      <span class=\"hljs-attr\">server-addr:</span> <span class=\"hljs-string\">$&#123;spring.cloud.nacos.discovery.server-addr&#125;</span> <span class=\"hljs-comment\">#根据自己的seata服务配置</span><br>      <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">nacos</span> <span class=\"hljs-comment\">#根据自己的seata服务配置</span><br>      <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">nacos</span> <span class=\"hljs-comment\">#根据自己的seata服务配置</span><br>      <span class=\"hljs-attr\">cluster:</span> <span class=\"hljs-string\">default</span> <span class=\"hljs-comment\"># 配置自己的seata服务cluster, 默认为 default</span><br>      <span class=\"hljs-attr\">group:</span> <span class=\"hljs-string\">SEATA_GROUP</span> <span class=\"hljs-comment\">#根据自己的seata服务配置</span><br>      <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">4388013f-6618-4de0-bb88-8bf280069254</span><br>  <span class=\"hljs-attr\">config:</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">nacos</span> <span class=\"hljs-comment\">#默认file,如果使用file不配置下面的nacos,直接配置seata.service</span><br>    <span class=\"hljs-attr\">nacos:</span><br>      <span class=\"hljs-attr\">server-addr:</span> <span class=\"hljs-string\">$&#123;spring.cloud.nacos.discovery.server-addr&#125;</span> <span class=\"hljs-comment\">#配置自己的nacos地址</span><br>      <span class=\"hljs-attr\">group:</span> <span class=\"hljs-string\">SEATA_GROUP</span> <span class=\"hljs-comment\">#配置自己的dev</span><br>      <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">nacos</span> <span class=\"hljs-comment\">#配置自己的username</span><br>      <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">nacos</span> <span class=\"hljs-comment\">#配置自己的password</span><br>      <span class=\"hljs-attr\">dataId:</span> <span class=\"hljs-string\">seataServer.properties</span> <span class=\"hljs-comment\"># #配置自己的dataId,由于搭建服务端时把客户端的配置也写在了seataServer.properties,所以这里用了和服务端一样的配置文件,实际客户端和服务端的配置文件分离出来更好</span><br>      <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">4388013f-6618-4de0-bb88-8bf280069254</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">OrderServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">OrderService</span> </span>&#123;<br>    <br>    <span class=\"hljs-meta\">@Resource</span><br>    <span class=\"hljs-keyword\">private</span> OrderDao orderDao;<br>    <br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> StorageService storageService;<br>    <br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> AccountService accountService;<br>    <br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-meta\">@GlobalTransactional(name = &quot;fsp_order_insert&quot;,rollbackFor = Exception.class)</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(Order order)</span> </span>&#123;<br>        <br>        log.info(<span class=\"hljs-string\">&quot;----------&gt; 新建订单&quot;</span>);<br>        orderDao.insert(order);<br>        <br>        log.info(<span class=\"hljs-string\">&quot;----------&gt; 订单微服务开始调用库存服务，做扣减&quot;</span>);<br>        storageService.decrease(order.getProductId(),order.getCount());<br>        <br>        log.info(<span class=\"hljs-string\">&quot;----------&gt; 订单微服务开始调用账户，做扣减&quot;</span>);<br>        accountService.decrease(order.getUserId(),order.getMoney());<br>        <br>        log.info(<span class=\"hljs-string\">&quot;----------&gt; 修改订单状态 0 -&gt; 1&quot;</span>);<br>        orderDao.update(order.getUserId(),<span class=\"hljs-number\">0</span>);<br>        <br>        log.info(<span class=\"hljs-string\">&quot;----------&gt; 订单结束&quot;</span>);<br>    &#125;<br>    <br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">update</span><span class=\"hljs-params\">(Order order)</span> </span>&#123;<br>        <br>    &#125;<br>&#125;<br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-meta\">@FeignClient(name = &quot;seata-account-service&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">AccountService</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@PostMapping(&quot;/account/decrease&quot;)</span><br>    <span class=\"hljs-function\">Result&lt;Boolean&gt; <span class=\"hljs-title\">decrease</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestParam(&quot;userId&quot;)</span> Long userId, <span class=\"hljs-meta\">@RequestParam(&quot;money&quot;)</span> BigDecimal money)</span></span>;<br>&#125;<br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-meta\">@FeignClient(name = &quot;seata-storage-service&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">StorageService</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@PostMapping(&quot;/storage/decrease&quot;)</span><br>    <span class=\"hljs-function\">Result&lt;Boolean&gt; <span class=\"hljs-title\">decrease</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestParam(&quot;productId&quot;)</span> Long productId,<span class=\"hljs-meta\">@RequestParam(&quot;count&quot;)</span> Integer count)</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"more":"<h1 id=\"Seata\"><a href=\"#Seata\" class=\"headerlink\" title=\"Seata\"></a>Seata</h1><h1 id=\"事务的解决方案\"><a href=\"#事务的解决方案\" class=\"headerlink\" title=\"事务的解决方案\"></a>事务的解决方案</h1><h2 id=\"方案1：2PC\"><a href=\"#方案1：2PC\" class=\"headerlink\" title=\"方案1：2PC\"></a>方案1：2PC</h2><p>2PC，Two-phase commit protocol，即 <strong>两阶段提交协议</strong>。它引入了一个 <strong>事务协调者</strong> 角色，来管理各个 <strong>参与者</strong>（就是各数据库资源）<br />整体分为两个阶段，分别是 <strong>准备阶段</strong> 和 <strong>提交/回滚阶段</strong></p>\n<h3 id=\"第一个阶段：准备阶段\"><a href=\"#第一个阶段：准备阶段\" class=\"headerlink\" title=\"第一个阶段：准备阶段\"></a>第一个阶段：准备阶段</h3><p><img src=\"/image/blog/%E4%BA%8B%E5%8A%A11.png?raw=true\" alt=\"image.png\"></p>\n<ol>\n<li>由事务协调者给每个参与者发送准备命令，每个参与者收到命令之后会执行相关事务操作，你可以认为除了事务的提交啥都做了。</li>\n<li>然后每个参与者会返回响应告知协调者自己是否准备成功。</li>\n<li>协调者收到每个参与者的响应之后就进入第二阶段，根据收集的响应，如果有一个参与者响应准备失败那么就向所有参与者发送回滚命令，反之发送提交命令</li>\n</ol>\n<h3 id=\"第二个阶段：提交-回滚阶段\"><a href=\"#第二个阶段：提交-回滚阶段\" class=\"headerlink\" title=\"第二个阶段：提交 / 回滚阶段\"></a>第二个阶段：提交 / 回滚阶段</h3><p><img src=\"/image/blog/%E4%BA%8B%E5%8A%A12.png?raw=true\" alt=\"image.png\"></p>\n<p>这个协议其实很符合正常的思维，就像上课点名的时候，老师就是协调者的角色，学生都是参与者。</p>\n<p>老师一个一个的点名，我们一个一个的喊到，最后老师收到所有同学的到之后就开始了今天的讲课。<br />而和点名有所不同的是，老师发现某几个学生不在还是能继续上课，而我们的事务可不允许这样。</p>\n<p>事务协调者在第一阶段未收到个别参与者的响应，则等待一定时间就会认为事务失败，会发送回滚命令，所以在 2PC 中事务协调者有超时机制。</p>\n<h3 id=\"2PC-的优缺点\"><a href=\"#2PC-的优缺点\" class=\"headerlink\" title=\"2PC 的优缺点\"></a>2PC 的优缺点</h3><p>2PC 的优点是能利用数据库自身的功能进行本地事务的提交和回滚，也就是说提交和回滚实际操作不需要我们实现，不侵入业务逻辑由数据库完成，在之后讲解 TCC 之后相信大家对这点会有所体会。</p>\n<p>2PC 主要有 三大缺点：同步阻塞、单点故障、数据不一致 问题</p>\n<p><strong>同步阻塞</strong></p>\n<p>可以看到在第一阶段执行了准备命令后，我们每个本地资源都处于锁定状态，因为除了事务的提交之外啥都做了。所以这时候如果本地的其他请求要访问同一个资源，比如要修改商品表 id 等于 100 的那条数据，那么此时是被阻塞住的，必须等待前面事务的完结，收到提交/回滚命令执行完释放资源后，这个请求才能得以继续。所以假设这个分布式事务涉及到很多参与者，然后有些参与者处理又特别复杂，特别慢，那么那些处理快的节点也得等着，所以说效率有点低。</p>\n<p><strong>单点故障</strong></p>\n<p>可以看到这个单点就是协调者，如果协调者挂了整个事务就执行不下去了。如果协调者在发送准备命令前挂了还行，毕竟每个资源都还未执行命令，那么资源是没被锁定的。可怕的是在发送完准备命令之后挂了，这时候每个本地资源都执行完处于锁定状态了，都杵着了，这就很僵硬了，如果是某个热点资源都阻塞了，这估计就要GG了。</p>\n<p><strong>数据不一致问题</strong></p>\n<p>因为协调者和参与者之间的交流是经过网络的，而网络有时候就会抽风的或者发生局部网络异常。那么就有可能导致某些参与者无法收到协调者的请求，而某些收到了。比如是提交请求，然后那些收到命令的参与者就提交事务了，此时就产生了数据不一致的问题</p>\n<h3 id=\"2PC小结\"><a href=\"#2PC小结\" class=\"headerlink\" title=\"2PC小结\"></a>2PC小结</h3><p>它是一个 同步阻塞 的 强一致性两阶段提交协议，分别是准备阶段和提交/回滚阶段。<br />2PC 的优势在于对业务没有侵入，可以利用数据库自身机制来进行事务的提交和回滚。<br />它的缺点：是一个同步阻塞协议，会导致高延迟和性能的下降，并且存在协调者单点故障问题，极端情况下会有数据不一致的问题<br />当然这只是协议，具体的落地还是可以变通了，比如协调者单点问题，我就搞个主从来实现协调者，对吧<br />分布式数据库的 2PC 改进模型<br />可能有些人对分布式数据库不熟悉，没有关系，我们主要学的是思想，看看人家的思路。</p>\n<p>简单的讲下 Percolator 模型，它是基于分布式存储系统 BigTable 建立的模型，BigTable 是啥也不清楚的同学没有关系影响不大。</p>\n<p>还是拿转账的例子来说，我现在有 200 块钱，你现在有 100 块钱，为了突出重点我也不按正常的结构来画这个表<br /><img src=\"/image/blog/%E4%BA%8B%E5%8A%A13.png?raw=true\" alt=\"image.png\"><br />然后我要转 100 块给你。<br /><img src=\"/image/blog/%E4%BA%8B%E5%8A%A14.png?raw=true\" alt=\"image.png\"></p>\n<ol>\n<li>此时事务管理器发起了准备请求，然后我账上的钱就少了，你账上的钱就多了，而且事务管理器还记录下这次操作的日志</li>\n<li>此时的数据还是私有版本，别的事务是读不到的，简单的理解 Lock 上有值就还是私有的。可以看到我的记录Lock 标记的是 PK，你的记录标记的是指向我的记录指针，这个 PK是随机选择的</li>\n<li>然后事务管理器会向被选择作为 PK 的那条记录发起提交指令</li>\n</ol>\n<p>此时就会把我的记录的锁给抹去了，这等于我的记录不再是私有版本了，别的事务就都能访问了。</p>\n<p>那你的记录上还有锁啊？不用更新吗？<br />答案是：不需要及时更新，因为访问你的这条记录的时候会去根据指针找我的那个记录，发现记录已经提交了所以你的记录就可以被访问了。</p>\n<p>有人说这效率不就差了，每次都要去找一次，别急。后台会有个线程来扫描，然后更新把锁记录给去了。这不就稳了嘛。</p>\n<h3 id=\"相比于-2PC-的改进\"><a href=\"#相比于-2PC-的改进\" class=\"headerlink\" title=\"相比于 2PC 的改进\"></a>相比于 2PC 的改进</h3><ol>\n<li>首先 Percolator 在提交阶段不需要和所有的参与者交互，只需要和一个参与者打交道，所以这个提交是原子的！解决了数据不一致问题</li>\n<li>然后事务管理器会记录操作日志，这样当事务管理器挂了之后选举的新事务管理器就可以通过日志来得知当前的情况从而继续工作，解决了单点故障问题</li>\n<li>并且 Percolator 还会有后台线程，会扫描事务状况，在事务管理器宕机之后会回滚各个参与者上的事务。</li>\n</ol>\n<blockquote>\n<p>可以看到相对于 2PC 还是做了很多改进的，也是巧妙的。 其实分布式数据库还有别的事务模型，有兴趣的同学可以自行了解</p>\n</blockquote>\n<hr>\n<h3 id=\"XA-规范\"><a href=\"#XA-规范\" class=\"headerlink\" title=\"XA 规范\"></a>XA 规范</h3><p>让我们再回来 2PC，既然说到 2PC 了那么也简单的提一下 XA 规范，XA 规范是基于两阶段提交的，它实现了两阶段提交协议。<br />在说 XA 规范之前又得先提一下 DTP （Distributed Transaction Processing）模型，这模型规范了分布式事务的模型设计。<br />而 XA 规范又约束了 DTP 模型中的事务管理器（TM） 和资源管理器（RM）之间的交互，简单的说就是你们两之间要按照一定的格式规范来交流！<br />我们先来看下 XA 约束下的 DTP 模型。<br /><img src=\"/image/blog/%E4%BA%8B%E5%8A%A15.png?raw=true\" alt=\"image.png\"></p>\n<p>AP 应用程序，就是我们的应用，事务的发起者。<br />RM 资源管理器，简单的认为就是数据库，具备事务提交和回滚能力，对应我们上面的 2PC 就是参与者。<br />TM 事务管理器，就是协调者了，和每个 RM 通信。</p>\n<p>简单的说就是 AP 通过 TM 来定义事务操作，TM 和 RM 之间会通过 XA 规范进行通信，执行两阶段提交，而 AP 的资源是从 RM 拿的。</p>\n<p>从模型上看有三个角色，而实际实现可以由一个角色实现两个功能，比如 AP 来实现 TM 的功能，TM 没必要抽出来单独部署。</p>\n<h3 id=\"MySQL-XA\"><a href=\"#MySQL-XA\" class=\"headerlink\" title=\"MySQL XA\"></a>MySQL XA</h3><p>知晓了 DTP 之后，我们就来看看 XA 在 MySQL 中是如何操作的，不过只有 InnoDB 支持。</p>\n<p>简单的说就是要先定义一个全局唯一的 XID，然后告知每个事务分支要进行的操作。<br />可以看到图中执行了两个操作，分别是改名字和插入日志，等于先注册下要做的事情，通过 XA START XID 和 XA END XID 来包裹要执行的 SQL。<br /><img src=\"/image/blog/%E4%BA%8B%E5%8A%A16.png?raw=true\" alt=\"image.png\"><br />然后需要发送准备命令，来执行第一阶段，也就是除了事务的提交啥都干了的阶段。<br /><img src=\"/image/blog/%E4%BA%8B%E5%8A%A17.png?raw=true\" alt=\"image.png\"><br />然后根据准备的情况来选择执行提交事务命令还是回滚事务命令。<br /><img src=\"/image/blog/%E4%BA%8B%E5%8A%A18.png?raw=true\" alt=\"image.png\"><br />基本上就是这么个流程，不过 MySQL XA 的性能不高这点是需要注意的。</p>\n<p>可以看到虽说 2PC 有缺点，但是还是有基于 2PC 的落地实现的，而 3PC 的引出是为了解决 2PC 的一些缺点，但是它整体下来开销更大，也解决不了网络分区的问题，我也没有找到 3PC 的落地实现。</p>\n<p>不过我还是稍微提一下，知晓一下就行，纯理论</p>\n<h2 id=\"方案2：3PC\"><a href=\"#方案2：3PC\" class=\"headerlink\" title=\"方案2：3PC\"></a>方案2：3PC</h2><p>3PC 的引入是为了解决 2PC 同步阻塞和减少数据不一致的情况。<br />3PC 也就是多了一个阶段，一个询问的阶段，分别是** 准备、预提交、提交** 这三个阶段</p>\n<ol>\n<li>准备阶段单纯就是协调者去访问参与者，类似于你还好吗？能接请求不。</li>\n<li>预提交其实就是 2PC 的准备阶段，除了事务的提交啥都干了。</li>\n<li>提交阶段和 2PC 的提交一致。</li>\n</ol>\n<p><img src=\"/image/blog/%E4%BA%8B%E5%8A%A19.png?raw=true\" alt=\"image.png\"><br />3PC 多了一个阶段其实就是在执行事务之前来确认参与者是否正常，防止个别参与者不正常的情况下，其他参与者都执行了事务，锁定资源。出发点是好的，<strong>但是绝大部分情况下肯定是正常的，所以每次都多了一个交互阶段就很不划算</strong>。</p>\n<p>然后 3<strong>PC 在参与者处也引入了超时机制，这样在协调者挂了的情况下，如果已经到了提交阶段了，参与者等半天没收到协调者的情况的话就会自动提交事务</strong>。</p>\n<p>不过万一协调者发的是回滚命令呢？你看这就出错了，数据不一致了。</p>\n<p>还有维基百科上说 2PC 参与者准备阶段之后，如果协调者挂了，参与者是无法得知整体的情况的，因为大局是协调者掌控的，所以参与者相互之间的状况它们不清楚。而 3PC 经过了第一阶段的确认，即使协调者挂了参与者也知道自己所处预提交阶段是因为已经得到准备阶段所有参与者的认可了。</p>\n<p>简单的说就像加了个围栏，使得各参与者的状态得以统一<br /><a href=\"https://blog.csdn.net/QiuHaoqian/article/details/111572037\"><br /></a></p>\n<h3 id=\"小结-2PC-和-3PC\"><a href=\"#小结-2PC-和-3PC\" class=\"headerlink\" title=\"小结 2PC 和 3PC\"></a>小结 2PC 和 3PC</h3><p>从上面已经知晓了 2PC 是一个强一致性的同步阻塞协议，性能已经是比较差的了。</p>\n<p>而 3PC 的出发点是为了解决 2PC 的缺点，但是多了一个阶段就多了一次通讯的开销，而且是绝大部分情况下无用的通讯。虽说引入参与者超时来解决协调者挂了的阻塞问题，但是数据还是会不一致。</p>\n<p>可以看到 3PC 的引入并没什么实际突破，而且性能更差了，所以实际只有 2PC 的落地实现</p>\n<blockquote>\n<p>再提一下，2PC 还是 3PC 都是协议，可以认为是一种指导思想，和真正的落地还是有差别的</p>\n</blockquote>\n<p><img src=\"/image/blog/%E4%BA%8B%E5%8A%A110.png?raw=true\" alt=\"image.png\"></p>\n<h2 id=\"方案3：TCC\"><a href=\"#方案3：TCC\" class=\"headerlink\" title=\"方案3：TCC\"></a>方案3：TCC</h2><p>不知道大家注意到没，不管是 2PC 还是 3PC 都是依赖于数据库的事务提交和回滚。</p>\n<p>而有时候一些业务它不仅仅涉及到数据库，可能是发送一条短信，也可能是上传一张图片。所以说事务的提交和回滚就得提升到业务层面而不是数据库层面了。</p>\n<p>而** TCC 就是一种业务层面或者是应用层的两阶段提交**</p>\n<p>TCC 分为指代 <strong>Try、Confirm、Cancel</strong> ，也就是 业务层面需要写对应的三个方法，主要用于跨数据库、跨服务的业务操作的数据一致性问题。</p>\n<p>TCC 分为两个阶段：</p>\n<ol>\n<li>第一阶段是资源检查预留阶段即 Try</li>\n<li>第二阶段是提交或回滚，如果是提交的话就是执行真正的业务操作，如果是回滚则是执行预留资源的取消，恢复初始状态</li>\n</ol>\n<p>比如有一个扣款服务，我需要写 <strong>Try 方法，用来冻结扣款资金</strong>，还需要一个 <strong>Confirm 方法来执行真正的扣款</strong>，最后还需要提供 <strong>Cancel 来进行冻结操作的回滚</strong>，对应的一个事务的所有服务都需要提供这三个方法。</p>\n<p>可以看到本来就一个方法，现在需要膨胀成三个方法，所以说** TCC 对业务有很大的侵入**，像如果没有冻结的那个字段，还需要改表结构。</p>\n<p>我们来看下流程<br /><img src=\"/image/blog/%E4%BA%8B%E5%8A%A111.png?raw=true\" alt=\"image.png\"><br />虽说对业务有侵入，但是 TCC 没有资源的阻塞，每一个方法都是直接提交事务的，如果出错是通过业务层面的 Cancel 来进行补偿，所以也称补偿性事务方法。</p>\n<p>这里有人说那要是所有人 Try 都成功了，都执行 Comfirm 了，但是个别 Confirm 失败了怎么办？</p>\n<p>这时候只能是不停地重试调失败了的 Confirm 直到成功为止，如果真的不行只能记录下来，到时候人工介入了</p>\n<h3 id=\"TCC-的注意点\"><a href=\"#TCC-的注意点\" class=\"headerlink\" title=\"TCC 的注意点\"></a>TCC 的注意点</h3><p>这几个点很关键，在实现的时候一定得注意了<br /><img src=\"/image/blog/%E4%BA%8B%E5%8A%A112.png?raw=true\" alt=\"image.png\"><br /><strong>幂等问题</strong><br />因为网络调用无法保证请求一定能到达，所以都会有重调机制，因此对于 Try、Confirm、Cancel 三个方法都需要幂等实现，避免重复执行产生错误。</p>\n<p><strong>空回滚问题</strong><br />这个问题是指的是 Try 方法由于网络问题没收到超时了，此时事务管理器就会发出 Cancel 命令，那么需要支持 Cancel 在未执行 Try 的情况下能正常的 Cancel。</p>\n<p><strong>悬挂问题</strong><br />这个问题也是指 Try 方法由于网络阻塞超时触发了事务管理器发出了 Cancel 命令，但是执行了 Cancel 命令之后 Try 请求到了，你说气不气。这都 Cancel 了你来个 Try，对于事务管理器来说这时候事务已经是结束了的，这冻结操作就被“悬挂”了，所以空回滚之后还得记录一下，防止 Try 的再调用<br /><a href=\"https://blog.csdn.net/QiuHaoqian/article/details/111572037\"><br /></a></p>\n<h3 id=\"TCC-变体\"><a href=\"#TCC-变体\" class=\"headerlink\" title=\"TCC 变体\"></a>TCC 变体</h3><p>上面我们说的是通用型的 TCC，它需要改造以前的实现，但是有一种情况是无法改造的，就是你调用的是别的公司的接口。</p>\n<p><strong>没有 Try 的 TCC</strong></p>\n<p>比如坐飞机需要换乘，换乘的又是不同的航空公司，比如从 A 飞到 B，再从 B 飞到 C，只有 A - B 和 B - C 都买到票了才有意义。</p>\n<p>这时候的选择就没得 Try 了，直接调用航空公司的买票操作，当两个航空公司都买成功了那就直接成功了，如果某个公司买失败了，那就需要调用取消订票接口。</p>\n<p>也就是在第一阶段直接就执行完整个业务操作了，所以要重点关注回滚操作，如果回滚失败得有提醒，要人工介入等。</p>\n<p>这其实就是 TCC 的思想：</p>\n<ol>\n<li>一阶段：直接执行真正的操作</li>\n<li>二阶段：补偿一阶段的真正操作后果，如果一阶段都成功则不用执行</li>\n</ol>\n<p><img src=\"/image/blog/%E4%BA%8B%E5%8A%A113.png?raw=true\" alt=\"image.png\"></p>\n<p><strong>利用可靠消息服务实现 异步 TCC</strong><br />这 TCC 还能异步？其实也是一种折中，比如某些服务很难改造，并且它又不会影响主业务决策，也就是它不那么重要，不需要及时的执行</p>\n<p>这时候可以引入可靠消息服务，通过消息服务来替代个别服务来进行 Try、Confirm、Cancel 。<br />Try 的时候只是写入消息，消息还不能被消费，Confirm 就是真正发消息的操作，Cancel 就是取消消息的发送。<br />这可靠消息服务其实就类似于等下要提到的事务消息，这个方案等于糅合了事务消息和 TCC。</p>\n<h3 id=\"TCC-小结\"><a href=\"#TCC-小结\" class=\"headerlink\" title=\"TCC 小结\"></a>TCC 小结</h3><p>可以看到 TCC 是通过业务代码来实现事务的提交和回滚，对业务的侵入较大，它是<strong>业务层面的两阶段提交</strong>。</p>\n<p>它的性能比 2PC 要高，因为不会有资源的阻塞，并且适用范围也大于 2PC，在实现上要注意上面提到的几个注意点</p>\n<p>它是业界比较常用的分布式事务实现方式，而且从变体也可以得知，<strong>还是得看业务变通的，不是说你要用 TCC 一定就得死板的让所有的服务都改造成那三个方法</strong><br /><a href=\"https://blog.csdn.net/QiuHaoqian/article/details/111572037\"><br /></a></p>\n<h1 id=\"本地消息表\"><a href=\"#本地消息表\" class=\"headerlink\" title=\"本地消息表\"></a>本地消息表</h1><p>本地消息就是利用了本地事务，会在数据库中存放一份本地事务消息表，在进行本地事务操作时加入了本地消息的插入，即将业务的执行和将消息放入消息表中的操作放在同一个事务中提交。</p>\n<p>这样本地事务执行成功的话，消息肯定也插入成功，然后再调用其他服务，如果调用成功就修改这条本地消息的状态。</p>\n<p>如果失败也不要紧，会有一个后台线程扫描，发现这些状态的消息，会一直调用相应的服务，一般会设置重试的次数，如果一直不行则特殊记录，待人工介入处理。</p>\n<p>可以看到还是很简单的，也是一种最大努力通知思想<br /><img src=\"/image/blog/%E4%BA%8B%E5%8A%A114.png?raw=true\" alt=\"image.png\"></p>\n<h1 id=\"Seata的实现\"><a href=\"#Seata的实现\" class=\"headerlink\" title=\"Seata的实现\"></a>Seata的实现</h1><h2 id=\"AT模式\"><a href=\"#AT模式\" class=\"headerlink\" title=\"AT模式\"></a>AT模式</h2><p>AT 模式就是两阶段提交，前面我们提到了两阶段提交有同步阻塞的问题，效率太低了，那 Seata 是怎么解决的呢？</p>\n<p>AT 的 一阶段直接就把事务提交了，直接释放了本地锁，这么草率直接提交的嘛？当然不是，这里和本地消息表有点类似，就是 利用本地事务，执行真正的事务操作中还会插入回滚日志，然后在一个事务中提交。</p>\n<p>这回滚日志怎么来的？</p>\n<p>通过框架代理 JDBC 的一些类，在执行 SQL 的时候解析 SQL 得到执行前的数据镜像，然后执行 SQL ，再得到执行后的数据镜像，然后把这些数据组装成回滚日志。</p>\n<p>再伴随的这个本地事务的提交把回滚日志也插入到数据库的 UNDO_LOG 表中(所以数据库需要有一张UNDO_LOG 表)。</p>\n<p>这波操作下来在一阶段就可以没有后顾之忧的提交事务了。</p>\n<p>然后一阶段如果成功，那么二阶段可以异步的删除那些回滚日志，如果一阶段失败那么可以通过回滚日志来反向补偿恢复。</p>\n<p>这时候有细心的同学想到了，万一中间有人改了这条数据怎么办？你这镜像就不对了啊？</p>\n<p>所以说还有个全局锁的概念，在事务提交前需要拿到全局锁（可以理解为对这条数据的锁），然后才能顺利提交本地事务。如果一直拿不到那就需要回滚本地事务了</p>\n<p>官网的示例很好，以下部分内容摘抄自 Seata 官网的示例：</p>\n<ol>\n<li>有两个事务，分别是 tx1、和 tx2，分别对 a 表的 m 字段进行更新操作，m 的初始值 1000</li>\n<li>tx1 先开始，开启本地事务，拿到本地锁，更新操作 m = 1000 - 100 = 900。本地事务提交前，先拿到该记录的 全局锁 ，本地提交释放本地锁</li>\n<li>tx2 后开始，开启本地事务，拿到本地锁，更新操作 m = 900 - 100 = 800。本地事务提交前，尝试拿该记录的 全局锁 ，tx1 全局提交前，该记录的全局锁被 tx1 持有，tx2 需要重试等待全局锁 </li>\n</ol>\n<p><img src=\"/image/blog/%E4%BA%8B%E5%8A%A115.png?raw=true\" alt=\"image.png\"><br />可以看到 tx2 的修改被阻塞了，之后重试拿到全局锁之后就能提交然后释放本地锁</p>\n<p>如果 tx1 的二阶段全局回滚，则 tx1 需要重新获取该数据的本地锁，进行反向补偿的更新操作，实现分支的回滚。<br />此时，如果 tx2 仍在等待该数据的全局锁，同时持有本地锁，则 tx1 的分支回滚会失败。分支的回滚会一直重试，直到 tx2 的全局锁等锁超时，放弃全局锁并回滚本地事务释放本地锁，tx1 的分支回滚最终成功<br /><img src=\"/image/blog/%E4%BA%8B%E5%8A%A116.png?raw=true\" alt=\"image.png\"><br />然后 <strong>AT 模式默认全局是读未提交的隔离级别</strong>，如果应用在特定场景下，必需要求全局的读已提交 ，可以通过 SELECT FOR UPDATE 语句的代理</p>\n<p>当然前提是你本地事务隔离级别是读已提交及以上</p>\n<h2 id=\"AT-模式小结\"><a href=\"#AT-模式小结\" class=\"headerlink\" title=\"AT 模式小结\"></a>AT 模式小结</h2><ol>\n<li>可以看到通过代理来无侵入的得到数据的前后镜像，组装成回滚日志伴随本地事务一起提交，解决了两阶段的同步阻塞问题</li>\n<li>并且利用全局锁来实现写隔离</li>\n<li>为了总体性能的考虑，默认是读未提交隔离级别，只代理了 SELECT FOR UPDATE 来进行读已提交的隔离</li>\n</ol>\n<p>这其实就是两阶段提交的变体实现</p>\n<h2 id=\"TCC-模式\"><a href=\"#TCC-模式\" class=\"headerlink\" title=\"TCC 模式\"></a>TCC 模式</h2><p><img src=\"/image/blog/%E4%BA%8B%E5%8A%A117.png?raw=true\" alt=\"image.png\"></p>\n<h3 id=\"Saga-模式\"><a href=\"#Saga-模式\" class=\"headerlink\" title=\"Saga 模式\"></a>Saga 模式</h3><p>这个 Saga 是 Seata 提供的长事务解决方案，适用于业务流程多且长的情况下，这种情况如果要实现一般的 TCC 啥的可能得嵌套多个事务了。</p>\n<p>并且有些系统无法提供 TCC 这三种接口，比如老项目或者别人公司的，所以就搞了个 Saga 模式，这个 Saga 是在 1987 年 Hector &amp; Kenneth 发表的论⽂中提出的。</p>\n<p>那 Saga 如何做呢？来看下这个图<br /><img src=\"/image/blog/%E4%BA%8B%E5%8A%A118.png?raw=true\" alt=\"image.png\"><br />假设有 N 个操作，直接从 T1 开始就是直接执行提交事务，然后再执行 T2，可以看到就是无锁的直接提交，到 T3 发现执行失败了，然后就进入 Compenstaing 阶段，开始一个一个倒回补偿了。</p>\n<p>思想就是: 一开始蒙着头干，别怂，出了问题咱们再一个一个改回去呗。</p>\n<p>可以看到这种情况是不保证事务的隔离性的，并且 Saga 也有 TCC 的一样的注意点，需要空补偿，防悬挂和幂等。</p>\n<p>而且极端情况下会因为数据被改变了导致无法回滚的情况。比如第一步给我打了 2 万块钱，我给取出来花了，这时候你回滚，我账上余额已经 0 了，你说怎么办嘛？难道给我还搞负的不成?</p>\n<p>这种情况只能在业务流程上入手，我写代码其实一直是这样写的，就拿买皮肤的场景来说，我都是先扣钱再给皮肤。假设先给皮肤扣钱失败了不就白给了嘛？这钱你来补啊？你觉得用户会来反馈说皮肤给了钱没扣嘛？可能有小机灵鬼说我到时候把皮肤给改回去，嘿嘿这种事情确实发生过，啧啧，被骂的真惨。</p>\n<p>所以正确的流程应该是先扣钱再给皮肤，钱到自己袋里先，皮肤没给成功用户自然而然会找过来，这时候再给他呗，虽说可能你写出了个 BUG ，但是还好不是个白给的 BUG。</p>\n<p>所以说这点在编码的时候还是得注意下的<br /><a href=\"https://blog.csdn.net/QiuHaoqian/article/details/111572037\"><br /></a></p>\n<p><a href=\"https://blog.csdn.net/QiuHaoqian/article/details/111572037\"><br /></a></p>\n<h1 id=\"Seata的使用说明\"><a href=\"#Seata的使用说明\" class=\"headerlink\" title=\"Seata的使用说明\"></a>Seata的使用说明</h1><blockquote>\n<p><a href=\"http://seata.io/zh-cn/\">官网</a></p>\n</blockquote>\n<h2 id=\"TC-TM-RM三大组件\"><a href=\"#TC-TM-RM三大组件\" class=\"headerlink\" title=\"TC/TM/RM三大组件\"></a>TC/TM/RM三大组件</h2><p>分布式事务的执行流程</p>\n<ul>\n<li>TM开启分布式事务(TM向TC注册全局事务记录)</li>\n<li>换业务场景，编排数据库，服务等事务内资源（RM向TC汇报资源准备状态）</li>\n<li>TM结束分布式事务，事务一阶段结束（TM通知TC提交/回滚分布式事务）</li>\n<li>TC汇总事务信息，决定分布式事务是提交还是回滚</li>\n<li>TC通知所有RM提交/回滚资源，事务二阶段结束。</li>\n</ul>\n<p><img src=\"/image/blog/seata1.png?raw=true\" alt=\"image.png\"></p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">registry &#123;<br>  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa<br>  type = <span class=\"hljs-attr\">&quot;file&quot;</span><br>  nacos &#123;<br>    application = <span class=\"hljs-attr\">&quot;seata-server&quot;</span><br>    serverAddr = <span class=\"hljs-attr\">&quot;127.0.0.1:8848&quot;</span><br>    group = <span class=\"hljs-attr\">&quot;SEATA_GROUP&quot;</span><br>    namespace = <span class=\"hljs-attr\">&quot;&quot;</span><br>    cluster = <span class=\"hljs-attr\">&quot;default&quot;</span><br>    username = <span class=\"hljs-attr\">&quot;&quot;</span><br>    password = <span class=\"hljs-attr\">&quot;&quot;</span><br>  &#125;<br>  file &#123;<br>    name = <span class=\"hljs-attr\">&quot;file.conf&quot;</span><br>  &#125;<br>&#125;<br><br>config &#123;<br>  # file、nacos 、apollo、zk、consul、etcd3<br>  type = <span class=\"hljs-attr\">&quot;file&quot;</span><br><br>  nacos &#123;<br>    serverAddr = <span class=\"hljs-attr\">&quot;127.0.0.1:8848&quot;</span><br>    namespace = <span class=\"hljs-attr\">&quot;&quot;</span><br>    group = <span class=\"hljs-attr\">&quot;SEATA_GROUP&quot;</span><br>    username = <span class=\"hljs-attr\">&quot;&quot;</span><br>    password = <span class=\"hljs-attr\">&quot;&quot;</span><br>    dataId = <span class=\"hljs-attr\">&quot;seataServer.properties&quot;</span><br>  &#125;<br>  file &#123;<br>    name = <span class=\"hljs-attr\">&quot;file.conf&quot;</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">## transaction log store, only used in seata-server<br>store &#123;<br>  ## store mode: file、db、redis<br>  mode = <span class=\"hljs-string\">&quot;file&quot;</span><br>  ## rsa decryption public key<br>  publicKey = <span class=\"hljs-string\">&quot;&quot;</span><br>  ## file store property<br>  file &#123;<br>    ## store location dir<br>    dir = <span class=\"hljs-attr\">&quot;sessionStore&quot;</span><br>    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions<br>    maxBranchSessionSize = 16384<br>    # globe session size , if exceeded throws exceptions<br>    maxGlobalSessionSize = 512<br>    # file buffer size , if exceeded allocate new buffer<br>    fileWriteBufferCacheSize = 16384<br>    # when recover batch read size<br>    sessionReloadReadSize = 100<br>    # async, sync<br>    flushDiskMode = async<br>  &#125;<br><br>  ## database store property<br>  db &#123;<br>    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.<br>    datasource = <span class=\"hljs-attr\">&quot;druid&quot;</span><br>    ## mysql/oracle/postgresql/h2/oceanbase etc.<br>    dbType = <span class=\"hljs-attr\">&quot;mysql&quot;</span><br>    driverClassName = <span class=\"hljs-attr\">&quot;com.mysql.jdbc.Driver&quot;</span><br>    ## if using mysql to store the data, recommend add rewriteBatchedStatements=true in jdbc connection param<br>    url = <span class=\"hljs-attr\">&quot;jdbc:mysql://127.0.0.1:3306/seata?rewriteBatchedStatements=true&quot;</span><br>    user = <span class=\"hljs-attr\">&quot;mysql&quot;</span><br>    password = <span class=\"hljs-attr\">&quot;mysql&quot;</span><br>    minConn = 5<br>    maxConn = 100<br>    globalTable = <span class=\"hljs-attr\">&quot;global_table&quot;</span><br>    branchTable = <span class=\"hljs-attr\">&quot;branch_table&quot;</span><br>    lockTable = <span class=\"hljs-attr\">&quot;lock_table&quot;</span><br>    queryLimit = 100<br>    maxWait = 5000<br>  &#125;<br><br>  ## redis store property<br>  redis &#123;<br>    ## redis mode: single、sentinel<br>    mode = <span class=\"hljs-string\">&quot;single&quot;</span><br>    ## single mode property<br>    single &#123;<br>      host = <span class=\"hljs-attr\">&quot;127.0.0.1&quot;</span><br>      port = <span class=\"hljs-attr\">&quot;6379&quot;</span><br>    &#125;<br>    ## sentinel mode property<br>    sentinel &#123;<br>      masterName = <span class=\"hljs-attr\">&quot;&quot;</span><br>      ## such as <span class=\"hljs-attr\">&quot;10.28.235.65:26379,10.28.235.65:26380,10.28.235.65:26381&quot;</span><br>      sentinelHosts = <span class=\"hljs-attr\">&quot;&quot;</span><br>    &#125;<br>    password = <span class=\"hljs-string\">&quot;&quot;</span><br>    database = <span class=\"hljs-string\">&quot;0&quot;</span><br>    minConn = <span class=\"hljs-number\">1</span><br>    maxConn = <span class=\"hljs-number\">10</span><br>    maxTotal = <span class=\"hljs-number\">100</span><br>    queryLimit = <span class=\"hljs-number\">100</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">registry &#123;<br>  type = <span class=\"hljs-attr\">&quot;nacos&quot;</span><br><br>  nacos &#123;<br>    application = <span class=\"hljs-attr\">&quot;seata-server&quot;</span><br>    serverAddr = <span class=\"hljs-attr\">&quot;localhost:8848&quot;</span><br>    group = <span class=\"hljs-attr\">&quot;SEATA_GROUP&quot;</span><br>    namespace = <span class=\"hljs-attr\">&quot;4388013f-6618-4de0-bb88-8bf280069254&quot;</span><br>    cluster = <span class=\"hljs-attr\">&quot;default&quot;</span><br>    username = <span class=\"hljs-attr\">&quot;nacos&quot;</span><br>    password = <span class=\"hljs-attr\">&quot;nacos&quot;</span><br>  &#125;<br>&#125;#   <br>#   <br>config &#123;<br> <br>  type = <span class=\"hljs-attr\">&quot;nacos&quot;</span><br>  nacos &#123;<br>    serverAddr = <span class=\"hljs-attr\">&quot;localhost:8848&quot;</span><br>    namespace = <span class=\"hljs-attr\">&quot;4388013f-6618-4de0-bb88-8bf280069254&quot;</span><br>    group = <span class=\"hljs-attr\">&quot;SEATA_GROUP&quot;</span><br>    username = <span class=\"hljs-attr\">&quot;nacos&quot;</span><br>    password = <span class=\"hljs-attr\">&quot;nacos&quot;</span><br>    dataId = <span class=\"hljs-attr\">&quot;seataServer.properties&quot;</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p><img src=\"/image/blog/seata2.png?raw=true\" alt=\"image.png\"></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-meta\">transport.type</span>=<span class=\"hljs-string\">TCP</span><br><span class=\"hljs-meta\">transport.server</span>=<span class=\"hljs-string\">NIO</span><br><span class=\"hljs-meta\">transport.heartbeat</span>=<span class=\"hljs-string\">true</span><br><span class=\"hljs-meta\">transport.enableClientBatchSendRequest</span>=<span class=\"hljs-string\">true</span><br><span class=\"hljs-meta\">transport.threadFactory.bossThreadPrefix</span>=<span class=\"hljs-string\">NettyBoss</span><br><span class=\"hljs-meta\">transport.threadFactory.workerThreadPrefix</span>=<span class=\"hljs-string\">NettyServerNIOWorker</span><br><span class=\"hljs-meta\">transport.threadFactory.serverExecutorThreadPrefix</span>=<span class=\"hljs-string\">NettyServerBizHandler</span><br><span class=\"hljs-meta\">transport.threadFactory.shareBossWorker</span>=<span class=\"hljs-string\">false</span><br><span class=\"hljs-meta\">transport.threadFactory.clientSelectorThreadPrefix</span>=<span class=\"hljs-string\">NettyClientSelector</span><br><span class=\"hljs-meta\">transport.threadFactory.clientSelectorThreadSize</span>=<span class=\"hljs-string\">1</span><br><span class=\"hljs-meta\">transport.threadFactory.clientWorkerThreadPrefix</span>=<span class=\"hljs-string\">NettyClientWorkerThread</span><br><span class=\"hljs-meta\">transport.threadFactory.bossThreadSize</span>=<span class=\"hljs-string\">1</span><br><span class=\"hljs-meta\">transport.threadFactory.workerThreadSize</span>=<span class=\"hljs-string\">default</span><br><span class=\"hljs-meta\">transport.shutdown.wait</span>=<span class=\"hljs-string\">3</span><br><span class=\"hljs-meta\">transport.serialization</span>=<span class=\"hljs-string\">seata</span><br><span class=\"hljs-meta\">transport.compressor</span>=<span class=\"hljs-string\">none</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\"># store</span><br><span class=\"hljs-comment\">#model改为db</span><br><span class=\"hljs-meta\">store.mode</span>=<span class=\"hljs-string\">db</span><br><span class=\"hljs-meta\">store.lock.mode</span>=<span class=\"hljs-string\">file</span><br><span class=\"hljs-meta\">store.session.mode</span>=<span class=\"hljs-string\">file</span><br><span class=\"hljs-comment\"># store.publicKey=&quot;&quot;</span><br><span class=\"hljs-meta\">store.file.dir</span>=<span class=\"hljs-string\">file_store/data</span><br><span class=\"hljs-meta\">store.file.maxBranchSessionSize</span>=<span class=\"hljs-string\">16384</span><br><span class=\"hljs-meta\">store.file.maxGlobalSessionSize</span>=<span class=\"hljs-string\">512</span><br><span class=\"hljs-meta\">store.file.fileWriteBufferCacheSize</span>=<span class=\"hljs-string\">16384</span><br><span class=\"hljs-meta\">store.file.flushDiskMode</span>=<span class=\"hljs-string\">async</span><br><span class=\"hljs-meta\">store.file.sessionReloadReadSize</span>=<span class=\"hljs-string\">100</span><br><span class=\"hljs-meta\">store.db.datasource</span>=<span class=\"hljs-string\">druid</span><br><span class=\"hljs-meta\">store.db.dbType</span>=<span class=\"hljs-string\">mysql</span><br><span class=\"hljs-comment\">#修改数据驱动，这里是mysql8，使用mysql5的话请修改</span><br><span class=\"hljs-meta\">store.db.driverClassName</span>=<span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span><br><span class=\"hljs-comment\"># 改为上面创建的seata服务数据库</span><br><span class=\"hljs-meta\">store.db.url</span>=<span class=\"hljs-string\">jdbc:mysql://127.0.0.1:3306/seata?rewriteBatchedStatements=true&amp;serverTimezone=UTC</span><br><span class=\"hljs-comment\"># 改为自己的数据库用户名</span><br><span class=\"hljs-meta\">store.db.user</span>=<span class=\"hljs-string\">root</span><br><span class=\"hljs-comment\"># 改为自己的数据库密码</span><br><span class=\"hljs-meta\">store.db.password</span>=<span class=\"hljs-string\">123456</span><br><span class=\"hljs-meta\">store.db.minConn</span>=<span class=\"hljs-string\">5</span><br><span class=\"hljs-meta\">store.db.maxConn</span>=<span class=\"hljs-string\">30</span><br><span class=\"hljs-meta\">store.db.globalTable</span>=<span class=\"hljs-string\">global_table</span><br><span class=\"hljs-meta\">store.db.branchTable</span>=<span class=\"hljs-string\">branch_table</span><br><span class=\"hljs-meta\">store.db.distributedLockTable</span>=<span class=\"hljs-string\">distributed_lock</span><br><span class=\"hljs-meta\">store.db.queryLimit</span>=<span class=\"hljs-string\">100</span><br><span class=\"hljs-meta\">store.db.lockTable</span>=<span class=\"hljs-string\">lock_table</span><br><span class=\"hljs-meta\">store.db.maxWait</span>=<span class=\"hljs-string\">5000</span><br><span class=\"hljs-comment\"># log</span><br><span class=\"hljs-meta\">log.exceptionRate</span>=<span class=\"hljs-string\">100</span><br><span class=\"hljs-comment\"># metrics</span><br><span class=\"hljs-meta\">metrics.enabled</span>=<span class=\"hljs-string\">false</span><br><span class=\"hljs-meta\">metrics.registryType</span>=<span class=\"hljs-string\">compact</span><br><span class=\"hljs-meta\">metrics.exporterList</span>=<span class=\"hljs-string\">prometheus</span><br><span class=\"hljs-meta\">metrics.exporterPrometheusPort</span>=<span class=\"hljs-string\">9898</span><br><span class=\"hljs-comment\"># service</span><br><span class=\"hljs-comment\"># 自己命名一个vgroupMapping</span><br><span class=\"hljs-meta\">service.vgroupMapping.fsp_tx_group</span>=<span class=\"hljs-string\">default</span><br><span class=\"hljs-meta\">service.default.grouplist</span>=<span class=\"hljs-string\">127.0.0.1:8091</span><br><span class=\"hljs-meta\">service.enableDegrade</span>=<span class=\"hljs-string\">false</span><br><span class=\"hljs-meta\">service.disableGlobalTransaction</span>=<span class=\"hljs-string\">false</span><br><span class=\"hljs-comment\"># client</span><br><span class=\"hljs-meta\">client.rm.asyncCommitBufferLimit</span>=<span class=\"hljs-string\">10000</span><br><span class=\"hljs-meta\">client.rm.lock.retryInterval</span>=<span class=\"hljs-string\">10</span><br><span class=\"hljs-meta\">client.rm.lock.retryTimes</span>=<span class=\"hljs-string\">30</span><br><span class=\"hljs-meta\">client.rm.lock.retryPolicyBranchRollbackOnConflict</span>=<span class=\"hljs-string\">true</span><br><span class=\"hljs-meta\">client.rm.reportRetryCount</span>=<span class=\"hljs-string\">5</span><br><span class=\"hljs-meta\">client.rm.tableMetaCheckEnable</span>=<span class=\"hljs-string\">false</span><br><span class=\"hljs-meta\">client.rm.tableMetaCheckerInterval</span>=<span class=\"hljs-string\">60000</span><br><span class=\"hljs-meta\">client.rm.sqlParserType</span>=<span class=\"hljs-string\">druid</span><br><span class=\"hljs-meta\">client.rm.reportSuccessEnable</span>=<span class=\"hljs-string\">false</span><br><span class=\"hljs-meta\">client.rm.sagaBranchRegisterEnable</span>=<span class=\"hljs-string\">false</span><br><span class=\"hljs-meta\">client.rm.tccActionInterceptorOrder</span>=<span class=\"hljs-string\">-2147482648</span><br><span class=\"hljs-meta\">client.tm.commitRetryCount</span>=<span class=\"hljs-string\">5</span><br><span class=\"hljs-meta\">client.tm.rollbackRetryCount</span>=<span class=\"hljs-string\">5</span><br><span class=\"hljs-meta\">client.tm.defaultGlobalTransactionTimeout</span>=<span class=\"hljs-string\">60000</span><br><span class=\"hljs-meta\">client.tm.degradeCheck</span>=<span class=\"hljs-string\">false</span><br><span class=\"hljs-meta\">client.tm.degradeCheckAllowTimes</span>=<span class=\"hljs-string\">10</span><br><span class=\"hljs-meta\">client.tm.degradeCheckPeriod</span>=<span class=\"hljs-string\">2000</span><br><span class=\"hljs-meta\">client.tm.interceptorOrder</span>=<span class=\"hljs-string\">-2147482648</span><br><span class=\"hljs-meta\">client.undo.dataValidation</span>=<span class=\"hljs-string\">true</span><br><span class=\"hljs-meta\">client.undo.logSerialization</span>=<span class=\"hljs-string\">jackson</span><br><span class=\"hljs-meta\">client.undo.onlyCareUpdateColumns</span>=<span class=\"hljs-string\">true</span><br><span class=\"hljs-meta\">client.undo.logTable</span>=<span class=\"hljs-string\">undo_log</span><br><span class=\"hljs-meta\">client.undo.compress.enable</span>=<span class=\"hljs-string\">true</span><br><span class=\"hljs-meta\">client.undo.compress.type</span>=<span class=\"hljs-string\">zip</span><br><span class=\"hljs-meta\">client.undo.compress.threshold</span>=<span class=\"hljs-string\">64k</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"执行SQL进行持久化\"><a href=\"#执行SQL进行持久化\" class=\"headerlink\" title=\"执行SQL进行持久化\"></a>执行SQL进行持久化</h2><p><img src=\"/image/blog/seata3.png?raw=true\" alt=\"image.png\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">-- for AT mode you must to init this sql for you business database. the seata server not need it.</span><br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> IF <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">EXISTS</span> `undo_log`<br>(<br>    `branch_id`     <span class=\"hljs-type\">BIGINT</span>       <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;branch transaction id&#x27;</span>,<br>    `xid`           <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">128</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;global transaction id&#x27;</span>,<br>    `context`       <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">128</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;undo_log context,such as serialization&#x27;</span>,<br>    `rollback_info` LONGBLOB     <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;rollback info&#x27;</span>,<br>    `log_status`    <span class=\"hljs-type\">INT</span>(<span class=\"hljs-number\">11</span>)      <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;0:normal status,1:defense status&#x27;</span>,<br>    `log_created`   DATETIME(<span class=\"hljs-number\">6</span>)  <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;create datetime&#x27;</span>,<br>    `log_modified`  DATETIME(<span class=\"hljs-number\">6</span>)  <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;modify datetime&#x27;</span>,<br>    <span class=\"hljs-keyword\">UNIQUE</span> KEY `ux_undo_log` (`xid`, `branch_id`)<br>) ENGINE <span class=\"hljs-operator\">=</span> InnoDB<br>  AUTO_INCREMENT <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span><br>  <span class=\"hljs-keyword\">DEFAULT</span> CHARSET <span class=\"hljs-operator\">=</span> utf8mb4 COMMENT <span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;AT transaction mode undo table&#x27;</span>;<br><span class=\"hljs-comment\">-- -------------------------------- The script used when storeMode is &#x27;db&#x27; --------------------------------</span><br><span class=\"hljs-comment\">-- the table to store GlobalSession data</span><br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> IF <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">EXISTS</span> `global_table`<br>(<br>    `xid`                       <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">128</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>    `transaction_id`            <span class=\"hljs-type\">BIGINT</span>,<br>    `status`                    TINYINT      <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>    `application_id`            <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">32</span>),<br>    `transaction_service_group` <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">32</span>),<br>    `transaction_name`          <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">128</span>),<br>    `timeout`                   <span class=\"hljs-type\">INT</span>,<br>    `begin_time`                <span class=\"hljs-type\">BIGINT</span>,<br>    `application_data`          <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">2000</span>),<br>    `gmt_create`                DATETIME,<br>    `gmt_modified`              DATETIME,<br>    <span class=\"hljs-keyword\">PRIMARY</span> KEY (`xid`),<br>    KEY `idx_status_gmt_modified` (`status` , `gmt_modified`),<br>    KEY `idx_transaction_id` (`transaction_id`)<br>) ENGINE <span class=\"hljs-operator\">=</span> InnoDB<br>  <span class=\"hljs-keyword\">DEFAULT</span> CHARSET <span class=\"hljs-operator\">=</span> utf8mb4;<br><br><span class=\"hljs-comment\">-- the table to store BranchSession data</span><br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> IF <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">EXISTS</span> `branch_table`<br>(<br>    `branch_id`         <span class=\"hljs-type\">BIGINT</span>       <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>    `xid`               <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">128</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>    `transaction_id`    <span class=\"hljs-type\">BIGINT</span>,<br>    `resource_group_id` <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">32</span>),<br>    `resource_id`       <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">256</span>),<br>    `branch_type`       <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">8</span>),<br>    `status`            TINYINT,<br>    `client_id`         <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">64</span>),<br>    `application_data`  <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">2000</span>),<br>    `gmt_create`        DATETIME(<span class=\"hljs-number\">6</span>),<br>    `gmt_modified`      DATETIME(<span class=\"hljs-number\">6</span>),<br>    <span class=\"hljs-keyword\">PRIMARY</span> KEY (`branch_id`),<br>    KEY `idx_xid` (`xid`)<br>) ENGINE <span class=\"hljs-operator\">=</span> InnoDB<br>  <span class=\"hljs-keyword\">DEFAULT</span> CHARSET <span class=\"hljs-operator\">=</span> utf8mb4;<br><br><span class=\"hljs-comment\">-- the table to store lock data</span><br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> IF <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">EXISTS</span> `lock_table`<br>(<br>    `row_key`        <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">128</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>    `xid`            <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">128</span>),<br>    `transaction_id` <span class=\"hljs-type\">BIGINT</span>,<br>    `branch_id`      <span class=\"hljs-type\">BIGINT</span>       <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>    `resource_id`    <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">256</span>),<br>    `table_name`     <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">32</span>),<br>    `pk`             <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">36</span>),<br>    `status`         TINYINT      <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-string\">&#x27;0&#x27;</span> COMMENT <span class=\"hljs-string\">&#x27;0:locked ,1:rollbacking&#x27;</span>,<br>    `gmt_create`     DATETIME,<br>    `gmt_modified`   DATETIME,<br>    <span class=\"hljs-keyword\">PRIMARY</span> KEY (`row_key`),<br>    KEY `idx_status` (`status`),<br>    KEY `idx_branch_id` (`branch_id`),<br>    KEY `idx_xid_and_branch_id` (`xid` , `branch_id`)<br>) ENGINE <span class=\"hljs-operator\">=</span> InnoDB<br>  <span class=\"hljs-keyword\">DEFAULT</span> CHARSET <span class=\"hljs-operator\">=</span> utf8mb4;<br><br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> IF <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">EXISTS</span> `distributed_lock`<br>(<br>    `lock_key`       <span class=\"hljs-type\">CHAR</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>    `lock_value`     <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>    `expire`         <span class=\"hljs-type\">BIGINT</span>,<br>    <span class=\"hljs-keyword\">primary</span> key (`lock_key`)<br>) ENGINE <span class=\"hljs-operator\">=</span> InnoDB<br>  <span class=\"hljs-keyword\">DEFAULT</span> CHARSET <span class=\"hljs-operator\">=</span> utf8mb4;<br><br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;AsyncCommitting&#x27;</span>, <span class=\"hljs-string\">&#x27; &#x27;</span>, <span class=\"hljs-number\">0</span>);<br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;RetryCommitting&#x27;</span>, <span class=\"hljs-string\">&#x27; &#x27;</span>, <span class=\"hljs-number\">0</span>);<br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;RetryRollbacking&#x27;</span>, <span class=\"hljs-string\">&#x27; &#x27;</span>, <span class=\"hljs-number\">0</span>);<br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;TxTimeoutCheck&#x27;</span>, <span class=\"hljs-string\">&#x27; &#x27;</span>, <span class=\"hljs-number\">0</span>);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"YML\"><a href=\"#YML\" class=\"headerlink\" title=\"YML\"></a>YML</h2><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">seata:</span><br>  <span class=\"hljs-comment\">#事务群组（可以每个应用独立取名，也可以使用相同的名字），要与服务端nacos-config.txt中service.vgroup_mapping中存在,并且要保证多个群组情况下后缀名要保持一致-tx_group</span><br>  <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-attr\">enable-auto-data-source-proxy:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">#是否开启数据源自动代理,默认为true</span><br>  <span class=\"hljs-attr\">tx-service-group:</span> <span class=\"hljs-string\">fsp_tx_group</span>  <span class=\"hljs-comment\">#要与配置文件中的vgroupMapping一致</span><br>  <span class=\"hljs-attr\">application-id:</span> <span class=\"hljs-string\">seata-server</span><br>  <span class=\"hljs-attr\">registry:</span>  <span class=\"hljs-comment\">#registry根据seata服务端的registry配置</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">nacos</span> <span class=\"hljs-comment\">#默认为file</span><br>    <span class=\"hljs-attr\">nacos:</span><br>      <span class=\"hljs-attr\">application:</span> <span class=\"hljs-string\">seata-server</span> <span class=\"hljs-comment\">#配置自己的seata服务</span><br>      <span class=\"hljs-attr\">server-addr:</span> <span class=\"hljs-string\">$&#123;spring.cloud.nacos.discovery.server-addr&#125;</span> <span class=\"hljs-comment\">#根据自己的seata服务配置</span><br>      <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">nacos</span> <span class=\"hljs-comment\">#根据自己的seata服务配置</span><br>      <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">nacos</span> <span class=\"hljs-comment\">#根据自己的seata服务配置</span><br>      <span class=\"hljs-attr\">cluster:</span> <span class=\"hljs-string\">default</span> <span class=\"hljs-comment\"># 配置自己的seata服务cluster, 默认为 default</span><br>      <span class=\"hljs-attr\">group:</span> <span class=\"hljs-string\">SEATA_GROUP</span> <span class=\"hljs-comment\">#根据自己的seata服务配置</span><br>      <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">4388013f-6618-4de0-bb88-8bf280069254</span><br>  <span class=\"hljs-attr\">config:</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">nacos</span> <span class=\"hljs-comment\">#默认file,如果使用file不配置下面的nacos,直接配置seata.service</span><br>    <span class=\"hljs-attr\">nacos:</span><br>      <span class=\"hljs-attr\">server-addr:</span> <span class=\"hljs-string\">$&#123;spring.cloud.nacos.discovery.server-addr&#125;</span> <span class=\"hljs-comment\">#配置自己的nacos地址</span><br>      <span class=\"hljs-attr\">group:</span> <span class=\"hljs-string\">SEATA_GROUP</span> <span class=\"hljs-comment\">#配置自己的dev</span><br>      <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">nacos</span> <span class=\"hljs-comment\">#配置自己的username</span><br>      <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">nacos</span> <span class=\"hljs-comment\">#配置自己的password</span><br>      <span class=\"hljs-attr\">dataId:</span> <span class=\"hljs-string\">seataServer.properties</span> <span class=\"hljs-comment\"># #配置自己的dataId,由于搭建服务端时把客户端的配置也写在了seataServer.properties,所以这里用了和服务端一样的配置文件,实际客户端和服务端的配置文件分离出来更好</span><br>      <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">4388013f-6618-4de0-bb88-8bf280069254</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">OrderServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">OrderService</span> </span>&#123;<br>    <br>    <span class=\"hljs-meta\">@Resource</span><br>    <span class=\"hljs-keyword\">private</span> OrderDao orderDao;<br>    <br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> StorageService storageService;<br>    <br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> AccountService accountService;<br>    <br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-meta\">@GlobalTransactional(name = &quot;fsp_order_insert&quot;,rollbackFor = Exception.class)</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(Order order)</span> </span>&#123;<br>        <br>        log.info(<span class=\"hljs-string\">&quot;----------&gt; 新建订单&quot;</span>);<br>        orderDao.insert(order);<br>        <br>        log.info(<span class=\"hljs-string\">&quot;----------&gt; 订单微服务开始调用库存服务，做扣减&quot;</span>);<br>        storageService.decrease(order.getProductId(),order.getCount());<br>        <br>        log.info(<span class=\"hljs-string\">&quot;----------&gt; 订单微服务开始调用账户，做扣减&quot;</span>);<br>        accountService.decrease(order.getUserId(),order.getMoney());<br>        <br>        log.info(<span class=\"hljs-string\">&quot;----------&gt; 修改订单状态 0 -&gt; 1&quot;</span>);<br>        orderDao.update(order.getUserId(),<span class=\"hljs-number\">0</span>);<br>        <br>        log.info(<span class=\"hljs-string\">&quot;----------&gt; 订单结束&quot;</span>);<br>    &#125;<br>    <br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">update</span><span class=\"hljs-params\">(Order order)</span> </span>&#123;<br>        <br>    &#125;<br>&#125;<br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-meta\">@FeignClient(name = &quot;seata-account-service&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">AccountService</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@PostMapping(&quot;/account/decrease&quot;)</span><br>    <span class=\"hljs-function\">Result&lt;Boolean&gt; <span class=\"hljs-title\">decrease</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestParam(&quot;userId&quot;)</span> Long userId, <span class=\"hljs-meta\">@RequestParam(&quot;money&quot;)</span> BigDecimal money)</span></span>;<br>&#125;<br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-meta\">@FeignClient(name = &quot;seata-storage-service&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">StorageService</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@PostMapping(&quot;/storage/decrease&quot;)</span><br>    <span class=\"hljs-function\">Result&lt;Boolean&gt; <span class=\"hljs-title\">decrease</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestParam(&quot;productId&quot;)</span> Long productId,<span class=\"hljs-meta\">@RequestParam(&quot;count&quot;)</span> Integer count)</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n"},{"title":"Zuul跟Gateway的区别","excerpt":"Zuul跟Gateway的区别","date":"2021-11-22T01:10:03.000Z","cover":"/image/blog/springcloud_arch.png?raw=true","_content":"\n# Zuul和Gatway两者的比较\n\n- zuul\n\n- - 使用的是阻塞式的 API，不支持长连接，比如 websockets\n  - 底层是servlet，Zuul处理的是http请求\n  - 没有提供异步支持，流控等均由hystrix支持。\n  - 依赖包spring-cloud-starter-netflix-zuul\n\n- gatway\n\n- - Spring Boot和Spring Webflux提供的Netty底层环境，不能和传统的Servlet容器一起使用，也不能打包成一个WAR包。\n  - 依赖spring-boot-starter-webflux和/ spring-cloud-starter-gateway\n  - 提供了异步支持，提供了抽象负载均衡，提供了抽象流控，并默认实现了RedisRateLimiter。\n\n相同点：\n\n1. 1. 底层都是servlet\n   2. 两者均是web网关，处理的是http请求\n\n不同点：\n\n1. 1. 内部实现：gateway对比zuul多依赖了spring-webflux，在spring的支持下，功能更强大，内部实现了限流、负载均衡等，扩展性也更强，但同时也限制了仅适合于Spring Cloud套件\n       zuul则可以扩展至其他微服务框架中，其内部没有实现限流、负载均衡等。\n   2. 是否支持异步：zuul仅支持同步\n       gateway支持异步。理论上gateway则更适合于提高系统吞吐量（但不一定能有更好的性能），最终性能还需要通过严密的压测来决定\n   3. 框架设计的角度：gateway具有更好的扩展性，并且其已经发布了2.0.0的RELESE版本，稳定性也是非常好的\n\n总结：总的来说，在微服务架构，如果使用了Spring Cloud生态的基础组件，则Spring Cloud Gateway相比而言更加具备优势，单从流式编程+支持异步上就足以让开发者选择它了。 对于小型微服务架构或是复杂架构（不仅包括微服务应用还有其他非Spring Cloud服务节点），zuul也是一个不错的选择\n\n\n\n# Gateway\n\n> [Zuul](https://github.com/Netflix/zuul/wiki)  [文档](https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/)\n\n\n## 三大核心\n\n-  Route  路由是构建网关的基本模块，它由ID，目标URI，一系列的断言和过滤器组成，如果断言为true则匹配该路由\n-  Predicate 参考的是java8的java.util.function.Predicate开发人员可以匹配HTTP请求中的所有内容（例如请求头或请求参数），如果请求与断言相匹配则进行路由\n-  Filter 指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改。\n\n## 工作流程\n\n客户端向springcloudgateway发出请求。如果网关处理程序映射确定请求与路由匹配，则将其发送到网关Web处理程序。此处理程序通过特定于请求的筛选器链运行请求。过滤器被虚线分开的原因是过滤器可以在发送代理请求之前和之后运行逻辑。执行所有“预”过滤器逻辑。然后发出代理请求。发出代理请求后，运行“post”过滤器逻辑<br />![image.png](/image/blog/image.png?raw=true)\n\n## 路由配置\n\n使用java\n\n```java\n@Configuration\npublic class GateWayConfig {\n    \n    @Bean\n    public RouteLocator customRouteLocator(RouteLocatorBuilder routeLocatorBuilder) {\n        RouteLocatorBuilder.Builder routes = routeLocatorBuilder.routes();\n        \n        // http://localhost:9527/guonei -> https://news.baidu.com/guonei\n        routes.route(\"path_route_susu\",\n                     r -> r.path(\"/guonei\").uri(\"https://news.baidu.com/guonei\")).build();\n        \n        return routes.build();\n    }\n}\n```\n\n使用配置项,其他请参考官网\n\n```yaml\nspring:\n  application:\n    name: cloud-gateway\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          enabled: true # 开启注册中心动态创建路由，利用微服务名称进行路由\n      routes:\n        # http://localhost:9527/payment/31  -> http://localhost:8001/payment/31\n        - id: payment_routh   # 路由id\n          uri: lb://CLOUD-PAYMENT-SERVICE  # 注册中心服务名称\n          # uri: ws://localhost:8001\n          # uri: http://localhost:8001   # 匹配后提供服务的路由地址\n          predicates:\n              # 断言，路径相匹配的进行路由\n            - Path=/payment/** \n              # 这个时间之后的\n            - After=2022-04-09T15:55:09.281+08:00[Asia/Shanghai]\n             # 这个时间之前的\n            - Before=2022-04-09T16:55:09.281+08:00[Asia/Shanghai]\n             # 这个时间之间的\n            - BetWeen=2022-04-09T15:55:09.281+08:00[Asia/Shanghai],2022-04-09T16:55:09.281+08:00[Asia/Shanghai]\n              # 请求地址\n            - Host=**.xuebin.xyz,xuebin.xyz\n              # 请求必须携带cookie    cmd curl http://localhost:9527/payment/31 --cookie \"username=fxb\"\n            - Cookie=username,fxb\n              # 请求头需要有 X-Request-Id 属性并且值为证书的正则表达式  cmd curl http://localhost:9527/payment/31 -H \"X-Request-Id:123\"\n            - Header=X-Request-Id, \\d+\n              # 请求方式\n            - Method=GET\n              # 请求路径要有参数名为username的参数，并且值为整数\n            - Query=username, \\d+\n```\n\n## 跨域\n\n```java\n@Configuration\npublic class GreenLeafCorsConfiguration {\n\n    @Bean\n    public CorsWebFilter corsWebFilter(){\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n        // 配置跨域\n        // 允许哪些头可以跨域\n        corsConfiguration.addAllowedHeader(\"*\");\n        // 需要哪些请求可以跨域 get post\n        corsConfiguration.addAllowedMethod(\"*\");\n        // 允许的请求来源\n        corsConfiguration.addAllowedOrigin(\"*\");\n        // 允许携带 tok\n        corsConfiguration.setAllowCredentials(true);\n        source.registerCorsConfiguration(\"/**\",corsConfiguration);\n\n        return new CorsWebFilter(source);\n    }\n}\n```\n\n## 全局自定义过滤器\n\n```java\n@Component\n@Slf4j\npublic class AuthGlobalFilter implements GlobalFilter, Ordered {\n\n    private AntPathMatcher antPathMatcher = new AntPathMatcher();\n\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n\n        ServerHttpRequest request = exchange.getRequest();\n\n        log.info(\"根据请求参数进行拦截\");\n        String username = request.getQueryParams().getFirst(\"username\");\n\n        if (username == null) {\n            log.info(\"============ 用户名为null ============\");\n            ServerHttpResponse response = exchange.getResponse();\n            return out(response);\n        }\n\n\n        log.info(\"根据请求路径进行拦截\");\n        String path = request.getURI().getPath();\n\n        /**\n         *  等等一些列操作\n         */\n        return chain.filter(exchange);\n    }\n\n    @Override\n    public int getOrder() {\n        return 0;\n    }\n\n    private Mono<Void> out(ServerHttpResponse response) {\n        JsonObject message = new JsonObject();\n        message.addProperty(\"success\", false);\n        message.addProperty(\"code\", 28004);\n        message.addProperty(\"data\", \"鉴权失败\");\n        byte[] bits = message.toString().getBytes(StandardCharsets.UTF_8);\n        DataBuffer buffer = response.bufferFactory().wrap(bits);\n        response.getHeaders().add(\"Content-Type\", \"application/json;charset=UTF-8\");\n        return response.writeWith(Mono.just(buffer));\n    }\n}\n\n```\n\n## 全局自定义异常处理\n\n```java\n@Configuration\n@EnableConfigurationProperties({ServerProperties.class, WebProperties.class})\npublic class ErrorHandlerConfig {\n\n    private final ServerProperties serverProperties;\n\n    private final ApplicationContext applicationContext;\n\n    private final WebProperties webProperties;\n\n    private final List<ViewResolver> viewResolvers;\n\n    private final ServerCodecConfigurer serverCodecConfigurer;\n\n    public ErrorHandlerConfig(ServerProperties serverProperties,\n                              WebProperties webProperties,\n                                     ObjectProvider<List<ViewResolver>> viewResolversProvider,\n                                        ServerCodecConfigurer serverCodecConfigurer,\n                                     ApplicationContext applicationContext) {\n        this.serverProperties = serverProperties;\n        this.webProperties = webProperties;\n        this.applicationContext = applicationContext;\n        this.viewResolvers = viewResolversProvider.getIfAvailable(Collections::emptyList);\n        this.serverCodecConfigurer = serverCodecConfigurer;\n    }\n\n    @Bean\n    @Order(Ordered.HIGHEST_PRECEDENCE)\n    public ErrorWebExceptionHandler errorWebExceptionHandler(ErrorAttributes errorAttributes) {\n        JsonExceptionHandler exceptionHandler = new JsonExceptionHandler(\n                errorAttributes,\n                webProperties.getResources(),\n                this.serverProperties.getError(),\n                this.applicationContext);\n        exceptionHandler.setViewResolvers(this.viewResolvers);\n        exceptionHandler.setMessageWriters(this.serverCodecConfigurer.getWriters());\n        exceptionHandler.setMessageReaders(this.serverCodecConfigurer.getReaders());\n        return exceptionHandler;\n    }\n}\n```\n\n```java\npublic class JsonExceptionHandler extends DefaultErrorWebExceptionHandler {\n\n    public JsonExceptionHandler(ErrorAttributes errorAttributes, Resources resources,\n            ErrorProperties errorProperties, ApplicationContext applicationContext) {\n        super(errorAttributes, resources, errorProperties, applicationContext);\n    }\n\n    /**\n     * 获取异常属性\n     */\n    @Override\n    protected Map<String, Object> getErrorAttributes(ServerRequest request, ErrorAttributeOptions options) {\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"success\", false);\n        map.put(\"code\", 20005);\n        map.put(\"message\", \"服务异常\");\n        map.put(\"data\", null);\n        return map;\n    }\n\n    /**\n     * 指定响应处理方法为JSON处理的方法\n     */\n    @Override\n    protected RouterFunction<ServerResponse> getRoutingFunction(ErrorAttributes errorAttributes) {\n        return RouterFunctions.route(RequestPredicates.all(), this::renderErrorResponse);\n    }\n\n    /**\n     * 根据code获取对应的HttpStatus\n     */\n    @Override\n    protected int getHttpStatus(Map<String, Object> errorAttributes) {\n        return 200;\n    }\n}\n```\n\n# \n\n","source":"_posts/wangguan.md","raw":"---\ntitle: Zuul跟Gateway的区别\ncategories: 原理分析\ntags:\n  - java\n  - 分布式\nexcerpt: Zuul跟Gateway的区别\ndate: 2021-11-22 9:10:03\ncover: '/image/blog/springcloud_arch.png?raw=true' \n---\n\n# Zuul和Gatway两者的比较\n\n- zuul\n\n- - 使用的是阻塞式的 API，不支持长连接，比如 websockets\n  - 底层是servlet，Zuul处理的是http请求\n  - 没有提供异步支持，流控等均由hystrix支持。\n  - 依赖包spring-cloud-starter-netflix-zuul\n\n- gatway\n\n- - Spring Boot和Spring Webflux提供的Netty底层环境，不能和传统的Servlet容器一起使用，也不能打包成一个WAR包。\n  - 依赖spring-boot-starter-webflux和/ spring-cloud-starter-gateway\n  - 提供了异步支持，提供了抽象负载均衡，提供了抽象流控，并默认实现了RedisRateLimiter。\n\n相同点：\n\n1. 1. 底层都是servlet\n   2. 两者均是web网关，处理的是http请求\n\n不同点：\n\n1. 1. 内部实现：gateway对比zuul多依赖了spring-webflux，在spring的支持下，功能更强大，内部实现了限流、负载均衡等，扩展性也更强，但同时也限制了仅适合于Spring Cloud套件\n       zuul则可以扩展至其他微服务框架中，其内部没有实现限流、负载均衡等。\n   2. 是否支持异步：zuul仅支持同步\n       gateway支持异步。理论上gateway则更适合于提高系统吞吐量（但不一定能有更好的性能），最终性能还需要通过严密的压测来决定\n   3. 框架设计的角度：gateway具有更好的扩展性，并且其已经发布了2.0.0的RELESE版本，稳定性也是非常好的\n\n总结：总的来说，在微服务架构，如果使用了Spring Cloud生态的基础组件，则Spring Cloud Gateway相比而言更加具备优势，单从流式编程+支持异步上就足以让开发者选择它了。 对于小型微服务架构或是复杂架构（不仅包括微服务应用还有其他非Spring Cloud服务节点），zuul也是一个不错的选择\n\n\n\n# Gateway\n\n> [Zuul](https://github.com/Netflix/zuul/wiki)  [文档](https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/)\n\n\n## 三大核心\n\n-  Route  路由是构建网关的基本模块，它由ID，目标URI，一系列的断言和过滤器组成，如果断言为true则匹配该路由\n-  Predicate 参考的是java8的java.util.function.Predicate开发人员可以匹配HTTP请求中的所有内容（例如请求头或请求参数），如果请求与断言相匹配则进行路由\n-  Filter 指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改。\n\n## 工作流程\n\n客户端向springcloudgateway发出请求。如果网关处理程序映射确定请求与路由匹配，则将其发送到网关Web处理程序。此处理程序通过特定于请求的筛选器链运行请求。过滤器被虚线分开的原因是过滤器可以在发送代理请求之前和之后运行逻辑。执行所有“预”过滤器逻辑。然后发出代理请求。发出代理请求后，运行“post”过滤器逻辑<br />![image.png](/image/blog/image.png?raw=true)\n\n## 路由配置\n\n使用java\n\n```java\n@Configuration\npublic class GateWayConfig {\n    \n    @Bean\n    public RouteLocator customRouteLocator(RouteLocatorBuilder routeLocatorBuilder) {\n        RouteLocatorBuilder.Builder routes = routeLocatorBuilder.routes();\n        \n        // http://localhost:9527/guonei -> https://news.baidu.com/guonei\n        routes.route(\"path_route_susu\",\n                     r -> r.path(\"/guonei\").uri(\"https://news.baidu.com/guonei\")).build();\n        \n        return routes.build();\n    }\n}\n```\n\n使用配置项,其他请参考官网\n\n```yaml\nspring:\n  application:\n    name: cloud-gateway\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          enabled: true # 开启注册中心动态创建路由，利用微服务名称进行路由\n      routes:\n        # http://localhost:9527/payment/31  -> http://localhost:8001/payment/31\n        - id: payment_routh   # 路由id\n          uri: lb://CLOUD-PAYMENT-SERVICE  # 注册中心服务名称\n          # uri: ws://localhost:8001\n          # uri: http://localhost:8001   # 匹配后提供服务的路由地址\n          predicates:\n              # 断言，路径相匹配的进行路由\n            - Path=/payment/** \n              # 这个时间之后的\n            - After=2022-04-09T15:55:09.281+08:00[Asia/Shanghai]\n             # 这个时间之前的\n            - Before=2022-04-09T16:55:09.281+08:00[Asia/Shanghai]\n             # 这个时间之间的\n            - BetWeen=2022-04-09T15:55:09.281+08:00[Asia/Shanghai],2022-04-09T16:55:09.281+08:00[Asia/Shanghai]\n              # 请求地址\n            - Host=**.xuebin.xyz,xuebin.xyz\n              # 请求必须携带cookie    cmd curl http://localhost:9527/payment/31 --cookie \"username=fxb\"\n            - Cookie=username,fxb\n              # 请求头需要有 X-Request-Id 属性并且值为证书的正则表达式  cmd curl http://localhost:9527/payment/31 -H \"X-Request-Id:123\"\n            - Header=X-Request-Id, \\d+\n              # 请求方式\n            - Method=GET\n              # 请求路径要有参数名为username的参数，并且值为整数\n            - Query=username, \\d+\n```\n\n## 跨域\n\n```java\n@Configuration\npublic class GreenLeafCorsConfiguration {\n\n    @Bean\n    public CorsWebFilter corsWebFilter(){\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n        // 配置跨域\n        // 允许哪些头可以跨域\n        corsConfiguration.addAllowedHeader(\"*\");\n        // 需要哪些请求可以跨域 get post\n        corsConfiguration.addAllowedMethod(\"*\");\n        // 允许的请求来源\n        corsConfiguration.addAllowedOrigin(\"*\");\n        // 允许携带 tok\n        corsConfiguration.setAllowCredentials(true);\n        source.registerCorsConfiguration(\"/**\",corsConfiguration);\n\n        return new CorsWebFilter(source);\n    }\n}\n```\n\n## 全局自定义过滤器\n\n```java\n@Component\n@Slf4j\npublic class AuthGlobalFilter implements GlobalFilter, Ordered {\n\n    private AntPathMatcher antPathMatcher = new AntPathMatcher();\n\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n\n        ServerHttpRequest request = exchange.getRequest();\n\n        log.info(\"根据请求参数进行拦截\");\n        String username = request.getQueryParams().getFirst(\"username\");\n\n        if (username == null) {\n            log.info(\"============ 用户名为null ============\");\n            ServerHttpResponse response = exchange.getResponse();\n            return out(response);\n        }\n\n\n        log.info(\"根据请求路径进行拦截\");\n        String path = request.getURI().getPath();\n\n        /**\n         *  等等一些列操作\n         */\n        return chain.filter(exchange);\n    }\n\n    @Override\n    public int getOrder() {\n        return 0;\n    }\n\n    private Mono<Void> out(ServerHttpResponse response) {\n        JsonObject message = new JsonObject();\n        message.addProperty(\"success\", false);\n        message.addProperty(\"code\", 28004);\n        message.addProperty(\"data\", \"鉴权失败\");\n        byte[] bits = message.toString().getBytes(StandardCharsets.UTF_8);\n        DataBuffer buffer = response.bufferFactory().wrap(bits);\n        response.getHeaders().add(\"Content-Type\", \"application/json;charset=UTF-8\");\n        return response.writeWith(Mono.just(buffer));\n    }\n}\n\n```\n\n## 全局自定义异常处理\n\n```java\n@Configuration\n@EnableConfigurationProperties({ServerProperties.class, WebProperties.class})\npublic class ErrorHandlerConfig {\n\n    private final ServerProperties serverProperties;\n\n    private final ApplicationContext applicationContext;\n\n    private final WebProperties webProperties;\n\n    private final List<ViewResolver> viewResolvers;\n\n    private final ServerCodecConfigurer serverCodecConfigurer;\n\n    public ErrorHandlerConfig(ServerProperties serverProperties,\n                              WebProperties webProperties,\n                                     ObjectProvider<List<ViewResolver>> viewResolversProvider,\n                                        ServerCodecConfigurer serverCodecConfigurer,\n                                     ApplicationContext applicationContext) {\n        this.serverProperties = serverProperties;\n        this.webProperties = webProperties;\n        this.applicationContext = applicationContext;\n        this.viewResolvers = viewResolversProvider.getIfAvailable(Collections::emptyList);\n        this.serverCodecConfigurer = serverCodecConfigurer;\n    }\n\n    @Bean\n    @Order(Ordered.HIGHEST_PRECEDENCE)\n    public ErrorWebExceptionHandler errorWebExceptionHandler(ErrorAttributes errorAttributes) {\n        JsonExceptionHandler exceptionHandler = new JsonExceptionHandler(\n                errorAttributes,\n                webProperties.getResources(),\n                this.serverProperties.getError(),\n                this.applicationContext);\n        exceptionHandler.setViewResolvers(this.viewResolvers);\n        exceptionHandler.setMessageWriters(this.serverCodecConfigurer.getWriters());\n        exceptionHandler.setMessageReaders(this.serverCodecConfigurer.getReaders());\n        return exceptionHandler;\n    }\n}\n```\n\n```java\npublic class JsonExceptionHandler extends DefaultErrorWebExceptionHandler {\n\n    public JsonExceptionHandler(ErrorAttributes errorAttributes, Resources resources,\n            ErrorProperties errorProperties, ApplicationContext applicationContext) {\n        super(errorAttributes, resources, errorProperties, applicationContext);\n    }\n\n    /**\n     * 获取异常属性\n     */\n    @Override\n    protected Map<String, Object> getErrorAttributes(ServerRequest request, ErrorAttributeOptions options) {\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"success\", false);\n        map.put(\"code\", 20005);\n        map.put(\"message\", \"服务异常\");\n        map.put(\"data\", null);\n        return map;\n    }\n\n    /**\n     * 指定响应处理方法为JSON处理的方法\n     */\n    @Override\n    protected RouterFunction<ServerResponse> getRoutingFunction(ErrorAttributes errorAttributes) {\n        return RouterFunctions.route(RequestPredicates.all(), this::renderErrorResponse);\n    }\n\n    /**\n     * 根据code获取对应的HttpStatus\n     */\n    @Override\n    protected int getHttpStatus(Map<String, Object> errorAttributes) {\n        return 200;\n    }\n}\n```\n\n# \n\n","slug":"wangguan","published":1,"updated":"2024-02-29T09:09:55.907Z","_id":"ckzvegh47002okeuqa7bx03o3","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Zuul和Gatway两者的比较\"><a href=\"#Zuul和Gatway两者的比较\" class=\"headerlink\" title=\"Zuul和Gatway两者的比较\"></a>Zuul和Gatway两者的比较</h1><ul>\n<li><p>zuul</p>\n</li>\n<li><ul>\n<li>使用的是阻塞式的 API，不支持长连接，比如 websockets</li>\n<li>底层是servlet，Zuul处理的是http请求</li>\n<li>没有提供异步支持，流控等均由hystrix支持。</li>\n<li>依赖包spring-cloud-starter-netflix-zuul</li>\n</ul>\n</li>\n<li><p>gatway</p>\n</li>\n<li><ul>\n<li>Spring Boot和Spring Webflux提供的Netty底层环境，不能和传统的Servlet容器一起使用，也不能打包成一个WAR包。</li>\n<li>依赖spring-boot-starter-webflux和/ spring-cloud-starter-gateway</li>\n<li>提供了异步支持，提供了抽象负载均衡，提供了抽象流控，并默认实现了RedisRateLimiter。</li>\n</ul>\n</li>\n</ul>\n<p>相同点：</p>\n<ol>\n<li><ol>\n<li>底层都是servlet</li>\n<li>两者均是web网关，处理的是http请求</li>\n</ol>\n</li>\n</ol>\n<p>不同点：</p>\n<ol>\n<li><ol>\n<li>内部实现：gateway对比zuul多依赖了spring-webflux，在spring的支持下，功能更强大，内部实现了限流、负载均衡等，扩展性也更强，但同时也限制了仅适合于Spring Cloud套件<br> zuul则可以扩展至其他微服务框架中，其内部没有实现限流、负载均衡等。</li>\n<li>是否支持异步：zuul仅支持同步<br> gateway支持异步。理论上gateway则更适合于提高系统吞吐量（但不一定能有更好的性能），最终性能还需要通过严密的压测来决定</li>\n<li>框架设计的角度：gateway具有更好的扩展性，并且其已经发布了2.0.0的RELESE版本，稳定性也是非常好的</li>\n</ol>\n</li>\n</ol>\n<p>总结：总的来说，在微服务架构，如果使用了Spring Cloud生态的基础组件，则Spring Cloud Gateway相比而言更加具备优势，单从流式编程+支持异步上就足以让开发者选择它了。 对于小型微服务架构或是复杂架构（不仅包括微服务应用还有其他非Spring Cloud服务节点），zuul也是一个不错的选择</p>\n<h1 id=\"Gateway\"><a href=\"#Gateway\" class=\"headerlink\" title=\"Gateway\"></a>Gateway</h1><blockquote>\n<p><a href=\"https://github.com/Netflix/zuul/wiki\">Zuul</a>  <a href=\"https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/\">文档</a></p>\n</blockquote>\n<h2 id=\"三大核心\"><a href=\"#三大核心\" class=\"headerlink\" title=\"三大核心\"></a>三大核心</h2><ul>\n<li> Route  路由是构建网关的基本模块，它由ID，目标URI，一系列的断言和过滤器组成，如果断言为true则匹配该路由</li>\n<li> Predicate 参考的是java8的java.util.function.Predicate开发人员可以匹配HTTP请求中的所有内容（例如请求头或请求参数），如果请求与断言相匹配则进行路由</li>\n<li> Filter 指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改。</li>\n</ul>\n<h2 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h2><p>客户端向springcloudgateway发出请求。如果网关处理程序映射确定请求与路由匹配，则将其发送到网关Web处理程序。此处理程序通过特定于请求的筛选器链运行请求。过滤器被虚线分开的原因是过滤器可以在发送代理请求之前和之后运行逻辑。执行所有“预”过滤器逻辑。然后发出代理请求。发出代理请求后，运行“post”过滤器逻辑<br /><img src=\"/image/blog/image.png?raw=true\" alt=\"image.png\"></p>\n<h2 id=\"路由配置\"><a href=\"#路由配置\" class=\"headerlink\" title=\"路由配置\"></a>路由配置</h2><p>使用java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GateWayConfig</span> </span>&#123;<br>    <br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> RouteLocator <span class=\"hljs-title\">customRouteLocator</span><span class=\"hljs-params\">(RouteLocatorBuilder routeLocatorBuilder)</span> </span>&#123;<br>        RouteLocatorBuilder.Builder routes = routeLocatorBuilder.routes();<br>        <br>        <span class=\"hljs-comment\">// http://localhost:9527/guonei -&gt; https://news.baidu.com/guonei</span><br>        routes.route(<span class=\"hljs-string\">&quot;path_route_susu&quot;</span>,<br>                     r -&gt; r.path(<span class=\"hljs-string\">&quot;/guonei&quot;</span>).uri(<span class=\"hljs-string\">&quot;https://news.baidu.com/guonei&quot;</span>)).build();<br>        <br>        <span class=\"hljs-keyword\">return</span> routes.build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用配置项,其他请参考官网</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">application:</span><br>    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-gateway</span><br>  <span class=\"hljs-attr\">cloud:</span><br>    <span class=\"hljs-attr\">gateway:</span><br>      <span class=\"hljs-attr\">discovery:</span><br>        <span class=\"hljs-attr\">locator:</span><br>          <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 开启注册中心动态创建路由，利用微服务名称进行路由</span><br>      <span class=\"hljs-attr\">routes:</span><br>        <span class=\"hljs-comment\"># http://localhost:9527/payment/31  -&gt; http://localhost:8001/payment/31</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">payment_routh</span>   <span class=\"hljs-comment\"># 路由id</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">lb://CLOUD-PAYMENT-SERVICE</span>  <span class=\"hljs-comment\"># 注册中心服务名称</span><br>          <span class=\"hljs-comment\"># uri: ws://localhost:8001</span><br>          <span class=\"hljs-comment\"># uri: http://localhost:8001   # 匹配后提供服务的路由地址</span><br>          <span class=\"hljs-attr\">predicates:</span><br>              <span class=\"hljs-comment\"># 断言，路径相匹配的进行路由</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/payment/**</span> <br>              <span class=\"hljs-comment\"># 这个时间之后的</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">After=2022-04-09T15:55:09.281+08:00[Asia/Shanghai]</span><br>             <span class=\"hljs-comment\"># 这个时间之前的</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Before=2022-04-09T16:55:09.281+08:00[Asia/Shanghai]</span><br>             <span class=\"hljs-comment\"># 这个时间之间的</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">BetWeen=2022-04-09T15:55:09.281+08:00[Asia/Shanghai],2022-04-09T16:55:09.281+08:00[Asia/Shanghai]</span><br>              <span class=\"hljs-comment\"># 请求地址</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Host=**.xuebin.xyz,xuebin.xyz</span><br>              <span class=\"hljs-comment\"># 请求必须携带cookie    cmd curl http://localhost:9527/payment/31 --cookie &quot;username=fxb&quot;</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Cookie=username,fxb</span><br>              <span class=\"hljs-comment\"># 请求头需要有 X-Request-Id 属性并且值为证书的正则表达式  cmd curl http://localhost:9527/payment/31 -H &quot;X-Request-Id:123&quot;</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Header=X-Request-Id,</span> <span class=\"hljs-string\">\\d+</span><br>              <span class=\"hljs-comment\"># 请求方式</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Method=GET</span><br>              <span class=\"hljs-comment\"># 请求路径要有参数名为username的参数，并且值为整数</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Query=username,</span> <span class=\"hljs-string\">\\d+</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GreenLeafCorsConfiguration</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> CorsWebFilter <span class=\"hljs-title\">corsWebFilter</span><span class=\"hljs-params\">()</span></span>&#123;<br>        UrlBasedCorsConfigurationSource source = <span class=\"hljs-keyword\">new</span> UrlBasedCorsConfigurationSource();<br><br>        CorsConfiguration corsConfiguration = <span class=\"hljs-keyword\">new</span> CorsConfiguration();<br>        <span class=\"hljs-comment\">// 配置跨域</span><br>        <span class=\"hljs-comment\">// 允许哪些头可以跨域</span><br>        corsConfiguration.addAllowedHeader(<span class=\"hljs-string\">&quot;*&quot;</span>);<br>        <span class=\"hljs-comment\">// 需要哪些请求可以跨域 get post</span><br>        corsConfiguration.addAllowedMethod(<span class=\"hljs-string\">&quot;*&quot;</span>);<br>        <span class=\"hljs-comment\">// 允许的请求来源</span><br>        corsConfiguration.addAllowedOrigin(<span class=\"hljs-string\">&quot;*&quot;</span>);<br>        <span class=\"hljs-comment\">// 允许携带 tok</span><br>        corsConfiguration.setAllowCredentials(<span class=\"hljs-keyword\">true</span>);<br>        source.registerCorsConfiguration(<span class=\"hljs-string\">&quot;/**&quot;</span>,corsConfiguration);<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> CorsWebFilter(source);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"全局自定义过滤器\"><a href=\"#全局自定义过滤器\" class=\"headerlink\" title=\"全局自定义过滤器\"></a>全局自定义过滤器</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AuthGlobalFilter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">GlobalFilter</span>, <span class=\"hljs-title\">Ordered</span> </span>&#123;<br><br>    <span class=\"hljs-keyword\">private</span> AntPathMatcher antPathMatcher = <span class=\"hljs-keyword\">new</span> AntPathMatcher();<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Mono&lt;Void&gt; <span class=\"hljs-title\">filter</span><span class=\"hljs-params\">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;<br><br>        ServerHttpRequest request = exchange.getRequest();<br><br>        log.info(<span class=\"hljs-string\">&quot;根据请求参数进行拦截&quot;</span>);<br>        String username = request.getQueryParams().getFirst(<span class=\"hljs-string\">&quot;username&quot;</span>);<br><br>        <span class=\"hljs-keyword\">if</span> (username == <span class=\"hljs-keyword\">null</span>) &#123;<br>            log.info(<span class=\"hljs-string\">&quot;============ 用户名为null ============&quot;</span>);<br>            ServerHttpResponse response = exchange.getResponse();<br>            <span class=\"hljs-keyword\">return</span> out(response);<br>        &#125;<br><br><br>        log.info(<span class=\"hljs-string\">&quot;根据请求路径进行拦截&quot;</span>);<br>        String path = request.getURI().getPath();<br><br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         *  等等一些列操作</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">return</span> chain.filter(exchange);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getOrder</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> Mono&lt;Void&gt; <span class=\"hljs-title\">out</span><span class=\"hljs-params\">(ServerHttpResponse response)</span> </span>&#123;<br>        JsonObject message = <span class=\"hljs-keyword\">new</span> JsonObject();<br>        message.addProperty(<span class=\"hljs-string\">&quot;success&quot;</span>, <span class=\"hljs-keyword\">false</span>);<br>        message.addProperty(<span class=\"hljs-string\">&quot;code&quot;</span>, <span class=\"hljs-number\">28004</span>);<br>        message.addProperty(<span class=\"hljs-string\">&quot;data&quot;</span>, <span class=\"hljs-string\">&quot;鉴权失败&quot;</span>);<br>        <span class=\"hljs-keyword\">byte</span>[] bits = message.toString().getBytes(StandardCharsets.UTF_8);<br>        DataBuffer buffer = response.bufferFactory().wrap(bits);<br>        response.getHeaders().add(<span class=\"hljs-string\">&quot;Content-Type&quot;</span>, <span class=\"hljs-string\">&quot;application/json;charset=UTF-8&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> response.writeWith(Mono.just(buffer));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"全局自定义异常处理\"><a href=\"#全局自定义异常处理\" class=\"headerlink\" title=\"全局自定义异常处理\"></a>全局自定义异常处理</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@EnableConfigurationProperties(&#123;ServerProperties.class, WebProperties.class&#125;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ErrorHandlerConfig</span> </span>&#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> ServerProperties serverProperties;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> ApplicationContext applicationContext;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> WebProperties webProperties;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> List&lt;ViewResolver&gt; viewResolvers;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> ServerCodecConfigurer serverCodecConfigurer;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ErrorHandlerConfig</span><span class=\"hljs-params\">(ServerProperties serverProperties,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                              WebProperties webProperties,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                     ObjectProvider&lt;List&lt;ViewResolver&gt;&gt; viewResolversProvider,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                        ServerCodecConfigurer serverCodecConfigurer,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                     ApplicationContext applicationContext)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.serverProperties = serverProperties;<br>        <span class=\"hljs-keyword\">this</span>.webProperties = webProperties;<br>        <span class=\"hljs-keyword\">this</span>.applicationContext = applicationContext;<br>        <span class=\"hljs-keyword\">this</span>.viewResolvers = viewResolversProvider.getIfAvailable(Collections::emptyList);<br>        <span class=\"hljs-keyword\">this</span>.serverCodecConfigurer = serverCodecConfigurer;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-meta\">@Order(Ordered.HIGHEST_PRECEDENCE)</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ErrorWebExceptionHandler <span class=\"hljs-title\">errorWebExceptionHandler</span><span class=\"hljs-params\">(ErrorAttributes errorAttributes)</span> </span>&#123;<br>        JsonExceptionHandler exceptionHandler = <span class=\"hljs-keyword\">new</span> JsonExceptionHandler(<br>                errorAttributes,<br>                webProperties.getResources(),<br>                <span class=\"hljs-keyword\">this</span>.serverProperties.getError(),<br>                <span class=\"hljs-keyword\">this</span>.applicationContext);<br>        exceptionHandler.setViewResolvers(<span class=\"hljs-keyword\">this</span>.viewResolvers);<br>        exceptionHandler.setMessageWriters(<span class=\"hljs-keyword\">this</span>.serverCodecConfigurer.getWriters());<br>        exceptionHandler.setMessageReaders(<span class=\"hljs-keyword\">this</span>.serverCodecConfigurer.getReaders());<br>        <span class=\"hljs-keyword\">return</span> exceptionHandler;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">JsonExceptionHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">DefaultErrorWebExceptionHandler</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">JsonExceptionHandler</span><span class=\"hljs-params\">(ErrorAttributes errorAttributes, Resources resources,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">            ErrorProperties errorProperties, ApplicationContext applicationContext)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">super</span>(errorAttributes, resources, errorProperties, applicationContext);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 获取异常属性</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> Map&lt;String, Object&gt; <span class=\"hljs-title\">getErrorAttributes</span><span class=\"hljs-params\">(ServerRequest request, ErrorAttributeOptions options)</span> </span>&#123;<br>        Map&lt;String, Object&gt; map = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();<br>        map.put(<span class=\"hljs-string\">&quot;success&quot;</span>, <span class=\"hljs-keyword\">false</span>);<br>        map.put(<span class=\"hljs-string\">&quot;code&quot;</span>, <span class=\"hljs-number\">20005</span>);<br>        map.put(<span class=\"hljs-string\">&quot;message&quot;</span>, <span class=\"hljs-string\">&quot;服务异常&quot;</span>);<br>        map.put(<span class=\"hljs-string\">&quot;data&quot;</span>, <span class=\"hljs-keyword\">null</span>);<br>        <span class=\"hljs-keyword\">return</span> map;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 指定响应处理方法为JSON处理的方法</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> RouterFunction&lt;ServerResponse&gt; <span class=\"hljs-title\">getRoutingFunction</span><span class=\"hljs-params\">(ErrorAttributes errorAttributes)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> RouterFunctions.route(RequestPredicates.all(), <span class=\"hljs-keyword\">this</span>::renderErrorResponse);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 根据code获取对应的HttpStatus</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getHttpStatus</span><span class=\"hljs-params\">(Map&lt;String, Object&gt; errorAttributes)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">200</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","site":{"data":{}},"more":"<h1 id=\"Zuul和Gatway两者的比较\"><a href=\"#Zuul和Gatway两者的比较\" class=\"headerlink\" title=\"Zuul和Gatway两者的比较\"></a>Zuul和Gatway两者的比较</h1><ul>\n<li><p>zuul</p>\n</li>\n<li><ul>\n<li>使用的是阻塞式的 API，不支持长连接，比如 websockets</li>\n<li>底层是servlet，Zuul处理的是http请求</li>\n<li>没有提供异步支持，流控等均由hystrix支持。</li>\n<li>依赖包spring-cloud-starter-netflix-zuul</li>\n</ul>\n</li>\n<li><p>gatway</p>\n</li>\n<li><ul>\n<li>Spring Boot和Spring Webflux提供的Netty底层环境，不能和传统的Servlet容器一起使用，也不能打包成一个WAR包。</li>\n<li>依赖spring-boot-starter-webflux和/ spring-cloud-starter-gateway</li>\n<li>提供了异步支持，提供了抽象负载均衡，提供了抽象流控，并默认实现了RedisRateLimiter。</li>\n</ul>\n</li>\n</ul>\n<p>相同点：</p>\n<ol>\n<li><ol>\n<li>底层都是servlet</li>\n<li>两者均是web网关，处理的是http请求</li>\n</ol>\n</li>\n</ol>\n<p>不同点：</p>\n<ol>\n<li><ol>\n<li>内部实现：gateway对比zuul多依赖了spring-webflux，在spring的支持下，功能更强大，内部实现了限流、负载均衡等，扩展性也更强，但同时也限制了仅适合于Spring Cloud套件<br> zuul则可以扩展至其他微服务框架中，其内部没有实现限流、负载均衡等。</li>\n<li>是否支持异步：zuul仅支持同步<br> gateway支持异步。理论上gateway则更适合于提高系统吞吐量（但不一定能有更好的性能），最终性能还需要通过严密的压测来决定</li>\n<li>框架设计的角度：gateway具有更好的扩展性，并且其已经发布了2.0.0的RELESE版本，稳定性也是非常好的</li>\n</ol>\n</li>\n</ol>\n<p>总结：总的来说，在微服务架构，如果使用了Spring Cloud生态的基础组件，则Spring Cloud Gateway相比而言更加具备优势，单从流式编程+支持异步上就足以让开发者选择它了。 对于小型微服务架构或是复杂架构（不仅包括微服务应用还有其他非Spring Cloud服务节点），zuul也是一个不错的选择</p>\n<h1 id=\"Gateway\"><a href=\"#Gateway\" class=\"headerlink\" title=\"Gateway\"></a>Gateway</h1><blockquote>\n<p><a href=\"https://github.com/Netflix/zuul/wiki\">Zuul</a>  <a href=\"https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/\">文档</a></p>\n</blockquote>\n<h2 id=\"三大核心\"><a href=\"#三大核心\" class=\"headerlink\" title=\"三大核心\"></a>三大核心</h2><ul>\n<li> Route  路由是构建网关的基本模块，它由ID，目标URI，一系列的断言和过滤器组成，如果断言为true则匹配该路由</li>\n<li> Predicate 参考的是java8的java.util.function.Predicate开发人员可以匹配HTTP请求中的所有内容（例如请求头或请求参数），如果请求与断言相匹配则进行路由</li>\n<li> Filter 指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改。</li>\n</ul>\n<h2 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h2><p>客户端向springcloudgateway发出请求。如果网关处理程序映射确定请求与路由匹配，则将其发送到网关Web处理程序。此处理程序通过特定于请求的筛选器链运行请求。过滤器被虚线分开的原因是过滤器可以在发送代理请求之前和之后运行逻辑。执行所有“预”过滤器逻辑。然后发出代理请求。发出代理请求后，运行“post”过滤器逻辑<br /><img src=\"/image/blog/image.png?raw=true\" alt=\"image.png\"></p>\n<h2 id=\"路由配置\"><a href=\"#路由配置\" class=\"headerlink\" title=\"路由配置\"></a>路由配置</h2><p>使用java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GateWayConfig</span> </span>&#123;<br>    <br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> RouteLocator <span class=\"hljs-title\">customRouteLocator</span><span class=\"hljs-params\">(RouteLocatorBuilder routeLocatorBuilder)</span> </span>&#123;<br>        RouteLocatorBuilder.Builder routes = routeLocatorBuilder.routes();<br>        <br>        <span class=\"hljs-comment\">// http://localhost:9527/guonei -&gt; https://news.baidu.com/guonei</span><br>        routes.route(<span class=\"hljs-string\">&quot;path_route_susu&quot;</span>,<br>                     r -&gt; r.path(<span class=\"hljs-string\">&quot;/guonei&quot;</span>).uri(<span class=\"hljs-string\">&quot;https://news.baidu.com/guonei&quot;</span>)).build();<br>        <br>        <span class=\"hljs-keyword\">return</span> routes.build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用配置项,其他请参考官网</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">application:</span><br>    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-gateway</span><br>  <span class=\"hljs-attr\">cloud:</span><br>    <span class=\"hljs-attr\">gateway:</span><br>      <span class=\"hljs-attr\">discovery:</span><br>        <span class=\"hljs-attr\">locator:</span><br>          <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 开启注册中心动态创建路由，利用微服务名称进行路由</span><br>      <span class=\"hljs-attr\">routes:</span><br>        <span class=\"hljs-comment\"># http://localhost:9527/payment/31  -&gt; http://localhost:8001/payment/31</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">payment_routh</span>   <span class=\"hljs-comment\"># 路由id</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">lb://CLOUD-PAYMENT-SERVICE</span>  <span class=\"hljs-comment\"># 注册中心服务名称</span><br>          <span class=\"hljs-comment\"># uri: ws://localhost:8001</span><br>          <span class=\"hljs-comment\"># uri: http://localhost:8001   # 匹配后提供服务的路由地址</span><br>          <span class=\"hljs-attr\">predicates:</span><br>              <span class=\"hljs-comment\"># 断言，路径相匹配的进行路由</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/payment/**</span> <br>              <span class=\"hljs-comment\"># 这个时间之后的</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">After=2022-04-09T15:55:09.281+08:00[Asia/Shanghai]</span><br>             <span class=\"hljs-comment\"># 这个时间之前的</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Before=2022-04-09T16:55:09.281+08:00[Asia/Shanghai]</span><br>             <span class=\"hljs-comment\"># 这个时间之间的</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">BetWeen=2022-04-09T15:55:09.281+08:00[Asia/Shanghai],2022-04-09T16:55:09.281+08:00[Asia/Shanghai]</span><br>              <span class=\"hljs-comment\"># 请求地址</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Host=**.xuebin.xyz,xuebin.xyz</span><br>              <span class=\"hljs-comment\"># 请求必须携带cookie    cmd curl http://localhost:9527/payment/31 --cookie &quot;username=fxb&quot;</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Cookie=username,fxb</span><br>              <span class=\"hljs-comment\"># 请求头需要有 X-Request-Id 属性并且值为证书的正则表达式  cmd curl http://localhost:9527/payment/31 -H &quot;X-Request-Id:123&quot;</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Header=X-Request-Id,</span> <span class=\"hljs-string\">\\d+</span><br>              <span class=\"hljs-comment\"># 请求方式</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Method=GET</span><br>              <span class=\"hljs-comment\"># 请求路径要有参数名为username的参数，并且值为整数</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Query=username,</span> <span class=\"hljs-string\">\\d+</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GreenLeafCorsConfiguration</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> CorsWebFilter <span class=\"hljs-title\">corsWebFilter</span><span class=\"hljs-params\">()</span></span>&#123;<br>        UrlBasedCorsConfigurationSource source = <span class=\"hljs-keyword\">new</span> UrlBasedCorsConfigurationSource();<br><br>        CorsConfiguration corsConfiguration = <span class=\"hljs-keyword\">new</span> CorsConfiguration();<br>        <span class=\"hljs-comment\">// 配置跨域</span><br>        <span class=\"hljs-comment\">// 允许哪些头可以跨域</span><br>        corsConfiguration.addAllowedHeader(<span class=\"hljs-string\">&quot;*&quot;</span>);<br>        <span class=\"hljs-comment\">// 需要哪些请求可以跨域 get post</span><br>        corsConfiguration.addAllowedMethod(<span class=\"hljs-string\">&quot;*&quot;</span>);<br>        <span class=\"hljs-comment\">// 允许的请求来源</span><br>        corsConfiguration.addAllowedOrigin(<span class=\"hljs-string\">&quot;*&quot;</span>);<br>        <span class=\"hljs-comment\">// 允许携带 tok</span><br>        corsConfiguration.setAllowCredentials(<span class=\"hljs-keyword\">true</span>);<br>        source.registerCorsConfiguration(<span class=\"hljs-string\">&quot;/**&quot;</span>,corsConfiguration);<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> CorsWebFilter(source);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"全局自定义过滤器\"><a href=\"#全局自定义过滤器\" class=\"headerlink\" title=\"全局自定义过滤器\"></a>全局自定义过滤器</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AuthGlobalFilter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">GlobalFilter</span>, <span class=\"hljs-title\">Ordered</span> </span>&#123;<br><br>    <span class=\"hljs-keyword\">private</span> AntPathMatcher antPathMatcher = <span class=\"hljs-keyword\">new</span> AntPathMatcher();<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Mono&lt;Void&gt; <span class=\"hljs-title\">filter</span><span class=\"hljs-params\">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;<br><br>        ServerHttpRequest request = exchange.getRequest();<br><br>        log.info(<span class=\"hljs-string\">&quot;根据请求参数进行拦截&quot;</span>);<br>        String username = request.getQueryParams().getFirst(<span class=\"hljs-string\">&quot;username&quot;</span>);<br><br>        <span class=\"hljs-keyword\">if</span> (username == <span class=\"hljs-keyword\">null</span>) &#123;<br>            log.info(<span class=\"hljs-string\">&quot;============ 用户名为null ============&quot;</span>);<br>            ServerHttpResponse response = exchange.getResponse();<br>            <span class=\"hljs-keyword\">return</span> out(response);<br>        &#125;<br><br><br>        log.info(<span class=\"hljs-string\">&quot;根据请求路径进行拦截&quot;</span>);<br>        String path = request.getURI().getPath();<br><br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         *  等等一些列操作</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">return</span> chain.filter(exchange);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getOrder</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> Mono&lt;Void&gt; <span class=\"hljs-title\">out</span><span class=\"hljs-params\">(ServerHttpResponse response)</span> </span>&#123;<br>        JsonObject message = <span class=\"hljs-keyword\">new</span> JsonObject();<br>        message.addProperty(<span class=\"hljs-string\">&quot;success&quot;</span>, <span class=\"hljs-keyword\">false</span>);<br>        message.addProperty(<span class=\"hljs-string\">&quot;code&quot;</span>, <span class=\"hljs-number\">28004</span>);<br>        message.addProperty(<span class=\"hljs-string\">&quot;data&quot;</span>, <span class=\"hljs-string\">&quot;鉴权失败&quot;</span>);<br>        <span class=\"hljs-keyword\">byte</span>[] bits = message.toString().getBytes(StandardCharsets.UTF_8);<br>        DataBuffer buffer = response.bufferFactory().wrap(bits);<br>        response.getHeaders().add(<span class=\"hljs-string\">&quot;Content-Type&quot;</span>, <span class=\"hljs-string\">&quot;application/json;charset=UTF-8&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> response.writeWith(Mono.just(buffer));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"全局自定义异常处理\"><a href=\"#全局自定义异常处理\" class=\"headerlink\" title=\"全局自定义异常处理\"></a>全局自定义异常处理</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@EnableConfigurationProperties(&#123;ServerProperties.class, WebProperties.class&#125;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ErrorHandlerConfig</span> </span>&#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> ServerProperties serverProperties;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> ApplicationContext applicationContext;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> WebProperties webProperties;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> List&lt;ViewResolver&gt; viewResolvers;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> ServerCodecConfigurer serverCodecConfigurer;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ErrorHandlerConfig</span><span class=\"hljs-params\">(ServerProperties serverProperties,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                              WebProperties webProperties,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                     ObjectProvider&lt;List&lt;ViewResolver&gt;&gt; viewResolversProvider,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                        ServerCodecConfigurer serverCodecConfigurer,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                     ApplicationContext applicationContext)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.serverProperties = serverProperties;<br>        <span class=\"hljs-keyword\">this</span>.webProperties = webProperties;<br>        <span class=\"hljs-keyword\">this</span>.applicationContext = applicationContext;<br>        <span class=\"hljs-keyword\">this</span>.viewResolvers = viewResolversProvider.getIfAvailable(Collections::emptyList);<br>        <span class=\"hljs-keyword\">this</span>.serverCodecConfigurer = serverCodecConfigurer;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-meta\">@Order(Ordered.HIGHEST_PRECEDENCE)</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ErrorWebExceptionHandler <span class=\"hljs-title\">errorWebExceptionHandler</span><span class=\"hljs-params\">(ErrorAttributes errorAttributes)</span> </span>&#123;<br>        JsonExceptionHandler exceptionHandler = <span class=\"hljs-keyword\">new</span> JsonExceptionHandler(<br>                errorAttributes,<br>                webProperties.getResources(),<br>                <span class=\"hljs-keyword\">this</span>.serverProperties.getError(),<br>                <span class=\"hljs-keyword\">this</span>.applicationContext);<br>        exceptionHandler.setViewResolvers(<span class=\"hljs-keyword\">this</span>.viewResolvers);<br>        exceptionHandler.setMessageWriters(<span class=\"hljs-keyword\">this</span>.serverCodecConfigurer.getWriters());<br>        exceptionHandler.setMessageReaders(<span class=\"hljs-keyword\">this</span>.serverCodecConfigurer.getReaders());<br>        <span class=\"hljs-keyword\">return</span> exceptionHandler;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">JsonExceptionHandler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">DefaultErrorWebExceptionHandler</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">JsonExceptionHandler</span><span class=\"hljs-params\">(ErrorAttributes errorAttributes, Resources resources,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">            ErrorProperties errorProperties, ApplicationContext applicationContext)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">super</span>(errorAttributes, resources, errorProperties, applicationContext);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 获取异常属性</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> Map&lt;String, Object&gt; <span class=\"hljs-title\">getErrorAttributes</span><span class=\"hljs-params\">(ServerRequest request, ErrorAttributeOptions options)</span> </span>&#123;<br>        Map&lt;String, Object&gt; map = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();<br>        map.put(<span class=\"hljs-string\">&quot;success&quot;</span>, <span class=\"hljs-keyword\">false</span>);<br>        map.put(<span class=\"hljs-string\">&quot;code&quot;</span>, <span class=\"hljs-number\">20005</span>);<br>        map.put(<span class=\"hljs-string\">&quot;message&quot;</span>, <span class=\"hljs-string\">&quot;服务异常&quot;</span>);<br>        map.put(<span class=\"hljs-string\">&quot;data&quot;</span>, <span class=\"hljs-keyword\">null</span>);<br>        <span class=\"hljs-keyword\">return</span> map;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 指定响应处理方法为JSON处理的方法</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> RouterFunction&lt;ServerResponse&gt; <span class=\"hljs-title\">getRoutingFunction</span><span class=\"hljs-params\">(ErrorAttributes errorAttributes)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> RouterFunctions.route(RequestPredicates.all(), <span class=\"hljs-keyword\">this</span>::renderErrorResponse);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 根据code获取对应的HttpStatus</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getHttpStatus</span><span class=\"hljs-params\">(Map&lt;String, Object&gt; errorAttributes)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">200</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>"},{"title":"Vue3快速上手","excerpt":"Vue3快速上手","date":"2021-11-23T01:10:03.000Z","cover":"/image/blog/c9a8cde506c5898db5a8595be46e386.png?raw=true","_content":"\n\n\n# Vue3快速上手\n\n<img src=\"/image/blog/c9a8cde506c5898db5a8595be46e386.png?raw=true\" />\n\n\n\n## 1.Vue3简介\n\n- 2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）\n- 耗时2年多、[2600+次提交](https://github.com/vuejs/vue-next/graphs/commit-activity)、[30+个RFC](https://github.com/vuejs/rfcs/tree/master/active-rfcs)、[600+次PR](https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview+)、[99位贡献者](https://github.com/vuejs/vue-next/graphs/contributors) \n- github上的tags地址：https://github.com/vuejs/vue-next/releases/tag/v3.0.0\n\n## 2.Vue3带来了什么\n\n### 1.性能的提升\n\n- 打包大小减少41%\n\n- 初次渲染快55%, 更新渲染快133%\n\n- 内存减少54%\n\n  ......\n\n### 2.源码的升级\n\n- 使用Proxy代替defineProperty实现响应式\n\n- 重写虚拟DOM的实现和Tree-Shaking\n\n  ......\n\n### 3.拥抱TypeScript\n\n- Vue3可以更好的支持TypeScript\n\n### 4.新的特性\n\n1. Composition API（组合API）\n\n   - setup配置\n   - ref与reactive\n   - watch与watchEffect\n   - provide与inject\n   - ......\n2. 新的内置组件\n   - Fragment \n   - Teleport\n   - Suspense\n3. 其他改变\n\n   - 新的生命周期钩子\n   - data 选项应始终被声明为一个函数\n   - 移除keyCode支持作为 v-on 的修饰符\n   - ......\n\n# 一、创建Vue3.0工程\n\n## 1.使用 vue-cli 创建\n\n官方文档：https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create\n\n```bash\n## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上\nvue --version\n## 安装或者升级你的@vue/cli\nnpm install -g @vue/cli\n## 创建\nvue create vue_test\n## 启动\ncd vue_test\nnpm run serve\n```\n\n## 2.使用 vite 创建\n\n官方文档：https://v3.cn.vuejs.org/guide/installation.html#vite\n\nvite官网：https://vitejs.cn\n\n- 什么是vite？—— 新一代前端构建工具。\n- 优势如下：\n  - 开发环境中，无需打包操作，可快速的冷启动。\n  - 轻量快速的热重载（HMR）。\n  - 真正的按需编译，不再等待整个应用编译完成。\n- 传统构建 与 vite构建对比图\n\n<img src=\"https://cn.vitejs.dev/assets/bundler.37740380.png\" style=\"width:500px;height:280px;float:left\" /><img src=\"https://cn.vitejs.dev/assets/esm.3070012d.png\" style=\"width:480px;height:280px\" />\n\n```bash\n## 创建工程\nnpm init vite-app <project-name>\n## 进入工程目录\ncd <project-name>\n## 安装依赖\nnpm install\n## 运行\nnpm run dev\n```\n\n# 二、常用 Composition API\n\n官方文档: https://v3.cn.vuejs.org/guide/composition-api-introduction.html\n\n## 1.拉开序幕的setup\n\n1. 理解：Vue3.0中一个新的配置项，值为一个函数。\n2. setup是所有<strong style=\"color:#DD5145\">Composition API（组合API）</strong><i style=\"color:gray;font-weight:bold\">“ 表演的舞台 ”</i>。\n4. 组件中所用到的：数据、方法等等，均要配置在setup中。\n5. setup函数的两种返回值：\n   1. 若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）\n   2. <span style=\"color:#aad\">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span>\n6. 注意点：\n   1. 尽量不要与Vue2.x配置混用\n      - Vue2.x配置（data、methos、computed...）中<strong style=\"color:#DD5145\">可以访问到</strong>setup中的属性、方法。\n      - 但在setup中<strong style=\"color:#DD5145\">不能访问到</strong>Vue2.x配置（data、methos、computed...）。\n      - 如果有重名, setup优先。\n   2. setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）\n\n##  2.ref函数\n\n- 作用: 定义一个响应式的数据\n- 语法: ```const xxx = ref(initValue)``` \n  - 创建一个包含响应式数据的<strong style=\"color:#DD5145\">引用对象（reference对象，简称ref对象）</strong>。\n  - JS中操作数据： ```xxx.value```\n  - 模板中读取数据: 不需要.value，直接：```<div>{{xxx}}</div>```\n- 备注：\n  - 接收的数据可以是：基本类型、也可以是对象类型。\n  - 基本类型的数据：响应式依然是靠``Object.defineProperty()``的```get```与```set```完成的。\n  - 对象类型的数据：内部 <i style=\"color:gray;font-weight:bold\">“ 求助 ”</i> 了Vue3.0中的一个新函数—— ```reactive```函数。\n\n## 3.reactive函数\n\n- 作用: 定义一个<strong style=\"color:#DD5145\">对象类型</strong>的响应式数据（基本类型不要用它，要用```ref```函数）\n- 语法：```const 代理对象= reactive(源对象)```接收一个对象（或数组），返回一个<strong style=\"color:#DD5145\">代理对象（Proxy的实例对象，简称proxy对象）</strong>\n- reactive定义的响应式数据是“深层次的”。\n- 内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。\n\n## 4.Vue3.0中的响应式原理\n\n### vue2.x的响应式\n\n- 实现原理：\n  - 对象类型：通过```Object.defineProperty()```对属性的读取、修改进行拦截（数据劫持）。\n  \n  - 数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。\n  \n    ```js\n    Object.defineProperty(data, 'count', {\n        get () {}, \n        set () {}\n    })\n    ```\n\n- 存在问题：\n  - 新增属性、删除属性, 界面不会更新。\n  - 直接通过下标修改数组, 界面不会自动更新。\n\n### Vue3.0的响应式\n\n- 实现原理: \n  - 通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。\n  - 通过Reflect（反射）:  对源对象的属性进行操作。\n  - MDN文档中描述的Proxy与Reflect：\n    - Proxy：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\n    \n    - Reflect：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect\n    \n      ```js\n      new Proxy(data, {\n      \t// 拦截读取属性值\n          get (target, prop) {\n          \treturn Reflect.get(target, prop)\n          },\n          // 拦截设置属性值或添加新属性\n          set (target, prop, value) {\n          \treturn Reflect.set(target, prop, value)\n          },\n          // 拦截删除属性\n          deleteProperty (target, prop) {\n          \treturn Reflect.deleteProperty(target, prop)\n          }\n      })\n      \n      proxy.name = 'tom'   \n      ```\n\n## 5.reactive对比ref\n\n-  从定义数据角度对比：\n   -  ref用来定义：<strong style=\"color:#DD5145\">基本类型数据</strong>。\n   -  reactive用来定义：<strong style=\"color:#DD5145\">对象（或数组）类型数据</strong>。\n   -  备注：ref也可以用来定义<strong style=\"color:#DD5145\">对象（或数组）类型数据</strong>, 它内部会自动通过```reactive```转为<strong style=\"color:#DD5145\">代理对象</strong>。\n-  从原理角度对比：\n   -  ref通过``Object.defineProperty()``的```get```与```set```来实现响应式（数据劫持）。\n   -  reactive通过使用<strong style=\"color:#DD5145\">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style=\"color:#DD5145\">Reflect</strong>操作<strong style=\"color:orange\">源对象</strong>内部的数据。\n-  从使用角度对比：\n   -  ref定义的数据：操作数据<strong style=\"color:#DD5145\">需要</strong>```.value```，读取数据时模板中直接读取<strong style=\"color:#DD5145\">不需要</strong>```.value```。\n   -  reactive定义的数据：操作数据与读取数据：<strong style=\"color:#DD5145\">均不需要</strong>```.value```。\n\n## 6.setup的两个注意点\n\n- setup执行的时机\n  - 在beforeCreate之前执行一次，this是undefined。\n  \n- setup的参数\n  - props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。\n  - context：上下文对象\n    - attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 ```this.$attrs```。\n    - slots: 收到的插槽内容, 相当于 ```this.$slots```。\n    - emit: 分发自定义事件的函数, 相当于 ```this.$emit```。\n\n\n## 7.计算属性与监视\n\n### 1.computed函数\n\n- 与Vue2.x中computed配置功能一致\n\n- 写法\n\n  ```js\n  import {computed} from 'vue'\n  \n  setup(){\n      ...\n  \t//计算属性——简写\n      let fullName = computed(()=>{\n          return person.firstName + '-' + person.lastName\n      })\n      //计算属性——完整\n      let fullName = computed({\n          get(){\n              return person.firstName + '-' + person.lastName\n          },\n          set(value){\n              const nameArr = value.split('-')\n              person.firstName = nameArr[0]\n              person.lastName = nameArr[1]\n          }\n      })\n  }\n  ```\n\n### 2.watch函数\n\n- 与Vue2.x中watch配置功能一致\n\n- 两个小“坑”：\n\n  - 监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。\n  - 监视reactive定义的响应式数据中某个属性时：deep配置有效。\n  \n  ```js\n  //情况一：监视ref定义的响应式数据\n  watch(sum,(newValue,oldValue)=>{\n  \tconsole.log('sum变化了',newValue,oldValue)\n  },{immediate:true})\n  \n  //情况二：监视多个ref定义的响应式数据\n  watch([sum,msg],(newValue,oldValue)=>{\n  \tconsole.log('sum或msg变化了',newValue,oldValue)\n  }) \n  \n  /* 情况三：监视reactive定义的响应式数据\n  \t\t\t若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！\n  \t\t\t若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 \n  */\n  watch(person,(newValue,oldValue)=>{\n  \tconsole.log('person变化了',newValue,oldValue)\n  },{immediate:true,deep:false}) //此处的deep配置不再奏效\n  \n  //情况四：监视reactive定义的响应式数据中的某个属性\n  watch(()=>person.job,(newValue,oldValue)=>{\n  \tconsole.log('person的job变化了',newValue,oldValue)\n  },{immediate:true,deep:true}) \n  \n  //情况五：监视reactive定义的响应式数据中的某些属性\n  watch([()=>person.job,()=>person.name],(newValue,oldValue)=>{\n  \tconsole.log('person的job变化了',newValue,oldValue)\n  },{immediate:true,deep:true})\n  \n  //特殊情况\n  watch(()=>person.job,(newValue,oldValue)=>{\n      console.log('person的job变化了',newValue,oldValue)\n  },{deep:true}) //此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效\n  ```\n\n### 3.watchEffect函数\n\n- watch的套路是：既要指明监视的属性，也要指明监视的回调。\n\n- watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。\n\n- watchEffect有点像computed：\n\n  - 但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。\n  - 而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。\n\n  ```js\n  //watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。\n  watchEffect(()=>{\n      const x1 = sum.value\n      const x2 = person.age\n      console.log('watchEffect配置的回调执行了')\n  })\n  ```\n\n## 8.生命周期\n\n<div style=\"border:1px solid black;width:380px;float:left;margin-right:20px;\"><strong>vue2.x的生命周期</strong><img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"lifecycle_2\" style=\"zoom:33%;width:1200px\" /></div><div style=\"border:1px solid black;width:510px;height:985px;float:left\"><strong>vue3.0的生命周期</strong><img src=\"https://v3.cn.vuejs.org/images/lifecycle.svg\" alt=\"lifecycle_2\" style=\"zoom:33%;width:2500px\" /></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n- Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：\n  - ```beforeDestroy```改名为 ```beforeUnmount```\n  - ```destroyed```改名为 ```unmounted```\n- Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：\n  - `beforeCreate`===>`setup()`\n  - `created`=======>`setup()`\n  - `beforeMount` ===>`onBeforeMount`\n  - `mounted`=======>`onMounted`\n  - `beforeUpdate`===>`onBeforeUpdate`\n  - `updated` =======>`onUpdated`\n  - `beforeUnmount` ==>`onBeforeUnmount`\n  - `unmounted` =====>`onUnmounted`\n\n## 9.自定义hook函数\n\n- 什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。\n\n- 类似于vue2.x中的mixin。\n\n- 自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。\n\n\n\n## 10.toRef\n\n- 作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。\n- 语法：```const name = toRef(person,'name')```\n- 应用:   要将响应式对象中的某个属性单独提供给外部使用时。\n\n\n- 扩展：```toRefs``` 与```toRef```功能一致，但可以批量创建多个 ref 对象，语法：```toRefs(person)```\n\n\n# 三、其它 Composition API\n\n## 1.shallowReactive 与 shallowRef\n\n- shallowReactive：只处理对象最外层属性的响应式（浅响应式）。\n- shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。\n\n- 什么时候使用?\n  -  如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===> shallowReactive。\n  -  如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===> shallowRef。\n\n## 2.readonly 与 shallowReadonly\n\n- readonly: 让一个响应式数据变为只读的（深只读）。\n- shallowReadonly：让一个响应式数据变为只读的（浅只读）。\n- 应用场景: 不希望数据被修改时。\n\n## 3.toRaw 与 markRaw\n\n- toRaw：\n  - 作用：将一个由```reactive```生成的<strong style=\"color:orange\">响应式对象</strong>转为<strong style=\"color:orange\">普通对象</strong>。\n  - 使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。\n- markRaw：\n  - 作用：标记一个对象，使其永远不会再成为响应式对象。\n  - 应用场景:\n    1. 有些值不应被设置为响应式的，例如复杂的第三方类库等。\n    2. 当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。\n\n## 4.customRef\n\n- 作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。\n\n- 实现防抖效果：\n\n  ```vue\n  <template>\n  \t<input type=\"text\" v-model=\"keyword\">\n  \t<h3>{{keyword}}</h3>\n  </template>\n  \n  <script>\n  \timport {ref,customRef} from 'vue'\n  \texport default {\n  \t\tname:'Demo',\n  \t\tsetup(){\n  \t\t\t// let keyword = ref('hello') //使用Vue准备好的内置ref\n  \t\t\t//自定义一个myRef\n  \t\t\tfunction myRef(value,delay){\n  \t\t\t\tlet timer\n  \t\t\t\t//通过customRef去实现自定义\n  \t\t\t\treturn customRef((track,trigger)=>{\n  \t\t\t\t\treturn{\n  \t\t\t\t\t\tget(){\n  \t\t\t\t\t\t\ttrack() //告诉Vue这个value值是需要被“追踪”的\n  \t\t\t\t\t\t\treturn value\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tset(newValue){\n  \t\t\t\t\t\t\tclearTimeout(timer)\n  \t\t\t\t\t\t\ttimer = setTimeout(()=>{\n  \t\t\t\t\t\t\t\tvalue = newValue\n  \t\t\t\t\t\t\t\ttrigger() //告诉Vue去更新界面\n  \t\t\t\t\t\t\t},delay)\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t})\n  \t\t\t}\n  \t\t\tlet keyword = myRef('hello',500) //使用程序员自定义的ref\n  \t\t\treturn {\n  \t\t\t\tkeyword\n  \t\t\t}\n  \t\t}\n  \t}\n  </script>\n  ```\n\n  \n\n## 5.provide 与 inject\n\n<img src=\"https://v3.cn.vuejs.org/images/components_provide.png\" style=\"width:300px\" />\n\n- 作用：实现<strong style=\"color:#DD5145\">祖与后代组件间</strong>通信\n\n- 套路：父组件有一个 `provide` 选项来提供数据，后代组件有一个 `inject` 选项来开始使用这些数据\n\n- 具体写法：\n\n  1. 祖组件中：\n\n     ```js\n     setup(){\n     \t......\n         let car = reactive({name:'奔驰',price:'40万'})\n         provide('car',car)\n         ......\n     }\n     ```\n\n  2. 后代组件中：\n\n     ```js\n     setup(props,context){\n     \t......\n         const car = inject('car')\n         return {car}\n     \t......\n     }\n     ```\n\n## 6.响应式数据的判断\n\n- isRef: 检查一个值是否为一个 ref 对象\n- isReactive: 检查一个对象是否是由 `reactive` 创建的响应式代理\n- isReadonly: 检查一个对象是否是由 `readonly` 创建的只读代理\n- isProxy: 检查一个对象是否是由 `reactive` 或者 `readonly` 方法创建的代理\n\n# 四、Composition API 的优势\n\n## 1.Options API 存在的问题\n\n使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。\n\n<div style=\"width:600px;height:370px;overflow:hidden;float:left\">\n    <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image\" style=\"width:600px;float:left\" />\n</div>\n<div style=\"width:300px;height:370px;overflow:hidden;float:left\">\n    <img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image\" style=\"zoom:50%;width:560px;left\" /> \n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 2.Composition API 的优势\n\n我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。\n\n<div style=\"width:500px;height:340px;overflow:hidden;float:left\">\n    <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image\"style=\"height:360px\"/>\n</div>\n<div style=\"width:430px;height:340px;overflow:hidden;float:left\">\n    <img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image\"style=\"height:360px\"/>\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 五、新的组件\n\n## 1.Fragment\n\n- 在Vue2中: 组件必须有一个根标签\n- 在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中\n- 好处: 减少标签层级, 减小内存占用\n\n## 2.Teleport\n\n- 什么是Teleport？—— `Teleport` 是一种能够将我们的<strong style=\"color:#DD5145\">组件html结构</strong>移动到指定位置的技术。\n\n  ```vue\n  <teleport to=\"移动位置\">\n  \t<div v-if=\"isShow\" class=\"mask\">\n  \t\t<div class=\"dialog\">\n  \t\t\t<h3>我是一个弹窗</h3>\n  \t\t\t<button @click=\"isShow = false\">关闭弹窗</button>\n  \t\t</div>\n  \t</div>\n  </teleport>\n  ```\n\n## 3.Suspense\n\n- 等待异步组件时渲染一些额外内容，让应用有更好的用户体验\n\n- 使用步骤：\n\n  - 异步引入组件\n\n    ```js\n    import {defineAsyncComponent} from 'vue'\n    const Child = defineAsyncComponent(()=>import('./components/Child.vue'))\n    ```\n\n  - 使用```Suspense```包裹组件，并配置好```default``` 与 ```fallback```\n\n    ```vue\n    <template>\n    \t<div class=\"app\">\n    \t\t<h3>我是App组件</h3>\n    \t\t<Suspense>\n    \t\t\t<template v-slot:default>\n    \t\t\t\t<Child/>\n    \t\t\t</template>\n    \t\t\t<template v-slot:fallback>\n    \t\t\t\t<h3>加载中.....</h3>\n    \t\t\t</template>\n    \t\t</Suspense>\n    \t</div>\n    </template>\n    ```\n\n# 六、其他\n\n## 1.全局API的转移\n\n- Vue 2.x 有许多全局 API 和配置。\n  - 例如：注册全局组件、注册全局指令等。\n\n    ```js\n    //注册全局组件\n    Vue.component('MyButton', {\n      data: () => ({\n        count: 0\n      }),\n      template: '<button @click=\"count++\">Clicked {{ count }} times.</button>'\n    })\n    \n    //注册全局指令\n    Vue.directive('focus', {\n      inserted: el => el.focus()\n    }\n    ```\n\n- Vue3.0中对这些API做出了调整：\n\n  - 将全局的API，即：```Vue.xxx```调整到应用实例（```app```）上\n\n    | 2.x 全局 API（```Vue```） | 3.x 实例 API (`app`)                        |\n    | ------------------------- | ------------------------------------------- |\n    | Vue.config.xxxx           | app.config.xxxx                             |\n    | Vue.config.productionTip  | <strong style=\"color:#DD5145\">移除</strong> |\n    | Vue.component             | app.component                               |\n    | Vue.directive             | app.directive                               |\n    | Vue.mixin                 | app.mixin                                   |\n    | Vue.use                   | app.use                                     |\n    | Vue.prototype             | app.config.globalProperties                 |\n  \n\n## 2.其他改变\n\n- data选项应始终被声明为一个函数。\n\n- 过度类名的更改：\n\n  - Vue2.x写法\n\n    ```css\n    .v-enter,\n    .v-leave-to {\n      opacity: 0;\n    }\n    .v-leave,\n    .v-enter-to {\n      opacity: 1;\n    }\n    ```\n\n  - Vue3.x写法\n\n    ```css\n    .v-enter-from,\n    .v-leave-to {\n      opacity: 0;\n    }\n    \n    .v-leave-from,\n    .v-enter-to {\n      opacity: 1;\n    }\n    ```\n\n- <strong style=\"color:#DD5145\">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持```config.keyCodes```\n\n- <strong style=\"color:#DD5145\">移除</strong>```v-on.native```修饰符\n\n  - 父组件中绑定事件\n\n    ```vue\n    <my-component\n      v-on:close=\"handleComponentEvent\"\n      v-on:click=\"handleNativeClickEvent\"\n    />\n    ```\n\n  - 子组件中声明自定义事件\n\n    ```vue\n    <script>\n      export default {\n        emits: ['close']\n      }\n    </script>\n    ```\n\n- <strong style=\"color:#DD5145\">移除</strong>过滤器（filter）\n\n  > 过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。\n\n- ......","source":"_posts/vue.md","raw":"---\ntitle: Vue3快速上手\ncategories:  前端\ntags:\n  -  vue\n  - js\nexcerpt:  Vue3快速上手\ndate: 2021-11-23 9:10:03\ncover: '/image/blog/c9a8cde506c5898db5a8595be46e386.png?raw=true'\n---\n\n\n\n# Vue3快速上手\n\n<img src=\"/image/blog/c9a8cde506c5898db5a8595be46e386.png?raw=true\" />\n\n\n\n## 1.Vue3简介\n\n- 2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）\n- 耗时2年多、[2600+次提交](https://github.com/vuejs/vue-next/graphs/commit-activity)、[30+个RFC](https://github.com/vuejs/rfcs/tree/master/active-rfcs)、[600+次PR](https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview+)、[99位贡献者](https://github.com/vuejs/vue-next/graphs/contributors) \n- github上的tags地址：https://github.com/vuejs/vue-next/releases/tag/v3.0.0\n\n## 2.Vue3带来了什么\n\n### 1.性能的提升\n\n- 打包大小减少41%\n\n- 初次渲染快55%, 更新渲染快133%\n\n- 内存减少54%\n\n  ......\n\n### 2.源码的升级\n\n- 使用Proxy代替defineProperty实现响应式\n\n- 重写虚拟DOM的实现和Tree-Shaking\n\n  ......\n\n### 3.拥抱TypeScript\n\n- Vue3可以更好的支持TypeScript\n\n### 4.新的特性\n\n1. Composition API（组合API）\n\n   - setup配置\n   - ref与reactive\n   - watch与watchEffect\n   - provide与inject\n   - ......\n2. 新的内置组件\n   - Fragment \n   - Teleport\n   - Suspense\n3. 其他改变\n\n   - 新的生命周期钩子\n   - data 选项应始终被声明为一个函数\n   - 移除keyCode支持作为 v-on 的修饰符\n   - ......\n\n# 一、创建Vue3.0工程\n\n## 1.使用 vue-cli 创建\n\n官方文档：https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create\n\n```bash\n## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上\nvue --version\n## 安装或者升级你的@vue/cli\nnpm install -g @vue/cli\n## 创建\nvue create vue_test\n## 启动\ncd vue_test\nnpm run serve\n```\n\n## 2.使用 vite 创建\n\n官方文档：https://v3.cn.vuejs.org/guide/installation.html#vite\n\nvite官网：https://vitejs.cn\n\n- 什么是vite？—— 新一代前端构建工具。\n- 优势如下：\n  - 开发环境中，无需打包操作，可快速的冷启动。\n  - 轻量快速的热重载（HMR）。\n  - 真正的按需编译，不再等待整个应用编译完成。\n- 传统构建 与 vite构建对比图\n\n<img src=\"https://cn.vitejs.dev/assets/bundler.37740380.png\" style=\"width:500px;height:280px;float:left\" /><img src=\"https://cn.vitejs.dev/assets/esm.3070012d.png\" style=\"width:480px;height:280px\" />\n\n```bash\n## 创建工程\nnpm init vite-app <project-name>\n## 进入工程目录\ncd <project-name>\n## 安装依赖\nnpm install\n## 运行\nnpm run dev\n```\n\n# 二、常用 Composition API\n\n官方文档: https://v3.cn.vuejs.org/guide/composition-api-introduction.html\n\n## 1.拉开序幕的setup\n\n1. 理解：Vue3.0中一个新的配置项，值为一个函数。\n2. setup是所有<strong style=\"color:#DD5145\">Composition API（组合API）</strong><i style=\"color:gray;font-weight:bold\">“ 表演的舞台 ”</i>。\n4. 组件中所用到的：数据、方法等等，均要配置在setup中。\n5. setup函数的两种返回值：\n   1. 若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）\n   2. <span style=\"color:#aad\">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span>\n6. 注意点：\n   1. 尽量不要与Vue2.x配置混用\n      - Vue2.x配置（data、methos、computed...）中<strong style=\"color:#DD5145\">可以访问到</strong>setup中的属性、方法。\n      - 但在setup中<strong style=\"color:#DD5145\">不能访问到</strong>Vue2.x配置（data、methos、computed...）。\n      - 如果有重名, setup优先。\n   2. setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）\n\n##  2.ref函数\n\n- 作用: 定义一个响应式的数据\n- 语法: ```const xxx = ref(initValue)``` \n  - 创建一个包含响应式数据的<strong style=\"color:#DD5145\">引用对象（reference对象，简称ref对象）</strong>。\n  - JS中操作数据： ```xxx.value```\n  - 模板中读取数据: 不需要.value，直接：```<div>{{xxx}}</div>```\n- 备注：\n  - 接收的数据可以是：基本类型、也可以是对象类型。\n  - 基本类型的数据：响应式依然是靠``Object.defineProperty()``的```get```与```set```完成的。\n  - 对象类型的数据：内部 <i style=\"color:gray;font-weight:bold\">“ 求助 ”</i> 了Vue3.0中的一个新函数—— ```reactive```函数。\n\n## 3.reactive函数\n\n- 作用: 定义一个<strong style=\"color:#DD5145\">对象类型</strong>的响应式数据（基本类型不要用它，要用```ref```函数）\n- 语法：```const 代理对象= reactive(源对象)```接收一个对象（或数组），返回一个<strong style=\"color:#DD5145\">代理对象（Proxy的实例对象，简称proxy对象）</strong>\n- reactive定义的响应式数据是“深层次的”。\n- 内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。\n\n## 4.Vue3.0中的响应式原理\n\n### vue2.x的响应式\n\n- 实现原理：\n  - 对象类型：通过```Object.defineProperty()```对属性的读取、修改进行拦截（数据劫持）。\n  \n  - 数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。\n  \n    ```js\n    Object.defineProperty(data, 'count', {\n        get () {}, \n        set () {}\n    })\n    ```\n\n- 存在问题：\n  - 新增属性、删除属性, 界面不会更新。\n  - 直接通过下标修改数组, 界面不会自动更新。\n\n### Vue3.0的响应式\n\n- 实现原理: \n  - 通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。\n  - 通过Reflect（反射）:  对源对象的属性进行操作。\n  - MDN文档中描述的Proxy与Reflect：\n    - Proxy：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\n    \n    - Reflect：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect\n    \n      ```js\n      new Proxy(data, {\n      \t// 拦截读取属性值\n          get (target, prop) {\n          \treturn Reflect.get(target, prop)\n          },\n          // 拦截设置属性值或添加新属性\n          set (target, prop, value) {\n          \treturn Reflect.set(target, prop, value)\n          },\n          // 拦截删除属性\n          deleteProperty (target, prop) {\n          \treturn Reflect.deleteProperty(target, prop)\n          }\n      })\n      \n      proxy.name = 'tom'   \n      ```\n\n## 5.reactive对比ref\n\n-  从定义数据角度对比：\n   -  ref用来定义：<strong style=\"color:#DD5145\">基本类型数据</strong>。\n   -  reactive用来定义：<strong style=\"color:#DD5145\">对象（或数组）类型数据</strong>。\n   -  备注：ref也可以用来定义<strong style=\"color:#DD5145\">对象（或数组）类型数据</strong>, 它内部会自动通过```reactive```转为<strong style=\"color:#DD5145\">代理对象</strong>。\n-  从原理角度对比：\n   -  ref通过``Object.defineProperty()``的```get```与```set```来实现响应式（数据劫持）。\n   -  reactive通过使用<strong style=\"color:#DD5145\">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style=\"color:#DD5145\">Reflect</strong>操作<strong style=\"color:orange\">源对象</strong>内部的数据。\n-  从使用角度对比：\n   -  ref定义的数据：操作数据<strong style=\"color:#DD5145\">需要</strong>```.value```，读取数据时模板中直接读取<strong style=\"color:#DD5145\">不需要</strong>```.value```。\n   -  reactive定义的数据：操作数据与读取数据：<strong style=\"color:#DD5145\">均不需要</strong>```.value```。\n\n## 6.setup的两个注意点\n\n- setup执行的时机\n  - 在beforeCreate之前执行一次，this是undefined。\n  \n- setup的参数\n  - props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。\n  - context：上下文对象\n    - attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 ```this.$attrs```。\n    - slots: 收到的插槽内容, 相当于 ```this.$slots```。\n    - emit: 分发自定义事件的函数, 相当于 ```this.$emit```。\n\n\n## 7.计算属性与监视\n\n### 1.computed函数\n\n- 与Vue2.x中computed配置功能一致\n\n- 写法\n\n  ```js\n  import {computed} from 'vue'\n  \n  setup(){\n      ...\n  \t//计算属性——简写\n      let fullName = computed(()=>{\n          return person.firstName + '-' + person.lastName\n      })\n      //计算属性——完整\n      let fullName = computed({\n          get(){\n              return person.firstName + '-' + person.lastName\n          },\n          set(value){\n              const nameArr = value.split('-')\n              person.firstName = nameArr[0]\n              person.lastName = nameArr[1]\n          }\n      })\n  }\n  ```\n\n### 2.watch函数\n\n- 与Vue2.x中watch配置功能一致\n\n- 两个小“坑”：\n\n  - 监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。\n  - 监视reactive定义的响应式数据中某个属性时：deep配置有效。\n  \n  ```js\n  //情况一：监视ref定义的响应式数据\n  watch(sum,(newValue,oldValue)=>{\n  \tconsole.log('sum变化了',newValue,oldValue)\n  },{immediate:true})\n  \n  //情况二：监视多个ref定义的响应式数据\n  watch([sum,msg],(newValue,oldValue)=>{\n  \tconsole.log('sum或msg变化了',newValue,oldValue)\n  }) \n  \n  /* 情况三：监视reactive定义的响应式数据\n  \t\t\t若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！\n  \t\t\t若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 \n  */\n  watch(person,(newValue,oldValue)=>{\n  \tconsole.log('person变化了',newValue,oldValue)\n  },{immediate:true,deep:false}) //此处的deep配置不再奏效\n  \n  //情况四：监视reactive定义的响应式数据中的某个属性\n  watch(()=>person.job,(newValue,oldValue)=>{\n  \tconsole.log('person的job变化了',newValue,oldValue)\n  },{immediate:true,deep:true}) \n  \n  //情况五：监视reactive定义的响应式数据中的某些属性\n  watch([()=>person.job,()=>person.name],(newValue,oldValue)=>{\n  \tconsole.log('person的job变化了',newValue,oldValue)\n  },{immediate:true,deep:true})\n  \n  //特殊情况\n  watch(()=>person.job,(newValue,oldValue)=>{\n      console.log('person的job变化了',newValue,oldValue)\n  },{deep:true}) //此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效\n  ```\n\n### 3.watchEffect函数\n\n- watch的套路是：既要指明监视的属性，也要指明监视的回调。\n\n- watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。\n\n- watchEffect有点像computed：\n\n  - 但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。\n  - 而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。\n\n  ```js\n  //watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。\n  watchEffect(()=>{\n      const x1 = sum.value\n      const x2 = person.age\n      console.log('watchEffect配置的回调执行了')\n  })\n  ```\n\n## 8.生命周期\n\n<div style=\"border:1px solid black;width:380px;float:left;margin-right:20px;\"><strong>vue2.x的生命周期</strong><img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"lifecycle_2\" style=\"zoom:33%;width:1200px\" /></div><div style=\"border:1px solid black;width:510px;height:985px;float:left\"><strong>vue3.0的生命周期</strong><img src=\"https://v3.cn.vuejs.org/images/lifecycle.svg\" alt=\"lifecycle_2\" style=\"zoom:33%;width:2500px\" /></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n- Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：\n  - ```beforeDestroy```改名为 ```beforeUnmount```\n  - ```destroyed```改名为 ```unmounted```\n- Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：\n  - `beforeCreate`===>`setup()`\n  - `created`=======>`setup()`\n  - `beforeMount` ===>`onBeforeMount`\n  - `mounted`=======>`onMounted`\n  - `beforeUpdate`===>`onBeforeUpdate`\n  - `updated` =======>`onUpdated`\n  - `beforeUnmount` ==>`onBeforeUnmount`\n  - `unmounted` =====>`onUnmounted`\n\n## 9.自定义hook函数\n\n- 什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。\n\n- 类似于vue2.x中的mixin。\n\n- 自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。\n\n\n\n## 10.toRef\n\n- 作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。\n- 语法：```const name = toRef(person,'name')```\n- 应用:   要将响应式对象中的某个属性单独提供给外部使用时。\n\n\n- 扩展：```toRefs``` 与```toRef```功能一致，但可以批量创建多个 ref 对象，语法：```toRefs(person)```\n\n\n# 三、其它 Composition API\n\n## 1.shallowReactive 与 shallowRef\n\n- shallowReactive：只处理对象最外层属性的响应式（浅响应式）。\n- shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。\n\n- 什么时候使用?\n  -  如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===> shallowReactive。\n  -  如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===> shallowRef。\n\n## 2.readonly 与 shallowReadonly\n\n- readonly: 让一个响应式数据变为只读的（深只读）。\n- shallowReadonly：让一个响应式数据变为只读的（浅只读）。\n- 应用场景: 不希望数据被修改时。\n\n## 3.toRaw 与 markRaw\n\n- toRaw：\n  - 作用：将一个由```reactive```生成的<strong style=\"color:orange\">响应式对象</strong>转为<strong style=\"color:orange\">普通对象</strong>。\n  - 使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。\n- markRaw：\n  - 作用：标记一个对象，使其永远不会再成为响应式对象。\n  - 应用场景:\n    1. 有些值不应被设置为响应式的，例如复杂的第三方类库等。\n    2. 当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。\n\n## 4.customRef\n\n- 作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。\n\n- 实现防抖效果：\n\n  ```vue\n  <template>\n  \t<input type=\"text\" v-model=\"keyword\">\n  \t<h3>{{keyword}}</h3>\n  </template>\n  \n  <script>\n  \timport {ref,customRef} from 'vue'\n  \texport default {\n  \t\tname:'Demo',\n  \t\tsetup(){\n  \t\t\t// let keyword = ref('hello') //使用Vue准备好的内置ref\n  \t\t\t//自定义一个myRef\n  \t\t\tfunction myRef(value,delay){\n  \t\t\t\tlet timer\n  \t\t\t\t//通过customRef去实现自定义\n  \t\t\t\treturn customRef((track,trigger)=>{\n  \t\t\t\t\treturn{\n  \t\t\t\t\t\tget(){\n  \t\t\t\t\t\t\ttrack() //告诉Vue这个value值是需要被“追踪”的\n  \t\t\t\t\t\t\treturn value\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tset(newValue){\n  \t\t\t\t\t\t\tclearTimeout(timer)\n  \t\t\t\t\t\t\ttimer = setTimeout(()=>{\n  \t\t\t\t\t\t\t\tvalue = newValue\n  \t\t\t\t\t\t\t\ttrigger() //告诉Vue去更新界面\n  \t\t\t\t\t\t\t},delay)\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t})\n  \t\t\t}\n  \t\t\tlet keyword = myRef('hello',500) //使用程序员自定义的ref\n  \t\t\treturn {\n  \t\t\t\tkeyword\n  \t\t\t}\n  \t\t}\n  \t}\n  </script>\n  ```\n\n  \n\n## 5.provide 与 inject\n\n<img src=\"https://v3.cn.vuejs.org/images/components_provide.png\" style=\"width:300px\" />\n\n- 作用：实现<strong style=\"color:#DD5145\">祖与后代组件间</strong>通信\n\n- 套路：父组件有一个 `provide` 选项来提供数据，后代组件有一个 `inject` 选项来开始使用这些数据\n\n- 具体写法：\n\n  1. 祖组件中：\n\n     ```js\n     setup(){\n     \t......\n         let car = reactive({name:'奔驰',price:'40万'})\n         provide('car',car)\n         ......\n     }\n     ```\n\n  2. 后代组件中：\n\n     ```js\n     setup(props,context){\n     \t......\n         const car = inject('car')\n         return {car}\n     \t......\n     }\n     ```\n\n## 6.响应式数据的判断\n\n- isRef: 检查一个值是否为一个 ref 对象\n- isReactive: 检查一个对象是否是由 `reactive` 创建的响应式代理\n- isReadonly: 检查一个对象是否是由 `readonly` 创建的只读代理\n- isProxy: 检查一个对象是否是由 `reactive` 或者 `readonly` 方法创建的代理\n\n# 四、Composition API 的优势\n\n## 1.Options API 存在的问题\n\n使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。\n\n<div style=\"width:600px;height:370px;overflow:hidden;float:left\">\n    <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image\" style=\"width:600px;float:left\" />\n</div>\n<div style=\"width:300px;height:370px;overflow:hidden;float:left\">\n    <img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image\" style=\"zoom:50%;width:560px;left\" /> \n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 2.Composition API 的优势\n\n我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。\n\n<div style=\"width:500px;height:340px;overflow:hidden;float:left\">\n    <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image\"style=\"height:360px\"/>\n</div>\n<div style=\"width:430px;height:340px;overflow:hidden;float:left\">\n    <img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image\"style=\"height:360px\"/>\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 五、新的组件\n\n## 1.Fragment\n\n- 在Vue2中: 组件必须有一个根标签\n- 在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中\n- 好处: 减少标签层级, 减小内存占用\n\n## 2.Teleport\n\n- 什么是Teleport？—— `Teleport` 是一种能够将我们的<strong style=\"color:#DD5145\">组件html结构</strong>移动到指定位置的技术。\n\n  ```vue\n  <teleport to=\"移动位置\">\n  \t<div v-if=\"isShow\" class=\"mask\">\n  \t\t<div class=\"dialog\">\n  \t\t\t<h3>我是一个弹窗</h3>\n  \t\t\t<button @click=\"isShow = false\">关闭弹窗</button>\n  \t\t</div>\n  \t</div>\n  </teleport>\n  ```\n\n## 3.Suspense\n\n- 等待异步组件时渲染一些额外内容，让应用有更好的用户体验\n\n- 使用步骤：\n\n  - 异步引入组件\n\n    ```js\n    import {defineAsyncComponent} from 'vue'\n    const Child = defineAsyncComponent(()=>import('./components/Child.vue'))\n    ```\n\n  - 使用```Suspense```包裹组件，并配置好```default``` 与 ```fallback```\n\n    ```vue\n    <template>\n    \t<div class=\"app\">\n    \t\t<h3>我是App组件</h3>\n    \t\t<Suspense>\n    \t\t\t<template v-slot:default>\n    \t\t\t\t<Child/>\n    \t\t\t</template>\n    \t\t\t<template v-slot:fallback>\n    \t\t\t\t<h3>加载中.....</h3>\n    \t\t\t</template>\n    \t\t</Suspense>\n    \t</div>\n    </template>\n    ```\n\n# 六、其他\n\n## 1.全局API的转移\n\n- Vue 2.x 有许多全局 API 和配置。\n  - 例如：注册全局组件、注册全局指令等。\n\n    ```js\n    //注册全局组件\n    Vue.component('MyButton', {\n      data: () => ({\n        count: 0\n      }),\n      template: '<button @click=\"count++\">Clicked {{ count }} times.</button>'\n    })\n    \n    //注册全局指令\n    Vue.directive('focus', {\n      inserted: el => el.focus()\n    }\n    ```\n\n- Vue3.0中对这些API做出了调整：\n\n  - 将全局的API，即：```Vue.xxx```调整到应用实例（```app```）上\n\n    | 2.x 全局 API（```Vue```） | 3.x 实例 API (`app`)                        |\n    | ------------------------- | ------------------------------------------- |\n    | Vue.config.xxxx           | app.config.xxxx                             |\n    | Vue.config.productionTip  | <strong style=\"color:#DD5145\">移除</strong> |\n    | Vue.component             | app.component                               |\n    | Vue.directive             | app.directive                               |\n    | Vue.mixin                 | app.mixin                                   |\n    | Vue.use                   | app.use                                     |\n    | Vue.prototype             | app.config.globalProperties                 |\n  \n\n## 2.其他改变\n\n- data选项应始终被声明为一个函数。\n\n- 过度类名的更改：\n\n  - Vue2.x写法\n\n    ```css\n    .v-enter,\n    .v-leave-to {\n      opacity: 0;\n    }\n    .v-leave,\n    .v-enter-to {\n      opacity: 1;\n    }\n    ```\n\n  - Vue3.x写法\n\n    ```css\n    .v-enter-from,\n    .v-leave-to {\n      opacity: 0;\n    }\n    \n    .v-leave-from,\n    .v-enter-to {\n      opacity: 1;\n    }\n    ```\n\n- <strong style=\"color:#DD5145\">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持```config.keyCodes```\n\n- <strong style=\"color:#DD5145\">移除</strong>```v-on.native```修饰符\n\n  - 父组件中绑定事件\n\n    ```vue\n    <my-component\n      v-on:close=\"handleComponentEvent\"\n      v-on:click=\"handleNativeClickEvent\"\n    />\n    ```\n\n  - 子组件中声明自定义事件\n\n    ```vue\n    <script>\n      export default {\n        emits: ['close']\n      }\n    </script>\n    ```\n\n- <strong style=\"color:#DD5145\">移除</strong>过滤器（filter）\n\n  > 过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。\n\n- ......","slug":"vue","published":1,"updated":"2024-02-29T09:09:55.762Z","_id":"ckzyc59dk002ykeuq6motfvv4","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Vue3快速上手\"><a href=\"#Vue3快速上手\" class=\"headerlink\" title=\"Vue3快速上手\"></a>Vue3快速上手</h1><img src=\"/image/blog/c9a8cde506c5898db5a8595be46e386.png?raw=true\" />\n\n\n\n<h2 id=\"1-Vue3简介\"><a href=\"#1-Vue3简介\" class=\"headerlink\" title=\"1.Vue3简介\"></a>1.Vue3简介</h2><ul>\n<li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li>\n<li>耗时2年多、<a href=\"https://github.com/vuejs/vue-next/graphs/commit-activity\">2600+次提交</a>、<a href=\"https://github.com/vuejs/rfcs/tree/master/active-rfcs\">30+个RFC</a>、<a href=\"https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+\">600+次PR</a>、<a href=\"https://github.com/vuejs/vue-next/graphs/contributors\">99位贡献者</a> </li>\n<li>github上的tags地址：<a href=\"https://github.com/vuejs/vue-next/releases/tag/v3.0.0\">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li>\n</ul>\n<h2 id=\"2-Vue3带来了什么\"><a href=\"#2-Vue3带来了什么\" class=\"headerlink\" title=\"2.Vue3带来了什么\"></a>2.Vue3带来了什么</h2><h3 id=\"1-性能的提升\"><a href=\"#1-性能的提升\" class=\"headerlink\" title=\"1.性能的提升\"></a>1.性能的提升</h3><ul>\n<li><p>打包大小减少41%</p>\n</li>\n<li><p>初次渲染快55%, 更新渲染快133%</p>\n</li>\n<li><p>内存减少54%</p>\n<p>……</p>\n</li>\n</ul>\n<h3 id=\"2-源码的升级\"><a href=\"#2-源码的升级\" class=\"headerlink\" title=\"2.源码的升级\"></a>2.源码的升级</h3><ul>\n<li><p>使用Proxy代替defineProperty实现响应式</p>\n</li>\n<li><p>重写虚拟DOM的实现和Tree-Shaking</p>\n<p>……</p>\n</li>\n</ul>\n<h3 id=\"3-拥抱TypeScript\"><a href=\"#3-拥抱TypeScript\" class=\"headerlink\" title=\"3.拥抱TypeScript\"></a>3.拥抱TypeScript</h3><ul>\n<li>Vue3可以更好的支持TypeScript</li>\n</ul>\n<h3 id=\"4-新的特性\"><a href=\"#4-新的特性\" class=\"headerlink\" title=\"4.新的特性\"></a>4.新的特性</h3><ol>\n<li><p>Composition API（组合API）</p>\n<ul>\n<li>setup配置</li>\n<li>ref与reactive</li>\n<li>watch与watchEffect</li>\n<li>provide与inject</li>\n<li>……</li>\n</ul>\n</li>\n<li><p>新的内置组件</p>\n<ul>\n<li>Fragment </li>\n<li>Teleport</li>\n<li>Suspense</li>\n</ul>\n</li>\n<li><p>其他改变</p>\n<ul>\n<li>新的生命周期钩子</li>\n<li>data 选项应始终被声明为一个函数</li>\n<li>移除keyCode支持作为 v-on 的修饰符</li>\n<li>……</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"一、创建Vue3-0工程\"><a href=\"#一、创建Vue3-0工程\" class=\"headerlink\" title=\"一、创建Vue3.0工程\"></a>一、创建Vue3.0工程</h1><h2 id=\"1-使用-vue-cli-创建\"><a href=\"#1-使用-vue-cli-创建\" class=\"headerlink\" title=\"1.使用 vue-cli 创建\"></a>1.使用 vue-cli 创建</h2><p>官方文档：<a href=\"https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create\">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span><br>vue --version<br><span class=\"hljs-comment\">## 安装或者升级你的@vue/cli</span><br>npm install -g @vue/cli<br><span class=\"hljs-comment\">## 创建</span><br>vue create vue_test<br><span class=\"hljs-comment\">## 启动</span><br><span class=\"hljs-built_in\">cd</span> vue_test<br>npm run serve<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-使用-vite-创建\"><a href=\"#2-使用-vite-创建\" class=\"headerlink\" title=\"2.使用 vite 创建\"></a>2.使用 vite 创建</h2><p>官方文档：<a href=\"https://v3.cn.vuejs.org/guide/installation.html#vite\">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p>\n<p>vite官网：<a href=\"https://vitejs.cn/\">https://vitejs.cn</a></p>\n<ul>\n<li>什么是vite？—— 新一代前端构建工具。</li>\n<li>优势如下：<ul>\n<li>开发环境中，无需打包操作，可快速的冷启动。</li>\n<li>轻量快速的热重载（HMR）。</li>\n<li>真正的按需编译，不再等待整个应用编译完成。</li>\n</ul>\n</li>\n<li>传统构建 与 vite构建对比图</li>\n</ul>\n<p><img src=\"https://cn.vitejs.dev/assets/bundler.37740380.png\" style=\"width:500px;height:280px;float:left\" /><img src=\"https://cn.vitejs.dev/assets/esm.3070012d.png\" style=\"width:480px;height:280px\" /></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 创建工程</span><br>npm init vite-app &lt;project-name&gt;<br><span class=\"hljs-comment\">## 进入工程目录</span><br><span class=\"hljs-built_in\">cd</span> &lt;project-name&gt;<br><span class=\"hljs-comment\">## 安装依赖</span><br>npm install<br><span class=\"hljs-comment\">## 运行</span><br>npm run dev<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"二、常用-Composition-API\"><a href=\"#二、常用-Composition-API\" class=\"headerlink\" title=\"二、常用 Composition API\"></a>二、常用 Composition API</h1><p>官方文档: <a href=\"https://v3.cn.vuejs.org/guide/composition-api-introduction.html\">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p>\n<h2 id=\"1-拉开序幕的setup\"><a href=\"#1-拉开序幕的setup\" class=\"headerlink\" title=\"1.拉开序幕的setup\"></a>1.拉开序幕的setup</h2><ol>\n<li>理解：Vue3.0中一个新的配置项，值为一个函数。</li>\n<li>setup是所有<strong style=\"color:#DD5145\">Composition API（组合API）</strong><i style=\"color:gray;font-weight:bold\">“ 表演的舞台 ”</i>。</li>\n<li>组件中所用到的：数据、方法等等，均要配置在setup中。</li>\n<li>setup函数的两种返回值：<ol>\n<li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li>\n<li><span style=\"color:#aad\">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li>\n</ol>\n</li>\n<li>注意点：<ol>\n<li>尽量不要与Vue2.x配置混用<ul>\n<li>Vue2.x配置（data、methos、computed…）中<strong style=\"color:#DD5145\">可以访问到</strong>setup中的属性、方法。</li>\n<li>但在setup中<strong style=\"color:#DD5145\">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li>\n<li>如果有重名, setup优先。</li>\n</ul>\n</li>\n<li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"2-ref函数\"><a href=\"#2-ref函数\" class=\"headerlink\" title=\"2.ref函数\"></a>2.ref函数</h2><ul>\n<li>作用: 定义一个响应式的数据</li>\n<li>语法: <code>const xxx = ref(initValue)</code> <ul>\n<li>创建一个包含响应式数据的<strong style=\"color:#DD5145\">引用对象（reference对象，简称ref对象）</strong>。</li>\n<li>JS中操作数据： <code>xxx.value</code></li>\n<li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li>\n</ul>\n</li>\n<li>备注：<ul>\n<li>接收的数据可以是：基本类型、也可以是对象类型。</li>\n<li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li>\n<li>对象类型的数据：内部 <i style=\"color:gray;font-weight:bold\">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-reactive函数\"><a href=\"#3-reactive函数\" class=\"headerlink\" title=\"3.reactive函数\"></a>3.reactive函数</h2><ul>\n<li>作用: 定义一个<strong style=\"color:#DD5145\">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li>\n<li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style=\"color:#DD5145\">代理对象（Proxy的实例对象，简称proxy对象）</strong></li>\n<li>reactive定义的响应式数据是“深层次的”。</li>\n<li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li>\n</ul>\n<h2 id=\"4-Vue3-0中的响应式原理\"><a href=\"#4-Vue3-0中的响应式原理\" class=\"headerlink\" title=\"4.Vue3.0中的响应式原理\"></a>4.Vue3.0中的响应式原理</h2><h3 id=\"vue2-x的响应式\"><a href=\"#vue2-x的响应式\" class=\"headerlink\" title=\"vue2.x的响应式\"></a>vue2.x的响应式</h3><ul>\n<li><p>实现原理：</p>\n<ul>\n<li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p>\n</li>\n<li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Object</span>.defineProperty(data, <span class=\"hljs-string\">&#x27;count&#x27;</span>, &#123;<br>    get () &#123;&#125;, <br>    set () &#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>存在问题：</p>\n<ul>\n<li>新增属性、删除属性, 界面不会更新。</li>\n<li>直接通过下标修改数组, 界面不会自动更新。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Vue3-0的响应式\"><a href=\"#Vue3-0的响应式\" class=\"headerlink\" title=\"Vue3.0的响应式\"></a>Vue3.0的响应式</h3><ul>\n<li>实现原理: <ul>\n<li>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</li>\n<li>通过Reflect（反射）:  对源对象的属性进行操作。</li>\n<li>MDN文档中描述的Proxy与Reflect：<ul>\n<li><p>Proxy：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p>\n</li>\n<li><p>Reflect：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Proxy</span>(data, &#123;<br>\t<span class=\"hljs-comment\">// 拦截读取属性值</span><br>    get (target, prop) &#123;<br>    \t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Reflect</span>.get(target, prop)<br>    &#125;,<br>    <span class=\"hljs-comment\">// 拦截设置属性值或添加新属性</span><br>    set (target, prop, value) &#123;<br>    \t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Reflect</span>.set(target, prop, value)<br>    &#125;,<br>    <span class=\"hljs-comment\">// 拦截删除属性</span><br>    deleteProperty (target, prop) &#123;<br>    \t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Reflect</span>.deleteProperty(target, prop)<br>    &#125;<br>&#125;)<br><br>proxy.name = <span class=\"hljs-string\">&#x27;tom&#x27;</span>   <br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-reactive对比ref\"><a href=\"#5-reactive对比ref\" class=\"headerlink\" title=\"5.reactive对比ref\"></a>5.reactive对比ref</h2><ul>\n<li>从定义数据角度对比：<ul>\n<li> ref用来定义：<strong style=\"color:#DD5145\">基本类型数据</strong>。</li>\n<li> reactive用来定义：<strong style=\"color:#DD5145\">对象（或数组）类型数据</strong>。</li>\n<li> 备注：ref也可以用来定义<strong style=\"color:#DD5145\">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style=\"color:#DD5145\">代理对象</strong>。</li>\n</ul>\n</li>\n<li>从原理角度对比：<ul>\n<li> ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li>\n<li> reactive通过使用<strong style=\"color:#DD5145\">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style=\"color:#DD5145\">Reflect</strong>操作<strong style=\"color:orange\">源对象</strong>内部的数据。</li>\n</ul>\n</li>\n<li>从使用角度对比：<ul>\n<li> ref定义的数据：操作数据<strong style=\"color:#DD5145\">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style=\"color:#DD5145\">不需要</strong><code>.value</code>。</li>\n<li> reactive定义的数据：操作数据与读取数据：<strong style=\"color:#DD5145\">均不需要</strong><code>.value</code>。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-setup的两个注意点\"><a href=\"#6-setup的两个注意点\" class=\"headerlink\" title=\"6.setup的两个注意点\"></a>6.setup的两个注意点</h2><ul>\n<li>setup执行的时机<ul>\n<li>在beforeCreate之前执行一次，this是undefined。</li>\n</ul>\n</li>\n<li>setup的参数<ul>\n<li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li>\n<li>context：上下文对象<ul>\n<li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li>\n<li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li>\n<li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"7-计算属性与监视\"><a href=\"#7-计算属性与监视\" class=\"headerlink\" title=\"7.计算属性与监视\"></a>7.计算属性与监视</h2><h3 id=\"1-computed函数\"><a href=\"#1-computed函数\" class=\"headerlink\" title=\"1.computed函数\"></a>1.computed函数</h3><ul>\n<li><p>与Vue2.x中computed配置功能一致</p>\n</li>\n<li><p>写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123;computed&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><br><span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    ...<br>\t<span class=\"hljs-comment\">//计算属性——简写</span><br>    <span class=\"hljs-keyword\">let</span> fullName = computed(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> person.firstName + <span class=\"hljs-string\">&#x27;-&#x27;</span> + person.lastName<br>    &#125;)<br>    <span class=\"hljs-comment\">//计算属性——完整</span><br>    <span class=\"hljs-keyword\">let</span> fullName = computed(&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-title\">get</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>            <span class=\"hljs-keyword\">return</span> person.firstName + <span class=\"hljs-string\">&#x27;-&#x27;</span> + person.lastName<br>        &#125;,<br>        <span class=\"hljs-function\"><span class=\"hljs-title\">set</span>(<span class=\"hljs-params\">value</span>)</span>&#123;<br>            <span class=\"hljs-keyword\">const</span> nameArr = value.split(<span class=\"hljs-string\">&#x27;-&#x27;</span>)<br>            person.firstName = nameArr[<span class=\"hljs-number\">0</span>]<br>            person.lastName = nameArr[<span class=\"hljs-number\">1</span>]<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-watch函数\"><a href=\"#2-watch函数\" class=\"headerlink\" title=\"2.watch函数\"></a>2.watch函数</h3><ul>\n<li><p>与Vue2.x中watch配置功能一致</p>\n</li>\n<li><p>两个小“坑”：</p>\n<ul>\n<li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li>\n<li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//情况一：监视ref定义的响应式数据</span><br>watch(sum,<span class=\"hljs-function\">(<span class=\"hljs-params\">newValue,oldValue</span>)=&gt;</span>&#123;<br>\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;sum变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class=\"hljs-attr\">immediate</span>:<span class=\"hljs-literal\">true</span>&#125;)<br><br><span class=\"hljs-comment\">//情况二：监视多个ref定义的响应式数据</span><br>watch([sum,msg],<span class=\"hljs-function\">(<span class=\"hljs-params\">newValue,oldValue</span>)=&gt;</span>&#123;<br>\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)<br>&#125;) <br><br><span class=\"hljs-comment\">/* 情况三：监视reactive定义的响应式数据</span><br><span class=\"hljs-comment\">\t\t\t若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span><br><span class=\"hljs-comment\">\t\t\t若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span><br><span class=\"hljs-comment\">*/</span><br>watch(person,<span class=\"hljs-function\">(<span class=\"hljs-params\">newValue,oldValue</span>)=&gt;</span>&#123;<br>\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;person变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class=\"hljs-attr\">immediate</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">deep</span>:<span class=\"hljs-literal\">false</span>&#125;) <span class=\"hljs-comment\">//此处的deep配置不再奏效</span><br><br><span class=\"hljs-comment\">//情况四：监视reactive定义的响应式数据中的某个属性</span><br>watch(<span class=\"hljs-function\">()=&gt;</span>person.job,<span class=\"hljs-function\">(<span class=\"hljs-params\">newValue,oldValue</span>)=&gt;</span>&#123;<br>\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class=\"hljs-attr\">immediate</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">deep</span>:<span class=\"hljs-literal\">true</span>&#125;) <br><br><span class=\"hljs-comment\">//情况五：监视reactive定义的响应式数据中的某些属性</span><br>watch([<span class=\"hljs-function\">()=&gt;</span>person.job,<span class=\"hljs-function\">()=&gt;</span>person.name],<span class=\"hljs-function\">(<span class=\"hljs-params\">newValue,oldValue</span>)=&gt;</span>&#123;<br>\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class=\"hljs-attr\">immediate</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">deep</span>:<span class=\"hljs-literal\">true</span>&#125;)<br><br><span class=\"hljs-comment\">//特殊情况</span><br>watch(<span class=\"hljs-function\">()=&gt;</span>person.job,<span class=\"hljs-function\">(<span class=\"hljs-params\">newValue,oldValue</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class=\"hljs-attr\">deep</span>:<span class=\"hljs-literal\">true</span>&#125;) <span class=\"hljs-comment\">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-watchEffect函数\"><a href=\"#3-watchEffect函数\" class=\"headerlink\" title=\"3.watchEffect函数\"></a>3.watchEffect函数</h3><ul>\n<li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p>\n</li>\n<li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p>\n</li>\n<li><p>watchEffect有点像computed：</p>\n<ul>\n<li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li>\n<li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span><br>watchEffect(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> x1 = sum.value<br>    <span class=\"hljs-keyword\">const</span> x2 = person.age<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;watchEffect配置的回调执行了&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"8-生命周期\"><a href=\"#8-生命周期\" class=\"headerlink\" title=\"8.生命周期\"></a>8.生命周期</h2><div style=\"border:1px solid black;width:380px;float:left;margin-right:20px;\"><strong>vue2.x的生命周期</strong><img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"lifecycle_2\" style=\"zoom:33%;width:1200px\" /></div><div style=\"border:1px solid black;width:510px;height:985px;float:left\"><strong>vue3.0的生命周期</strong><img src=\"https://v3.cn.vuejs.org/images/lifecycle.svg\" alt=\"lifecycle_2\" style=\"zoom:33%;width:2500px\" /></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>1</p>\n<ul>\n<li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul>\n<li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li>\n<li><code>destroyed</code>改名为 <code>unmounted</code></li>\n</ul>\n</li>\n<li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：<ul>\n<li><code>beforeCreate</code>===&gt;<code>setup()</code></li>\n<li><code>created</code>=======&gt;<code>setup()</code></li>\n<li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li>\n<li><code>mounted</code>=======&gt;<code>onMounted</code></li>\n<li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li>\n<li><code>updated</code> =======&gt;<code>onUpdated</code></li>\n<li><code>beforeUnmount</code> ==&gt;<code>onBeforeUnmount</code></li>\n<li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"9-自定义hook函数\"><a href=\"#9-自定义hook函数\" class=\"headerlink\" title=\"9.自定义hook函数\"></a>9.自定义hook函数</h2><ul>\n<li><p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p>\n</li>\n<li><p>类似于vue2.x中的mixin。</p>\n</li>\n<li><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p>\n</li>\n</ul>\n<h2 id=\"10-toRef\"><a href=\"#10-toRef\" class=\"headerlink\" title=\"10.toRef\"></a>10.toRef</h2><ul>\n<li>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</li>\n<li>语法：<code>const name = toRef(person,&#39;name&#39;)</code></li>\n<li>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</li>\n</ul>\n<ul>\n<li>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></li>\n</ul>\n<h1 id=\"三、其它-Composition-API\"><a href=\"#三、其它-Composition-API\" class=\"headerlink\" title=\"三、其它 Composition API\"></a>三、其它 Composition API</h1><h2 id=\"1-shallowReactive-与-shallowRef\"><a href=\"#1-shallowReactive-与-shallowRef\" class=\"headerlink\" title=\"1.shallowReactive 与 shallowRef\"></a>1.shallowReactive 与 shallowRef</h2><ul>\n<li><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p>\n</li>\n<li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p>\n</li>\n<li><p>什么时候使用?</p>\n<ul>\n<li> 如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li>\n<li> 如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-readonly-与-shallowReadonly\"><a href=\"#2-readonly-与-shallowReadonly\" class=\"headerlink\" title=\"2.readonly 与 shallowReadonly\"></a>2.readonly 与 shallowReadonly</h2><ul>\n<li>readonly: 让一个响应式数据变为只读的（深只读）。</li>\n<li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li>\n<li>应用场景: 不希望数据被修改时。</li>\n</ul>\n<h2 id=\"3-toRaw-与-markRaw\"><a href=\"#3-toRaw-与-markRaw\" class=\"headerlink\" title=\"3.toRaw 与 markRaw\"></a>3.toRaw 与 markRaw</h2><ul>\n<li>toRaw：<ul>\n<li>作用：将一个由<code>reactive</code>生成的<strong style=\"color:orange\">响应式对象</strong>转为<strong style=\"color:orange\">普通对象</strong>。</li>\n<li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li>\n</ul>\n</li>\n<li>markRaw：<ul>\n<li>作用：标记一个对象，使其永远不会再成为响应式对象。</li>\n<li>应用场景:<ol>\n<li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li>\n<li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-customRef\"><a href=\"#4-customRef\" class=\"headerlink\" title=\"4.customRef\"></a>4.customRef</h2><ul>\n<li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p>\n</li>\n<li><p>实现防抖效果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>\t&lt;input type=&quot;text&quot; v-model=&quot;keyword&quot;&gt;<br>\t&lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;/h3&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>\timport &#123;ref,customRef&#125; from &#x27;vue&#x27;<br>\texport default &#123;<br>\t\tname:&#x27;Demo&#x27;,<br>\t\tsetup()&#123;<br>\t\t\t// let keyword = ref(&#x27;hello&#x27;) //使用Vue准备好的内置ref<br>\t\t\t//自定义一个myRef<br>\t\t\tfunction myRef(value,delay)&#123;<br>\t\t\t\tlet timer<br>\t\t\t\t//通过customRef去实现自定义<br>\t\t\t\treturn customRef((track,trigger)=&gt;&#123;<br>\t\t\t\t\treturn&#123;<br>\t\t\t\t\t\tget()&#123;<br>\t\t\t\t\t\t\ttrack() //告诉Vue这个value值是需要被“追踪”的<br>\t\t\t\t\t\t\treturn value<br>\t\t\t\t\t\t&#125;,<br>\t\t\t\t\t\tset(newValue)&#123;<br>\t\t\t\t\t\t\tclearTimeout(timer)<br>\t\t\t\t\t\t\ttimer = setTimeout(()=&gt;&#123;<br>\t\t\t\t\t\t\t\tvalue = newValue<br>\t\t\t\t\t\t\t\ttrigger() //告诉Vue去更新界面<br>\t\t\t\t\t\t\t&#125;,delay)<br>\t\t\t\t\t\t&#125;<br>\t\t\t\t\t&#125;<br>\t\t\t\t&#125;)<br>\t\t\t&#125;<br>\t\t\tlet keyword = myRef(&#x27;hello&#x27;,500) //使用程序员自定义的ref<br>\t\t\treturn &#123;<br>\t\t\t\tkeyword<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"5-provide-与-inject\"><a href=\"#5-provide-与-inject\" class=\"headerlink\" title=\"5.provide 与 inject\"></a>5.provide 与 inject</h2><img src=\"https://v3.cn.vuejs.org/images/components_provide.png\" style=\"width:300px\" />\n\n<ul>\n<li><p>作用：实现<strong style=\"color:#DD5145\">祖与后代组件间</strong>通信</p>\n</li>\n<li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p>\n</li>\n<li><p>具体写法：</p>\n<ol>\n<li><p>祖组件中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>\t......<br>    <span class=\"hljs-keyword\">let</span> car = reactive(&#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;奔驰&#x27;</span>,<span class=\"hljs-attr\">price</span>:<span class=\"hljs-string\">&#x27;40万&#x27;</span>&#125;)<br>    provide(<span class=\"hljs-string\">&#x27;car&#x27;</span>,car)<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>后代组件中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\">props,context</span>)</span>&#123;<br>\t......<br>    <span class=\"hljs-keyword\">const</span> car = inject(<span class=\"hljs-string\">&#x27;car&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> &#123;car&#125;<br>\t......<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"6-响应式数据的判断\"><a href=\"#6-响应式数据的判断\" class=\"headerlink\" title=\"6.响应式数据的判断\"></a>6.响应式数据的判断</h2><ul>\n<li>isRef: 检查一个值是否为一个 ref 对象</li>\n<li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li>\n<li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li>\n<li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li>\n</ul>\n<h1 id=\"四、Composition-API-的优势\"><a href=\"#四、Composition-API-的优势\" class=\"headerlink\" title=\"四、Composition API 的优势\"></a>四、Composition API 的优势</h1><h2 id=\"1-Options-API-存在的问题\"><a href=\"#1-Options-API-存在的问题\" class=\"headerlink\" title=\"1.Options API 存在的问题\"></a>1.Options API 存在的问题</h2><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p>\n<div style=\"width:600px;height:370px;overflow:hidden;float:left\">\n    <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image\" style=\"width:600px;float:left\" />\n</div>\n<div style=\"width:300px;height:370px;overflow:hidden;float:left\">\n    <img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image\" style=\"zoom:50%;width:560px;left\" /> \n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"2-Composition-API-的优势\"><a href=\"#2-Composition-API-的优势\" class=\"headerlink\" title=\"2.Composition API 的优势\"></a>2.Composition API 的优势</h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p>\n<div style=\"width:500px;height:340px;overflow:hidden;float:left\">\n    <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image\"style=\"height:360px\"/>\n</div>\n<div style=\"width:430px;height:340px;overflow:hidden;float:left\">\n    <img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image\"style=\"height:360px\"/>\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h1 id=\"五、新的组件\"><a href=\"#五、新的组件\" class=\"headerlink\" title=\"五、新的组件\"></a>五、新的组件</h1><h2 id=\"1-Fragment\"><a href=\"#1-Fragment\" class=\"headerlink\" title=\"1.Fragment\"></a>1.Fragment</h2><ul>\n<li>在Vue2中: 组件必须有一个根标签</li>\n<li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li>\n<li>好处: 减少标签层级, 减小内存占用</li>\n</ul>\n<h2 id=\"2-Teleport\"><a href=\"#2-Teleport\" class=\"headerlink\" title=\"2.Teleport\"></a>2.Teleport</h2><ul>\n<li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style=\"color:#DD5145\">组件html结构</strong>移动到指定位置的技术。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs vue\">&lt;teleport to=&quot;移动位置&quot;&gt;<br>\t&lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;<br>\t\t&lt;div class=&quot;dialog&quot;&gt;<br>\t\t\t&lt;h3&gt;我是一个弹窗&lt;/h3&gt;<br>\t\t\t&lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;<br>\t\t&lt;/div&gt;<br>\t&lt;/div&gt;<br>&lt;/teleport&gt;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"3-Suspense\"><a href=\"#3-Suspense\" class=\"headerlink\" title=\"3.Suspense\"></a>3.Suspense</h2><ul>\n<li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p>\n</li>\n<li><p>使用步骤：</p>\n<ul>\n<li><p>异步引入组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123;defineAsyncComponent&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><span class=\"hljs-keyword\">const</span> Child = defineAsyncComponent(<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;./components/Child.vue&#x27;</span>))<br></code></pre></td></tr></table></figure></li>\n<li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>\t&lt;div class=&quot;app&quot;&gt;<br>\t\t&lt;h3&gt;我是App组件&lt;/h3&gt;<br>\t\t&lt;Suspense&gt;<br>\t\t\t&lt;template v-slot:default&gt;<br>\t\t\t\t&lt;Child/&gt;<br>\t\t\t&lt;/template&gt;<br>\t\t\t&lt;template v-slot:fallback&gt;<br>\t\t\t\t&lt;h3&gt;加载中.....&lt;/h3&gt;<br>\t\t\t&lt;/template&gt;<br>\t\t&lt;/Suspense&gt;<br>\t&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"六、其他\"><a href=\"#六、其他\" class=\"headerlink\" title=\"六、其他\"></a>六、其他</h1><h2 id=\"1-全局API的转移\"><a href=\"#1-全局API的转移\" class=\"headerlink\" title=\"1.全局API的转移\"></a>1.全局API的转移</h2><ul>\n<li><p>Vue 2.x 有许多全局 API 和配置。</p>\n<ul>\n<li><p>例如：注册全局组件、注册全局指令等。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//注册全局组件</span><br>Vue.component(<span class=\"hljs-string\">&#x27;MyButton&#x27;</span>, &#123;<br>  <span class=\"hljs-attr\">data</span>: <span class=\"hljs-function\">() =&gt;</span> (&#123;<br>    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span><br>  &#125;),<br>  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span><br>&#125;)<br><br><span class=\"hljs-comment\">//注册全局指令</span><br>Vue.directive(<span class=\"hljs-string\">&#x27;focus&#x27;</span>, &#123;<br>  <span class=\"hljs-attr\">inserted</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">el</span> =&gt;</span> el.focus()<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>Vue3.0中对这些API做出了调整：</p>\n<ul>\n<li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p>\n<table>\n<thead>\n<tr>\n<th>2.x 全局 API（<code>Vue</code>）</th>\n<th>3.x 实例 API (<code>app</code>)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Vue.config.xxxx</td>\n<td>app.config.xxxx</td>\n</tr>\n<tr>\n<td>Vue.config.productionTip</td>\n<td><strong style=\"color:#DD5145\">移除</strong></td>\n</tr>\n<tr>\n<td>Vue.component</td>\n<td>app.component</td>\n</tr>\n<tr>\n<td>Vue.directive</td>\n<td>app.directive</td>\n</tr>\n<tr>\n<td>Vue.mixin</td>\n<td>app.mixin</td>\n</tr>\n<tr>\n<td>Vue.use</td>\n<td>app.use</td>\n</tr>\n<tr>\n<td>Vue.prototype</td>\n<td>app.config.globalProperties</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-其他改变\"><a href=\"#2-其他改变\" class=\"headerlink\" title=\"2.其他改变\"></a>2.其他改变</h2><ul>\n<li><p>data选项应始终被声明为一个函数。</p>\n</li>\n<li><p>过度类名的更改：</p>\n<ul>\n<li><p>Vue2.x写法</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.v-enter</span>,<br><span class=\"hljs-selector-class\">.v-leave-to</span> &#123;<br>  <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;<br>&#125;<br><span class=\"hljs-selector-class\">.v-leave</span>,<br><span class=\"hljs-selector-class\">.v-enter-to</span> &#123;<br>  <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>Vue3.x写法</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.v-enter-from</span>,<br><span class=\"hljs-selector-class\">.v-leave-to</span> &#123;<br>  <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-selector-class\">.v-leave-from</span>,<br><span class=\"hljs-selector-class\">.v-enter-to</span> &#123;<br>  <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong style=\"color:#DD5145\">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p>\n</li>\n<li><p><strong style=\"color:#DD5145\">移除</strong><code>v-on.native</code>修饰符</p>\n<ul>\n<li><p>父组件中绑定事件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs vue\">&lt;my-component<br>  v-on:close=&quot;handleComponentEvent&quot;<br>  v-on:click=&quot;handleNativeClickEvent&quot;<br>/&gt;<br></code></pre></td></tr></table></figure></li>\n<li><p>子组件中声明自定义事件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs vue\">&lt;script&gt;<br>  export default &#123;<br>    emits: [&#x27;close&#x27;]<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong style=\"color:#DD5145\">移除</strong>过滤器（filter）</p>\n<blockquote>\n<p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p>\n</blockquote>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n","site":{"data":{}},"more":"<h1 id=\"Vue3快速上手\"><a href=\"#Vue3快速上手\" class=\"headerlink\" title=\"Vue3快速上手\"></a>Vue3快速上手</h1><img src=\"/image/blog/c9a8cde506c5898db5a8595be46e386.png?raw=true\" />\n\n\n\n<h2 id=\"1-Vue3简介\"><a href=\"#1-Vue3简介\" class=\"headerlink\" title=\"1.Vue3简介\"></a>1.Vue3简介</h2><ul>\n<li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li>\n<li>耗时2年多、<a href=\"https://github.com/vuejs/vue-next/graphs/commit-activity\">2600+次提交</a>、<a href=\"https://github.com/vuejs/rfcs/tree/master/active-rfcs\">30+个RFC</a>、<a href=\"https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+\">600+次PR</a>、<a href=\"https://github.com/vuejs/vue-next/graphs/contributors\">99位贡献者</a> </li>\n<li>github上的tags地址：<a href=\"https://github.com/vuejs/vue-next/releases/tag/v3.0.0\">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li>\n</ul>\n<h2 id=\"2-Vue3带来了什么\"><a href=\"#2-Vue3带来了什么\" class=\"headerlink\" title=\"2.Vue3带来了什么\"></a>2.Vue3带来了什么</h2><h3 id=\"1-性能的提升\"><a href=\"#1-性能的提升\" class=\"headerlink\" title=\"1.性能的提升\"></a>1.性能的提升</h3><ul>\n<li><p>打包大小减少41%</p>\n</li>\n<li><p>初次渲染快55%, 更新渲染快133%</p>\n</li>\n<li><p>内存减少54%</p>\n<p>……</p>\n</li>\n</ul>\n<h3 id=\"2-源码的升级\"><a href=\"#2-源码的升级\" class=\"headerlink\" title=\"2.源码的升级\"></a>2.源码的升级</h3><ul>\n<li><p>使用Proxy代替defineProperty实现响应式</p>\n</li>\n<li><p>重写虚拟DOM的实现和Tree-Shaking</p>\n<p>……</p>\n</li>\n</ul>\n<h3 id=\"3-拥抱TypeScript\"><a href=\"#3-拥抱TypeScript\" class=\"headerlink\" title=\"3.拥抱TypeScript\"></a>3.拥抱TypeScript</h3><ul>\n<li>Vue3可以更好的支持TypeScript</li>\n</ul>\n<h3 id=\"4-新的特性\"><a href=\"#4-新的特性\" class=\"headerlink\" title=\"4.新的特性\"></a>4.新的特性</h3><ol>\n<li><p>Composition API（组合API）</p>\n<ul>\n<li>setup配置</li>\n<li>ref与reactive</li>\n<li>watch与watchEffect</li>\n<li>provide与inject</li>\n<li>……</li>\n</ul>\n</li>\n<li><p>新的内置组件</p>\n<ul>\n<li>Fragment </li>\n<li>Teleport</li>\n<li>Suspense</li>\n</ul>\n</li>\n<li><p>其他改变</p>\n<ul>\n<li>新的生命周期钩子</li>\n<li>data 选项应始终被声明为一个函数</li>\n<li>移除keyCode支持作为 v-on 的修饰符</li>\n<li>……</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"一、创建Vue3-0工程\"><a href=\"#一、创建Vue3-0工程\" class=\"headerlink\" title=\"一、创建Vue3.0工程\"></a>一、创建Vue3.0工程</h1><h2 id=\"1-使用-vue-cli-创建\"><a href=\"#1-使用-vue-cli-创建\" class=\"headerlink\" title=\"1.使用 vue-cli 创建\"></a>1.使用 vue-cli 创建</h2><p>官方文档：<a href=\"https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create\">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span><br>vue --version<br><span class=\"hljs-comment\">## 安装或者升级你的@vue/cli</span><br>npm install -g @vue/cli<br><span class=\"hljs-comment\">## 创建</span><br>vue create vue_test<br><span class=\"hljs-comment\">## 启动</span><br><span class=\"hljs-built_in\">cd</span> vue_test<br>npm run serve<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-使用-vite-创建\"><a href=\"#2-使用-vite-创建\" class=\"headerlink\" title=\"2.使用 vite 创建\"></a>2.使用 vite 创建</h2><p>官方文档：<a href=\"https://v3.cn.vuejs.org/guide/installation.html#vite\">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p>\n<p>vite官网：<a href=\"https://vitejs.cn/\">https://vitejs.cn</a></p>\n<ul>\n<li>什么是vite？—— 新一代前端构建工具。</li>\n<li>优势如下：<ul>\n<li>开发环境中，无需打包操作，可快速的冷启动。</li>\n<li>轻量快速的热重载（HMR）。</li>\n<li>真正的按需编译，不再等待整个应用编译完成。</li>\n</ul>\n</li>\n<li>传统构建 与 vite构建对比图</li>\n</ul>\n<p><img src=\"https://cn.vitejs.dev/assets/bundler.37740380.png\" style=\"width:500px;height:280px;float:left\" /><img src=\"https://cn.vitejs.dev/assets/esm.3070012d.png\" style=\"width:480px;height:280px\" /></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">## 创建工程</span><br>npm init vite-app &lt;project-name&gt;<br><span class=\"hljs-comment\">## 进入工程目录</span><br><span class=\"hljs-built_in\">cd</span> &lt;project-name&gt;<br><span class=\"hljs-comment\">## 安装依赖</span><br>npm install<br><span class=\"hljs-comment\">## 运行</span><br>npm run dev<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"二、常用-Composition-API\"><a href=\"#二、常用-Composition-API\" class=\"headerlink\" title=\"二、常用 Composition API\"></a>二、常用 Composition API</h1><p>官方文档: <a href=\"https://v3.cn.vuejs.org/guide/composition-api-introduction.html\">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p>\n<h2 id=\"1-拉开序幕的setup\"><a href=\"#1-拉开序幕的setup\" class=\"headerlink\" title=\"1.拉开序幕的setup\"></a>1.拉开序幕的setup</h2><ol>\n<li>理解：Vue3.0中一个新的配置项，值为一个函数。</li>\n<li>setup是所有<strong style=\"color:#DD5145\">Composition API（组合API）</strong><i style=\"color:gray;font-weight:bold\">“ 表演的舞台 ”</i>。</li>\n<li>组件中所用到的：数据、方法等等，均要配置在setup中。</li>\n<li>setup函数的两种返回值：<ol>\n<li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li>\n<li><span style=\"color:#aad\">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li>\n</ol>\n</li>\n<li>注意点：<ol>\n<li>尽量不要与Vue2.x配置混用<ul>\n<li>Vue2.x配置（data、methos、computed…）中<strong style=\"color:#DD5145\">可以访问到</strong>setup中的属性、方法。</li>\n<li>但在setup中<strong style=\"color:#DD5145\">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li>\n<li>如果有重名, setup优先。</li>\n</ul>\n</li>\n<li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"2-ref函数\"><a href=\"#2-ref函数\" class=\"headerlink\" title=\"2.ref函数\"></a>2.ref函数</h2><ul>\n<li>作用: 定义一个响应式的数据</li>\n<li>语法: <code>const xxx = ref(initValue)</code> <ul>\n<li>创建一个包含响应式数据的<strong style=\"color:#DD5145\">引用对象（reference对象，简称ref对象）</strong>。</li>\n<li>JS中操作数据： <code>xxx.value</code></li>\n<li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li>\n</ul>\n</li>\n<li>备注：<ul>\n<li>接收的数据可以是：基本类型、也可以是对象类型。</li>\n<li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li>\n<li>对象类型的数据：内部 <i style=\"color:gray;font-weight:bold\">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-reactive函数\"><a href=\"#3-reactive函数\" class=\"headerlink\" title=\"3.reactive函数\"></a>3.reactive函数</h2><ul>\n<li>作用: 定义一个<strong style=\"color:#DD5145\">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li>\n<li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style=\"color:#DD5145\">代理对象（Proxy的实例对象，简称proxy对象）</strong></li>\n<li>reactive定义的响应式数据是“深层次的”。</li>\n<li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li>\n</ul>\n<h2 id=\"4-Vue3-0中的响应式原理\"><a href=\"#4-Vue3-0中的响应式原理\" class=\"headerlink\" title=\"4.Vue3.0中的响应式原理\"></a>4.Vue3.0中的响应式原理</h2><h3 id=\"vue2-x的响应式\"><a href=\"#vue2-x的响应式\" class=\"headerlink\" title=\"vue2.x的响应式\"></a>vue2.x的响应式</h3><ul>\n<li><p>实现原理：</p>\n<ul>\n<li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p>\n</li>\n<li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Object</span>.defineProperty(data, <span class=\"hljs-string\">&#x27;count&#x27;</span>, &#123;<br>    get () &#123;&#125;, <br>    set () &#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>存在问题：</p>\n<ul>\n<li>新增属性、删除属性, 界面不会更新。</li>\n<li>直接通过下标修改数组, 界面不会自动更新。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Vue3-0的响应式\"><a href=\"#Vue3-0的响应式\" class=\"headerlink\" title=\"Vue3.0的响应式\"></a>Vue3.0的响应式</h3><ul>\n<li>实现原理: <ul>\n<li>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</li>\n<li>通过Reflect（反射）:  对源对象的属性进行操作。</li>\n<li>MDN文档中描述的Proxy与Reflect：<ul>\n<li><p>Proxy：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p>\n</li>\n<li><p>Reflect：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Proxy</span>(data, &#123;<br>\t<span class=\"hljs-comment\">// 拦截读取属性值</span><br>    get (target, prop) &#123;<br>    \t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Reflect</span>.get(target, prop)<br>    &#125;,<br>    <span class=\"hljs-comment\">// 拦截设置属性值或添加新属性</span><br>    set (target, prop, value) &#123;<br>    \t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Reflect</span>.set(target, prop, value)<br>    &#125;,<br>    <span class=\"hljs-comment\">// 拦截删除属性</span><br>    deleteProperty (target, prop) &#123;<br>    \t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Reflect</span>.deleteProperty(target, prop)<br>    &#125;<br>&#125;)<br><br>proxy.name = <span class=\"hljs-string\">&#x27;tom&#x27;</span>   <br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-reactive对比ref\"><a href=\"#5-reactive对比ref\" class=\"headerlink\" title=\"5.reactive对比ref\"></a>5.reactive对比ref</h2><ul>\n<li>从定义数据角度对比：<ul>\n<li> ref用来定义：<strong style=\"color:#DD5145\">基本类型数据</strong>。</li>\n<li> reactive用来定义：<strong style=\"color:#DD5145\">对象（或数组）类型数据</strong>。</li>\n<li> 备注：ref也可以用来定义<strong style=\"color:#DD5145\">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style=\"color:#DD5145\">代理对象</strong>。</li>\n</ul>\n</li>\n<li>从原理角度对比：<ul>\n<li> ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li>\n<li> reactive通过使用<strong style=\"color:#DD5145\">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style=\"color:#DD5145\">Reflect</strong>操作<strong style=\"color:orange\">源对象</strong>内部的数据。</li>\n</ul>\n</li>\n<li>从使用角度对比：<ul>\n<li> ref定义的数据：操作数据<strong style=\"color:#DD5145\">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style=\"color:#DD5145\">不需要</strong><code>.value</code>。</li>\n<li> reactive定义的数据：操作数据与读取数据：<strong style=\"color:#DD5145\">均不需要</strong><code>.value</code>。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-setup的两个注意点\"><a href=\"#6-setup的两个注意点\" class=\"headerlink\" title=\"6.setup的两个注意点\"></a>6.setup的两个注意点</h2><ul>\n<li>setup执行的时机<ul>\n<li>在beforeCreate之前执行一次，this是undefined。</li>\n</ul>\n</li>\n<li>setup的参数<ul>\n<li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li>\n<li>context：上下文对象<ul>\n<li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li>\n<li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li>\n<li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"7-计算属性与监视\"><a href=\"#7-计算属性与监视\" class=\"headerlink\" title=\"7.计算属性与监视\"></a>7.计算属性与监视</h2><h3 id=\"1-computed函数\"><a href=\"#1-computed函数\" class=\"headerlink\" title=\"1.computed函数\"></a>1.computed函数</h3><ul>\n<li><p>与Vue2.x中computed配置功能一致</p>\n</li>\n<li><p>写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123;computed&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><br><span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    ...<br>\t<span class=\"hljs-comment\">//计算属性——简写</span><br>    <span class=\"hljs-keyword\">let</span> fullName = computed(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> person.firstName + <span class=\"hljs-string\">&#x27;-&#x27;</span> + person.lastName<br>    &#125;)<br>    <span class=\"hljs-comment\">//计算属性——完整</span><br>    <span class=\"hljs-keyword\">let</span> fullName = computed(&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-title\">get</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>            <span class=\"hljs-keyword\">return</span> person.firstName + <span class=\"hljs-string\">&#x27;-&#x27;</span> + person.lastName<br>        &#125;,<br>        <span class=\"hljs-function\"><span class=\"hljs-title\">set</span>(<span class=\"hljs-params\">value</span>)</span>&#123;<br>            <span class=\"hljs-keyword\">const</span> nameArr = value.split(<span class=\"hljs-string\">&#x27;-&#x27;</span>)<br>            person.firstName = nameArr[<span class=\"hljs-number\">0</span>]<br>            person.lastName = nameArr[<span class=\"hljs-number\">1</span>]<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-watch函数\"><a href=\"#2-watch函数\" class=\"headerlink\" title=\"2.watch函数\"></a>2.watch函数</h3><ul>\n<li><p>与Vue2.x中watch配置功能一致</p>\n</li>\n<li><p>两个小“坑”：</p>\n<ul>\n<li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li>\n<li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//情况一：监视ref定义的响应式数据</span><br>watch(sum,<span class=\"hljs-function\">(<span class=\"hljs-params\">newValue,oldValue</span>)=&gt;</span>&#123;<br>\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;sum变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class=\"hljs-attr\">immediate</span>:<span class=\"hljs-literal\">true</span>&#125;)<br><br><span class=\"hljs-comment\">//情况二：监视多个ref定义的响应式数据</span><br>watch([sum,msg],<span class=\"hljs-function\">(<span class=\"hljs-params\">newValue,oldValue</span>)=&gt;</span>&#123;<br>\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)<br>&#125;) <br><br><span class=\"hljs-comment\">/* 情况三：监视reactive定义的响应式数据</span><br><span class=\"hljs-comment\">\t\t\t若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span><br><span class=\"hljs-comment\">\t\t\t若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span><br><span class=\"hljs-comment\">*/</span><br>watch(person,<span class=\"hljs-function\">(<span class=\"hljs-params\">newValue,oldValue</span>)=&gt;</span>&#123;<br>\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;person变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class=\"hljs-attr\">immediate</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">deep</span>:<span class=\"hljs-literal\">false</span>&#125;) <span class=\"hljs-comment\">//此处的deep配置不再奏效</span><br><br><span class=\"hljs-comment\">//情况四：监视reactive定义的响应式数据中的某个属性</span><br>watch(<span class=\"hljs-function\">()=&gt;</span>person.job,<span class=\"hljs-function\">(<span class=\"hljs-params\">newValue,oldValue</span>)=&gt;</span>&#123;<br>\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class=\"hljs-attr\">immediate</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">deep</span>:<span class=\"hljs-literal\">true</span>&#125;) <br><br><span class=\"hljs-comment\">//情况五：监视reactive定义的响应式数据中的某些属性</span><br>watch([<span class=\"hljs-function\">()=&gt;</span>person.job,<span class=\"hljs-function\">()=&gt;</span>person.name],<span class=\"hljs-function\">(<span class=\"hljs-params\">newValue,oldValue</span>)=&gt;</span>&#123;<br>\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class=\"hljs-attr\">immediate</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">deep</span>:<span class=\"hljs-literal\">true</span>&#125;)<br><br><span class=\"hljs-comment\">//特殊情况</span><br>watch(<span class=\"hljs-function\">()=&gt;</span>person.job,<span class=\"hljs-function\">(<span class=\"hljs-params\">newValue,oldValue</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class=\"hljs-attr\">deep</span>:<span class=\"hljs-literal\">true</span>&#125;) <span class=\"hljs-comment\">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-watchEffect函数\"><a href=\"#3-watchEffect函数\" class=\"headerlink\" title=\"3.watchEffect函数\"></a>3.watchEffect函数</h3><ul>\n<li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p>\n</li>\n<li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p>\n</li>\n<li><p>watchEffect有点像computed：</p>\n<ul>\n<li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li>\n<li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span><br>watchEffect(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> x1 = sum.value<br>    <span class=\"hljs-keyword\">const</span> x2 = person.age<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;watchEffect配置的回调执行了&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"8-生命周期\"><a href=\"#8-生命周期\" class=\"headerlink\" title=\"8.生命周期\"></a>8.生命周期</h2><div style=\"border:1px solid black;width:380px;float:left;margin-right:20px;\"><strong>vue2.x的生命周期</strong><img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"lifecycle_2\" style=\"zoom:33%;width:1200px\" /></div><div style=\"border:1px solid black;width:510px;height:985px;float:left\"><strong>vue3.0的生命周期</strong><img src=\"https://v3.cn.vuejs.org/images/lifecycle.svg\" alt=\"lifecycle_2\" style=\"zoom:33%;width:2500px\" /></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>1</p>\n<ul>\n<li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul>\n<li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li>\n<li><code>destroyed</code>改名为 <code>unmounted</code></li>\n</ul>\n</li>\n<li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：<ul>\n<li><code>beforeCreate</code>===&gt;<code>setup()</code></li>\n<li><code>created</code>=======&gt;<code>setup()</code></li>\n<li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li>\n<li><code>mounted</code>=======&gt;<code>onMounted</code></li>\n<li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li>\n<li><code>updated</code> =======&gt;<code>onUpdated</code></li>\n<li><code>beforeUnmount</code> ==&gt;<code>onBeforeUnmount</code></li>\n<li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"9-自定义hook函数\"><a href=\"#9-自定义hook函数\" class=\"headerlink\" title=\"9.自定义hook函数\"></a>9.自定义hook函数</h2><ul>\n<li><p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p>\n</li>\n<li><p>类似于vue2.x中的mixin。</p>\n</li>\n<li><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p>\n</li>\n</ul>\n<h2 id=\"10-toRef\"><a href=\"#10-toRef\" class=\"headerlink\" title=\"10.toRef\"></a>10.toRef</h2><ul>\n<li>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</li>\n<li>语法：<code>const name = toRef(person,&#39;name&#39;)</code></li>\n<li>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</li>\n</ul>\n<ul>\n<li>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></li>\n</ul>\n<h1 id=\"三、其它-Composition-API\"><a href=\"#三、其它-Composition-API\" class=\"headerlink\" title=\"三、其它 Composition API\"></a>三、其它 Composition API</h1><h2 id=\"1-shallowReactive-与-shallowRef\"><a href=\"#1-shallowReactive-与-shallowRef\" class=\"headerlink\" title=\"1.shallowReactive 与 shallowRef\"></a>1.shallowReactive 与 shallowRef</h2><ul>\n<li><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p>\n</li>\n<li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p>\n</li>\n<li><p>什么时候使用?</p>\n<ul>\n<li> 如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li>\n<li> 如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-readonly-与-shallowReadonly\"><a href=\"#2-readonly-与-shallowReadonly\" class=\"headerlink\" title=\"2.readonly 与 shallowReadonly\"></a>2.readonly 与 shallowReadonly</h2><ul>\n<li>readonly: 让一个响应式数据变为只读的（深只读）。</li>\n<li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li>\n<li>应用场景: 不希望数据被修改时。</li>\n</ul>\n<h2 id=\"3-toRaw-与-markRaw\"><a href=\"#3-toRaw-与-markRaw\" class=\"headerlink\" title=\"3.toRaw 与 markRaw\"></a>3.toRaw 与 markRaw</h2><ul>\n<li>toRaw：<ul>\n<li>作用：将一个由<code>reactive</code>生成的<strong style=\"color:orange\">响应式对象</strong>转为<strong style=\"color:orange\">普通对象</strong>。</li>\n<li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li>\n</ul>\n</li>\n<li>markRaw：<ul>\n<li>作用：标记一个对象，使其永远不会再成为响应式对象。</li>\n<li>应用场景:<ol>\n<li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li>\n<li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-customRef\"><a href=\"#4-customRef\" class=\"headerlink\" title=\"4.customRef\"></a>4.customRef</h2><ul>\n<li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p>\n</li>\n<li><p>实现防抖效果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>\t&lt;input type=&quot;text&quot; v-model=&quot;keyword&quot;&gt;<br>\t&lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;/h3&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>\timport &#123;ref,customRef&#125; from &#x27;vue&#x27;<br>\texport default &#123;<br>\t\tname:&#x27;Demo&#x27;,<br>\t\tsetup()&#123;<br>\t\t\t// let keyword = ref(&#x27;hello&#x27;) //使用Vue准备好的内置ref<br>\t\t\t//自定义一个myRef<br>\t\t\tfunction myRef(value,delay)&#123;<br>\t\t\t\tlet timer<br>\t\t\t\t//通过customRef去实现自定义<br>\t\t\t\treturn customRef((track,trigger)=&gt;&#123;<br>\t\t\t\t\treturn&#123;<br>\t\t\t\t\t\tget()&#123;<br>\t\t\t\t\t\t\ttrack() //告诉Vue这个value值是需要被“追踪”的<br>\t\t\t\t\t\t\treturn value<br>\t\t\t\t\t\t&#125;,<br>\t\t\t\t\t\tset(newValue)&#123;<br>\t\t\t\t\t\t\tclearTimeout(timer)<br>\t\t\t\t\t\t\ttimer = setTimeout(()=&gt;&#123;<br>\t\t\t\t\t\t\t\tvalue = newValue<br>\t\t\t\t\t\t\t\ttrigger() //告诉Vue去更新界面<br>\t\t\t\t\t\t\t&#125;,delay)<br>\t\t\t\t\t\t&#125;<br>\t\t\t\t\t&#125;<br>\t\t\t\t&#125;)<br>\t\t\t&#125;<br>\t\t\tlet keyword = myRef(&#x27;hello&#x27;,500) //使用程序员自定义的ref<br>\t\t\treturn &#123;<br>\t\t\t\tkeyword<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"5-provide-与-inject\"><a href=\"#5-provide-与-inject\" class=\"headerlink\" title=\"5.provide 与 inject\"></a>5.provide 与 inject</h2><img src=\"https://v3.cn.vuejs.org/images/components_provide.png\" style=\"width:300px\" />\n\n<ul>\n<li><p>作用：实现<strong style=\"color:#DD5145\">祖与后代组件间</strong>通信</p>\n</li>\n<li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p>\n</li>\n<li><p>具体写法：</p>\n<ol>\n<li><p>祖组件中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>\t......<br>    <span class=\"hljs-keyword\">let</span> car = reactive(&#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;奔驰&#x27;</span>,<span class=\"hljs-attr\">price</span>:<span class=\"hljs-string\">&#x27;40万&#x27;</span>&#125;)<br>    provide(<span class=\"hljs-string\">&#x27;car&#x27;</span>,car)<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>后代组件中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\">props,context</span>)</span>&#123;<br>\t......<br>    <span class=\"hljs-keyword\">const</span> car = inject(<span class=\"hljs-string\">&#x27;car&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> &#123;car&#125;<br>\t......<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"6-响应式数据的判断\"><a href=\"#6-响应式数据的判断\" class=\"headerlink\" title=\"6.响应式数据的判断\"></a>6.响应式数据的判断</h2><ul>\n<li>isRef: 检查一个值是否为一个 ref 对象</li>\n<li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li>\n<li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li>\n<li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li>\n</ul>\n<h1 id=\"四、Composition-API-的优势\"><a href=\"#四、Composition-API-的优势\" class=\"headerlink\" title=\"四、Composition API 的优势\"></a>四、Composition API 的优势</h1><h2 id=\"1-Options-API-存在的问题\"><a href=\"#1-Options-API-存在的问题\" class=\"headerlink\" title=\"1.Options API 存在的问题\"></a>1.Options API 存在的问题</h2><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p>\n<div style=\"width:600px;height:370px;overflow:hidden;float:left\">\n    <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image\" style=\"width:600px;float:left\" />\n</div>\n<div style=\"width:300px;height:370px;overflow:hidden;float:left\">\n    <img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image\" style=\"zoom:50%;width:560px;left\" /> \n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"2-Composition-API-的优势\"><a href=\"#2-Composition-API-的优势\" class=\"headerlink\" title=\"2.Composition API 的优势\"></a>2.Composition API 的优势</h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p>\n<div style=\"width:500px;height:340px;overflow:hidden;float:left\">\n    <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image\"style=\"height:360px\"/>\n</div>\n<div style=\"width:430px;height:340px;overflow:hidden;float:left\">\n    <img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image\"style=\"height:360px\"/>\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h1 id=\"五、新的组件\"><a href=\"#五、新的组件\" class=\"headerlink\" title=\"五、新的组件\"></a>五、新的组件</h1><h2 id=\"1-Fragment\"><a href=\"#1-Fragment\" class=\"headerlink\" title=\"1.Fragment\"></a>1.Fragment</h2><ul>\n<li>在Vue2中: 组件必须有一个根标签</li>\n<li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li>\n<li>好处: 减少标签层级, 减小内存占用</li>\n</ul>\n<h2 id=\"2-Teleport\"><a href=\"#2-Teleport\" class=\"headerlink\" title=\"2.Teleport\"></a>2.Teleport</h2><ul>\n<li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style=\"color:#DD5145\">组件html结构</strong>移动到指定位置的技术。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs vue\">&lt;teleport to=&quot;移动位置&quot;&gt;<br>\t&lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;<br>\t\t&lt;div class=&quot;dialog&quot;&gt;<br>\t\t\t&lt;h3&gt;我是一个弹窗&lt;/h3&gt;<br>\t\t\t&lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;<br>\t\t&lt;/div&gt;<br>\t&lt;/div&gt;<br>&lt;/teleport&gt;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"3-Suspense\"><a href=\"#3-Suspense\" class=\"headerlink\" title=\"3.Suspense\"></a>3.Suspense</h2><ul>\n<li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p>\n</li>\n<li><p>使用步骤：</p>\n<ul>\n<li><p>异步引入组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123;defineAsyncComponent&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><span class=\"hljs-keyword\">const</span> Child = defineAsyncComponent(<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;./components/Child.vue&#x27;</span>))<br></code></pre></td></tr></table></figure></li>\n<li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>\t&lt;div class=&quot;app&quot;&gt;<br>\t\t&lt;h3&gt;我是App组件&lt;/h3&gt;<br>\t\t&lt;Suspense&gt;<br>\t\t\t&lt;template v-slot:default&gt;<br>\t\t\t\t&lt;Child/&gt;<br>\t\t\t&lt;/template&gt;<br>\t\t\t&lt;template v-slot:fallback&gt;<br>\t\t\t\t&lt;h3&gt;加载中.....&lt;/h3&gt;<br>\t\t\t&lt;/template&gt;<br>\t\t&lt;/Suspense&gt;<br>\t&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"六、其他\"><a href=\"#六、其他\" class=\"headerlink\" title=\"六、其他\"></a>六、其他</h1><h2 id=\"1-全局API的转移\"><a href=\"#1-全局API的转移\" class=\"headerlink\" title=\"1.全局API的转移\"></a>1.全局API的转移</h2><ul>\n<li><p>Vue 2.x 有许多全局 API 和配置。</p>\n<ul>\n<li><p>例如：注册全局组件、注册全局指令等。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//注册全局组件</span><br>Vue.component(<span class=\"hljs-string\">&#x27;MyButton&#x27;</span>, &#123;<br>  <span class=\"hljs-attr\">data</span>: <span class=\"hljs-function\">() =&gt;</span> (&#123;<br>    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span><br>  &#125;),<br>  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span><br>&#125;)<br><br><span class=\"hljs-comment\">//注册全局指令</span><br>Vue.directive(<span class=\"hljs-string\">&#x27;focus&#x27;</span>, &#123;<br>  <span class=\"hljs-attr\">inserted</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">el</span> =&gt;</span> el.focus()<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>Vue3.0中对这些API做出了调整：</p>\n<ul>\n<li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p>\n<table>\n<thead>\n<tr>\n<th>2.x 全局 API（<code>Vue</code>）</th>\n<th>3.x 实例 API (<code>app</code>)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Vue.config.xxxx</td>\n<td>app.config.xxxx</td>\n</tr>\n<tr>\n<td>Vue.config.productionTip</td>\n<td><strong style=\"color:#DD5145\">移除</strong></td>\n</tr>\n<tr>\n<td>Vue.component</td>\n<td>app.component</td>\n</tr>\n<tr>\n<td>Vue.directive</td>\n<td>app.directive</td>\n</tr>\n<tr>\n<td>Vue.mixin</td>\n<td>app.mixin</td>\n</tr>\n<tr>\n<td>Vue.use</td>\n<td>app.use</td>\n</tr>\n<tr>\n<td>Vue.prototype</td>\n<td>app.config.globalProperties</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-其他改变\"><a href=\"#2-其他改变\" class=\"headerlink\" title=\"2.其他改变\"></a>2.其他改变</h2><ul>\n<li><p>data选项应始终被声明为一个函数。</p>\n</li>\n<li><p>过度类名的更改：</p>\n<ul>\n<li><p>Vue2.x写法</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.v-enter</span>,<br><span class=\"hljs-selector-class\">.v-leave-to</span> &#123;<br>  <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;<br>&#125;<br><span class=\"hljs-selector-class\">.v-leave</span>,<br><span class=\"hljs-selector-class\">.v-enter-to</span> &#123;<br>  <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>Vue3.x写法</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.v-enter-from</span>,<br><span class=\"hljs-selector-class\">.v-leave-to</span> &#123;<br>  <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-selector-class\">.v-leave-from</span>,<br><span class=\"hljs-selector-class\">.v-enter-to</span> &#123;<br>  <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong style=\"color:#DD5145\">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p>\n</li>\n<li><p><strong style=\"color:#DD5145\">移除</strong><code>v-on.native</code>修饰符</p>\n<ul>\n<li><p>父组件中绑定事件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs vue\">&lt;my-component<br>  v-on:close=&quot;handleComponentEvent&quot;<br>  v-on:click=&quot;handleNativeClickEvent&quot;<br>/&gt;<br></code></pre></td></tr></table></figure></li>\n<li><p>子组件中声明自定义事件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs vue\">&lt;script&gt;<br>  export default &#123;<br>    emits: [&#x27;close&#x27;]<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong style=\"color:#DD5145\">移除</strong>过滤器（filter）</p>\n<blockquote>\n<p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p>\n</blockquote>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n"},{"title":"雪花算法","excerpt":"雪花算法","date":"2022-01-20T01:10:03.000Z","cover":"/image/blog/20201015160244631.jpg?raw=true","_content":"\n```\npackage com.susu.utils;\n\n/**\n * <p>Description: Snow flakeId Worker</p>\n * <p>雪花算法ID</p>\n * @author sujay\n * @version 13:08 2022/4/28\n * @since JDK1.8 <br/>\n */\npublic class SnowFlakeUtils {\n\n    /**\n     * 数据中心 ( 0 - 31 )\n     */\n    private final long DATA_CENTER_ID;\n    /**\n     * 机器标识 ( 0 - 31 )\n     */\n    private final long MACHINE_ID;\n\n    /**\n     * 毫秒内序列号 ( 0 - 4095 )\n     */\n    private long sequence = 0L;\n\n    /**\n     * 上一次生成ID的时间戳\n     */\n    private long lastStamp = -1L;\n\n    /**\n     * 起始的时间戳 （ 2019-01-01 ）\n     */\n    private final static long START_STAMP = 1480166465631L;\n\n    /**\n     * 序列号占用的位数\n     */\n    private final static long SEQUENCE_BIT = 12L;\n\n    /**\n     * 机器标识占用的位数\n     */\n    private final static long MACHINE_BIT = 5L;\n\n    /**\n     * 数据中心占用的位数\n     */\n    private final static long DATACENTER_BIT = 5L;\n\n    /**\n     * ~ 运算符的含义\n     * int a = 10;\n     * System.out.println(~a);\n     * 正数的原码 = 反码 = 补码\n     * 负数的反码 = 原码符号位不变，其它位全取反，负数的补码 = 反码 + 1\n     * ~表示非运算符，就是将该数的所有二进制位全取反，\n     * 但又由于计算机中是以补码的形式存储的，所以0 1010全取反是1 0101（只是补码形式，还需要转成原码）\n     * 此时得到的1 0101只是补码，我们需要将它先转为反码，反码 = 补码-1，得到反码为1 010\n     * 我们得到反码后，将它转为原码，原码 = 反码符号位不变，其它位全取反，得到最终的原码为1 1011，转化为十进制就是-11\n     *\n     * 每一部分的最大值\n     */\n    private final static long MAX_SEQUENCE = ~(-1L << SEQUENCE_BIT);\n\n    private final static long MAX_MACHINE_NUM = ~(-1L << MACHINE_BIT);\n\n    private final static long MAX_DATACENTER_NUM = ~(-1L << DATACENTER_BIT);\n\n    /**\n     * 机器id向左移12位\n     */\n    private final static long MACHINE_LEFT = SEQUENCE_BIT;\n\n    /**\n     * 数据标识id向左移17位 （ 12 + 5 ）\n     */\n    private final static long DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;\n\n    /**\n     * 时间戳向左移22位 （ 5 + 5 + 12 ）\n     */\n    private final static long TIMESTAMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;\n\n    /**\n     * 构造函数\n     * @param datacenterId 数据中心ID （ 0 - 31 ）\n     * @param machineId  机器Id （ 0 - 31 ）\n     */\n    public SnowFlakeUtils(long datacenterId, long machineId) {\n        if (datacenterId > MAX_DATACENTER_NUM || datacenterId < 0) {\n            throw new IllegalArgumentException(\"datacenterId can't be greater than MAX_DATACENTER_NUM or less than 0\");\n        }\n        if (machineId > MAX_MACHINE_NUM || machineId < 0) {\n            throw new IllegalArgumentException(\"machineId can't be greater than MAX_MACHINE_NUM or less than 0\");\n        }\n        this.DATA_CENTER_ID = datacenterId;\n        this.MACHINE_ID = machineId;\n    }\n\n    /**\n     * <p>Description: generate next ID</p>\n     * <p>产生下一个ID</p>\n     * @return SnowflakeId\n     */\n    public synchronized long nextId() {\n        long timeStamp = timeGen();\n        if (timeStamp < lastStamp) {\n            throw new RuntimeException(\"Clock moved backwards. Refusing to generate id\");\n        }\n        if (timeStamp == lastStamp) {\n            //相同毫秒内，序列号自增\n            sequence = (sequence + 1) & MAX_SEQUENCE;\n            //同一毫秒的序列数已经达到最大\n            if (sequence == 0L) {\n                timeStamp = getNextMill();\n            }\n        } else {\n            //不同毫秒内，序列号置为0\n            sequence = 0L;\n        }\n\n        lastStamp = timeStamp;\n\n        // 移位并通过或运算拼到一起组成64位ID\n        return (timeStamp - START_STAMP) << TIMESTAMP_LEFT\n                | DATA_CENTER_ID << DATACENTER_LEFT\n                | MACHINE_ID << MACHINE_LEFT\n                | sequence;\n    }\n\n    private long getNextMill() {\n        long mill = timeGen();\n        while (mill <= lastStamp) {\n            mill = timeGen();\n        }\n        return mill;\n    }\n\n    /**\n     * @return 当前时间戳\n     */\n    private long timeGen() {\n        return System.currentTimeMillis();\n    }\n\n    public static void main(String[] args) {\n        SnowFlakeUtils utilA = new SnowFlakeUtils(1,1);\n        for (int i = 0; i < 10; i++) {\n            long id = utilA.nextId();\n            System.out.println(id);\n        }\n\n        SnowFlakeUtils utilB = new SnowFlakeUtils(2,1);\n        for (int i = 0; i < 10; i++) {\n            long id = utilB.nextId();\n            System.out.println(id);\n        }\n\n    }\n\n}\n```\n","source":"_posts/snow-flake.md","raw":"---\ntitle: 雪花算法\ncategories: 算法\ntags:\n  - java\n  - 数据结构与算法\nexcerpt: 雪花算法\ndate: 2022-01-20 9:10:03\ncover: '/image/blog/20201015160244631.jpg?raw=true'\n---\n\n```\npackage com.susu.utils;\n\n/**\n * <p>Description: Snow flakeId Worker</p>\n * <p>雪花算法ID</p>\n * @author sujay\n * @version 13:08 2022/4/28\n * @since JDK1.8 <br/>\n */\npublic class SnowFlakeUtils {\n\n    /**\n     * 数据中心 ( 0 - 31 )\n     */\n    private final long DATA_CENTER_ID;\n    /**\n     * 机器标识 ( 0 - 31 )\n     */\n    private final long MACHINE_ID;\n\n    /**\n     * 毫秒内序列号 ( 0 - 4095 )\n     */\n    private long sequence = 0L;\n\n    /**\n     * 上一次生成ID的时间戳\n     */\n    private long lastStamp = -1L;\n\n    /**\n     * 起始的时间戳 （ 2019-01-01 ）\n     */\n    private final static long START_STAMP = 1480166465631L;\n\n    /**\n     * 序列号占用的位数\n     */\n    private final static long SEQUENCE_BIT = 12L;\n\n    /**\n     * 机器标识占用的位数\n     */\n    private final static long MACHINE_BIT = 5L;\n\n    /**\n     * 数据中心占用的位数\n     */\n    private final static long DATACENTER_BIT = 5L;\n\n    /**\n     * ~ 运算符的含义\n     * int a = 10;\n     * System.out.println(~a);\n     * 正数的原码 = 反码 = 补码\n     * 负数的反码 = 原码符号位不变，其它位全取反，负数的补码 = 反码 + 1\n     * ~表示非运算符，就是将该数的所有二进制位全取反，\n     * 但又由于计算机中是以补码的形式存储的，所以0 1010全取反是1 0101（只是补码形式，还需要转成原码）\n     * 此时得到的1 0101只是补码，我们需要将它先转为反码，反码 = 补码-1，得到反码为1 010\n     * 我们得到反码后，将它转为原码，原码 = 反码符号位不变，其它位全取反，得到最终的原码为1 1011，转化为十进制就是-11\n     *\n     * 每一部分的最大值\n     */\n    private final static long MAX_SEQUENCE = ~(-1L << SEQUENCE_BIT);\n\n    private final static long MAX_MACHINE_NUM = ~(-1L << MACHINE_BIT);\n\n    private final static long MAX_DATACENTER_NUM = ~(-1L << DATACENTER_BIT);\n\n    /**\n     * 机器id向左移12位\n     */\n    private final static long MACHINE_LEFT = SEQUENCE_BIT;\n\n    /**\n     * 数据标识id向左移17位 （ 12 + 5 ）\n     */\n    private final static long DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;\n\n    /**\n     * 时间戳向左移22位 （ 5 + 5 + 12 ）\n     */\n    private final static long TIMESTAMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;\n\n    /**\n     * 构造函数\n     * @param datacenterId 数据中心ID （ 0 - 31 ）\n     * @param machineId  机器Id （ 0 - 31 ）\n     */\n    public SnowFlakeUtils(long datacenterId, long machineId) {\n        if (datacenterId > MAX_DATACENTER_NUM || datacenterId < 0) {\n            throw new IllegalArgumentException(\"datacenterId can't be greater than MAX_DATACENTER_NUM or less than 0\");\n        }\n        if (machineId > MAX_MACHINE_NUM || machineId < 0) {\n            throw new IllegalArgumentException(\"machineId can't be greater than MAX_MACHINE_NUM or less than 0\");\n        }\n        this.DATA_CENTER_ID = datacenterId;\n        this.MACHINE_ID = machineId;\n    }\n\n    /**\n     * <p>Description: generate next ID</p>\n     * <p>产生下一个ID</p>\n     * @return SnowflakeId\n     */\n    public synchronized long nextId() {\n        long timeStamp = timeGen();\n        if (timeStamp < lastStamp) {\n            throw new RuntimeException(\"Clock moved backwards. Refusing to generate id\");\n        }\n        if (timeStamp == lastStamp) {\n            //相同毫秒内，序列号自增\n            sequence = (sequence + 1) & MAX_SEQUENCE;\n            //同一毫秒的序列数已经达到最大\n            if (sequence == 0L) {\n                timeStamp = getNextMill();\n            }\n        } else {\n            //不同毫秒内，序列号置为0\n            sequence = 0L;\n        }\n\n        lastStamp = timeStamp;\n\n        // 移位并通过或运算拼到一起组成64位ID\n        return (timeStamp - START_STAMP) << TIMESTAMP_LEFT\n                | DATA_CENTER_ID << DATACENTER_LEFT\n                | MACHINE_ID << MACHINE_LEFT\n                | sequence;\n    }\n\n    private long getNextMill() {\n        long mill = timeGen();\n        while (mill <= lastStamp) {\n            mill = timeGen();\n        }\n        return mill;\n    }\n\n    /**\n     * @return 当前时间戳\n     */\n    private long timeGen() {\n        return System.currentTimeMillis();\n    }\n\n    public static void main(String[] args) {\n        SnowFlakeUtils utilA = new SnowFlakeUtils(1,1);\n        for (int i = 0; i < 10; i++) {\n            long id = utilA.nextId();\n            System.out.println(id);\n        }\n\n        SnowFlakeUtils utilB = new SnowFlakeUtils(2,1);\n        for (int i = 0; i < 10; i++) {\n            long id = utilB.nextId();\n            System.out.println(id);\n        }\n\n    }\n\n}\n```\n","slug":"snow-flake","published":1,"updated":"2024-02-29T09:09:55.018Z","_id":"cl3fhn94c0035keuqcr3hgs3j","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><code class=\"hljs arduino\">package com.susu.utils;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * &lt;p&gt;Description: Snow flakeId Worker&lt;/p&gt;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;雪花算法ID&lt;/p&gt;</span><br><span class=\"hljs-comment\"> * @author sujay</span><br><span class=\"hljs-comment\"> * @version 13:08 2022/4/28</span><br><span class=\"hljs-comment\"> * @since JDK1.8 &lt;br/&gt;</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SnowFlakeUtils</span> &#123;</span><br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 数据中心 ( 0 - 31 )</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> DATA_CENTER_ID;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 机器标识 ( 0 - 31 )</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> MACHINE_ID;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 毫秒内序列号 ( 0 - 4095 )</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">long</span> sequence = <span class=\"hljs-number\">0L</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 上一次生成ID的时间戳</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">long</span> lastStamp = <span class=\"hljs-number\">-1L</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 起始的时间戳 （ 2019-01-01 ）</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">long</span> START_STAMP = <span class=\"hljs-number\">1480166465631L</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 序列号占用的位数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">long</span> SEQUENCE_BIT = <span class=\"hljs-number\">12L</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 机器标识占用的位数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">long</span> MACHINE_BIT = <span class=\"hljs-number\">5L</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 数据中心占用的位数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">long</span> DATACENTER_BIT = <span class=\"hljs-number\">5L</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * ~ 运算符的含义</span><br><span class=\"hljs-comment\">     * int a = 10;</span><br><span class=\"hljs-comment\">     * System.out.println(~a);</span><br><span class=\"hljs-comment\">     * 正数的原码 = 反码 = 补码</span><br><span class=\"hljs-comment\">     * 负数的反码 = 原码符号位不变，其它位全取反，负数的补码 = 反码 + 1</span><br><span class=\"hljs-comment\">     * ~表示非运算符，就是将该数的所有二进制位全取反，</span><br><span class=\"hljs-comment\">     * 但又由于计算机中是以补码的形式存储的，所以0 1010全取反是1 0101（只是补码形式，还需要转成原码）</span><br><span class=\"hljs-comment\">     * 此时得到的1 0101只是补码，我们需要将它先转为反码，反码 = 补码-1，得到反码为1 010</span><br><span class=\"hljs-comment\">     * 我们得到反码后，将它转为原码，原码 = 反码符号位不变，其它位全取反，得到最终的原码为1 1011，转化为十进制就是-11</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * 每一部分的最大值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">long</span> MAX_SEQUENCE = ~(<span class=\"hljs-number\">-1L</span> &lt;&lt; SEQUENCE_BIT);<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">long</span> MAX_MACHINE_NUM = ~(<span class=\"hljs-number\">-1L</span> &lt;&lt; MACHINE_BIT);<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">long</span> MAX_DATACENTER_NUM = ~(<span class=\"hljs-number\">-1L</span> &lt;&lt; DATACENTER_BIT);<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 机器id向左移12位</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">long</span> MACHINE_LEFT = SEQUENCE_BIT;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 数据标识id向左移17位 （ 12 + 5 ）</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">long</span> DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 时间戳向左移22位 （ 5 + 5 + 12 ）</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">long</span> TIMESTAMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 构造函数</span><br><span class=\"hljs-comment\">     * @param datacenterId 数据中心ID （ 0 - 31 ）</span><br><span class=\"hljs-comment\">     * @param machineId  机器Id （ 0 - 31 ）</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">SnowFlakeUtils</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span> datacenterId, <span class=\"hljs-keyword\">long</span> machineId)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (datacenterId &gt; MAX_DATACENTER_NUM || datacenterId &lt; <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;datacenterId can&#x27;t be greater than MAX_DATACENTER_NUM or less than 0&quot;</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (machineId &gt; MAX_MACHINE_NUM || machineId &lt; <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;machineId can&#x27;t be greater than MAX_MACHINE_NUM or less than 0&quot;</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">this</span>.DATA_CENTER_ID = datacenterId;<br>        <span class=\"hljs-keyword\">this</span>.MACHINE_ID = machineId;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * &lt;p&gt;Description: generate next ID&lt;/p&gt;</span><br><span class=\"hljs-comment\">     * &lt;p&gt;产生下一个ID&lt;/p&gt;</span><br><span class=\"hljs-comment\">     * @return SnowflakeId</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> synchronized <span class=\"hljs-keyword\">long</span> <span class=\"hljs-title\">nextId</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">long</span> timeStamp = <span class=\"hljs-built_in\">timeGen</span>();<br>        <span class=\"hljs-keyword\">if</span> (timeStamp &lt; lastStamp) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RuntimeException</span>(<span class=\"hljs-string\">&quot;Clock moved backwards. Refusing to generate id&quot;</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (timeStamp == lastStamp) &#123;<br>            <span class=\"hljs-comment\">//相同毫秒内，序列号自增</span><br>            sequence = (sequence + <span class=\"hljs-number\">1</span>) &amp; MAX_SEQUENCE;<br>            <span class=\"hljs-comment\">//同一毫秒的序列数已经达到最大</span><br>            <span class=\"hljs-keyword\">if</span> (sequence == <span class=\"hljs-number\">0L</span>) &#123;<br>                timeStamp = <span class=\"hljs-built_in\">getNextMill</span>();<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-comment\">//不同毫秒内，序列号置为0</span><br>            sequence = <span class=\"hljs-number\">0L</span>;<br>        &#125;<br><br>        lastStamp = timeStamp;<br><br>        <span class=\"hljs-comment\">// 移位并通过或运算拼到一起组成64位ID</span><br>        <span class=\"hljs-keyword\">return</span> (timeStamp - START_STAMP) &lt;&lt; TIMESTAMP_LEFT<br>                | DATA_CENTER_ID &lt;&lt; DATACENTER_LEFT<br>                | MACHINE_ID &lt;&lt; MACHINE_LEFT<br>                | sequence;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-title\">getNextMill</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">long</span> mill = <span class=\"hljs-built_in\">timeGen</span>();<br>        <span class=\"hljs-keyword\">while</span> (mill &lt;= lastStamp) &#123;<br>            mill = <span class=\"hljs-built_in\">timeGen</span>();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> mill;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * @return 当前时间戳</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-title\">timeGen</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> System.<span class=\"hljs-built_in\">currentTimeMillis</span>();<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">String</span>[] args)</span> </span>&#123;<br>        SnowFlakeUtils utilA = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">SnowFlakeUtils</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>            <span class=\"hljs-keyword\">long</span> id = utilA.<span class=\"hljs-built_in\">nextId</span>();<br>            System.out.<span class=\"hljs-built_in\">println</span>(id);<br>        &#125;<br><br>        SnowFlakeUtils utilB = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">SnowFlakeUtils</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>            <span class=\"hljs-keyword\">long</span> id = utilB.<span class=\"hljs-built_in\">nextId</span>();<br>            System.out.<span class=\"hljs-built_in\">println</span>(id);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"more":"<figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><code class=\"hljs arduino\">package com.susu.utils;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * &lt;p&gt;Description: Snow flakeId Worker&lt;/p&gt;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;雪花算法ID&lt;/p&gt;</span><br><span class=\"hljs-comment\"> * @author sujay</span><br><span class=\"hljs-comment\"> * @version 13:08 2022/4/28</span><br><span class=\"hljs-comment\"> * @since JDK1.8 &lt;br/&gt;</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SnowFlakeUtils</span> &#123;</span><br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 数据中心 ( 0 - 31 )</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> DATA_CENTER_ID;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 机器标识 ( 0 - 31 )</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> MACHINE_ID;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 毫秒内序列号 ( 0 - 4095 )</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">long</span> sequence = <span class=\"hljs-number\">0L</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 上一次生成ID的时间戳</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">long</span> lastStamp = <span class=\"hljs-number\">-1L</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 起始的时间戳 （ 2019-01-01 ）</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">long</span> START_STAMP = <span class=\"hljs-number\">1480166465631L</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 序列号占用的位数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">long</span> SEQUENCE_BIT = <span class=\"hljs-number\">12L</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 机器标识占用的位数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">long</span> MACHINE_BIT = <span class=\"hljs-number\">5L</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 数据中心占用的位数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">long</span> DATACENTER_BIT = <span class=\"hljs-number\">5L</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * ~ 运算符的含义</span><br><span class=\"hljs-comment\">     * int a = 10;</span><br><span class=\"hljs-comment\">     * System.out.println(~a);</span><br><span class=\"hljs-comment\">     * 正数的原码 = 反码 = 补码</span><br><span class=\"hljs-comment\">     * 负数的反码 = 原码符号位不变，其它位全取反，负数的补码 = 反码 + 1</span><br><span class=\"hljs-comment\">     * ~表示非运算符，就是将该数的所有二进制位全取反，</span><br><span class=\"hljs-comment\">     * 但又由于计算机中是以补码的形式存储的，所以0 1010全取反是1 0101（只是补码形式，还需要转成原码）</span><br><span class=\"hljs-comment\">     * 此时得到的1 0101只是补码，我们需要将它先转为反码，反码 = 补码-1，得到反码为1 010</span><br><span class=\"hljs-comment\">     * 我们得到反码后，将它转为原码，原码 = 反码符号位不变，其它位全取反，得到最终的原码为1 1011，转化为十进制就是-11</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * 每一部分的最大值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">long</span> MAX_SEQUENCE = ~(<span class=\"hljs-number\">-1L</span> &lt;&lt; SEQUENCE_BIT);<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">long</span> MAX_MACHINE_NUM = ~(<span class=\"hljs-number\">-1L</span> &lt;&lt; MACHINE_BIT);<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">long</span> MAX_DATACENTER_NUM = ~(<span class=\"hljs-number\">-1L</span> &lt;&lt; DATACENTER_BIT);<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 机器id向左移12位</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">long</span> MACHINE_LEFT = SEQUENCE_BIT;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 数据标识id向左移17位 （ 12 + 5 ）</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">long</span> DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 时间戳向左移22位 （ 5 + 5 + 12 ）</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">long</span> TIMESTAMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 构造函数</span><br><span class=\"hljs-comment\">     * @param datacenterId 数据中心ID （ 0 - 31 ）</span><br><span class=\"hljs-comment\">     * @param machineId  机器Id （ 0 - 31 ）</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">SnowFlakeUtils</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span> datacenterId, <span class=\"hljs-keyword\">long</span> machineId)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (datacenterId &gt; MAX_DATACENTER_NUM || datacenterId &lt; <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;datacenterId can&#x27;t be greater than MAX_DATACENTER_NUM or less than 0&quot;</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (machineId &gt; MAX_MACHINE_NUM || machineId &lt; <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;machineId can&#x27;t be greater than MAX_MACHINE_NUM or less than 0&quot;</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">this</span>.DATA_CENTER_ID = datacenterId;<br>        <span class=\"hljs-keyword\">this</span>.MACHINE_ID = machineId;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * &lt;p&gt;Description: generate next ID&lt;/p&gt;</span><br><span class=\"hljs-comment\">     * &lt;p&gt;产生下一个ID&lt;/p&gt;</span><br><span class=\"hljs-comment\">     * @return SnowflakeId</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> synchronized <span class=\"hljs-keyword\">long</span> <span class=\"hljs-title\">nextId</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">long</span> timeStamp = <span class=\"hljs-built_in\">timeGen</span>();<br>        <span class=\"hljs-keyword\">if</span> (timeStamp &lt; lastStamp) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RuntimeException</span>(<span class=\"hljs-string\">&quot;Clock moved backwards. Refusing to generate id&quot;</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (timeStamp == lastStamp) &#123;<br>            <span class=\"hljs-comment\">//相同毫秒内，序列号自增</span><br>            sequence = (sequence + <span class=\"hljs-number\">1</span>) &amp; MAX_SEQUENCE;<br>            <span class=\"hljs-comment\">//同一毫秒的序列数已经达到最大</span><br>            <span class=\"hljs-keyword\">if</span> (sequence == <span class=\"hljs-number\">0L</span>) &#123;<br>                timeStamp = <span class=\"hljs-built_in\">getNextMill</span>();<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-comment\">//不同毫秒内，序列号置为0</span><br>            sequence = <span class=\"hljs-number\">0L</span>;<br>        &#125;<br><br>        lastStamp = timeStamp;<br><br>        <span class=\"hljs-comment\">// 移位并通过或运算拼到一起组成64位ID</span><br>        <span class=\"hljs-keyword\">return</span> (timeStamp - START_STAMP) &lt;&lt; TIMESTAMP_LEFT<br>                | DATA_CENTER_ID &lt;&lt; DATACENTER_LEFT<br>                | MACHINE_ID &lt;&lt; MACHINE_LEFT<br>                | sequence;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-title\">getNextMill</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">long</span> mill = <span class=\"hljs-built_in\">timeGen</span>();<br>        <span class=\"hljs-keyword\">while</span> (mill &lt;= lastStamp) &#123;<br>            mill = <span class=\"hljs-built_in\">timeGen</span>();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> mill;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * @return 当前时间戳</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-title\">timeGen</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> System.<span class=\"hljs-built_in\">currentTimeMillis</span>();<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">String</span>[] args)</span> </span>&#123;<br>        SnowFlakeUtils utilA = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">SnowFlakeUtils</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>            <span class=\"hljs-keyword\">long</span> id = utilA.<span class=\"hljs-built_in\">nextId</span>();<br>            System.out.<span class=\"hljs-built_in\">println</span>(id);<br>        &#125;<br><br>        SnowFlakeUtils utilB = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">SnowFlakeUtils</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>            <span class=\"hljs-keyword\">long</span> id = utilB.<span class=\"hljs-built_in\">nextId</span>();<br>            System.out.<span class=\"hljs-built_in\">println</span>(id);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"ELK","excerpt":"ELK","date":"2022-05-21T06:43:21.000Z","cover":"/image/blog/12.png","_content":"\n\n\n# Elasticsearch\n\n> 分布式、RESTful风格的搜索和分析\n>\n> \n\n**全文搜索引擎**<br />Google，百度类的网站搜索，它们都是根据网页中的关键字生成索引，我们在搜索的时候输入关键字，它们会将该关键字即索引匹配到的所有网页返回；还有常见的项目中应用日志的搜索等等。对于这些非结构化的数据文本，关系型数据库搜索不是能很好的支持。\n\n一般传统数据库，全文检索都实现的很鸡肋，因为一般也没人用数据库存文本字段。进行全文检索需要扫描整个表，如果数据量大的话即使对 SQL 的语法优化，也收效甚微。建立了索引，但是维护起来也很麻烦，对于 insert 和 update 操作都会重新构建索引。\n\n\n\n基于以上原因可以分析得出，在一些生产环境中，使用常规的搜索方式，性能是非常差的：\n\n搜索的数据对象是大量的非结构化的文本数据。<br />文件记录量达到数十万或数百万个甚至更多。<br />支持大量基于交互式文本的查询。<br />需求非常灵活的全文搜索查询。<br />对高度相关的搜索结果的有特殊需求，但是没有可用的关系数据库可以满足。<br />对不同记录类型、非文本数据操作或安全事务处理的需求相对较少的情况。为了解决结构化数据搜索和非结构化数据搜索性能问题，我们就需要专业，健壮，强大的全文搜索引擎 。\n\n**这里说到的全文搜索引擎指的是目前广泛应用的主流搜索引擎**。它的工作原理是计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。这个过程类似于通过字典中的检索字表查字的过程。<br />**Elasticsearch 应用案例**<br />GitHub: 2013 年初，抛弃了 Solr，采取 Elasticsearch 来做 PB 级的搜索。 “GitHub 使用Elasticsearch 搜索 20TB 的数据，包括 13 亿文件和 1300 亿行代码”。<br />维基百科：启动以 Elasticsearch 为基础的核心搜索架构<br />百度：目前广泛使用 Elasticsearch 作为文本数据分析，采集百度所有服务器上的各类指标数据及用户自定义数据，通过对各种数据进行多维分析展示，辅助定位分析实例异常或业务层面异常。目前覆盖百度内部 20 多个业务线（包括云分析、网盟、预测、文库、直达号、钱包、 风控等），单集群最大 100 台机器， 200 个 ES 节点，每天导入 30TB+数据。<br />新浪：使用 Elasticsearch 分析处理 32 亿条实时日志。<br />阿里：使用 Elasticsearch 构建日志采集和分析体系。<br />Stack Overflow：解决 Bug 问题的网站，全英文，编程人员交流的网站。<br />\n\n## Elasticsearch入门\n\n> [下载连接](https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0) [官方文档](https://www.elastic.co/guide/index.html) [postman](https://www.postman.com/downloads/)\n\n\nWindows 版的 Elasticsearch 压缩包，解压即安装完毕，解压后的 Elasticsearch 的目录结构如下 ：\n\n| **目录** | **含义** |\n| --- | --- |\n| bin | 可执行脚本目录 |\n| config | 配置目录 |\n| jdk | 内置 JDK 目录 |\n| lib | 类库 |\n| logs | 日志目录 |\n| modules | 模块目录 |\n| plugins | 插件目录 |\n\n解压后，进入 bin 文件目录，点击 elasticsearch.bat 文件启动 ES 服务 。\n\n注意： 9300 端口为 Elasticsearch 集群间组件的通信端口， 9200 端口为浏览器访问的 http协议 RESTful 端口。\n\n打开浏览器，输入地址： [http://localhost:9200](http://localhost:9200)，测试返回结果，返回结果如下：\n```java\n{\n  \"name\" : \"DESKTOP-LNJQ0VF\",\n  \"cluster_name\" : \"elasticsearch\",\n  \"cluster_uuid\" : \"nCZqBhfdT1-pw8Yas4QU9w\",\n  \"version\" : {\n    \"number\" : \"7.8.0\",\n    \"build_flavor\" : \"default\",\n    \"build_type\" : \"zip\",\n    \"build_hash\" : \"757314695644ea9a1dc2fecd26d1a43856725e65\",\n    \"build_date\" : \"2020-06-14T19:35:50.234439Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"8.5.1\",\n    \"minimum_wire_compatibility_version\" : \"6.8.0\",\n    \"minimum_index_compatibility_version\" : \"6.0.0-beta1\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\n\n```\n\nElasticsearch 是**面向文档型数据库**，一条数据在这里就是一个文档。 为了方便大家理解，我们将 Elasticsearch 里存储文档数据和关系型数据库 MySQL 存储数据的概念进行一个类比\n\n![image.png](/image/blog/image2.png)<br />ES 里的 Index 可以看做一个库，而 Types 相当于表， Documents 则相当于表的行。这里 Types 的概念已经被逐渐弱化， Elasticsearch 6.X 中，一个 index 下已经只能包含一个type， Elasticsearch 7.X 中, Type 的概念已经被删除了。\n\n## 索引-创建\n对比关系型数据库，创建索引就等同于创建数据库。<br />在 Postman 中，向 ES 服务器发 PUT 请求 ：** http://127.0.0.1:9200/shopping**<br />请求后，服务器返回响应：\n```java\n{\n    \"acknowledged\": true,//响应结果\n    \"shards_acknowledged\": true,//分片结果\n    \"index\": \"shopping\"//索引名称\n}\n\n```\n## 索引-查询 & 删除\n### 查看所有索引\n在 Postman 中，向 ES 服务器发 GET 请求 ： [http://127.0.0.1:9200/_cat/indices?v](http://127.0.0.1:9200/_cat/indices?v)\n\n这里请求路径中的_cat 表示查看的意思， indices 表示索引，所以整体含义就是查看当前 ES服务器中的所有索引，就好像 MySQL 中的 show tables 的感觉，服务器响应结果如下 :\n```java\nhealth status index    uuid                   pri rep docs.count docs.deleted store.size pri.store.size\nyellow open   shopping J0WlEhh4R7aDrfIc3AkwWQ   1   1          0            0       208b           208b\n```\n![image.png](/image/blog/image%20(1).png)\n\n### 查看单个索引\n GET 请求 ： http://127.0.0.1:9200/shopping<br />返回结果如下：\n\n```java\n{\n    \"shopping\": {//索引名\n        \"aliases\": {},//别名\n        \"mappings\": {},//映射\n        \"settings\": {//设置\n            \"index\": {//设置 - 索引\n                \"creation_date\": \"1617861426847\",//设置 - 索引 - 创建时间\n                \"number_of_shards\": \"1\",//设置 - 索引 - 主分片数量\n                \"number_of_replicas\": \"1\",//设置 - 索引 - 主分片数量\n                \"uuid\": \"J0WlEhh4R7aDrfIc3AkwWQ\",//设置 - 索引 - 主分片数量\n                \"version\": {//设置 - 索引 - 主分片数量\n                    \"created\": \"7080099\"\n                },\n                \"provided_name\": \"shopping\"//设置 - 索引 - 主分片数量\n            }\n        }\n    }\n}\n\n```\n### 删除索引\nDELETE 请求 ： http://127.0.0.1:9200/shopping<br />返回结果如下：\n```java\n{\n    \"acknowledged\": true\n}\n\n```\n再次查看所有索引，GET http://127.0.0.1:9200/_cat/indices?v，返回结果如下：\n```java\nhealth status index uuid pri rep docs.count docs.deleted store.size pri.store.size\n```\n成功删除。\n\n## 文档-创建（Put & Post）\nPOST 请求 ： http://127.0.0.1:9200/shopping/_doc，请求体JSON内容为：\n```java\n{\n    \"title\":\"小米手机\",\n    \"category\":\"小米\",\n    \"images\":\"http://www.gulixueyuan.com/xm.jpg\",\n    \"price\":3999.00\n}\n\n```\n注意，此处发送请求的方式必须为 POST，不能是 PUT，否则会发生错误 。<br />返回结果：\n```java\n{\n    \"_index\": \"shopping\",//索引\n    \"_type\": \"_doc\",//类型-文档\n    \"_id\": \"ANQqsHgBaKNfVnMbhZYU\",//唯一标识，可以类比为 MySQL 中的主键，随机生成\n    \"_version\": 1,//版本\n    \"result\": \"created\",//结果，这里的 create 表示创建成功\n    \"_shards\": {//\n        \"total\": 2,//分片 - 总数\n        \"successful\": 1,//分片 - 总数\n        \"failed\": 0//分片 - 总数\n    },\n    \"_seq_no\": 0,\n    \"_primary_term\": 1\n}\n\n```\n上面的数据创建后，由于没有指定数据唯一性标识（ID），默认情况下， ES 服务器会随机生成一个。<br />如果想要自定义唯一性标识，需要在创建时指定： http://127.0.0.1:9200/shopping/_doc/1，请求体JSON内容为：\n```java\n{\n    \"title\":\"小米手机\",\n    \"category\":\"小米\",\n    \"images\":\"http://www.gulixueyuan.com/xm.jpg\",\n    \"price\":3999.00\n}\n```\n返回结果如下：**此处需要注意：如果增加数据时明确数据主键，那么请求方式也可以为 PUT。**\n```java\n{\n    \"_index\": \"shopping\",\n    \"_type\": \"_doc\",\n    \"_id\": \"1\",//<------------------自定义唯一性标识\n    \"_version\": 1,\n    \"result\": \"created\",\n    \"_shards\": {\n        \"total\": 2,\n        \"successful\": 1,\n        \"failed\": 0\n    },\n    \"_seq_no\": 1,\n    \"_primary_term\": 1\n}\n```\n## 查询-主键查询 & 全查询\nGET 请求 ： http://127.0.0.1:9200/shopping/_doc/1 <br />返回结果如下：\n```java\n{\n    \"_index\": \"shopping\",\n    \"_type\": \"_doc\",\n    \"_id\": \"1\",\n    \"_version\": 1,\n    \"_seq_no\": 1,\n    \"_primary_term\": 1,\n    \"found\": true,\n    \"_source\": {\n        \"title\": \"小米手机\",\n        \"category\": \"小米\",\n        \"images\": \"http://www.gulixueyuan.com/xm.jpg\",\n        \"price\": 3999\n    }\n}\n```\n查找不存在的内容，向 ES 服务器发 GET 请求 ： http://127.0.0.1:9200/shopping/_doc/1001<br />返回结果如下：\n```java\n{\n    \"_index\": \"shopping\",\n    \"_type\": \"_doc\",\n    \"_id\": \"1001\",\n    \"found\": false\n}\n```\n查看索引下所有数据，向 ES 服务器发 GET 请求 ： http://127.0.0.1:9200/shopping/_search<br />返回结果如下：\n```java\n{\n    \"took\": 133,\n    \"timed_out\": false,\n    \"_shards\": {\n        \"total\": 1,\n        \"successful\": 1,\n        \"skipped\": 0,\n        \"failed\": 0\n    },\n    \"hits\": {\n        \"total\": {\n            \"value\": 2,\n            \"relation\": \"eq\"\n        },\n        \"max_score\": 1,\n        \"hits\": [\n            {\n                \"_index\": \"shopping\",\n                \"_type\": \"_doc\",\n                \"_id\": \"ANQqsHgBaKNfVnMbhZYU\",\n                \"_score\": 1,\n                \"_source\": {\n                    \"title\": \"小米手机\",\n                    \"category\": \"小米\",\n                    \"images\": \"http://www.gulixueyuan.com/xm.jpg\",\n                    \"price\": 3999\n                }\n            },\n            {\n                \"_index\": \"shopping\",\n                \"_type\": \"_doc\",\n                \"_id\": \"1\",\n                \"_score\": 1,\n                \"_source\": {\n                    \"title\": \"小米手机\",\n                    \"category\": \"小米\",\n                    \"images\": \"http://www.gulixueyuan.com/xm.jpg\",\n                    \"price\": 3999\n                }\n            }\n        ]\n    }\n}\n\n```\n## 全量修改 & 局部修改 & 删除\n### 全量修改\nPOST 请求 ： http://127.0.0.1:9200/shopping/_doc/1<br />请求体JSON内容为:\n```java\n{\n    \"title\":\"华为手机\",\n    \"category\":\"华为\",\n    \"images\":\"http://www.gulixueyuan.com/hw.jpg\",\n    \"price\":1999.00\n}\n```\n修改成功后，服务器响应结果：\n```java\n{\n    \"_index\": \"shopping\",\n    \"_type\": \"_doc\",\n    \"_id\": \"1\",\n    \"_version\": 2,\n    \"result\": \"updated\",//<-----------updated 表示数据被更新\n    \"_shards\": {\n        \"total\": 2,\n        \"successful\": 1,\n        \"failed\": 0\n    },\n    \"_seq_no\": 2,\n    \"_primary_term\": 1\n}\n```\n### 局部修改\nPOST 请求 ： http://127.0.0.1:9200/shopping/_update/1<br />请求体JSON内容为:\n```java\n{\n\t\"doc\": {\n\t\t\"title\":\"小米手机\",\n\t\t\"category\":\"小米\"\n\t}\n}\n```\n返回结果如下：\n```java\n{\n    \"_index\": \"shopping\",\n    \"_type\": \"_doc\",\n    \"_id\": \"1\",\n    \"_version\": 3,\n    \"result\": \"updated\",//<-----------updated 表示数据被更新\n    \"_shards\": {\n        \"total\": 2,\n        \"successful\": 1,\n        \"failed\": 0\n    },\n    \"_seq_no\": 3,\n    \"_primary_term\": 1\n}\n```\n GET请求 ： http://127.0.0.1:9200/shopping/_doc/1，查看修改内容：\n```java\n{\n    \"_index\": \"shopping\",\n    \"_type\": \"_doc\",\n    \"_id\": \"1\",\n    \"_version\": 3,\n    \"_seq_no\": 3,\n    \"_primary_term\": 1,\n    \"found\": true,\n    \"_source\": {\n        \"title\": \"小米手机\",\n        \"category\": \"小米\",\n        \"images\": \"http://www.gulixueyuan.com/hw.jpg\",\n        \"price\": 1999\n    }\n}\n```\n### 删除\nDELETE 请求 ： http://127.0.0.1:9200/shopping/_doc/1<br />返回结果：\n```java\n{\n    \"_index\": \"shopping\",\n    \"_type\": \"_doc\",\n    \"_id\": \"1\",\n    \"_version\": 4,\n    \"result\": \"deleted\",//<---删除成功\n    \"_shards\": {\n        \"total\": 2,\n        \"successful\": 1,\n        \"failed\": 0\n    },\n    \"_seq_no\": 4,\n    \"_primary_term\": 1\n}\n```\n向 ES 服务器发 GET请求 ： http://127.0.0.1:9200/shopping/_doc/1，查看是否删除成功：\n```java\n{\n    \"_index\": \"shopping\",\n    \"_type\": \"_doc\",\n    \"_id\": \"1\",\n    \"found\": false\n}\n```\n\n## 条件查询 & 分页查询 & 查询排序\n\n### 条件查询\nGET请求 ： http://127.0.0.1:9200/shopping/_search\n```java\n{\n    \"took\": 5,\n    \"timed_out\": false,\n    \"_shards\": {\n        \"total\": 1,\n        \"successful\": 1,\n        \"skipped\": 0,\n        \"failed\": 0\n    },\n    \"hits\": {\n        \"total\": {\n            \"value\": 6,\n            \"relation\": \"eq\"\n        },\n        \"max_score\": 1,\n        \"hits\": [\n            {\n                \"_index\": \"shopping\",\n                \"_type\": \"_doc\",\n                \"_id\": \"ANQqsHgBaKNfVnMbhZYU\",\n                \"_score\": 1,\n                \"_source\": {\n                    \"title\": \"小米手机\",\n                    \"category\": \"小米\",\n                    \"images\": \"http://www.gulixueyuan.com/xm.jpg\",\n                    \"price\": 3999\n                }\n            },\n            {\n                \"_index\": \"shopping\",\n                \"_type\": \"_doc\",\n                \"_id\": \"A9R5sHgBaKNfVnMb25Ya\",\n                \"_score\": 1,\n                \"_source\": {\n                    \"title\": \"小米手机\",\n                    \"category\": \"小米\",\n                    \"images\": \"http://www.gulixueyuan.com/xm.jpg\",\n                    \"price\": 1999\n                }\n            },\n            {\n                \"_index\": \"shopping\",\n                \"_type\": \"_doc\",\n                \"_id\": \"BNR5sHgBaKNfVnMb7pal\",\n                \"_score\": 1,\n                \"_source\": {\n                    \"title\": \"小米手机\",\n                    \"category\": \"小米\",\n                    \"images\": \"http://www.gulixueyuan.com/xm.jpg\",\n                    \"price\": 1999\n                }\n            },\n            {\n                \"_index\": \"shopping\",\n                \"_type\": \"_doc\",\n                \"_id\": \"BtR6sHgBaKNfVnMbX5Y5\",\n                \"_score\": 1,\n                \"_source\": {\n                    \"title\": \"华为手机\",\n                    \"category\": \"华为\",\n                    \"images\": \"http://www.gulixueyuan.com/xm.jpg\",\n                    \"price\": 1999\n                }\n            },\n            {\n                \"_index\": \"shopping\",\n                \"_type\": \"_doc\",\n                \"_id\": \"B9R6sHgBaKNfVnMbZpZ6\",\n                \"_score\": 1,\n                \"_source\": {\n                    \"title\": \"华为手机\",\n                    \"category\": \"华为\",\n                    \"images\": \"http://www.gulixueyuan.com/xm.jpg\",\n                    \"price\": 1999\n                }\n            },\n            {\n                \"_index\": \"shopping\",\n                \"_type\": \"_doc\",\n                \"_id\": \"CdR7sHgBaKNfVnMbsJb9\",\n                \"_score\": 1,\n                \"_source\": {\n                    \"title\": \"华为手机\",\n                    \"category\": \"华为\",\n                    \"images\": \"http://www.gulixueyuan.com/xm.jpg\",\n                    \"price\": 1999\n                }\n            }\n        ]\n    }\n}\n\n```\n#### URL带参查询\nGET请求 ： http://127.0.0.1:9200/shopping/_search?q=category:小米<br />返回结果如下：\n```java\n{\n    \"took\": 94,\n    \"timed_out\": false,\n    \"_shards\": {\n        \"total\": 1,\n        \"successful\": 1,\n        \"skipped\": 0,\n        \"failed\": 0\n    },\n    \"hits\": {\n        \"total\": {\n            \"value\": 3,\n            \"relation\": \"eq\"\n        },\n        \"max_score\": 1.3862942,\n        \"hits\": [\n            {\n                \"_index\": \"shopping\",\n                \"_type\": \"_doc\",\n                \"_id\": \"ANQqsHgBaKNfVnMbhZYU\",\n                \"_score\": 1.3862942,\n                \"_source\": {\n                    \"title\": \"小米手机\",\n                    \"category\": \"小米\",\n                    \"images\": \"http://www.gulixueyuan.com/xm.jpg\",\n                    \"price\": 3999\n                }\n            },\n            {\n                \"_index\": \"shopping\",\n                \"_type\": \"_doc\",\n                \"_id\": \"A9R5sHgBaKNfVnMb25Ya\",\n                \"_score\": 1.3862942,\n                \"_source\": {\n                    \"title\": \"小米手机\",\n                    \"category\": \"小米\",\n                    \"images\": \"http://www.gulixueyuan.com/xm.jpg\",\n                    \"price\": 1999\n                }\n            },\n            {\n                \"_index\": \"shopping\",\n                \"_type\": \"_doc\",\n                \"_id\": \"BNR5sHgBaKNfVnMb7pal\",\n                \"_score\": 1.3862942,\n                \"_source\": {\n                    \"title\": \"小米手机\",\n                    \"category\": \"小米\",\n                    \"images\": \"http://www.gulixueyuan.com/xm.jpg\",\n                    \"price\": 1999\n                }\n            }\n        ]\n    }\n}\n```\n#### 请求体带参查询\nGET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"query\":{\n\t\t\"match\":{\n\t\t\t\"category\":\"小米\"\n\t\t}\n\t}\n}\n```\n#### 带请求体方式的查找所有内容\n GET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"query\":{\n\t\t\"match_all\":{}\n\t}\n}\n```\n#### 查询指定字段\nGET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"query\":{\n\t\t\"match_all\":{}\n\t},\n\t\"_source\":[\"title\"]\n}\n```\n### 分页查询\nGET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"query\":{\n\t\t\"match_all\":{}\n\t},\n\t\"from\":0,\n\t\"size\":2\n}\n```\n### 查询排序\nGET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"query\":{\n\t\t\"match_all\":{}\n\t},\n\t\"sort\":{\n\t\t\"price\":{\n\t\t\t\"order\":\"desc\"\n\t\t}\n\t}\n}\n```\n\n\n## 多条件查询 & 范围查询\n\n### 多条件查询\n假设想找出小米牌子，价格为3999元的。（must相当于数据库的&&）<br />GET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"query\":{\n\t\t\"bool\":{\n\t\t\t\"must\":[{\n\t\t\t\t\"match\":{\n\t\t\t\t\t\"category\":\"小米\"\n\t\t\t\t}\n\t\t\t},{\n\t\t\t\t\"match\":{\n\t\t\t\t\t\"price\":3999.00\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t}\n}\n```\n假设想找出小米和华为的牌子。（should相当于数据库的||）<br />GET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"query\":{\n\t\t\"bool\":{\n\t\t\t\"should\":[{\n\t\t\t\t\"match\":{\n\t\t\t\t\t\"category\":\"小米\"\n\t\t\t\t}\n\t\t\t},{\n\t\t\t\t\"match\":{\n\t\t\t\t\t\"category\":\"华为\"\n\t\t\t\t}\n\t\t\t}]\n\t\t},\n        \"filter\":{\n            \"range\":{\n                \"price\":{\n                    \"gt\":2000\n                }\n            }\n        }\n\t}\n}\n```\n### 范围查询\n假设想找出小米和华为的牌子，价格大于2000元的手机。<br />GET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"query\":{\n\t\t\"bool\":{\n\t\t\t\"should\":[{\n\t\t\t\t\"match\":{\n\t\t\t\t\t\"category\":\"小米\"\n\t\t\t\t}\n\t\t\t},{\n\t\t\t\t\"match\":{\n\t\t\t\t\t\"category\":\"华为\"\n\t\t\t\t}\n\t\t\t}],\n            \"filter\":{\n            \t\"range\":{\n                \t\"price\":{\n                    \t\"gt\":2000\n                \t}\n\t            }\n    \t    }\n\t\t}\n\t}\n}\n```\n\n\n## 全文检索 & 完全匹配 & 高亮查询\n\n### 全文检索\n这功能像搜索引擎那样，如品牌输入“小华”，返回结果带回品牌有“小米”和华为的。<br />GET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"query\":{\n\t\t\"match\":{\n\t\t\t\"category\" : \"小华\"\n\t\t}\n\t}\n}\n```\n### 完全匹配\nGET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"query\":{\n\t\t\"match_phrase\":{\n\t\t\t\"category\" : \"为\"\n\t\t}\n\t}\n}\n```\n### 高亮查询\nGET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"query\":{\n\t\t\"match_phrase\":{\n\t\t\t\"category\" : \"为\"\n\t\t}\n\t},\n    \"highlight\":{\n        \"fields\":{\n            \"category\":{}//<----高亮这字段\n        }\n    }\n}\n```\n\n## 聚合查询\n\n聚合允许使用者对 es 文档进行统计分析，类似与关系型数据库中的 group by，当然还有很多其他的聚合，例如取最大值max、平均值avg等等。\n\n接下来按price字段进行分组：<br />GET请求 ： [http://127.0.0.1:9200/shopping/_search](http://127.0.0.1:9200/shopping/_search)，附带JSON体如下：\n```java\n{\n\t\"aggs\":{//聚合操作\n\t\t\"price_group\":{//名称，随意起名\n\t\t\t\"terms\":{//分组\n\t\t\t\t\"field\":\"price\"//分组字段\n\t\t\t}\n\t\t}\n\t}\n}\n```\n上面返回结果会附带原始数据的。若不想要不附带原始数据的结果，在 Postman 中，向 ES 服务器发 GET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"aggs\":{\n\t\t\"price_group\":{\n\t\t\t\"terms\":{\n\t\t\t\t\"field\":\"price\"\n\t\t\t}\n\t\t}\n\t},\n    \"size\":0\n}\n```\n若想对所有手机价格求**平均值**。<br />GET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"aggs\":{\n\t\t\"price_avg\":{//名称，随意起名\n\t\t\t\"avg\":{//求平均\n\t\t\t\t\"field\":\"price\"\n\t\t\t}\n\t\t}\n\t},\n    \"size\":0\n}\n```\n## 映射关系\n有了索引库，等于有了数据库中的 database。\n\n接下来就需要建索引库(index)中的映射了，类似于数据库(database)中的表结构(table)。\n\n创建数据库表需要设置字段名称，类型，长度，约束等；索引库也一样，需要知道这个类型下有哪些字段，每个字段有哪些约束信息，这就叫做映射(mapping)。\n\n先创建一个索引：\n```java\n# PUT http://127.0.0.1:9200/user\n```\n**创建映射**\n```java\n# PUT http://127.0.0.1:9200/user/_mapping\n\n{\n    \"properties\": {\n        \"name\": {\n            \"type\": \"text\", // 允许分词\n            \"index\": true\n        },\n        \"sex\": {\n            \"type\": \"keyword\", // 关键字无法分开必须完全匹配\n            \"index\": true\n        },\n        \"tel\": {\n            \"type\": \"keyword\",\n            \"index\": false   // 不支持索引查询\n        }\n    }\n}\n```\n**查询映射**\n```java\n#GET http://127.0.0.1:9200/user/_mapping\n```\n返回结果如下：\n```java\n{\n    \"user\": {\n        \"mappings\": {\n            \"properties\": {\n                \"name\": {\n                    \"type\": \"text\"\n                },\n                \"sex\": {\n                    \"type\": \"keyword\"\n                },\n                \"tel\": {\n                    \"type\": \"keyword\",\n                    \"index\": false\n                }\n            }\n        }\n    }\n}\n```\n增加数据\n```java\n#PUT http://127.0.0.1:9200/user/_create/1001\n{\n\t\"name\":\"小米\",\n\t\"sex\":\"男的\",\n\t\"tel\":\"1111\"\n}\n```\n查找name含有”小“数据：\n```java\n#GET http://127.0.0.1:9200/user/_search\n{\n\t\"query\":{\n\t\t\"match\":{\n\t\t\t\"name\":\"小\"\n\t\t}\n\t}\n}\n```\n\n\n## JavaAPI\n添加依赖：\n```java\n<dependencies>\n    <dependency>\n        <groupId>org.elasticsearch</groupId>\n        <artifactId>elasticsearch</artifactId>\n        <version>7.8.0</version>\n    </dependency>\n    <!-- elasticsearch 的客户端 -->\n    <dependency>\n        <groupId>org.elasticsearch.client</groupId>\n        <artifactId>elasticsearch-rest-high-level-client</artifactId>\n        <version>7.8.0</version>\n    </dependency>\n    <!-- elasticsearch 依赖 2.x 的 log4j -->\n    <dependency>\n        <groupId>org.apache.logging.log4j</groupId>\n        <artifactId>log4j-api</artifactId>\n        <version>2.8.2</version>\n    </dependency>\n    <dependency>\n        <groupId>org.apache.logging.log4j</groupId>\n        <artifactId>log4j-core</artifactId>\n        <version>2.8.2</version>\n    </dependency>\n    <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-databind</artifactId>\n        <version>2.9.9</version>\n    </dependency>\n    <!-- junit 单元测试 -->\n    <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>4.12</version>\n    </dependency>\n</dependencies>\n```\nHelloElasticsearch\n```java\nimport java.io.IOException;\n\nimport org.apache.http.HttpHost;\nimport org.elasticsearch.client.RestClient;\nimport org.elasticsearch.client.RestHighLevelClient;\n\npublic class HelloElasticsearch {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\t// 创建客户端对象\n\t\tRestHighLevelClient client = new RestHighLevelClient(\n\t\t\t\tRestClient.builder(new HttpHost(\"localhost\", 9200, \"http\")));\n//\t\t...\n\t\tSystem.out.println(client);\n\n\t\t// 关闭客户端连接\n\t\tclient.close();\n\t}\n}\n```\n### JavaAPI-索引-创建\n```java\npublic class CreateIndex {\n\n    public static void main(String[] args) throws IOException {\n        // 创建客户端对象\n        RestHighLevelClient client = new RestHighLevelClient(\n                RestClient.builder(new HttpHost(\"localhost\", 9200, \"http\")));\n\n        // 创建索引 - 请求对象\n        CreateIndexRequest request = new CreateIndexRequest(\"user2\");\n        // 发送请求，获取响应\n        CreateIndexResponse response = client.indices().create(request,\n                RequestOptions.DEFAULT);\n        boolean acknowledged = response.isAcknowledged();\n        // 响应状态\n        System.out.println(\"操作状态 = \" + acknowledged);\n\n        // 关闭客户端连接\n        client.close();\n    }\n\n}\n```\n### JavaAPI-索引-查询 & 删除\n#### 查询\n```java\npublic class SearchIndex {\n    public static void main(String[] args) throws IOException {\n        // 创建客户端对象\n        RestHighLevelClient client = new RestHighLevelClient(\n                RestClient.builder(new HttpHost(\"localhost\", 9200, \"http\")));\n\n        // 查询索引 - 请求对象\n        GetIndexRequest request = new GetIndexRequest(\"user2\");\n        // 发送请求，获取响应\n        GetIndexResponse response = client.indices().get(request,\n                RequestOptions.DEFAULT);\n        \n        System.out.println(\"aliases:\"+response.getAliases());\n        System.out.println(\"mappings:\"+response.getMappings());\n        System.out.println(\"settings:\"+response.getSettings());\n\n        client.close();\n    }\n}\n```\n#### 删除\n```java\npublic class DeleteIndex {\n    public static void main(String[] args) throws IOException {\n        RestHighLevelClient client = new RestHighLevelClient(\n                RestClient.builder(new HttpHost(\"localhost\", 9200, \"http\")));\n        // 删除索引 - 请求对象\n        DeleteIndexRequest request = new DeleteIndexRequest(\"user2\");\n        // 发送请求，获取响应\n        AcknowledgedResponse response = client.indices().delete(request,RequestOptions.DEFAULT);\n        // 操作结果\n        System.out.println(\"操作结果 ： \" + response.isAcknowledged());\n        client.close();\n    }\n}\n```\n### JavaAPI-文档-新增 & 修改\n#### 重构\n上文由于频繁使用以下连接Elasticsearch和关闭它的代码，于是**个人**对它进行重构。\n```java\npublic class SomeClass {\n    public static void main(String[] args) throws IOException {\n        RestHighLevelClient client = new RestHighLevelClient(\n                RestClient.builder(new HttpHost(\"localhost\", 9200, \"http\")));\n\t\t\n        ...\n        \n        client.close();\n    }\n}\n```\n重构后的代码：\n```java\nimport org.elasticsearch.client.RestHighLevelClient;\n\npublic interface ElasticsearchTask {\n\n    void doSomething(RestHighLevelClient client) throws Exception;\n\n}\n\n```\n```java\npublic class ConnectElasticsearch{\n\n    public static void connect(ElasticsearchTask task){\n        // 创建客户端对象\n        RestHighLevelClient client = new RestHighLevelClient(\n                RestClient.builder(new HttpHost(\"localhost\", 9200, \"http\")));\n        try {\n            task.doSomething(client);\n            // 关闭客户端连接\n            client.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n接下来，如果想让Elasticsearch完成一些操作，就编写一个lambda式即可。\n```java\npublic class SomeClass {\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(client -> {\n\t\t\t//do something\n        });\n    }\n}\n```\n#### 新增\n```java\npublic class InsertDoc {\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(client -> {\n            // 新增文档 - 请求对象\n            IndexRequest request = new IndexRequest();\n            // 设置索引及唯一性标识\n            request.index(\"user\").id(\"1001\");\n\n            // 创建数据对象\n            User user = new User();\n            user.setName(\"zhangsan\");\n            user.setAge(30);\n            user.setSex(\"男\");\n\n            ObjectMapper objectMapper = new ObjectMapper();\n            String productJson = objectMapper.writeValueAsString(user);\n            // 添加文档数据，数据格式为 JSON 格式\n            request.source(productJson, XContentType.JSON);\n            // 客户端发送请求，获取响应对象\n            IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n            3.打印结果信息\n            System.out.println(\"_index:\" + response.getIndex());\n            System.out.println(\"_id:\" + response.getId());\n            System.out.println(\"_result:\" + response.getResult());\n        });\n    }\n}\n```\n#### 修改\n```java\npublic class UpdateDoc {\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(client -> {\n            // 修改文档 - 请求对象\n            UpdateRequest request = new UpdateRequest();\n            // 配置修改参数\n            request.index(\"user\").id(\"1001\");\n            // 设置请求体，对数据进行修改\n            request.doc(XContentType.JSON, \"sex\", \"女\");\n            // 客户端发送请求，获取响应对象\n            UpdateResponse response = client.update(request, RequestOptions.DEFAULT);\n            System.out.println(\"_index:\" + response.getIndex());\n            System.out.println(\"_id:\" + response.getId());\n            System.out.println(\"_result:\" + response.getResult());\n        });\n    }\n\n}\n```\n### JavaAPI-文档-查询 & 删除\n#### 查询\n\n```java\npublic class GetDoc {\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(client -> {\n            //1.创建请求对象\n            GetRequest request = new GetRequest().index(\"user\").id(\"1001\");\n            //2.客户端发送请求，获取响应对象\n            GetResponse response = client.get(request, RequestOptions.DEFAULT);\n            3.打印结果信息\n            System.out.println(\"_index:\" + response.getIndex());\n            System.out.println(\"_type:\" + response.getType());\n            System.out.println(\"_id:\" + response.getId());\n            System.out.println(\"source:\" + response.getSourceAsString());\n        });\n    }\n}\n```\n#### 删除\n```java\npublic class DeleteDoc {\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(client -> {\n            //创建请求对象\n            DeleteRequest request = new DeleteRequest().index(\"user\").id(\"1001\");\n            //客户端发送请求，获取响应对象\n            DeleteResponse response = client.delete(request, RequestOptions.DEFAULT);\n            //打印信息\n            System.out.println(response.toString());\n        });\n    }\n}\n```\n### JavaAPI-文档-批量新增 & 批量删除\n#### 批量新增\n```java\npublic class BatchInsertDoc {\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(client -> {\n            //创建批量新增请求对象\n            BulkRequest request = new BulkRequest();\n            request.add(new\n                    IndexRequest().index(\"user\").id(\"1001\").source(XContentType.JSON, \"name\",\n                    \"zhangsan\"));\n            request.add(new\n                    IndexRequest().index(\"user\").id(\"1002\").source(XContentType.JSON, \"name\",\n                            \"lisi\"));\n            request.add(new\n                    IndexRequest().index(\"user\").id(\"1003\").source(XContentType.JSON, \"name\",\n                    \"wangwu\"));\n            //客户端发送请求，获取响应对象\n            BulkResponse responses = client.bulk(request, RequestOptions.DEFAULT);\n            //打印结果信息\n            System.out.println(\"took:\" + responses.getTook());\n            System.out.println(\"items:\" + responses.getItems());\n        });\n    }\n}\n```\n#### 批量删除\n```java\npublic class BatchDeleteDoc {\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(client -> {\n            //创建批量删除请求对象\n            BulkRequest request = new BulkRequest();\n            request.add(new DeleteRequest().index(\"user\").id(\"1001\"));\n            request.add(new DeleteRequest().index(\"user\").id(\"1002\"));\n            request.add(new DeleteRequest().index(\"user\").id(\"1003\"));\n            //客户端发送请求，获取响应对象\n            BulkResponse responses = client.bulk(request, RequestOptions.DEFAULT);\n            //打印结果信息\n            System.out.println(\"took:\" + responses.getTook());\n            System.out.println(\"items:\" + responses.getItems());\n        });\n    }\n}\n```\n### JavaAPI-文档-高级查询-全量查询\n```java\npublic class BatchInsertDoc {\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(client -> {\n            //创建批量新增请求对象\n            BulkRequest request = new BulkRequest();\n            request.add(new IndexRequest().index(\"user\").id(\"1001\").source(XContentType.JSON, \"name\", \"zhangsan\", \"age\", \"10\", \"sex\",\"女\"));\n            request.add(new IndexRequest().index(\"user\").id(\"1002\").source(XContentType.JSON, \"name\", \"lisi\", \"age\", \"30\", \"sex\",\"女\"));\n            request.add(new IndexRequest().index(\"user\").id(\"1003\").source(XContentType.JSON, \"name\", \"wangwu1\", \"age\", \"40\", \"sex\",\"男\"));\n            request.add(new IndexRequest().index(\"user\").id(\"1004\").source(XContentType.JSON, \"name\", \"wangwu2\", \"age\", \"20\", \"sex\",\"女\"));\n            request.add(new IndexRequest().index(\"user\").id(\"1005\").source(XContentType.JSON, \"name\", \"wangwu3\", \"age\", \"50\", \"sex\",\"男\"));\n            request.add(new IndexRequest().index(\"user\").id(\"1006\").source(XContentType.JSON, \"name\", \"wangwu4\", \"age\", \"20\", \"sex\",\"男\"));\n            //客户端发送请求，获取响应对象\n            BulkResponse responses = client.bulk(request, RequestOptions.DEFAULT);\n            //打印结果信息\n            System.out.println(\"took:\" + responses.getTook());\n            System.out.println(\"items:\" + responses.getItems());\n        });\n    }\n}\n```\n**查询所有索引数据**\n```java\npublic class QueryDoc {\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(client -> {\n            // 创建搜索请求对象\n            SearchRequest request = new SearchRequest();\n            request.indices(\"user\");\n            // 构建查询的请求体\n            SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n            // 查询所有数据\n            sourceBuilder.query(QueryBuilders.matchAllQuery());\n            request.source(sourceBuilder);\n            SearchResponse response = client.search(request, RequestOptions.DEFAULT);\n            // 查询匹配\n            SearchHits hits = response.getHits();\n            System.out.println(\"took:\" + response.getTook());\n            System.out.println(\"timeout:\" + response.isTimedOut());\n            System.out.println(\"total:\" + hits.getTotalHits());\n            System.out.println(\"MaxScore:\" + hits.getMaxScore());\n            System.out.println(\"hits========>>\");\n            for (SearchHit hit : hits) {\n            //输出每条查询的结果信息\n                System.out.println(hit.getSourceAsString());\n            }\n            System.out.println(\"<<========\");\n        });\n    }\n\n}\n```\n### JavaAPI-文档-高级查询-分页查询 & 条件查询 & 查询排序\n#### 条件查询\n```java\npublic class QueryDoc {\n    \n\tpublic static final ElasticsearchTask SEARCH_BY_CONDITION = client -> {\n        // 创建搜索请求对象\n        SearchRequest request = new SearchRequest();\n        request.indices(\"user\");\n        // 构建查询的请求体\n        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n        sourceBuilder.query(QueryBuilders.termQuery(\"age\", \"30\"));\n        request.source(sourceBuilder);\n        SearchResponse response = client.search(request, RequestOptions.DEFAULT);\n        // 查询匹配\n        SearchHits hits = response.getHits();\n        System.out.println(\"took:\" + response.getTook());\n        System.out.println(\"timeout:\" + response.isTimedOut());\n        System.out.println(\"total:\" + hits.getTotalHits());\n        System.out.println(\"MaxScore:\" + hits.getMaxScore());\n        System.out.println(\"hits========>>\");\n        for (SearchHit hit : hits) {\n            //输出每条查询的结果信息\n            System.out.println(hit.getSourceAsString());\n        }\n        System.out.println(\"<<========\");\n    };\n    \n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(SEARCH_BY_CONDITION);\n    }\n}\n```\n#### 分页查询\n```java\npublic class QueryDoc {\n    \n\tpublic static final ElasticsearchTask SEARCH_BY_PAGING = client -> {\n        // 创建搜索请求对象\n        SearchRequest request = new SearchRequest();\n        request.indices(\"user\");\n        // 构建查询的请求体\n        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n        sourceBuilder.query(QueryBuilders.matchAllQuery());\n        // 分页查询\n        // 当前页其实索引(第一条数据的顺序号)， from\n        sourceBuilder.from(0);\n\n        // 每页显示多少条 size\n        sourceBuilder.size(2);\n        request.source(sourceBuilder);\n        SearchResponse response = client.search(request, RequestOptions.DEFAULT);\n        // 查询匹配\n        SearchHits hits = response.getHits();\n        System.out.println(\"took:\" + response.getTook());\n        System.out.println(\"timeout:\" + response.isTimedOut());\n        System.out.println(\"total:\" + hits.getTotalHits());\n        System.out.println(\"MaxScore:\" + hits.getMaxScore());\n        System.out.println(\"hits========>>\");\n        for (SearchHit hit : hits) {\n            //输出每条查询的结果信息\n            System.out.println(hit.getSourceAsString());\n        }\n        System.out.println(\"<<========\");\n    };\n    \n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(SEARCH_BY_CONDITION);\n    }\n\n}\n```\n#### 查询排序\n```java\npublic class QueryDoc {\n    \n\tpublic static final ElasticsearchTask SEARCH_WITH_ORDER = client -> {\n        // 创建搜索请求对象\n        SearchRequest request = new SearchRequest();\n        request.indices(\"user\");\n\n        // 构建查询的请求体\n        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n        sourceBuilder.query(QueryBuilders.matchAllQuery());\n        // 排序\n        sourceBuilder.sort(\"age\", SortOrder.ASC);\n        request.source(sourceBuilder);\n        SearchResponse response = client.search(request, RequestOptions.DEFAULT);\n        // 查询匹配\n        SearchHits hits = response.getHits();\n        System.out.println(\"took:\" + response.getTook());\n        System.out.println(\"timeout:\" + response.isTimedOut());\n        System.out.println(\"total:\" + hits.getTotalHits());\n        System.out.println(\"MaxScore:\" + hits.getMaxScore());\n        System.out.println(\"hits========>>\");\n        for (SearchHit hit : hits) {\n        //输出每条查询的结果信息\n            System.out.println(hit.getSourceAsString());\n        }\n        System.out.println(\"<<========\");\n    };\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(SEARCH_WITH_ORDER);\n    }\n\n}\n```\n### JavaAPI-文档-高级查询-组合查询 & 范围查询\n#### 组合查询\n```java\npublic class QueryDoc {\n    \n\tpublic static final ElasticsearchTask SEARCH_BY_BOOL_CONDITION = client -> {\n        // 创建搜索请求对象\n        SearchRequest request = new SearchRequest();\n        request.indices(\"user\");\n        // 构建查询的请求体\n        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        // 必须包含\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"age\", \"30\"));\n        // 一定不含\n        boolQueryBuilder.mustNot(QueryBuilders.matchQuery(\"name\", \"zhangsan\"));\n        // 可能包含\n        boolQueryBuilder.should(QueryBuilders.matchQuery(\"sex\", \"男\"));\n        sourceBuilder.query(boolQueryBuilder);\n        request.source(sourceBuilder);\n        SearchResponse response = client.search(request, RequestOptions.DEFAULT);\n        // 查询匹配\n        SearchHits hits = response.getHits();\n        System.out.println(\"took:\" + response.getTook());\n        System.out.println(\"timeout:\" + response.isTimedOut());\n        System.out.println(\"total:\" + hits.getTotalHits());\n        System.out.println(\"MaxScore:\" + hits.getMaxScore());\n        System.out.println(\"hits========>>\");\n        for (SearchHit hit : hits) {\n            //输出每条查询的结果信息\n            System.out.println(hit.getSourceAsString());\n        }\n        System.out.println(\"<<========\");\n\n    };\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(SEARCH_BY_BOOL_CONDITION);\n    }\n}\n```\n#### 范围查询\n```java\npublic class QueryDoc {\n    \n\tpublic static final ElasticsearchTask SEARCH_BY_RANGE = client -> {\n        // 创建搜索请求对象\n        SearchRequest request = new SearchRequest();\n        request.indices(\"user\");\n        // 构建查询的请求体\n        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n        RangeQueryBuilder rangeQuery = QueryBuilders.rangeQuery(\"age\");\n        // 大于等于\n        //rangeQuery.gte(\"30\");\n        // 小于等于\n        rangeQuery.lte(\"40\");\n        sourceBuilder.query(rangeQuery);\n        request.source(sourceBuilder);\n        SearchResponse response = client.search(request, RequestOptions.DEFAULT);\n        // 查询匹配\n        SearchHits hits = response.getHits();\n        System.out.println(\"took:\" + response.getTook());\n        System.out.println(\"timeout:\" + response.isTimedOut());\n        System.out.println(\"total:\" + hits.getTotalHits());\n        System.out.println(\"MaxScore:\" + hits.getMaxScore());\n        System.out.println(\"hits========>>\");\n        for (SearchHit hit : hits) {\n        //输出每条查询的结果信息\n            System.out.println(hit.getSourceAsString());\n        }\n        System.out.println(\"<<========\");\n    };\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(SEARCH_BY_RANGE);\n    }\n\n}\n```\n### JavaAPI-文档-高级查询-模糊查询 & 高亮查询\n#### 模糊查询\n```java\npublic class QueryDoc {\n    \n    public static final ElasticsearchTask SEARCH_BY_FUZZY_CONDITION = client -> {\n        // 创建搜索请求对象\n        SearchRequest request = new SearchRequest();\n        request.indices(\"user\");\n        // 构建查询的请求体\n        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n        sourceBuilder.query(QueryBuilders.fuzzyQuery(\"name\",\"wangwu\").fuzziness(Fuzziness.ONE));\n        request.source(sourceBuilder);\n        SearchResponse response = client.search(request, RequestOptions.DEFAULT);\n        // 查询匹配\n        SearchHits hits = response.getHits();\n        System.out.println(\"took:\" + response.getTook());\n        System.out.println(\"timeout:\" + response.isTimedOut());\n        System.out.println(\"total:\" + hits.getTotalHits());\n        System.out.println(\"MaxScore:\" + hits.getMaxScore());\n        System.out.println(\"hits========>>\");\n        for (SearchHit hit : hits) {\n            //输出每条查询的结果信息\n            System.out.println(hit.getSourceAsString());\n        }\n        System.out.println(\"<<========\");\n    };\n\n\n    public static void main(String[] args) {\n//        ConnectElasticsearch.connect(SEARCH_ALL);\n//        ConnectElasticsearch.connect(SEARCH_BY_CONDITION);\n//        ConnectElasticsearch.connect(SEARCH_BY_PAGING);\n//        ConnectElasticsearch.connect(SEARCH_WITH_ORDER);\n//        ConnectElasticsearch.connect(SEARCH_BY_BOOL_CONDITION);\n//        ConnectElasticsearch.connect(SEARCH_BY_RANGE);\n        ConnectElasticsearch.connect(SEARCH_BY_FUZZY_CONDITION);\n    }\n\n}\n```\n#### 高亮查询\n```java\npublic class QueryDoc {\n    \n    public static final ElasticsearchTask SEARCH_WITH_HIGHLIGHT = client -> {\n        // 高亮查询\n        SearchRequest request = new SearchRequest().indices(\"user\");\n        //2.创建查询请求体构建器\n        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n        //构建查询方式：高亮查询\n        TermsQueryBuilder termsQueryBuilder =\n                QueryBuilders.termsQuery(\"name\",\"zhangsan\");\n        //设置查询方式\n        sourceBuilder.query(termsQueryBuilder);\n        //构建高亮字段\n        HighlightBuilder highlightBuilder = new HighlightBuilder();\n        highlightBuilder.preTags(\"<font color='red'>\");//设置标签前缀\n        highlightBuilder.postTags(\"</font>\");//设置标签后缀\n        highlightBuilder.field(\"name\");//设置高亮字段\n        //设置高亮构建对象\n        sourceBuilder.highlighter(highlightBuilder);\n        //设置请求体\n        request.source(sourceBuilder);\n        //3.客户端发送请求，获取响应对象\n        SearchResponse response = client.search(request, RequestOptions.DEFAULT);\n        //4.打印响应结果\n        SearchHits hits = response.getHits();\n        System.out.println(\"took::\"+response.getTook());\n        System.out.println(\"time_out::\"+response.isTimedOut());\n        System.out.println(\"total::\"+hits.getTotalHits());\n        System.out.println(\"max_score::\"+hits.getMaxScore());\n        System.out.println(\"hits::::>>\");\n        for (SearchHit hit : hits) {\n            String sourceAsString = hit.getSourceAsString();\n            System.out.println(sourceAsString);\n            //打印高亮结果\n            Map<String, HighlightField> highlightFields = hit.getHighlightFields();\n            System.out.println(highlightFields);\n        }\n        System.out.println(\"<<::::\");\n    };\n\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(SEARCH_WITH_HIGHLIGHT);\n    }\n\n}\n```\n### JavaAPI-文档-高级查询-最大值查询 & 分组查询\n#### 最大值查询\n\n```java\npublic class QueryDoc {\n    \n    public static final ElasticsearchTask SEARCH_WITH_MAX = client -> {\n        // 高亮查询\n        SearchRequest request = new SearchRequest().indices(\"user\");\n        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n        sourceBuilder.aggregation(AggregationBuilders.max(\"maxAge\").field(\"age\"));\n        //设置请求体\n        request.source(sourceBuilder);\n        //3.客户端发送请求，获取响应对象\n        SearchResponse response = client.search(request, RequestOptions.DEFAULT);\n        //4.打印响应结果\n        SearchHits hits = response.getHits();\n        System.out.println(response);\n    };\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(SEARCH_WITH_MAX);\n    }\n\n}\n```\n#### 分组查询\n```java\npublic class QueryDoc {\n\n\tpublic static final ElasticsearchTask SEARCH_WITH_GROUP = client -> {\n        SearchRequest request = new SearchRequest().indices(\"user\");\n        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n        sourceBuilder.aggregation(AggregationBuilders.terms(\"age_groupby\").field(\"age\"));\n        //设置请求体\n        request.source(sourceBuilder);\n        //3.客户端发送请求，获取响应对象\n        SearchResponse response = client.search(request, RequestOptions.DEFAULT);\n        //4.打印响应结果\n        SearchHits hits = response.getHits();\n        System.out.println(response);\n    };\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(SEARCH_WITH_GROUP);\n    }\n\n}\n```\n\n\n# Elasticsearch环境\n**单机 & 集群**<br />单台 Elasticsearch 服务器提供服务，往往都有最大的负载能力，超过这个阈值，服务器<br />性能就会大大降低甚至不可用，所以生产环境中，一般都是运行在指定服务器集群中。<br />除了负载能力，单点服务器也存在其他问题：\n\n单台机器存储容量有限<br />单服务器容易出现单点故障，无法实现高可用<br />单服务的并发处理能力有限<br />配置服务器集群时，集群中节点数量没有限制，大于等于 2 个节点就可以看做是集群了。一<br />般出于高性能及高可用方面来考虑集群中节点数量都是 3 个以上\n\n总之，集群能提高性能，增加容错。\n\n**集群 Cluster**<br />一个集群就是由一个或多个服务器节点组织在一起，共同持有整个的数据，并一起提供索引和搜索功能。**一个 Elasticsearch 集群有一个唯一的名字标识，这个名字默认就是”elasticsearch”。这个名字是重要的，因为一个节点只能通过指定某个集群的名字，来加入这个集群。\n\n**节点 Node**<br />集群中包含很多服务器， 一个节点就是其中的一个服务器。 作为集群的一部分，它存储数据，参与集群的索引和搜索功能。\n\n一个节点也是由一个名字来标识的，默认情况下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网络中的哪些服务器对应于 Elasticsearch 集群中的哪些节点。\n\n一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫做“elasticsearch”的集群中，这意味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中。\n\n在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运<br />行任何 Elasticsearch 节点，这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的<br />集群。\n\n## Windows集群部署\n\n- 创建 elasticsearch-cluster 文件夹\n- 创建 elasticsearch-7.8.0-cluster 文件夹，在内部复制三个 elasticsearch 服务\n- 修改集群文件目录中每个节点的 config/elasticsearch.yml 配置文件\n- 如果有必要，删除每个节点中的 data 目录中所有内容\n\n![image.png](/image/blog/elk1.png?raw=true)\n\n![image.png](/image/blog/elk2.png?raw=true)![image.png](/image/blog/elk3.png?raw=true)\n\n**启动集群**<br />分别依次双击执行节点的bin/elasticsearch.bat, 启动节点服务器（可以编写一个脚本启动），启动后，会自动加入指定名称的集群。\n\n**测试集群**<br />用Postman，查看集群状态<br />GET [http://127.0.0.1:1001/_cluster/health](http://127.0.0.1:1001/_cluster/health)<br />GET [http://127.0.0.1:1002/_cluster/health](http://127.0.0.1:1002/_cluster/health)<br />GET [http://127.0.0.1:1003/_cluster/health](http://127.0.0.1:1003/_cluster/health)<br />[<br />](https://blog.csdn.net/u011863024/article/details/115721328)\n```java\n{\n    \"cluster_name\": \"my-application\",\n    \"status\": \"green\",\n    \"timed_out\": false,\n    \"number_of_nodes\": 3,\n    \"number_of_data_nodes\": 3,\n    \"active_primary_shards\": 0,\n    \"active_shards\": 0,\n    \"relocating_shards\": 0,\n    \"initializing_shards\": 0,\n    \"unassigned_shards\": 0,\n    \"delayed_unassigned_shards\": 0,\n    \"number_of_pending_tasks\": 0,\n    \"number_of_in_flight_fetch\": 0,\n    \"task_max_waiting_in_queue_millis\": 0,\n    \"active_shards_percent_as_number\": 100.0\n}\n```\n**status字段**指示着当前集群在总体上是否工作正常。它的三种颜色含义如下：\n\n1. green：所有的主分片和副本分片都正常运行\n1. yellow：所有的主分片都正常运行，但不是所有的副本分片都正常运行\n1. red：有主分片没能正常运行\n\n用Postman，在一节点增加索引，另一节点获取索引\n\n向集群中的node-1001节点增加索引：\n```java\n#PUT http://127.0.0.1:1001/user\n```\n向集群中的node-1003节点获取索引：\n```java\n#GET http://127.0.0.1:1003/user\n```\n如果在1003创建索引，同样在1001也能获取索引信息，这就是集群能力\n\n\n## 环境-Linux单节点部署\n\n> 下载软件 [链接](https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0)\n\n```java\n# 解压缩\ntar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz -C /opt/module\n\n# 改名\nmv elasticsearch-7.8.0 es\n\nuseradd es #新增 es 用户\n\npasswd es #为 es 用户设置密码\n\nuserdel -r es #如果错了，可以删除再加\n\nchown -R es:es /opt/module/es #文件夹所有者\n```\n修改/opt/module/es/config/elasticsearch.yml文件\n```java\n# 加入如下配置\ncluster.name: elasticsearch\nnode.name: node-1\nnetwork.host: 0.0.0.0\nhttp.port: 9200\ncluster.initial_master_nodes: [\"node-1\"]\n```\n修改/etc/security/limits.conf\n```java\n# 在文件末尾中增加下面内容\n# 每个进程可以打开的文件数的限制\nes soft nofile 65536\nes hard nofile 65536\n```\n修改/etc/security/limits.d/20-nproc.conf\n```java\n# 在文件末尾中增加下面内容\n# 每个进程可以打开的文件数的限制\nes soft nofile 65536\nes hard nofile 65536\n# 操作系统级别对每个用户创建的进程数的限制\n* hard nproc 4096\n# 注： * 带表 Linux 所有用户名称\n```\n修改/etc/sysctl.conf\n```java\n# 在文件中增加下面内容\n# 一个进程可以拥有的 VMA(虚拟内存区域)的数量,默认值为 65536\nvm.max_map_count=655360\n```\n重新加载\n```java\nsysctl -p\n\n# 使用 ES 用户启动\ncd /opt/module/es/\n    \n#启动\nbin/elasticsearch\n\n#后台启动\nbin/elasticsearch -d  \n\n```\n启动时，会动态生成文件，如果文件所属用户不匹配，会发生错误，需要重新进行修改用户和用户组\n\n![image.png](/image/blog/elk4.png?raw=true)\n```java\n#暂时关闭防火墙\nsystemctl stop firewalld\n#永久关闭防火墙\nsystemctl enable firewalld.service #打开防火墙永久性生效，重启后不会复原\nsystemctl disable firewalld.service #关闭防火墙，永久性生效，重启后不会复原\n```\n### 测试软件\n浏览器中输入地址： http://linux1:9200/<br />![image.png](/image/blog/elk5.png?raw=true)\n\n# Elasticsearch进阶\n\n\n# ELK Stack\n![image.png](/image/blog/elk6.png?raw=true)<br />Input:：输入，输出数据可以是stdin，File，TCP，Redis，Syslog等<br />Filter：过滤，将日志格式化，有丰富的过滤插件，Grok正则捕获，Date日期处理，JSON解码，Mutate数据修改<br />Output：输出，输出目标可以是Stdin，File，TCP，Redis，ES等\n# Elasticsearch-Head插件\n> [下载](https://github.com/mobz/elasticsearch-head/releases)\n\n```shell\nnpm install\nnpm run start\n#  http://localhost:9100/\n\n# 修改es的yml文件\nhttp.cors.enabled: true\nhttp.cors.allow-origin: \"*\"\n```\n\n# Logstash\n> [下载](https://elasticsearch.cn/download/#seg-3) \n\n```json\ninput {\n  beats {\n    port => 5044\n  }\n}\n\noutput {\n  elasticsearch {\n    hosts => [\"http://localhost:9200\"]\n    index => \"%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}\"\n  }\n}\n\n```\n```json\nlogstash -f logstash.conf\n```\n## Input插件\n\n```json\ninput {\n  stdin {\n    \n  }\n}\n\noutput {\n  stdout {\n    codec => rubydebug\n  }\n}\n```\n```json\ninput {\n  file {\n    path => \"/var/log/message\"\n    tages => \"123\"\n    type => \"syslog\"\n  }\n}\n \noutput {\n  stdout {\n    codec => rubydebug\n  }\n}\n```\n```json\ninput {\n  tcp {\n    port => 9200\n    type => \"nc\"\n  } \n}\n \noutput {\n  stdout {\n    codec => rubydebug\n  }\n}\n```\n```json\ninput {\n  beats {\n    port => 5044\n  }\n}\n\noutput {\n  stdout {\n    codec => rubydebug\n  }\n}\n```\n\n## Codec插件\n\n```json\ninput {\n  stdin {\n    codec => json {\n      charset => [\"UTF-8\"]\n    }\n  }\n}\n\noutput {\n  stdout {\n    codec => rubydebug\n  }\n}\n```\n```json\ninput {\n  stdin {\n    codec => multiline {\n      // 不是以字符开头的，合并到上一行 正则匹配\n      pattern => \"^\\s\"\n      // 合并到上一行还是下一行\n      what => \"previous\"\n    }\n  }\n}\n\noutput {\n  stdout {\n    codec => rubydebug\n  }\n}\n```\n\n## Filter\n```json\ninput {\n  stdin {\n   \n  }\n}\nfilter {\n  json {\n    // 解析字段\n    source => \"message\"\n    // 目标字段\n    target => \"content\"\n  }\n}\n\noutput {\n  stdout {\n    codec => rubydebug\n  }\n}\n```\n\n```json\ninput {\n  stdin {\n   \n  }\n}\nfilter {\n  kv {\n    // 根据 & 和 ? 拆分字符串\n    fleld_split => \"&?\" \n    // 使用正则表达式\n    fleld_split_pattern => \":+\"\n  }\n}\n\noutput {\n  stdout {\n    codec => rubydebug\n  }\n}\n```\n <br />![image.png](/image/blog/elk7.png?raw=true)\n> [GEOIP下载](https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-City&license_key=O38GA2SviPLnqfF5&suffix=tar.gz) [官网](https://www.maxmind.com/en/accounts/347303/geoip/downloads?show_all_dates=1) [校验文件下载](https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-City&license_key=O38GA2SviPLnqfF5&suffix=tar.gz.sha256)  [grok正则](http://grokdebug.herokuapp.com)\n\n```json\ninput {\n  stdin {\n   \n  }\n}\nfilter {\n  gork {\n    match => {\n      // 正则匹配消息 日志示例： 223.72.85.86 GET /index.html 15824 0.043\n      \"message\" => \"%{IP:client} %{WORD:method} %{URIPATHPARAM:request} %{NUMBER:bytes} %{NUMBER:duration}\"\n    }\n  }\n  geoip {\n    source => \"client\"\n    database => \"D:\\path\\ELK\\GeoLite2-City_20220503/GeoLite2-City.mmdb\"\n  }\n}\n\noutput {\n  stdout {\n    codec => rubydebug\n  }\n}\n\n// 自定义匹配方式\ngork {\n    // ID [0-9A-Z]{10,11}\n    patterns_dir => \"D:\\path\\ELK\\patterns\\id_dir\"\n    match => {\n      // 正则匹配消息 日志示例： 123124452A\n      \"message\" => \"%{ID:id}\"\n    }\n  }\n\n// 匹配多个\ngork {\n    // ID [0-9A-Z]{10,11}\n    patterns_dir => \"D:\\path\\ELK\\patterns\\id_dir\"\n    match => [\n      \"message\", \"%{IP:client} %{WORD:method}\",\n      \"message\", \"%{ID:id}\"\n    ]\n  }\n```\n![image.png](/image/blog/elk8.png?raw=true)![image.png](/image/blog/elk9.png?raw=true)<br />![image.png](/image/blog/elk10.png?raw=true)\n## Output插件\n```json\ninput {\n  file {\n    path => [\"/var/log/messages\"]\n    type => \"system\"\n    tags => [\"syslog\",\"test\"]\n    start_position => \"beginning\"\n  }\n  file {\n    path => [\"/var/log/audit/audit.log\"]\n    type => \"system\"\n    tags => [\"auth\",\"test\"]\n    start_position => \"beginning\"\n  }\n}\nfilter {\n \n}\n\noutput {\n  if [type] == \"system\" {\n    if [tages][0] == \"syslog\" {\n      elasticsearch {\n         hosts => [\"http://localhost:9200\"]\n         index => \"logstash-system-syslog-%{+YYYY.MM.dd}\"\n      }\n      stdout {\n         codec => rubydebug\n      }\n    }\n    else if [tages][0] == \"auth\" {\n       elasticsearch {\n         hosts => [\"http://localhost:9200\"]\n         index => \"logstash-system-auth-%{+YYYY.MM.dd}\"\n      }\n      stdout {\n         codec => rubydebug\n      }\n    }\n  }\n}\n```\n# Kibana\n```yaml\ni18n.locale: \"zh-CN\"\n```\n![image.png](/image/blog/elk11.png?raw=true)<br />使用nginx代理kibana\n\n```nginx\nhttp {\n  server {\n    listen 80;\n    server_name localhost;\n    \n    location / {\n      proxy_pass http://localhost:5601;\n      auth_basic \"请输入用户名和密码！\";\n      // 指定用户文件\n      auth_basic_user_file /mydata/nginx/conf/user.db;  \n      root html;\n      index index.html index.htm;\n    }\n    \n  }\n}\n```\n```shell\n# 生成密文密码\nopenssl passwd -crytp 123456\n```\n```nginx\n// 用户名：密码\nfxb: faHgR3X/qNehA\n```\n# Redis\n\n![image.png](/image/blog/elk12.png?raw=true)<br />   \n```json\ninput {\n  file {\n    path => [\"/var/log/messages\"]\n    type => \"system\"\n    tags => [\"syslog\",\"test\"]\n    start_position => \"beginning\"\n  }\n  file {\n    path => [\"/var/log/audit/audit.log\"]\n    type => \"system\"\n    tags => [\"auth\",\"test\"]\n    start_position => \"beginning\"\n  }\n}\n\nfilter {\n \n}\n\noutput {\n  redis {\n     host => [\"localhost:6379\"]\n     password => \"123456\"\n     db => \"0\"\n     data_type => \"list\"\n     key => \"logstash\"\n  }\n}\n```\n```json\ninput {\n  redis {\n    host => \"localhost\"\n    port => 6379\n    password => \"123456\"\n    db => \"0\"\n    data_type => \"list\"\n    key => \"logstash\"\n  }\n}\n\nfilter {\n  \n}\n\noutput {\n  if [type] == \"system\" {\n    if [tages][0] == \"syslog\" {\n      elasticsearch {\n        hosts => [\"http://localhost:9200\"]\n        index => \"logstash-system-syslog-%{+YYYY.MM.dd}\"\n      }\n      stdout {\n        codec => rubydebug\n      }\n    }\n    else if [tages][0] == \"auth\" {\n      elasticsearch {\n        hosts => [\"http://localhost:9200\"]\n        index => \"logstash-system-auth-%{+YYYY.MM.dd}\"\n      }\n      stdout {\n        codec => rubydebug\n      } \n    }\n  }\n}\n```\n\n# FileBeat\n![image.png](/image/blog/elk13.png?raw=true)\n> [相关说明](https://www.elastic.co/guide/en/beats/filebeat/7.7/configuration-filebeat-options.html)\n\n```yaml\nfilebeat.inputs:\n- type: log \n  paths:\n    - /var/log/system.log\n  tags: [\"syslog\"]\nfields:\n  type: system\nfields_under_root: true\n- type: log \n  paths:\n    - /var/log/auth.log\n  tags: [\"auth\"]\nfields:\n  type: system\nfields_under_root: true\n\noutput.redis:\n  hosts: [\"localhost:6379\"]\n  password: \"123456\"\n  key: \"filebeat\"\n  db: 0\n  timeout: 5\n  datatype: list\n```\n# 日志收集\n## Nginx日志收集\n![image.png](/image/blog/elk14.png?raw=true)![image.png](/image/blog/elk15.png?raw=true)\n```nginx\n# 日志\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\n# http块\nhttp {\n    # nginx默认格式  \n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    # 自定义格式\n    # 时间戳 + 远程地址 + 远程用户 + 请求时间 + 状态码 + 请求方法 + 内存大小 + 扩展头部 + 用户代理\n    log_format json '{ \"@timestamp\": \"$time_iso8601\", '\n         '\"remote_addr\": \"$remote_addr\", '\n         '\"remote_user\": \"$remote_user\", '\n         '\"request_time\": \"$request_time\", '\n         '\"status\": \"$status\", '\n         '\"request_uri\": \"$request_uri\", '\n         '\"request_method\": \"$request_method\", '\n         '\"http_referrer\": \"$http_referer\", '\n         '\"body_bytes_sent\": \"$body_bytes_sent\", '\n         '\"http_x_forwarded_for\": \"$http_x_forwarded_for\", '\n         '\"http_user_agent\": \"$http_user_agent\"}';、\n    \n    access_log  /var/log/nginx/access.log  json;\n}\n```\n![image.png](/image/blog/elk16.png?raw=true)<br /> \n```yaml\nfilebeat.inputs:\n- type: log \n  paths:\n    - /var/log/nginx/access.log\n  tags: [\"access\"]\nfields:\n  app: www\n  type: ngxin-access\nfields_under_root: true\n- type: log \n  paths:\n    - /var/log/nginx/error.log\n  tags: [\"error\"]\nfields:\n  app: www\n  type: ngxin-error\nfields_under_root: true\n\noutput.redis:\n  hosts: [\"localhost:6379\"]\n  password: \"123456\"\n  key: \"filebeat\"\n  db: 0\n  timeout: 5\n  datatype: list\n```\n```json\ninput {\n    redis {\n        host => \"localhost\"\n        port => 6379\n        password => \"123456\"\n        db => \"0\"\n        data_type => \"list\"\n        key => \"filebeat\"\n    }\n}\n\nfilter {\n  if [app] == \"www\" {\n    if [type] == \"nginx-access\" {\n      json {\n          source => \"message\"\n          remove_field => [\"message\"]\n      }\n      geoip {\n          source => \"remote_addr\"\n          target => \"geoip\"\n          database => \"D:\\path\\ELK\\GeoLite2-City_20220503\\GeoLite2-City.mmdb\"\n          add_field => [\"[geoip][coordinates]\", \"%{[geoip][longitude]}\"] \n          add_field => [\"[geoip][coordinates]\", \"%{[geoip][latitude]}\"]\n      }\n      mutate {\n          convert => [\"[geoip][coordinates]\", \"float\"]  \n      }\n    }\n  }\n}\n\noutput {\n  elasticsearch {\n      hosts  => [\"http://localhost:9200\"]\n      index  => \"logstash-%{type}-%{+YYYY.MM.dd}\"\n  }\n  stdout{codec => rubydebug }\n}\n```\n![image.png](/image/blog/elk17.png?raw=true)\n\n# <br />\n\n## Java堆栈日志收集\n![image.png](/image/blog/elk18.png?raw=true)\n```yaml\nfilebeat.prospectors:\n- type: log\n  paths:\n    - /usr/local/tomcat/logs/catalina.out\n  tags: [\"tomcat\"]\n  fields:\n    app: www\n    type: tomcat-catalina\n  fields_under_root: true\n  multiline:\n    pattern: '^\\['\n    negate: true\n    match: after\n\noutput.redis:\n  hosts: [\"localhost:6379\"]\n  password: \"123456\"\n  key: \"filebeat\"\n  db: 0\n  datatype: list\n```\n\n## 定制日志格式收集\nngxin默认的 main 格式日志<br />![image.png](/image/blog/elk19.png?raw=true)<br />使用 Grok 进行匹配\n```json\ninput {\n    redis {\n        host => \"localhost\"\n        port => 6379\n        password => \"123456\"\n        db => \"0\"\n        data_type => \"list\"\n        key => \"filebeat\"\n    }\n}\n\nfilter {\n  if [app] == \"www\" {\n    if [type] == \"nginx-access\" {\n      grok {\n        match => {\n          \"message\" => \"%{IPV4:remote_addr} - (%{USERNAME:remote_user}|-) \\[%{HTTPDATE:time_local}\\] \\\"%{WORD:request_method} %{URIPATHPARAM:request_uri} HTTP/%{NUMBER:http_protocol}\\\" %{NUMBER:http_status} %{NUMBER:body_bytes_sent} \\\"%{GREEDYDATA:http_referer}\\\" \\\"%{GREEDYDATA:http_user_agent}\\\" \\\"(%{IPV4:http_x_forwarded_for}|-)\\\"\"\n        }\n        overwrite => [\"message\"]\n      }\n      geoip {\n          source => \"remote_addr\"\n          target => \"geoip\"\n          database => \"/opt/GeoLite2-City.mmdb\"\n          add_field => [\"[geoip][coordinates]\", \"%{[geoip][longitude]}\"] \n          add_field => [\"[geoip][coordinates]\", \"%{[geoip][latitude]}\"]\n      }\n      date {\n          locale => \"en\"\n          match => [\"time_local\", \"dd/MMM/yyyy:HH:mm:ss Z\"]\n      }\n      mutate {\n          convert => [\"[geoip][coordinates]\", \"float\"]  \n      }\n    }\n  }\n}\n\noutput {\n  elasticsearch {\n      hosts  => [\"http://lcoalhost:9200\"]\n      index  => \"logstash-%{type}-%{+YYYY.MM.dd}\"\n  }\n  stdout{codec => rubydebug }\n}\n```\n## Log4j收集\n\n```properties\n### 设置###\nlog4j.rootLogger = debug,stdout,D,E,logstash\n\n### 输出信息到控制抬 ###\nlog4j.appender.stdout = org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.Target = System.out\nlog4j.appender.stdout.layout = org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern = [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n\n\n### 输出DEBUG 级别以上的日志到=/Users/bee/Documents/elk/log4j/debug.log###\nlog4j.appender.D = org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.D.File = /Users/bee/Documents/elk/log4j/debug.log\nlog4j.appender.D.Append = true\nlog4j.appender.D.Threshold = DEBUG \nlog4j.appender.D.layout = org.apache.log4j.PatternLayout\nlog4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n\n\n### 输出ERROR 级别以上的日志到=/Users/bee/Documents/elk/log4j/error.log  ###\nlog4j.appender.E = org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.E.File =/Users/bee/Documents/elk/log4j/error.log \nlog4j.appender.E.Append = true\nlog4j.appender.E.Threshold = ERROR \nlog4j.appender.E.layout = org.apache.log4j.PatternLayout\nlog4j.appender.E.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n\n\n#输出日志到logstash\nlog4j.appender.logstash=org.apache.log4j.net.SocketAppender\nlog4j.appender.logstash.RemoteHost=127.0.0.1\nlog4j.appender.logstash.port=4560\nlog4j.appender.logstash.ReconnectionDelay=60000\nlog4j.appender.logstash.LocationInfo=true\n```\n\n1. 第一份输出到控制台\n1. 第二份把DEBUG 级别以上的日志到文件\n1. 第三份把输出ERROR 级别以上的日志到文件\n1. 第四份输出到logstash\n```json\ninput {\n    log4j {\n        host => \"127.0.0.1\"\n        port => 8001\n    }\n}\n\noutput {\n    elasticsearch{\n        hosts => [\"localhost:9200\"]\n        index => \"log4j-%{+YYYY.MM.dd}\"\n    }\n    stdout {\n      codec => rubydebug\n    }\n}\n```\n```java\nimport org.apache.log4j.Logger;\n/**\n * Created by bee on 17/3/6.\n */\npublic class Log4jTest {\n    public static final Logger logger=Logger.getLogger(Log4jTest.class);\n\n    public static void main(String[] args) {\n        logger.debug(\"This is a debug message!\");\n        logger.info(\"This is info message!\");\n        logger.warn(\"This is a warn message!\");\n        logger.error(\"This is error message!\");\n        try{\n           System.out.println(5/0);\n        }catch(Exception e){\n            logger.error(e);\n        }\n    }\n}\n```\n![](/image/blog/elk20.png?raw=true)\n\n\n## Kibana仪表盘可视化\n\n- PV/UV\n- 用户地理位置分布\n- URL，HTTP Status，IP TOP10\n\n![image.png](/image/blog/elk21.png?raw=true)\n","source":"_posts/elk.md","raw":"---\ntitle: ELK\ncategories:  原理分析\ntags:\n  - java\n  - ELK\nexcerpt: ELK\ndate: 2022-05-21 14:43:21\ncover: '/image/blog/12.png'\n---\n\n\n\n# Elasticsearch\n\n> 分布式、RESTful风格的搜索和分析\n>\n> \n\n**全文搜索引擎**<br />Google，百度类的网站搜索，它们都是根据网页中的关键字生成索引，我们在搜索的时候输入关键字，它们会将该关键字即索引匹配到的所有网页返回；还有常见的项目中应用日志的搜索等等。对于这些非结构化的数据文本，关系型数据库搜索不是能很好的支持。\n\n一般传统数据库，全文检索都实现的很鸡肋，因为一般也没人用数据库存文本字段。进行全文检索需要扫描整个表，如果数据量大的话即使对 SQL 的语法优化，也收效甚微。建立了索引，但是维护起来也很麻烦，对于 insert 和 update 操作都会重新构建索引。\n\n\n\n基于以上原因可以分析得出，在一些生产环境中，使用常规的搜索方式，性能是非常差的：\n\n搜索的数据对象是大量的非结构化的文本数据。<br />文件记录量达到数十万或数百万个甚至更多。<br />支持大量基于交互式文本的查询。<br />需求非常灵活的全文搜索查询。<br />对高度相关的搜索结果的有特殊需求，但是没有可用的关系数据库可以满足。<br />对不同记录类型、非文本数据操作或安全事务处理的需求相对较少的情况。为了解决结构化数据搜索和非结构化数据搜索性能问题，我们就需要专业，健壮，强大的全文搜索引擎 。\n\n**这里说到的全文搜索引擎指的是目前广泛应用的主流搜索引擎**。它的工作原理是计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。这个过程类似于通过字典中的检索字表查字的过程。<br />**Elasticsearch 应用案例**<br />GitHub: 2013 年初，抛弃了 Solr，采取 Elasticsearch 来做 PB 级的搜索。 “GitHub 使用Elasticsearch 搜索 20TB 的数据，包括 13 亿文件和 1300 亿行代码”。<br />维基百科：启动以 Elasticsearch 为基础的核心搜索架构<br />百度：目前广泛使用 Elasticsearch 作为文本数据分析，采集百度所有服务器上的各类指标数据及用户自定义数据，通过对各种数据进行多维分析展示，辅助定位分析实例异常或业务层面异常。目前覆盖百度内部 20 多个业务线（包括云分析、网盟、预测、文库、直达号、钱包、 风控等），单集群最大 100 台机器， 200 个 ES 节点，每天导入 30TB+数据。<br />新浪：使用 Elasticsearch 分析处理 32 亿条实时日志。<br />阿里：使用 Elasticsearch 构建日志采集和分析体系。<br />Stack Overflow：解决 Bug 问题的网站，全英文，编程人员交流的网站。<br />\n\n## Elasticsearch入门\n\n> [下载连接](https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0) [官方文档](https://www.elastic.co/guide/index.html) [postman](https://www.postman.com/downloads/)\n\n\nWindows 版的 Elasticsearch 压缩包，解压即安装完毕，解压后的 Elasticsearch 的目录结构如下 ：\n\n| **目录** | **含义** |\n| --- | --- |\n| bin | 可执行脚本目录 |\n| config | 配置目录 |\n| jdk | 内置 JDK 目录 |\n| lib | 类库 |\n| logs | 日志目录 |\n| modules | 模块目录 |\n| plugins | 插件目录 |\n\n解压后，进入 bin 文件目录，点击 elasticsearch.bat 文件启动 ES 服务 。\n\n注意： 9300 端口为 Elasticsearch 集群间组件的通信端口， 9200 端口为浏览器访问的 http协议 RESTful 端口。\n\n打开浏览器，输入地址： [http://localhost:9200](http://localhost:9200)，测试返回结果，返回结果如下：\n```java\n{\n  \"name\" : \"DESKTOP-LNJQ0VF\",\n  \"cluster_name\" : \"elasticsearch\",\n  \"cluster_uuid\" : \"nCZqBhfdT1-pw8Yas4QU9w\",\n  \"version\" : {\n    \"number\" : \"7.8.0\",\n    \"build_flavor\" : \"default\",\n    \"build_type\" : \"zip\",\n    \"build_hash\" : \"757314695644ea9a1dc2fecd26d1a43856725e65\",\n    \"build_date\" : \"2020-06-14T19:35:50.234439Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"8.5.1\",\n    \"minimum_wire_compatibility_version\" : \"6.8.0\",\n    \"minimum_index_compatibility_version\" : \"6.0.0-beta1\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\n\n```\n\nElasticsearch 是**面向文档型数据库**，一条数据在这里就是一个文档。 为了方便大家理解，我们将 Elasticsearch 里存储文档数据和关系型数据库 MySQL 存储数据的概念进行一个类比\n\n![image.png](/image/blog/image2.png)<br />ES 里的 Index 可以看做一个库，而 Types 相当于表， Documents 则相当于表的行。这里 Types 的概念已经被逐渐弱化， Elasticsearch 6.X 中，一个 index 下已经只能包含一个type， Elasticsearch 7.X 中, Type 的概念已经被删除了。\n\n## 索引-创建\n对比关系型数据库，创建索引就等同于创建数据库。<br />在 Postman 中，向 ES 服务器发 PUT 请求 ：** http://127.0.0.1:9200/shopping**<br />请求后，服务器返回响应：\n```java\n{\n    \"acknowledged\": true,//响应结果\n    \"shards_acknowledged\": true,//分片结果\n    \"index\": \"shopping\"//索引名称\n}\n\n```\n## 索引-查询 & 删除\n### 查看所有索引\n在 Postman 中，向 ES 服务器发 GET 请求 ： [http://127.0.0.1:9200/_cat/indices?v](http://127.0.0.1:9200/_cat/indices?v)\n\n这里请求路径中的_cat 表示查看的意思， indices 表示索引，所以整体含义就是查看当前 ES服务器中的所有索引，就好像 MySQL 中的 show tables 的感觉，服务器响应结果如下 :\n```java\nhealth status index    uuid                   pri rep docs.count docs.deleted store.size pri.store.size\nyellow open   shopping J0WlEhh4R7aDrfIc3AkwWQ   1   1          0            0       208b           208b\n```\n![image.png](/image/blog/image%20(1).png)\n\n### 查看单个索引\n GET 请求 ： http://127.0.0.1:9200/shopping<br />返回结果如下：\n\n```java\n{\n    \"shopping\": {//索引名\n        \"aliases\": {},//别名\n        \"mappings\": {},//映射\n        \"settings\": {//设置\n            \"index\": {//设置 - 索引\n                \"creation_date\": \"1617861426847\",//设置 - 索引 - 创建时间\n                \"number_of_shards\": \"1\",//设置 - 索引 - 主分片数量\n                \"number_of_replicas\": \"1\",//设置 - 索引 - 主分片数量\n                \"uuid\": \"J0WlEhh4R7aDrfIc3AkwWQ\",//设置 - 索引 - 主分片数量\n                \"version\": {//设置 - 索引 - 主分片数量\n                    \"created\": \"7080099\"\n                },\n                \"provided_name\": \"shopping\"//设置 - 索引 - 主分片数量\n            }\n        }\n    }\n}\n\n```\n### 删除索引\nDELETE 请求 ： http://127.0.0.1:9200/shopping<br />返回结果如下：\n```java\n{\n    \"acknowledged\": true\n}\n\n```\n再次查看所有索引，GET http://127.0.0.1:9200/_cat/indices?v，返回结果如下：\n```java\nhealth status index uuid pri rep docs.count docs.deleted store.size pri.store.size\n```\n成功删除。\n\n## 文档-创建（Put & Post）\nPOST 请求 ： http://127.0.0.1:9200/shopping/_doc，请求体JSON内容为：\n```java\n{\n    \"title\":\"小米手机\",\n    \"category\":\"小米\",\n    \"images\":\"http://www.gulixueyuan.com/xm.jpg\",\n    \"price\":3999.00\n}\n\n```\n注意，此处发送请求的方式必须为 POST，不能是 PUT，否则会发生错误 。<br />返回结果：\n```java\n{\n    \"_index\": \"shopping\",//索引\n    \"_type\": \"_doc\",//类型-文档\n    \"_id\": \"ANQqsHgBaKNfVnMbhZYU\",//唯一标识，可以类比为 MySQL 中的主键，随机生成\n    \"_version\": 1,//版本\n    \"result\": \"created\",//结果，这里的 create 表示创建成功\n    \"_shards\": {//\n        \"total\": 2,//分片 - 总数\n        \"successful\": 1,//分片 - 总数\n        \"failed\": 0//分片 - 总数\n    },\n    \"_seq_no\": 0,\n    \"_primary_term\": 1\n}\n\n```\n上面的数据创建后，由于没有指定数据唯一性标识（ID），默认情况下， ES 服务器会随机生成一个。<br />如果想要自定义唯一性标识，需要在创建时指定： http://127.0.0.1:9200/shopping/_doc/1，请求体JSON内容为：\n```java\n{\n    \"title\":\"小米手机\",\n    \"category\":\"小米\",\n    \"images\":\"http://www.gulixueyuan.com/xm.jpg\",\n    \"price\":3999.00\n}\n```\n返回结果如下：**此处需要注意：如果增加数据时明确数据主键，那么请求方式也可以为 PUT。**\n```java\n{\n    \"_index\": \"shopping\",\n    \"_type\": \"_doc\",\n    \"_id\": \"1\",//<------------------自定义唯一性标识\n    \"_version\": 1,\n    \"result\": \"created\",\n    \"_shards\": {\n        \"total\": 2,\n        \"successful\": 1,\n        \"failed\": 0\n    },\n    \"_seq_no\": 1,\n    \"_primary_term\": 1\n}\n```\n## 查询-主键查询 & 全查询\nGET 请求 ： http://127.0.0.1:9200/shopping/_doc/1 <br />返回结果如下：\n```java\n{\n    \"_index\": \"shopping\",\n    \"_type\": \"_doc\",\n    \"_id\": \"1\",\n    \"_version\": 1,\n    \"_seq_no\": 1,\n    \"_primary_term\": 1,\n    \"found\": true,\n    \"_source\": {\n        \"title\": \"小米手机\",\n        \"category\": \"小米\",\n        \"images\": \"http://www.gulixueyuan.com/xm.jpg\",\n        \"price\": 3999\n    }\n}\n```\n查找不存在的内容，向 ES 服务器发 GET 请求 ： http://127.0.0.1:9200/shopping/_doc/1001<br />返回结果如下：\n```java\n{\n    \"_index\": \"shopping\",\n    \"_type\": \"_doc\",\n    \"_id\": \"1001\",\n    \"found\": false\n}\n```\n查看索引下所有数据，向 ES 服务器发 GET 请求 ： http://127.0.0.1:9200/shopping/_search<br />返回结果如下：\n```java\n{\n    \"took\": 133,\n    \"timed_out\": false,\n    \"_shards\": {\n        \"total\": 1,\n        \"successful\": 1,\n        \"skipped\": 0,\n        \"failed\": 0\n    },\n    \"hits\": {\n        \"total\": {\n            \"value\": 2,\n            \"relation\": \"eq\"\n        },\n        \"max_score\": 1,\n        \"hits\": [\n            {\n                \"_index\": \"shopping\",\n                \"_type\": \"_doc\",\n                \"_id\": \"ANQqsHgBaKNfVnMbhZYU\",\n                \"_score\": 1,\n                \"_source\": {\n                    \"title\": \"小米手机\",\n                    \"category\": \"小米\",\n                    \"images\": \"http://www.gulixueyuan.com/xm.jpg\",\n                    \"price\": 3999\n                }\n            },\n            {\n                \"_index\": \"shopping\",\n                \"_type\": \"_doc\",\n                \"_id\": \"1\",\n                \"_score\": 1,\n                \"_source\": {\n                    \"title\": \"小米手机\",\n                    \"category\": \"小米\",\n                    \"images\": \"http://www.gulixueyuan.com/xm.jpg\",\n                    \"price\": 3999\n                }\n            }\n        ]\n    }\n}\n\n```\n## 全量修改 & 局部修改 & 删除\n### 全量修改\nPOST 请求 ： http://127.0.0.1:9200/shopping/_doc/1<br />请求体JSON内容为:\n```java\n{\n    \"title\":\"华为手机\",\n    \"category\":\"华为\",\n    \"images\":\"http://www.gulixueyuan.com/hw.jpg\",\n    \"price\":1999.00\n}\n```\n修改成功后，服务器响应结果：\n```java\n{\n    \"_index\": \"shopping\",\n    \"_type\": \"_doc\",\n    \"_id\": \"1\",\n    \"_version\": 2,\n    \"result\": \"updated\",//<-----------updated 表示数据被更新\n    \"_shards\": {\n        \"total\": 2,\n        \"successful\": 1,\n        \"failed\": 0\n    },\n    \"_seq_no\": 2,\n    \"_primary_term\": 1\n}\n```\n### 局部修改\nPOST 请求 ： http://127.0.0.1:9200/shopping/_update/1<br />请求体JSON内容为:\n```java\n{\n\t\"doc\": {\n\t\t\"title\":\"小米手机\",\n\t\t\"category\":\"小米\"\n\t}\n}\n```\n返回结果如下：\n```java\n{\n    \"_index\": \"shopping\",\n    \"_type\": \"_doc\",\n    \"_id\": \"1\",\n    \"_version\": 3,\n    \"result\": \"updated\",//<-----------updated 表示数据被更新\n    \"_shards\": {\n        \"total\": 2,\n        \"successful\": 1,\n        \"failed\": 0\n    },\n    \"_seq_no\": 3,\n    \"_primary_term\": 1\n}\n```\n GET请求 ： http://127.0.0.1:9200/shopping/_doc/1，查看修改内容：\n```java\n{\n    \"_index\": \"shopping\",\n    \"_type\": \"_doc\",\n    \"_id\": \"1\",\n    \"_version\": 3,\n    \"_seq_no\": 3,\n    \"_primary_term\": 1,\n    \"found\": true,\n    \"_source\": {\n        \"title\": \"小米手机\",\n        \"category\": \"小米\",\n        \"images\": \"http://www.gulixueyuan.com/hw.jpg\",\n        \"price\": 1999\n    }\n}\n```\n### 删除\nDELETE 请求 ： http://127.0.0.1:9200/shopping/_doc/1<br />返回结果：\n```java\n{\n    \"_index\": \"shopping\",\n    \"_type\": \"_doc\",\n    \"_id\": \"1\",\n    \"_version\": 4,\n    \"result\": \"deleted\",//<---删除成功\n    \"_shards\": {\n        \"total\": 2,\n        \"successful\": 1,\n        \"failed\": 0\n    },\n    \"_seq_no\": 4,\n    \"_primary_term\": 1\n}\n```\n向 ES 服务器发 GET请求 ： http://127.0.0.1:9200/shopping/_doc/1，查看是否删除成功：\n```java\n{\n    \"_index\": \"shopping\",\n    \"_type\": \"_doc\",\n    \"_id\": \"1\",\n    \"found\": false\n}\n```\n\n## 条件查询 & 分页查询 & 查询排序\n\n### 条件查询\nGET请求 ： http://127.0.0.1:9200/shopping/_search\n```java\n{\n    \"took\": 5,\n    \"timed_out\": false,\n    \"_shards\": {\n        \"total\": 1,\n        \"successful\": 1,\n        \"skipped\": 0,\n        \"failed\": 0\n    },\n    \"hits\": {\n        \"total\": {\n            \"value\": 6,\n            \"relation\": \"eq\"\n        },\n        \"max_score\": 1,\n        \"hits\": [\n            {\n                \"_index\": \"shopping\",\n                \"_type\": \"_doc\",\n                \"_id\": \"ANQqsHgBaKNfVnMbhZYU\",\n                \"_score\": 1,\n                \"_source\": {\n                    \"title\": \"小米手机\",\n                    \"category\": \"小米\",\n                    \"images\": \"http://www.gulixueyuan.com/xm.jpg\",\n                    \"price\": 3999\n                }\n            },\n            {\n                \"_index\": \"shopping\",\n                \"_type\": \"_doc\",\n                \"_id\": \"A9R5sHgBaKNfVnMb25Ya\",\n                \"_score\": 1,\n                \"_source\": {\n                    \"title\": \"小米手机\",\n                    \"category\": \"小米\",\n                    \"images\": \"http://www.gulixueyuan.com/xm.jpg\",\n                    \"price\": 1999\n                }\n            },\n            {\n                \"_index\": \"shopping\",\n                \"_type\": \"_doc\",\n                \"_id\": \"BNR5sHgBaKNfVnMb7pal\",\n                \"_score\": 1,\n                \"_source\": {\n                    \"title\": \"小米手机\",\n                    \"category\": \"小米\",\n                    \"images\": \"http://www.gulixueyuan.com/xm.jpg\",\n                    \"price\": 1999\n                }\n            },\n            {\n                \"_index\": \"shopping\",\n                \"_type\": \"_doc\",\n                \"_id\": \"BtR6sHgBaKNfVnMbX5Y5\",\n                \"_score\": 1,\n                \"_source\": {\n                    \"title\": \"华为手机\",\n                    \"category\": \"华为\",\n                    \"images\": \"http://www.gulixueyuan.com/xm.jpg\",\n                    \"price\": 1999\n                }\n            },\n            {\n                \"_index\": \"shopping\",\n                \"_type\": \"_doc\",\n                \"_id\": \"B9R6sHgBaKNfVnMbZpZ6\",\n                \"_score\": 1,\n                \"_source\": {\n                    \"title\": \"华为手机\",\n                    \"category\": \"华为\",\n                    \"images\": \"http://www.gulixueyuan.com/xm.jpg\",\n                    \"price\": 1999\n                }\n            },\n            {\n                \"_index\": \"shopping\",\n                \"_type\": \"_doc\",\n                \"_id\": \"CdR7sHgBaKNfVnMbsJb9\",\n                \"_score\": 1,\n                \"_source\": {\n                    \"title\": \"华为手机\",\n                    \"category\": \"华为\",\n                    \"images\": \"http://www.gulixueyuan.com/xm.jpg\",\n                    \"price\": 1999\n                }\n            }\n        ]\n    }\n}\n\n```\n#### URL带参查询\nGET请求 ： http://127.0.0.1:9200/shopping/_search?q=category:小米<br />返回结果如下：\n```java\n{\n    \"took\": 94,\n    \"timed_out\": false,\n    \"_shards\": {\n        \"total\": 1,\n        \"successful\": 1,\n        \"skipped\": 0,\n        \"failed\": 0\n    },\n    \"hits\": {\n        \"total\": {\n            \"value\": 3,\n            \"relation\": \"eq\"\n        },\n        \"max_score\": 1.3862942,\n        \"hits\": [\n            {\n                \"_index\": \"shopping\",\n                \"_type\": \"_doc\",\n                \"_id\": \"ANQqsHgBaKNfVnMbhZYU\",\n                \"_score\": 1.3862942,\n                \"_source\": {\n                    \"title\": \"小米手机\",\n                    \"category\": \"小米\",\n                    \"images\": \"http://www.gulixueyuan.com/xm.jpg\",\n                    \"price\": 3999\n                }\n            },\n            {\n                \"_index\": \"shopping\",\n                \"_type\": \"_doc\",\n                \"_id\": \"A9R5sHgBaKNfVnMb25Ya\",\n                \"_score\": 1.3862942,\n                \"_source\": {\n                    \"title\": \"小米手机\",\n                    \"category\": \"小米\",\n                    \"images\": \"http://www.gulixueyuan.com/xm.jpg\",\n                    \"price\": 1999\n                }\n            },\n            {\n                \"_index\": \"shopping\",\n                \"_type\": \"_doc\",\n                \"_id\": \"BNR5sHgBaKNfVnMb7pal\",\n                \"_score\": 1.3862942,\n                \"_source\": {\n                    \"title\": \"小米手机\",\n                    \"category\": \"小米\",\n                    \"images\": \"http://www.gulixueyuan.com/xm.jpg\",\n                    \"price\": 1999\n                }\n            }\n        ]\n    }\n}\n```\n#### 请求体带参查询\nGET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"query\":{\n\t\t\"match\":{\n\t\t\t\"category\":\"小米\"\n\t\t}\n\t}\n}\n```\n#### 带请求体方式的查找所有内容\n GET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"query\":{\n\t\t\"match_all\":{}\n\t}\n}\n```\n#### 查询指定字段\nGET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"query\":{\n\t\t\"match_all\":{}\n\t},\n\t\"_source\":[\"title\"]\n}\n```\n### 分页查询\nGET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"query\":{\n\t\t\"match_all\":{}\n\t},\n\t\"from\":0,\n\t\"size\":2\n}\n```\n### 查询排序\nGET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"query\":{\n\t\t\"match_all\":{}\n\t},\n\t\"sort\":{\n\t\t\"price\":{\n\t\t\t\"order\":\"desc\"\n\t\t}\n\t}\n}\n```\n\n\n## 多条件查询 & 范围查询\n\n### 多条件查询\n假设想找出小米牌子，价格为3999元的。（must相当于数据库的&&）<br />GET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"query\":{\n\t\t\"bool\":{\n\t\t\t\"must\":[{\n\t\t\t\t\"match\":{\n\t\t\t\t\t\"category\":\"小米\"\n\t\t\t\t}\n\t\t\t},{\n\t\t\t\t\"match\":{\n\t\t\t\t\t\"price\":3999.00\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t}\n}\n```\n假设想找出小米和华为的牌子。（should相当于数据库的||）<br />GET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"query\":{\n\t\t\"bool\":{\n\t\t\t\"should\":[{\n\t\t\t\t\"match\":{\n\t\t\t\t\t\"category\":\"小米\"\n\t\t\t\t}\n\t\t\t},{\n\t\t\t\t\"match\":{\n\t\t\t\t\t\"category\":\"华为\"\n\t\t\t\t}\n\t\t\t}]\n\t\t},\n        \"filter\":{\n            \"range\":{\n                \"price\":{\n                    \"gt\":2000\n                }\n            }\n        }\n\t}\n}\n```\n### 范围查询\n假设想找出小米和华为的牌子，价格大于2000元的手机。<br />GET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"query\":{\n\t\t\"bool\":{\n\t\t\t\"should\":[{\n\t\t\t\t\"match\":{\n\t\t\t\t\t\"category\":\"小米\"\n\t\t\t\t}\n\t\t\t},{\n\t\t\t\t\"match\":{\n\t\t\t\t\t\"category\":\"华为\"\n\t\t\t\t}\n\t\t\t}],\n            \"filter\":{\n            \t\"range\":{\n                \t\"price\":{\n                    \t\"gt\":2000\n                \t}\n\t            }\n    \t    }\n\t\t}\n\t}\n}\n```\n\n\n## 全文检索 & 完全匹配 & 高亮查询\n\n### 全文检索\n这功能像搜索引擎那样，如品牌输入“小华”，返回结果带回品牌有“小米”和华为的。<br />GET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"query\":{\n\t\t\"match\":{\n\t\t\t\"category\" : \"小华\"\n\t\t}\n\t}\n}\n```\n### 完全匹配\nGET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"query\":{\n\t\t\"match_phrase\":{\n\t\t\t\"category\" : \"为\"\n\t\t}\n\t}\n}\n```\n### 高亮查询\nGET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"query\":{\n\t\t\"match_phrase\":{\n\t\t\t\"category\" : \"为\"\n\t\t}\n\t},\n    \"highlight\":{\n        \"fields\":{\n            \"category\":{}//<----高亮这字段\n        }\n    }\n}\n```\n\n## 聚合查询\n\n聚合允许使用者对 es 文档进行统计分析，类似与关系型数据库中的 group by，当然还有很多其他的聚合，例如取最大值max、平均值avg等等。\n\n接下来按price字段进行分组：<br />GET请求 ： [http://127.0.0.1:9200/shopping/_search](http://127.0.0.1:9200/shopping/_search)，附带JSON体如下：\n```java\n{\n\t\"aggs\":{//聚合操作\n\t\t\"price_group\":{//名称，随意起名\n\t\t\t\"terms\":{//分组\n\t\t\t\t\"field\":\"price\"//分组字段\n\t\t\t}\n\t\t}\n\t}\n}\n```\n上面返回结果会附带原始数据的。若不想要不附带原始数据的结果，在 Postman 中，向 ES 服务器发 GET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"aggs\":{\n\t\t\"price_group\":{\n\t\t\t\"terms\":{\n\t\t\t\t\"field\":\"price\"\n\t\t\t}\n\t\t}\n\t},\n    \"size\":0\n}\n```\n若想对所有手机价格求**平均值**。<br />GET请求 ： http://127.0.0.1:9200/shopping/_search，附带JSON体如下：\n```java\n{\n\t\"aggs\":{\n\t\t\"price_avg\":{//名称，随意起名\n\t\t\t\"avg\":{//求平均\n\t\t\t\t\"field\":\"price\"\n\t\t\t}\n\t\t}\n\t},\n    \"size\":0\n}\n```\n## 映射关系\n有了索引库，等于有了数据库中的 database。\n\n接下来就需要建索引库(index)中的映射了，类似于数据库(database)中的表结构(table)。\n\n创建数据库表需要设置字段名称，类型，长度，约束等；索引库也一样，需要知道这个类型下有哪些字段，每个字段有哪些约束信息，这就叫做映射(mapping)。\n\n先创建一个索引：\n```java\n# PUT http://127.0.0.1:9200/user\n```\n**创建映射**\n```java\n# PUT http://127.0.0.1:9200/user/_mapping\n\n{\n    \"properties\": {\n        \"name\": {\n            \"type\": \"text\", // 允许分词\n            \"index\": true\n        },\n        \"sex\": {\n            \"type\": \"keyword\", // 关键字无法分开必须完全匹配\n            \"index\": true\n        },\n        \"tel\": {\n            \"type\": \"keyword\",\n            \"index\": false   // 不支持索引查询\n        }\n    }\n}\n```\n**查询映射**\n```java\n#GET http://127.0.0.1:9200/user/_mapping\n```\n返回结果如下：\n```java\n{\n    \"user\": {\n        \"mappings\": {\n            \"properties\": {\n                \"name\": {\n                    \"type\": \"text\"\n                },\n                \"sex\": {\n                    \"type\": \"keyword\"\n                },\n                \"tel\": {\n                    \"type\": \"keyword\",\n                    \"index\": false\n                }\n            }\n        }\n    }\n}\n```\n增加数据\n```java\n#PUT http://127.0.0.1:9200/user/_create/1001\n{\n\t\"name\":\"小米\",\n\t\"sex\":\"男的\",\n\t\"tel\":\"1111\"\n}\n```\n查找name含有”小“数据：\n```java\n#GET http://127.0.0.1:9200/user/_search\n{\n\t\"query\":{\n\t\t\"match\":{\n\t\t\t\"name\":\"小\"\n\t\t}\n\t}\n}\n```\n\n\n## JavaAPI\n添加依赖：\n```java\n<dependencies>\n    <dependency>\n        <groupId>org.elasticsearch</groupId>\n        <artifactId>elasticsearch</artifactId>\n        <version>7.8.0</version>\n    </dependency>\n    <!-- elasticsearch 的客户端 -->\n    <dependency>\n        <groupId>org.elasticsearch.client</groupId>\n        <artifactId>elasticsearch-rest-high-level-client</artifactId>\n        <version>7.8.0</version>\n    </dependency>\n    <!-- elasticsearch 依赖 2.x 的 log4j -->\n    <dependency>\n        <groupId>org.apache.logging.log4j</groupId>\n        <artifactId>log4j-api</artifactId>\n        <version>2.8.2</version>\n    </dependency>\n    <dependency>\n        <groupId>org.apache.logging.log4j</groupId>\n        <artifactId>log4j-core</artifactId>\n        <version>2.8.2</version>\n    </dependency>\n    <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-databind</artifactId>\n        <version>2.9.9</version>\n    </dependency>\n    <!-- junit 单元测试 -->\n    <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>4.12</version>\n    </dependency>\n</dependencies>\n```\nHelloElasticsearch\n```java\nimport java.io.IOException;\n\nimport org.apache.http.HttpHost;\nimport org.elasticsearch.client.RestClient;\nimport org.elasticsearch.client.RestHighLevelClient;\n\npublic class HelloElasticsearch {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\t// 创建客户端对象\n\t\tRestHighLevelClient client = new RestHighLevelClient(\n\t\t\t\tRestClient.builder(new HttpHost(\"localhost\", 9200, \"http\")));\n//\t\t...\n\t\tSystem.out.println(client);\n\n\t\t// 关闭客户端连接\n\t\tclient.close();\n\t}\n}\n```\n### JavaAPI-索引-创建\n```java\npublic class CreateIndex {\n\n    public static void main(String[] args) throws IOException {\n        // 创建客户端对象\n        RestHighLevelClient client = new RestHighLevelClient(\n                RestClient.builder(new HttpHost(\"localhost\", 9200, \"http\")));\n\n        // 创建索引 - 请求对象\n        CreateIndexRequest request = new CreateIndexRequest(\"user2\");\n        // 发送请求，获取响应\n        CreateIndexResponse response = client.indices().create(request,\n                RequestOptions.DEFAULT);\n        boolean acknowledged = response.isAcknowledged();\n        // 响应状态\n        System.out.println(\"操作状态 = \" + acknowledged);\n\n        // 关闭客户端连接\n        client.close();\n    }\n\n}\n```\n### JavaAPI-索引-查询 & 删除\n#### 查询\n```java\npublic class SearchIndex {\n    public static void main(String[] args) throws IOException {\n        // 创建客户端对象\n        RestHighLevelClient client = new RestHighLevelClient(\n                RestClient.builder(new HttpHost(\"localhost\", 9200, \"http\")));\n\n        // 查询索引 - 请求对象\n        GetIndexRequest request = new GetIndexRequest(\"user2\");\n        // 发送请求，获取响应\n        GetIndexResponse response = client.indices().get(request,\n                RequestOptions.DEFAULT);\n        \n        System.out.println(\"aliases:\"+response.getAliases());\n        System.out.println(\"mappings:\"+response.getMappings());\n        System.out.println(\"settings:\"+response.getSettings());\n\n        client.close();\n    }\n}\n```\n#### 删除\n```java\npublic class DeleteIndex {\n    public static void main(String[] args) throws IOException {\n        RestHighLevelClient client = new RestHighLevelClient(\n                RestClient.builder(new HttpHost(\"localhost\", 9200, \"http\")));\n        // 删除索引 - 请求对象\n        DeleteIndexRequest request = new DeleteIndexRequest(\"user2\");\n        // 发送请求，获取响应\n        AcknowledgedResponse response = client.indices().delete(request,RequestOptions.DEFAULT);\n        // 操作结果\n        System.out.println(\"操作结果 ： \" + response.isAcknowledged());\n        client.close();\n    }\n}\n```\n### JavaAPI-文档-新增 & 修改\n#### 重构\n上文由于频繁使用以下连接Elasticsearch和关闭它的代码，于是**个人**对它进行重构。\n```java\npublic class SomeClass {\n    public static void main(String[] args) throws IOException {\n        RestHighLevelClient client = new RestHighLevelClient(\n                RestClient.builder(new HttpHost(\"localhost\", 9200, \"http\")));\n\t\t\n        ...\n        \n        client.close();\n    }\n}\n```\n重构后的代码：\n```java\nimport org.elasticsearch.client.RestHighLevelClient;\n\npublic interface ElasticsearchTask {\n\n    void doSomething(RestHighLevelClient client) throws Exception;\n\n}\n\n```\n```java\npublic class ConnectElasticsearch{\n\n    public static void connect(ElasticsearchTask task){\n        // 创建客户端对象\n        RestHighLevelClient client = new RestHighLevelClient(\n                RestClient.builder(new HttpHost(\"localhost\", 9200, \"http\")));\n        try {\n            task.doSomething(client);\n            // 关闭客户端连接\n            client.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n接下来，如果想让Elasticsearch完成一些操作，就编写一个lambda式即可。\n```java\npublic class SomeClass {\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(client -> {\n\t\t\t//do something\n        });\n    }\n}\n```\n#### 新增\n```java\npublic class InsertDoc {\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(client -> {\n            // 新增文档 - 请求对象\n            IndexRequest request = new IndexRequest();\n            // 设置索引及唯一性标识\n            request.index(\"user\").id(\"1001\");\n\n            // 创建数据对象\n            User user = new User();\n            user.setName(\"zhangsan\");\n            user.setAge(30);\n            user.setSex(\"男\");\n\n            ObjectMapper objectMapper = new ObjectMapper();\n            String productJson = objectMapper.writeValueAsString(user);\n            // 添加文档数据，数据格式为 JSON 格式\n            request.source(productJson, XContentType.JSON);\n            // 客户端发送请求，获取响应对象\n            IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n            3.打印结果信息\n            System.out.println(\"_index:\" + response.getIndex());\n            System.out.println(\"_id:\" + response.getId());\n            System.out.println(\"_result:\" + response.getResult());\n        });\n    }\n}\n```\n#### 修改\n```java\npublic class UpdateDoc {\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(client -> {\n            // 修改文档 - 请求对象\n            UpdateRequest request = new UpdateRequest();\n            // 配置修改参数\n            request.index(\"user\").id(\"1001\");\n            // 设置请求体，对数据进行修改\n            request.doc(XContentType.JSON, \"sex\", \"女\");\n            // 客户端发送请求，获取响应对象\n            UpdateResponse response = client.update(request, RequestOptions.DEFAULT);\n            System.out.println(\"_index:\" + response.getIndex());\n            System.out.println(\"_id:\" + response.getId());\n            System.out.println(\"_result:\" + response.getResult());\n        });\n    }\n\n}\n```\n### JavaAPI-文档-查询 & 删除\n#### 查询\n\n```java\npublic class GetDoc {\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(client -> {\n            //1.创建请求对象\n            GetRequest request = new GetRequest().index(\"user\").id(\"1001\");\n            //2.客户端发送请求，获取响应对象\n            GetResponse response = client.get(request, RequestOptions.DEFAULT);\n            3.打印结果信息\n            System.out.println(\"_index:\" + response.getIndex());\n            System.out.println(\"_type:\" + response.getType());\n            System.out.println(\"_id:\" + response.getId());\n            System.out.println(\"source:\" + response.getSourceAsString());\n        });\n    }\n}\n```\n#### 删除\n```java\npublic class DeleteDoc {\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(client -> {\n            //创建请求对象\n            DeleteRequest request = new DeleteRequest().index(\"user\").id(\"1001\");\n            //客户端发送请求，获取响应对象\n            DeleteResponse response = client.delete(request, RequestOptions.DEFAULT);\n            //打印信息\n            System.out.println(response.toString());\n        });\n    }\n}\n```\n### JavaAPI-文档-批量新增 & 批量删除\n#### 批量新增\n```java\npublic class BatchInsertDoc {\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(client -> {\n            //创建批量新增请求对象\n            BulkRequest request = new BulkRequest();\n            request.add(new\n                    IndexRequest().index(\"user\").id(\"1001\").source(XContentType.JSON, \"name\",\n                    \"zhangsan\"));\n            request.add(new\n                    IndexRequest().index(\"user\").id(\"1002\").source(XContentType.JSON, \"name\",\n                            \"lisi\"));\n            request.add(new\n                    IndexRequest().index(\"user\").id(\"1003\").source(XContentType.JSON, \"name\",\n                    \"wangwu\"));\n            //客户端发送请求，获取响应对象\n            BulkResponse responses = client.bulk(request, RequestOptions.DEFAULT);\n            //打印结果信息\n            System.out.println(\"took:\" + responses.getTook());\n            System.out.println(\"items:\" + responses.getItems());\n        });\n    }\n}\n```\n#### 批量删除\n```java\npublic class BatchDeleteDoc {\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(client -> {\n            //创建批量删除请求对象\n            BulkRequest request = new BulkRequest();\n            request.add(new DeleteRequest().index(\"user\").id(\"1001\"));\n            request.add(new DeleteRequest().index(\"user\").id(\"1002\"));\n            request.add(new DeleteRequest().index(\"user\").id(\"1003\"));\n            //客户端发送请求，获取响应对象\n            BulkResponse responses = client.bulk(request, RequestOptions.DEFAULT);\n            //打印结果信息\n            System.out.println(\"took:\" + responses.getTook());\n            System.out.println(\"items:\" + responses.getItems());\n        });\n    }\n}\n```\n### JavaAPI-文档-高级查询-全量查询\n```java\npublic class BatchInsertDoc {\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(client -> {\n            //创建批量新增请求对象\n            BulkRequest request = new BulkRequest();\n            request.add(new IndexRequest().index(\"user\").id(\"1001\").source(XContentType.JSON, \"name\", \"zhangsan\", \"age\", \"10\", \"sex\",\"女\"));\n            request.add(new IndexRequest().index(\"user\").id(\"1002\").source(XContentType.JSON, \"name\", \"lisi\", \"age\", \"30\", \"sex\",\"女\"));\n            request.add(new IndexRequest().index(\"user\").id(\"1003\").source(XContentType.JSON, \"name\", \"wangwu1\", \"age\", \"40\", \"sex\",\"男\"));\n            request.add(new IndexRequest().index(\"user\").id(\"1004\").source(XContentType.JSON, \"name\", \"wangwu2\", \"age\", \"20\", \"sex\",\"女\"));\n            request.add(new IndexRequest().index(\"user\").id(\"1005\").source(XContentType.JSON, \"name\", \"wangwu3\", \"age\", \"50\", \"sex\",\"男\"));\n            request.add(new IndexRequest().index(\"user\").id(\"1006\").source(XContentType.JSON, \"name\", \"wangwu4\", \"age\", \"20\", \"sex\",\"男\"));\n            //客户端发送请求，获取响应对象\n            BulkResponse responses = client.bulk(request, RequestOptions.DEFAULT);\n            //打印结果信息\n            System.out.println(\"took:\" + responses.getTook());\n            System.out.println(\"items:\" + responses.getItems());\n        });\n    }\n}\n```\n**查询所有索引数据**\n```java\npublic class QueryDoc {\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(client -> {\n            // 创建搜索请求对象\n            SearchRequest request = new SearchRequest();\n            request.indices(\"user\");\n            // 构建查询的请求体\n            SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n            // 查询所有数据\n            sourceBuilder.query(QueryBuilders.matchAllQuery());\n            request.source(sourceBuilder);\n            SearchResponse response = client.search(request, RequestOptions.DEFAULT);\n            // 查询匹配\n            SearchHits hits = response.getHits();\n            System.out.println(\"took:\" + response.getTook());\n            System.out.println(\"timeout:\" + response.isTimedOut());\n            System.out.println(\"total:\" + hits.getTotalHits());\n            System.out.println(\"MaxScore:\" + hits.getMaxScore());\n            System.out.println(\"hits========>>\");\n            for (SearchHit hit : hits) {\n            //输出每条查询的结果信息\n                System.out.println(hit.getSourceAsString());\n            }\n            System.out.println(\"<<========\");\n        });\n    }\n\n}\n```\n### JavaAPI-文档-高级查询-分页查询 & 条件查询 & 查询排序\n#### 条件查询\n```java\npublic class QueryDoc {\n    \n\tpublic static final ElasticsearchTask SEARCH_BY_CONDITION = client -> {\n        // 创建搜索请求对象\n        SearchRequest request = new SearchRequest();\n        request.indices(\"user\");\n        // 构建查询的请求体\n        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n        sourceBuilder.query(QueryBuilders.termQuery(\"age\", \"30\"));\n        request.source(sourceBuilder);\n        SearchResponse response = client.search(request, RequestOptions.DEFAULT);\n        // 查询匹配\n        SearchHits hits = response.getHits();\n        System.out.println(\"took:\" + response.getTook());\n        System.out.println(\"timeout:\" + response.isTimedOut());\n        System.out.println(\"total:\" + hits.getTotalHits());\n        System.out.println(\"MaxScore:\" + hits.getMaxScore());\n        System.out.println(\"hits========>>\");\n        for (SearchHit hit : hits) {\n            //输出每条查询的结果信息\n            System.out.println(hit.getSourceAsString());\n        }\n        System.out.println(\"<<========\");\n    };\n    \n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(SEARCH_BY_CONDITION);\n    }\n}\n```\n#### 分页查询\n```java\npublic class QueryDoc {\n    \n\tpublic static final ElasticsearchTask SEARCH_BY_PAGING = client -> {\n        // 创建搜索请求对象\n        SearchRequest request = new SearchRequest();\n        request.indices(\"user\");\n        // 构建查询的请求体\n        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n        sourceBuilder.query(QueryBuilders.matchAllQuery());\n        // 分页查询\n        // 当前页其实索引(第一条数据的顺序号)， from\n        sourceBuilder.from(0);\n\n        // 每页显示多少条 size\n        sourceBuilder.size(2);\n        request.source(sourceBuilder);\n        SearchResponse response = client.search(request, RequestOptions.DEFAULT);\n        // 查询匹配\n        SearchHits hits = response.getHits();\n        System.out.println(\"took:\" + response.getTook());\n        System.out.println(\"timeout:\" + response.isTimedOut());\n        System.out.println(\"total:\" + hits.getTotalHits());\n        System.out.println(\"MaxScore:\" + hits.getMaxScore());\n        System.out.println(\"hits========>>\");\n        for (SearchHit hit : hits) {\n            //输出每条查询的结果信息\n            System.out.println(hit.getSourceAsString());\n        }\n        System.out.println(\"<<========\");\n    };\n    \n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(SEARCH_BY_CONDITION);\n    }\n\n}\n```\n#### 查询排序\n```java\npublic class QueryDoc {\n    \n\tpublic static final ElasticsearchTask SEARCH_WITH_ORDER = client -> {\n        // 创建搜索请求对象\n        SearchRequest request = new SearchRequest();\n        request.indices(\"user\");\n\n        // 构建查询的请求体\n        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n        sourceBuilder.query(QueryBuilders.matchAllQuery());\n        // 排序\n        sourceBuilder.sort(\"age\", SortOrder.ASC);\n        request.source(sourceBuilder);\n        SearchResponse response = client.search(request, RequestOptions.DEFAULT);\n        // 查询匹配\n        SearchHits hits = response.getHits();\n        System.out.println(\"took:\" + response.getTook());\n        System.out.println(\"timeout:\" + response.isTimedOut());\n        System.out.println(\"total:\" + hits.getTotalHits());\n        System.out.println(\"MaxScore:\" + hits.getMaxScore());\n        System.out.println(\"hits========>>\");\n        for (SearchHit hit : hits) {\n        //输出每条查询的结果信息\n            System.out.println(hit.getSourceAsString());\n        }\n        System.out.println(\"<<========\");\n    };\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(SEARCH_WITH_ORDER);\n    }\n\n}\n```\n### JavaAPI-文档-高级查询-组合查询 & 范围查询\n#### 组合查询\n```java\npublic class QueryDoc {\n    \n\tpublic static final ElasticsearchTask SEARCH_BY_BOOL_CONDITION = client -> {\n        // 创建搜索请求对象\n        SearchRequest request = new SearchRequest();\n        request.indices(\"user\");\n        // 构建查询的请求体\n        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        // 必须包含\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"age\", \"30\"));\n        // 一定不含\n        boolQueryBuilder.mustNot(QueryBuilders.matchQuery(\"name\", \"zhangsan\"));\n        // 可能包含\n        boolQueryBuilder.should(QueryBuilders.matchQuery(\"sex\", \"男\"));\n        sourceBuilder.query(boolQueryBuilder);\n        request.source(sourceBuilder);\n        SearchResponse response = client.search(request, RequestOptions.DEFAULT);\n        // 查询匹配\n        SearchHits hits = response.getHits();\n        System.out.println(\"took:\" + response.getTook());\n        System.out.println(\"timeout:\" + response.isTimedOut());\n        System.out.println(\"total:\" + hits.getTotalHits());\n        System.out.println(\"MaxScore:\" + hits.getMaxScore());\n        System.out.println(\"hits========>>\");\n        for (SearchHit hit : hits) {\n            //输出每条查询的结果信息\n            System.out.println(hit.getSourceAsString());\n        }\n        System.out.println(\"<<========\");\n\n    };\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(SEARCH_BY_BOOL_CONDITION);\n    }\n}\n```\n#### 范围查询\n```java\npublic class QueryDoc {\n    \n\tpublic static final ElasticsearchTask SEARCH_BY_RANGE = client -> {\n        // 创建搜索请求对象\n        SearchRequest request = new SearchRequest();\n        request.indices(\"user\");\n        // 构建查询的请求体\n        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n        RangeQueryBuilder rangeQuery = QueryBuilders.rangeQuery(\"age\");\n        // 大于等于\n        //rangeQuery.gte(\"30\");\n        // 小于等于\n        rangeQuery.lte(\"40\");\n        sourceBuilder.query(rangeQuery);\n        request.source(sourceBuilder);\n        SearchResponse response = client.search(request, RequestOptions.DEFAULT);\n        // 查询匹配\n        SearchHits hits = response.getHits();\n        System.out.println(\"took:\" + response.getTook());\n        System.out.println(\"timeout:\" + response.isTimedOut());\n        System.out.println(\"total:\" + hits.getTotalHits());\n        System.out.println(\"MaxScore:\" + hits.getMaxScore());\n        System.out.println(\"hits========>>\");\n        for (SearchHit hit : hits) {\n        //输出每条查询的结果信息\n            System.out.println(hit.getSourceAsString());\n        }\n        System.out.println(\"<<========\");\n    };\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(SEARCH_BY_RANGE);\n    }\n\n}\n```\n### JavaAPI-文档-高级查询-模糊查询 & 高亮查询\n#### 模糊查询\n```java\npublic class QueryDoc {\n    \n    public static final ElasticsearchTask SEARCH_BY_FUZZY_CONDITION = client -> {\n        // 创建搜索请求对象\n        SearchRequest request = new SearchRequest();\n        request.indices(\"user\");\n        // 构建查询的请求体\n        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n        sourceBuilder.query(QueryBuilders.fuzzyQuery(\"name\",\"wangwu\").fuzziness(Fuzziness.ONE));\n        request.source(sourceBuilder);\n        SearchResponse response = client.search(request, RequestOptions.DEFAULT);\n        // 查询匹配\n        SearchHits hits = response.getHits();\n        System.out.println(\"took:\" + response.getTook());\n        System.out.println(\"timeout:\" + response.isTimedOut());\n        System.out.println(\"total:\" + hits.getTotalHits());\n        System.out.println(\"MaxScore:\" + hits.getMaxScore());\n        System.out.println(\"hits========>>\");\n        for (SearchHit hit : hits) {\n            //输出每条查询的结果信息\n            System.out.println(hit.getSourceAsString());\n        }\n        System.out.println(\"<<========\");\n    };\n\n\n    public static void main(String[] args) {\n//        ConnectElasticsearch.connect(SEARCH_ALL);\n//        ConnectElasticsearch.connect(SEARCH_BY_CONDITION);\n//        ConnectElasticsearch.connect(SEARCH_BY_PAGING);\n//        ConnectElasticsearch.connect(SEARCH_WITH_ORDER);\n//        ConnectElasticsearch.connect(SEARCH_BY_BOOL_CONDITION);\n//        ConnectElasticsearch.connect(SEARCH_BY_RANGE);\n        ConnectElasticsearch.connect(SEARCH_BY_FUZZY_CONDITION);\n    }\n\n}\n```\n#### 高亮查询\n```java\npublic class QueryDoc {\n    \n    public static final ElasticsearchTask SEARCH_WITH_HIGHLIGHT = client -> {\n        // 高亮查询\n        SearchRequest request = new SearchRequest().indices(\"user\");\n        //2.创建查询请求体构建器\n        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n        //构建查询方式：高亮查询\n        TermsQueryBuilder termsQueryBuilder =\n                QueryBuilders.termsQuery(\"name\",\"zhangsan\");\n        //设置查询方式\n        sourceBuilder.query(termsQueryBuilder);\n        //构建高亮字段\n        HighlightBuilder highlightBuilder = new HighlightBuilder();\n        highlightBuilder.preTags(\"<font color='red'>\");//设置标签前缀\n        highlightBuilder.postTags(\"</font>\");//设置标签后缀\n        highlightBuilder.field(\"name\");//设置高亮字段\n        //设置高亮构建对象\n        sourceBuilder.highlighter(highlightBuilder);\n        //设置请求体\n        request.source(sourceBuilder);\n        //3.客户端发送请求，获取响应对象\n        SearchResponse response = client.search(request, RequestOptions.DEFAULT);\n        //4.打印响应结果\n        SearchHits hits = response.getHits();\n        System.out.println(\"took::\"+response.getTook());\n        System.out.println(\"time_out::\"+response.isTimedOut());\n        System.out.println(\"total::\"+hits.getTotalHits());\n        System.out.println(\"max_score::\"+hits.getMaxScore());\n        System.out.println(\"hits::::>>\");\n        for (SearchHit hit : hits) {\n            String sourceAsString = hit.getSourceAsString();\n            System.out.println(sourceAsString);\n            //打印高亮结果\n            Map<String, HighlightField> highlightFields = hit.getHighlightFields();\n            System.out.println(highlightFields);\n        }\n        System.out.println(\"<<::::\");\n    };\n\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(SEARCH_WITH_HIGHLIGHT);\n    }\n\n}\n```\n### JavaAPI-文档-高级查询-最大值查询 & 分组查询\n#### 最大值查询\n\n```java\npublic class QueryDoc {\n    \n    public static final ElasticsearchTask SEARCH_WITH_MAX = client -> {\n        // 高亮查询\n        SearchRequest request = new SearchRequest().indices(\"user\");\n        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n        sourceBuilder.aggregation(AggregationBuilders.max(\"maxAge\").field(\"age\"));\n        //设置请求体\n        request.source(sourceBuilder);\n        //3.客户端发送请求，获取响应对象\n        SearchResponse response = client.search(request, RequestOptions.DEFAULT);\n        //4.打印响应结果\n        SearchHits hits = response.getHits();\n        System.out.println(response);\n    };\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(SEARCH_WITH_MAX);\n    }\n\n}\n```\n#### 分组查询\n```java\npublic class QueryDoc {\n\n\tpublic static final ElasticsearchTask SEARCH_WITH_GROUP = client -> {\n        SearchRequest request = new SearchRequest().indices(\"user\");\n        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n        sourceBuilder.aggregation(AggregationBuilders.terms(\"age_groupby\").field(\"age\"));\n        //设置请求体\n        request.source(sourceBuilder);\n        //3.客户端发送请求，获取响应对象\n        SearchResponse response = client.search(request, RequestOptions.DEFAULT);\n        //4.打印响应结果\n        SearchHits hits = response.getHits();\n        System.out.println(response);\n    };\n\n    public static void main(String[] args) {\n        ConnectElasticsearch.connect(SEARCH_WITH_GROUP);\n    }\n\n}\n```\n\n\n# Elasticsearch环境\n**单机 & 集群**<br />单台 Elasticsearch 服务器提供服务，往往都有最大的负载能力，超过这个阈值，服务器<br />性能就会大大降低甚至不可用，所以生产环境中，一般都是运行在指定服务器集群中。<br />除了负载能力，单点服务器也存在其他问题：\n\n单台机器存储容量有限<br />单服务器容易出现单点故障，无法实现高可用<br />单服务的并发处理能力有限<br />配置服务器集群时，集群中节点数量没有限制，大于等于 2 个节点就可以看做是集群了。一<br />般出于高性能及高可用方面来考虑集群中节点数量都是 3 个以上\n\n总之，集群能提高性能，增加容错。\n\n**集群 Cluster**<br />一个集群就是由一个或多个服务器节点组织在一起，共同持有整个的数据，并一起提供索引和搜索功能。**一个 Elasticsearch 集群有一个唯一的名字标识，这个名字默认就是”elasticsearch”。这个名字是重要的，因为一个节点只能通过指定某个集群的名字，来加入这个集群。\n\n**节点 Node**<br />集群中包含很多服务器， 一个节点就是其中的一个服务器。 作为集群的一部分，它存储数据，参与集群的索引和搜索功能。\n\n一个节点也是由一个名字来标识的，默认情况下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网络中的哪些服务器对应于 Elasticsearch 集群中的哪些节点。\n\n一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫做“elasticsearch”的集群中，这意味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中。\n\n在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运<br />行任何 Elasticsearch 节点，这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的<br />集群。\n\n## Windows集群部署\n\n- 创建 elasticsearch-cluster 文件夹\n- 创建 elasticsearch-7.8.0-cluster 文件夹，在内部复制三个 elasticsearch 服务\n- 修改集群文件目录中每个节点的 config/elasticsearch.yml 配置文件\n- 如果有必要，删除每个节点中的 data 目录中所有内容\n\n![image.png](/image/blog/elk1.png?raw=true)\n\n![image.png](/image/blog/elk2.png?raw=true)![image.png](/image/blog/elk3.png?raw=true)\n\n**启动集群**<br />分别依次双击执行节点的bin/elasticsearch.bat, 启动节点服务器（可以编写一个脚本启动），启动后，会自动加入指定名称的集群。\n\n**测试集群**<br />用Postman，查看集群状态<br />GET [http://127.0.0.1:1001/_cluster/health](http://127.0.0.1:1001/_cluster/health)<br />GET [http://127.0.0.1:1002/_cluster/health](http://127.0.0.1:1002/_cluster/health)<br />GET [http://127.0.0.1:1003/_cluster/health](http://127.0.0.1:1003/_cluster/health)<br />[<br />](https://blog.csdn.net/u011863024/article/details/115721328)\n```java\n{\n    \"cluster_name\": \"my-application\",\n    \"status\": \"green\",\n    \"timed_out\": false,\n    \"number_of_nodes\": 3,\n    \"number_of_data_nodes\": 3,\n    \"active_primary_shards\": 0,\n    \"active_shards\": 0,\n    \"relocating_shards\": 0,\n    \"initializing_shards\": 0,\n    \"unassigned_shards\": 0,\n    \"delayed_unassigned_shards\": 0,\n    \"number_of_pending_tasks\": 0,\n    \"number_of_in_flight_fetch\": 0,\n    \"task_max_waiting_in_queue_millis\": 0,\n    \"active_shards_percent_as_number\": 100.0\n}\n```\n**status字段**指示着当前集群在总体上是否工作正常。它的三种颜色含义如下：\n\n1. green：所有的主分片和副本分片都正常运行\n1. yellow：所有的主分片都正常运行，但不是所有的副本分片都正常运行\n1. red：有主分片没能正常运行\n\n用Postman，在一节点增加索引，另一节点获取索引\n\n向集群中的node-1001节点增加索引：\n```java\n#PUT http://127.0.0.1:1001/user\n```\n向集群中的node-1003节点获取索引：\n```java\n#GET http://127.0.0.1:1003/user\n```\n如果在1003创建索引，同样在1001也能获取索引信息，这就是集群能力\n\n\n## 环境-Linux单节点部署\n\n> 下载软件 [链接](https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0)\n\n```java\n# 解压缩\ntar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz -C /opt/module\n\n# 改名\nmv elasticsearch-7.8.0 es\n\nuseradd es #新增 es 用户\n\npasswd es #为 es 用户设置密码\n\nuserdel -r es #如果错了，可以删除再加\n\nchown -R es:es /opt/module/es #文件夹所有者\n```\n修改/opt/module/es/config/elasticsearch.yml文件\n```java\n# 加入如下配置\ncluster.name: elasticsearch\nnode.name: node-1\nnetwork.host: 0.0.0.0\nhttp.port: 9200\ncluster.initial_master_nodes: [\"node-1\"]\n```\n修改/etc/security/limits.conf\n```java\n# 在文件末尾中增加下面内容\n# 每个进程可以打开的文件数的限制\nes soft nofile 65536\nes hard nofile 65536\n```\n修改/etc/security/limits.d/20-nproc.conf\n```java\n# 在文件末尾中增加下面内容\n# 每个进程可以打开的文件数的限制\nes soft nofile 65536\nes hard nofile 65536\n# 操作系统级别对每个用户创建的进程数的限制\n* hard nproc 4096\n# 注： * 带表 Linux 所有用户名称\n```\n修改/etc/sysctl.conf\n```java\n# 在文件中增加下面内容\n# 一个进程可以拥有的 VMA(虚拟内存区域)的数量,默认值为 65536\nvm.max_map_count=655360\n```\n重新加载\n```java\nsysctl -p\n\n# 使用 ES 用户启动\ncd /opt/module/es/\n    \n#启动\nbin/elasticsearch\n\n#后台启动\nbin/elasticsearch -d  \n\n```\n启动时，会动态生成文件，如果文件所属用户不匹配，会发生错误，需要重新进行修改用户和用户组\n\n![image.png](/image/blog/elk4.png?raw=true)\n```java\n#暂时关闭防火墙\nsystemctl stop firewalld\n#永久关闭防火墙\nsystemctl enable firewalld.service #打开防火墙永久性生效，重启后不会复原\nsystemctl disable firewalld.service #关闭防火墙，永久性生效，重启后不会复原\n```\n### 测试软件\n浏览器中输入地址： http://linux1:9200/<br />![image.png](/image/blog/elk5.png?raw=true)\n\n# Elasticsearch进阶\n\n\n# ELK Stack\n![image.png](/image/blog/elk6.png?raw=true)<br />Input:：输入，输出数据可以是stdin，File，TCP，Redis，Syslog等<br />Filter：过滤，将日志格式化，有丰富的过滤插件，Grok正则捕获，Date日期处理，JSON解码，Mutate数据修改<br />Output：输出，输出目标可以是Stdin，File，TCP，Redis，ES等\n# Elasticsearch-Head插件\n> [下载](https://github.com/mobz/elasticsearch-head/releases)\n\n```shell\nnpm install\nnpm run start\n#  http://localhost:9100/\n\n# 修改es的yml文件\nhttp.cors.enabled: true\nhttp.cors.allow-origin: \"*\"\n```\n\n# Logstash\n> [下载](https://elasticsearch.cn/download/#seg-3) \n\n```json\ninput {\n  beats {\n    port => 5044\n  }\n}\n\noutput {\n  elasticsearch {\n    hosts => [\"http://localhost:9200\"]\n    index => \"%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}\"\n  }\n}\n\n```\n```json\nlogstash -f logstash.conf\n```\n## Input插件\n\n```json\ninput {\n  stdin {\n    \n  }\n}\n\noutput {\n  stdout {\n    codec => rubydebug\n  }\n}\n```\n```json\ninput {\n  file {\n    path => \"/var/log/message\"\n    tages => \"123\"\n    type => \"syslog\"\n  }\n}\n \noutput {\n  stdout {\n    codec => rubydebug\n  }\n}\n```\n```json\ninput {\n  tcp {\n    port => 9200\n    type => \"nc\"\n  } \n}\n \noutput {\n  stdout {\n    codec => rubydebug\n  }\n}\n```\n```json\ninput {\n  beats {\n    port => 5044\n  }\n}\n\noutput {\n  stdout {\n    codec => rubydebug\n  }\n}\n```\n\n## Codec插件\n\n```json\ninput {\n  stdin {\n    codec => json {\n      charset => [\"UTF-8\"]\n    }\n  }\n}\n\noutput {\n  stdout {\n    codec => rubydebug\n  }\n}\n```\n```json\ninput {\n  stdin {\n    codec => multiline {\n      // 不是以字符开头的，合并到上一行 正则匹配\n      pattern => \"^\\s\"\n      // 合并到上一行还是下一行\n      what => \"previous\"\n    }\n  }\n}\n\noutput {\n  stdout {\n    codec => rubydebug\n  }\n}\n```\n\n## Filter\n```json\ninput {\n  stdin {\n   \n  }\n}\nfilter {\n  json {\n    // 解析字段\n    source => \"message\"\n    // 目标字段\n    target => \"content\"\n  }\n}\n\noutput {\n  stdout {\n    codec => rubydebug\n  }\n}\n```\n\n```json\ninput {\n  stdin {\n   \n  }\n}\nfilter {\n  kv {\n    // 根据 & 和 ? 拆分字符串\n    fleld_split => \"&?\" \n    // 使用正则表达式\n    fleld_split_pattern => \":+\"\n  }\n}\n\noutput {\n  stdout {\n    codec => rubydebug\n  }\n}\n```\n <br />![image.png](/image/blog/elk7.png?raw=true)\n> [GEOIP下载](https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-City&license_key=O38GA2SviPLnqfF5&suffix=tar.gz) [官网](https://www.maxmind.com/en/accounts/347303/geoip/downloads?show_all_dates=1) [校验文件下载](https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-City&license_key=O38GA2SviPLnqfF5&suffix=tar.gz.sha256)  [grok正则](http://grokdebug.herokuapp.com)\n\n```json\ninput {\n  stdin {\n   \n  }\n}\nfilter {\n  gork {\n    match => {\n      // 正则匹配消息 日志示例： 223.72.85.86 GET /index.html 15824 0.043\n      \"message\" => \"%{IP:client} %{WORD:method} %{URIPATHPARAM:request} %{NUMBER:bytes} %{NUMBER:duration}\"\n    }\n  }\n  geoip {\n    source => \"client\"\n    database => \"D:\\path\\ELK\\GeoLite2-City_20220503/GeoLite2-City.mmdb\"\n  }\n}\n\noutput {\n  stdout {\n    codec => rubydebug\n  }\n}\n\n// 自定义匹配方式\ngork {\n    // ID [0-9A-Z]{10,11}\n    patterns_dir => \"D:\\path\\ELK\\patterns\\id_dir\"\n    match => {\n      // 正则匹配消息 日志示例： 123124452A\n      \"message\" => \"%{ID:id}\"\n    }\n  }\n\n// 匹配多个\ngork {\n    // ID [0-9A-Z]{10,11}\n    patterns_dir => \"D:\\path\\ELK\\patterns\\id_dir\"\n    match => [\n      \"message\", \"%{IP:client} %{WORD:method}\",\n      \"message\", \"%{ID:id}\"\n    ]\n  }\n```\n![image.png](/image/blog/elk8.png?raw=true)![image.png](/image/blog/elk9.png?raw=true)<br />![image.png](/image/blog/elk10.png?raw=true)\n## Output插件\n```json\ninput {\n  file {\n    path => [\"/var/log/messages\"]\n    type => \"system\"\n    tags => [\"syslog\",\"test\"]\n    start_position => \"beginning\"\n  }\n  file {\n    path => [\"/var/log/audit/audit.log\"]\n    type => \"system\"\n    tags => [\"auth\",\"test\"]\n    start_position => \"beginning\"\n  }\n}\nfilter {\n \n}\n\noutput {\n  if [type] == \"system\" {\n    if [tages][0] == \"syslog\" {\n      elasticsearch {\n         hosts => [\"http://localhost:9200\"]\n         index => \"logstash-system-syslog-%{+YYYY.MM.dd}\"\n      }\n      stdout {\n         codec => rubydebug\n      }\n    }\n    else if [tages][0] == \"auth\" {\n       elasticsearch {\n         hosts => [\"http://localhost:9200\"]\n         index => \"logstash-system-auth-%{+YYYY.MM.dd}\"\n      }\n      stdout {\n         codec => rubydebug\n      }\n    }\n  }\n}\n```\n# Kibana\n```yaml\ni18n.locale: \"zh-CN\"\n```\n![image.png](/image/blog/elk11.png?raw=true)<br />使用nginx代理kibana\n\n```nginx\nhttp {\n  server {\n    listen 80;\n    server_name localhost;\n    \n    location / {\n      proxy_pass http://localhost:5601;\n      auth_basic \"请输入用户名和密码！\";\n      // 指定用户文件\n      auth_basic_user_file /mydata/nginx/conf/user.db;  \n      root html;\n      index index.html index.htm;\n    }\n    \n  }\n}\n```\n```shell\n# 生成密文密码\nopenssl passwd -crytp 123456\n```\n```nginx\n// 用户名：密码\nfxb: faHgR3X/qNehA\n```\n# Redis\n\n![image.png](/image/blog/elk12.png?raw=true)<br />   \n```json\ninput {\n  file {\n    path => [\"/var/log/messages\"]\n    type => \"system\"\n    tags => [\"syslog\",\"test\"]\n    start_position => \"beginning\"\n  }\n  file {\n    path => [\"/var/log/audit/audit.log\"]\n    type => \"system\"\n    tags => [\"auth\",\"test\"]\n    start_position => \"beginning\"\n  }\n}\n\nfilter {\n \n}\n\noutput {\n  redis {\n     host => [\"localhost:6379\"]\n     password => \"123456\"\n     db => \"0\"\n     data_type => \"list\"\n     key => \"logstash\"\n  }\n}\n```\n```json\ninput {\n  redis {\n    host => \"localhost\"\n    port => 6379\n    password => \"123456\"\n    db => \"0\"\n    data_type => \"list\"\n    key => \"logstash\"\n  }\n}\n\nfilter {\n  \n}\n\noutput {\n  if [type] == \"system\" {\n    if [tages][0] == \"syslog\" {\n      elasticsearch {\n        hosts => [\"http://localhost:9200\"]\n        index => \"logstash-system-syslog-%{+YYYY.MM.dd}\"\n      }\n      stdout {\n        codec => rubydebug\n      }\n    }\n    else if [tages][0] == \"auth\" {\n      elasticsearch {\n        hosts => [\"http://localhost:9200\"]\n        index => \"logstash-system-auth-%{+YYYY.MM.dd}\"\n      }\n      stdout {\n        codec => rubydebug\n      } \n    }\n  }\n}\n```\n\n# FileBeat\n![image.png](/image/blog/elk13.png?raw=true)\n> [相关说明](https://www.elastic.co/guide/en/beats/filebeat/7.7/configuration-filebeat-options.html)\n\n```yaml\nfilebeat.inputs:\n- type: log \n  paths:\n    - /var/log/system.log\n  tags: [\"syslog\"]\nfields:\n  type: system\nfields_under_root: true\n- type: log \n  paths:\n    - /var/log/auth.log\n  tags: [\"auth\"]\nfields:\n  type: system\nfields_under_root: true\n\noutput.redis:\n  hosts: [\"localhost:6379\"]\n  password: \"123456\"\n  key: \"filebeat\"\n  db: 0\n  timeout: 5\n  datatype: list\n```\n# 日志收集\n## Nginx日志收集\n![image.png](/image/blog/elk14.png?raw=true)![image.png](/image/blog/elk15.png?raw=true)\n```nginx\n# 日志\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\n# http块\nhttp {\n    # nginx默认格式  \n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    # 自定义格式\n    # 时间戳 + 远程地址 + 远程用户 + 请求时间 + 状态码 + 请求方法 + 内存大小 + 扩展头部 + 用户代理\n    log_format json '{ \"@timestamp\": \"$time_iso8601\", '\n         '\"remote_addr\": \"$remote_addr\", '\n         '\"remote_user\": \"$remote_user\", '\n         '\"request_time\": \"$request_time\", '\n         '\"status\": \"$status\", '\n         '\"request_uri\": \"$request_uri\", '\n         '\"request_method\": \"$request_method\", '\n         '\"http_referrer\": \"$http_referer\", '\n         '\"body_bytes_sent\": \"$body_bytes_sent\", '\n         '\"http_x_forwarded_for\": \"$http_x_forwarded_for\", '\n         '\"http_user_agent\": \"$http_user_agent\"}';、\n    \n    access_log  /var/log/nginx/access.log  json;\n}\n```\n![image.png](/image/blog/elk16.png?raw=true)<br /> \n```yaml\nfilebeat.inputs:\n- type: log \n  paths:\n    - /var/log/nginx/access.log\n  tags: [\"access\"]\nfields:\n  app: www\n  type: ngxin-access\nfields_under_root: true\n- type: log \n  paths:\n    - /var/log/nginx/error.log\n  tags: [\"error\"]\nfields:\n  app: www\n  type: ngxin-error\nfields_under_root: true\n\noutput.redis:\n  hosts: [\"localhost:6379\"]\n  password: \"123456\"\n  key: \"filebeat\"\n  db: 0\n  timeout: 5\n  datatype: list\n```\n```json\ninput {\n    redis {\n        host => \"localhost\"\n        port => 6379\n        password => \"123456\"\n        db => \"0\"\n        data_type => \"list\"\n        key => \"filebeat\"\n    }\n}\n\nfilter {\n  if [app] == \"www\" {\n    if [type] == \"nginx-access\" {\n      json {\n          source => \"message\"\n          remove_field => [\"message\"]\n      }\n      geoip {\n          source => \"remote_addr\"\n          target => \"geoip\"\n          database => \"D:\\path\\ELK\\GeoLite2-City_20220503\\GeoLite2-City.mmdb\"\n          add_field => [\"[geoip][coordinates]\", \"%{[geoip][longitude]}\"] \n          add_field => [\"[geoip][coordinates]\", \"%{[geoip][latitude]}\"]\n      }\n      mutate {\n          convert => [\"[geoip][coordinates]\", \"float\"]  \n      }\n    }\n  }\n}\n\noutput {\n  elasticsearch {\n      hosts  => [\"http://localhost:9200\"]\n      index  => \"logstash-%{type}-%{+YYYY.MM.dd}\"\n  }\n  stdout{codec => rubydebug }\n}\n```\n![image.png](/image/blog/elk17.png?raw=true)\n\n# <br />\n\n## Java堆栈日志收集\n![image.png](/image/blog/elk18.png?raw=true)\n```yaml\nfilebeat.prospectors:\n- type: log\n  paths:\n    - /usr/local/tomcat/logs/catalina.out\n  tags: [\"tomcat\"]\n  fields:\n    app: www\n    type: tomcat-catalina\n  fields_under_root: true\n  multiline:\n    pattern: '^\\['\n    negate: true\n    match: after\n\noutput.redis:\n  hosts: [\"localhost:6379\"]\n  password: \"123456\"\n  key: \"filebeat\"\n  db: 0\n  datatype: list\n```\n\n## 定制日志格式收集\nngxin默认的 main 格式日志<br />![image.png](/image/blog/elk19.png?raw=true)<br />使用 Grok 进行匹配\n```json\ninput {\n    redis {\n        host => \"localhost\"\n        port => 6379\n        password => \"123456\"\n        db => \"0\"\n        data_type => \"list\"\n        key => \"filebeat\"\n    }\n}\n\nfilter {\n  if [app] == \"www\" {\n    if [type] == \"nginx-access\" {\n      grok {\n        match => {\n          \"message\" => \"%{IPV4:remote_addr} - (%{USERNAME:remote_user}|-) \\[%{HTTPDATE:time_local}\\] \\\"%{WORD:request_method} %{URIPATHPARAM:request_uri} HTTP/%{NUMBER:http_protocol}\\\" %{NUMBER:http_status} %{NUMBER:body_bytes_sent} \\\"%{GREEDYDATA:http_referer}\\\" \\\"%{GREEDYDATA:http_user_agent}\\\" \\\"(%{IPV4:http_x_forwarded_for}|-)\\\"\"\n        }\n        overwrite => [\"message\"]\n      }\n      geoip {\n          source => \"remote_addr\"\n          target => \"geoip\"\n          database => \"/opt/GeoLite2-City.mmdb\"\n          add_field => [\"[geoip][coordinates]\", \"%{[geoip][longitude]}\"] \n          add_field => [\"[geoip][coordinates]\", \"%{[geoip][latitude]}\"]\n      }\n      date {\n          locale => \"en\"\n          match => [\"time_local\", \"dd/MMM/yyyy:HH:mm:ss Z\"]\n      }\n      mutate {\n          convert => [\"[geoip][coordinates]\", \"float\"]  \n      }\n    }\n  }\n}\n\noutput {\n  elasticsearch {\n      hosts  => [\"http://lcoalhost:9200\"]\n      index  => \"logstash-%{type}-%{+YYYY.MM.dd}\"\n  }\n  stdout{codec => rubydebug }\n}\n```\n## Log4j收集\n\n```properties\n### 设置###\nlog4j.rootLogger = debug,stdout,D,E,logstash\n\n### 输出信息到控制抬 ###\nlog4j.appender.stdout = org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.Target = System.out\nlog4j.appender.stdout.layout = org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern = [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n\n\n### 输出DEBUG 级别以上的日志到=/Users/bee/Documents/elk/log4j/debug.log###\nlog4j.appender.D = org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.D.File = /Users/bee/Documents/elk/log4j/debug.log\nlog4j.appender.D.Append = true\nlog4j.appender.D.Threshold = DEBUG \nlog4j.appender.D.layout = org.apache.log4j.PatternLayout\nlog4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n\n\n### 输出ERROR 级别以上的日志到=/Users/bee/Documents/elk/log4j/error.log  ###\nlog4j.appender.E = org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.E.File =/Users/bee/Documents/elk/log4j/error.log \nlog4j.appender.E.Append = true\nlog4j.appender.E.Threshold = ERROR \nlog4j.appender.E.layout = org.apache.log4j.PatternLayout\nlog4j.appender.E.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n\n\n#输出日志到logstash\nlog4j.appender.logstash=org.apache.log4j.net.SocketAppender\nlog4j.appender.logstash.RemoteHost=127.0.0.1\nlog4j.appender.logstash.port=4560\nlog4j.appender.logstash.ReconnectionDelay=60000\nlog4j.appender.logstash.LocationInfo=true\n```\n\n1. 第一份输出到控制台\n1. 第二份把DEBUG 级别以上的日志到文件\n1. 第三份把输出ERROR 级别以上的日志到文件\n1. 第四份输出到logstash\n```json\ninput {\n    log4j {\n        host => \"127.0.0.1\"\n        port => 8001\n    }\n}\n\noutput {\n    elasticsearch{\n        hosts => [\"localhost:9200\"]\n        index => \"log4j-%{+YYYY.MM.dd}\"\n    }\n    stdout {\n      codec => rubydebug\n    }\n}\n```\n```java\nimport org.apache.log4j.Logger;\n/**\n * Created by bee on 17/3/6.\n */\npublic class Log4jTest {\n    public static final Logger logger=Logger.getLogger(Log4jTest.class);\n\n    public static void main(String[] args) {\n        logger.debug(\"This is a debug message!\");\n        logger.info(\"This is info message!\");\n        logger.warn(\"This is a warn message!\");\n        logger.error(\"This is error message!\");\n        try{\n           System.out.println(5/0);\n        }catch(Exception e){\n            logger.error(e);\n        }\n    }\n}\n```\n![](/image/blog/elk20.png?raw=true)\n\n\n## Kibana仪表盘可视化\n\n- PV/UV\n- 用户地理位置分布\n- URL，HTTP Status，IP TOP10\n\n![image.png](/image/blog/elk21.png?raw=true)\n","slug":"elk","published":1,"updated":"2024-02-29T09:09:55.228Z","_id":"cl3fih3qa0039keuqajde8ayv","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Elasticsearch\"><a href=\"#Elasticsearch\" class=\"headerlink\" title=\"Elasticsearch\"></a>Elasticsearch</h1><blockquote>\n<p>分布式、RESTful风格的搜索和分析</p>\n</blockquote>\n<p><strong>全文搜索引擎</strong><br />Google，百度类的网站搜索，它们都是根据网页中的关键字生成索引，我们在搜索的时候输入关键字，它们会将该关键字即索引匹配到的所有网页返回；还有常见的项目中应用日志的搜索等等。对于这些非结构化的数据文本，关系型数据库搜索不是能很好的支持。</p>\n<p>一般传统数据库，全文检索都实现的很鸡肋，因为一般也没人用数据库存文本字段。进行全文检索需要扫描整个表，如果数据量大的话即使对 SQL 的语法优化，也收效甚微。建立了索引，但是维护起来也很麻烦，对于 insert 和 update 操作都会重新构建索引。</p>\n<p>基于以上原因可以分析得出，在一些生产环境中，使用常规的搜索方式，性能是非常差的：</p>\n<p>搜索的数据对象是大量的非结构化的文本数据。<br />文件记录量达到数十万或数百万个甚至更多。<br />支持大量基于交互式文本的查询。<br />需求非常灵活的全文搜索查询。<br />对高度相关的搜索结果的有特殊需求，但是没有可用的关系数据库可以满足。<br />对不同记录类型、非文本数据操作或安全事务处理的需求相对较少的情况。为了解决结构化数据搜索和非结构化数据搜索性能问题，我们就需要专业，健壮，强大的全文搜索引擎 。</p>\n<p><strong>这里说到的全文搜索引擎指的是目前广泛应用的主流搜索引擎</strong>。它的工作原理是计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。这个过程类似于通过字典中的检索字表查字的过程。<br /><strong>Elasticsearch 应用案例</strong><br />GitHub: 2013 年初，抛弃了 Solr，采取 Elasticsearch 来做 PB 级的搜索。 “GitHub 使用Elasticsearch 搜索 20TB 的数据，包括 13 亿文件和 1300 亿行代码”。<br />维基百科：启动以 Elasticsearch 为基础的核心搜索架构<br />百度：目前广泛使用 Elasticsearch 作为文本数据分析，采集百度所有服务器上的各类指标数据及用户自定义数据，通过对各种数据进行多维分析展示，辅助定位分析实例异常或业务层面异常。目前覆盖百度内部 20 多个业务线（包括云分析、网盟、预测、文库、直达号、钱包、 风控等），单集群最大 100 台机器， 200 个 ES 节点，每天导入 30TB+数据。<br />新浪：使用 Elasticsearch 分析处理 32 亿条实时日志。<br />阿里：使用 Elasticsearch 构建日志采集和分析体系。<br />Stack Overflow：解决 Bug 问题的网站，全英文，编程人员交流的网站。<br /></p>\n<h2 id=\"Elasticsearch入门\"><a href=\"#Elasticsearch入门\" class=\"headerlink\" title=\"Elasticsearch入门\"></a>Elasticsearch入门</h2><blockquote>\n<p><a href=\"https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0\">下载连接</a> <a href=\"https://www.elastic.co/guide/index.html\">官方文档</a> <a href=\"https://www.postman.com/downloads/\">postman</a></p>\n</blockquote>\n<p>Windows 版的 Elasticsearch 压缩包，解压即安装完毕，解压后的 Elasticsearch 的目录结构如下 ：</p>\n<table>\n<thead>\n<tr>\n<th><strong>目录</strong></th>\n<th><strong>含义</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bin</td>\n<td>可执行脚本目录</td>\n</tr>\n<tr>\n<td>config</td>\n<td>配置目录</td>\n</tr>\n<tr>\n<td>jdk</td>\n<td>内置 JDK 目录</td>\n</tr>\n<tr>\n<td>lib</td>\n<td>类库</td>\n</tr>\n<tr>\n<td>logs</td>\n<td>日志目录</td>\n</tr>\n<tr>\n<td>modules</td>\n<td>模块目录</td>\n</tr>\n<tr>\n<td>plugins</td>\n<td>插件目录</td>\n</tr>\n</tbody></table>\n<p>解压后，进入 bin 文件目录，点击 elasticsearch.bat 文件启动 ES 服务 。</p>\n<p>注意： 9300 端口为 Elasticsearch 集群间组件的通信端口， 9200 端口为浏览器访问的 http协议 RESTful 端口。</p>\n<p>打开浏览器，输入地址： <a href=\"http://localhost:9200/\">http://localhost:9200</a>，测试返回结果，返回结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>  <span class=\"hljs-string\">&quot;name&quot;</span> : <span class=\"hljs-string\">&quot;DESKTOP-LNJQ0VF&quot;</span>,<br>  <span class=\"hljs-string\">&quot;cluster_name&quot;</span> : <span class=\"hljs-string\">&quot;elasticsearch&quot;</span>,<br>  <span class=\"hljs-string\">&quot;cluster_uuid&quot;</span> : <span class=\"hljs-string\">&quot;nCZqBhfdT1-pw8Yas4QU9w&quot;</span>,<br>  <span class=\"hljs-string\">&quot;version&quot;</span> : &#123;<br>    <span class=\"hljs-string\">&quot;number&quot;</span> : <span class=\"hljs-string\">&quot;7.8.0&quot;</span>,<br>    <span class=\"hljs-string\">&quot;build_flavor&quot;</span> : <span class=\"hljs-string\">&quot;default&quot;</span>,<br>    <span class=\"hljs-string\">&quot;build_type&quot;</span> : <span class=\"hljs-string\">&quot;zip&quot;</span>,<br>    <span class=\"hljs-string\">&quot;build_hash&quot;</span> : <span class=\"hljs-string\">&quot;757314695644ea9a1dc2fecd26d1a43856725e65&quot;</span>,<br>    <span class=\"hljs-string\">&quot;build_date&quot;</span> : <span class=\"hljs-string\">&quot;2020-06-14T19:35:50.234439Z&quot;</span>,<br>    <span class=\"hljs-string\">&quot;build_snapshot&quot;</span> : <span class=\"hljs-keyword\">false</span>,<br>    <span class=\"hljs-string\">&quot;lucene_version&quot;</span> : <span class=\"hljs-string\">&quot;8.5.1&quot;</span>,<br>    <span class=\"hljs-string\">&quot;minimum_wire_compatibility_version&quot;</span> : <span class=\"hljs-string\">&quot;6.8.0&quot;</span>,<br>    <span class=\"hljs-string\">&quot;minimum_index_compatibility_version&quot;</span> : <span class=\"hljs-string\">&quot;6.0.0-beta1&quot;</span><br>  &#125;,<br>  <span class=\"hljs-string\">&quot;tagline&quot;</span> : <span class=\"hljs-string\">&quot;You Know, for Search&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>Elasticsearch 是<strong>面向文档型数据库</strong>，一条数据在这里就是一个文档。 为了方便大家理解，我们将 Elasticsearch 里存储文档数据和关系型数据库 MySQL 存储数据的概念进行一个类比</p>\n<p><img src=\"/image/blog/image2.png\" alt=\"image.png\"><br />ES 里的 Index 可以看做一个库，而 Types 相当于表， Documents 则相当于表的行。这里 Types 的概念已经被逐渐弱化， Elasticsearch 6.X 中，一个 index 下已经只能包含一个type， Elasticsearch 7.X 中, Type 的概念已经被删除了。</p>\n<h2 id=\"索引-创建\"><a href=\"#索引-创建\" class=\"headerlink\" title=\"索引-创建\"></a>索引-创建</h2><p>对比关系型数据库，创建索引就等同于创建数据库。<br />在 Postman 中，向 ES 服务器发 PUT 请求 ：** <a href=\"http://127.0.0.1:9200/shopping\">http://127.0.0.1:9200/shopping</a>**<br />请求后，服务器返回响应：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;acknowledged&quot;</span>: <span class=\"hljs-keyword\">true</span>,<span class=\"hljs-comment\">//响应结果</span><br>    <span class=\"hljs-string\">&quot;shards_acknowledged&quot;</span>: <span class=\"hljs-keyword\">true</span>,<span class=\"hljs-comment\">//分片结果</span><br>    <span class=\"hljs-string\">&quot;index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span><span class=\"hljs-comment\">//索引名称</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"索引-查询-amp-删除\"><a href=\"#索引-查询-amp-删除\" class=\"headerlink\" title=\"索引-查询 &amp; 删除\"></a>索引-查询 &amp; 删除</h2><h3 id=\"查看所有索引\"><a href=\"#查看所有索引\" class=\"headerlink\" title=\"查看所有索引\"></a>查看所有索引</h3><p>在 Postman 中，向 ES 服务器发 GET 请求 ： <a href=\"http://127.0.0.1:9200/_cat/indices?v\">http://127.0.0.1:9200/_cat/indices?v</a></p>\n<p>这里请求路径中的_cat 表示查看的意思， indices 表示索引，所以整体含义就是查看当前 ES服务器中的所有索引，就好像 MySQL 中的 show tables 的感觉，服务器响应结果如下 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">health status index    uuid                   pri rep docs.count docs.deleted store.size pri.store.size<br>yellow open   shopping J0WlEhh4R7aDrfIc3AkwWQ   <span class=\"hljs-number\">1</span>   <span class=\"hljs-number\">1</span>          <span class=\"hljs-number\">0</span>            <span class=\"hljs-number\">0</span>       208b           208b<br></code></pre></td></tr></table></figure>\n<p><img src=\"/image/blog/image%20(1).png\" alt=\"image.png\"></p>\n<h3 id=\"查看单个索引\"><a href=\"#查看单个索引\" class=\"headerlink\" title=\"查看单个索引\"></a>查看单个索引</h3><p> GET 请求 ： <a href=\"http://127.0.0.1:9200/shopping\">http://127.0.0.1:9200/shopping</a><br />返回结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;shopping&quot;</span>: &#123;<span class=\"hljs-comment\">//索引名</span><br>        <span class=\"hljs-string\">&quot;aliases&quot;</span>: &#123;&#125;,<span class=\"hljs-comment\">//别名</span><br>        <span class=\"hljs-string\">&quot;mappings&quot;</span>: &#123;&#125;,<span class=\"hljs-comment\">//映射</span><br>        <span class=\"hljs-string\">&quot;settings&quot;</span>: &#123;<span class=\"hljs-comment\">//设置</span><br>            <span class=\"hljs-string\">&quot;index&quot;</span>: &#123;<span class=\"hljs-comment\">//设置 - 索引</span><br>                <span class=\"hljs-string\">&quot;creation_date&quot;</span>: <span class=\"hljs-string\">&quot;1617861426847&quot;</span>,<span class=\"hljs-comment\">//设置 - 索引 - 创建时间</span><br>                <span class=\"hljs-string\">&quot;number_of_shards&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span>,<span class=\"hljs-comment\">//设置 - 索引 - 主分片数量</span><br>                <span class=\"hljs-string\">&quot;number_of_replicas&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span>,<span class=\"hljs-comment\">//设置 - 索引 - 主分片数量</span><br>                <span class=\"hljs-string\">&quot;uuid&quot;</span>: <span class=\"hljs-string\">&quot;J0WlEhh4R7aDrfIc3AkwWQ&quot;</span>,<span class=\"hljs-comment\">//设置 - 索引 - 主分片数量</span><br>                <span class=\"hljs-string\">&quot;version&quot;</span>: &#123;<span class=\"hljs-comment\">//设置 - 索引 - 主分片数量</span><br>                    <span class=\"hljs-string\">&quot;created&quot;</span>: <span class=\"hljs-string\">&quot;7080099&quot;</span><br>                &#125;,<br>                <span class=\"hljs-string\">&quot;provided_name&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span><span class=\"hljs-comment\">//设置 - 索引 - 主分片数量</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"删除索引\"><a href=\"#删除索引\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h3><p>DELETE 请求 ： <a href=\"http://127.0.0.1:9200/shopping\">http://127.0.0.1:9200/shopping</a><br />返回结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;acknowledged&quot;</span>: <span class=\"hljs-keyword\">true</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>再次查看所有索引，GET <a href=\"http://127.0.0.1:9200/_cat/indices?v%EF%BC%8C%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/_cat/indices?v，返回结果如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">health status index uuid pri rep docs.count docs.deleted store.size pri.store.size<br></code></pre></td></tr></table></figure>\n<p>成功删除。</p>\n<h2 id=\"文档-创建（Put-amp-Post）\"><a href=\"#文档-创建（Put-amp-Post）\" class=\"headerlink\" title=\"文档-创建（Put &amp; Post）\"></a>文档-创建（Put &amp; Post）</h2><p>POST 请求 ： <a href=\"http://127.0.0.1:9200/shopping/_doc%EF%BC%8C%E8%AF%B7%E6%B1%82%E4%BD%93JSON%E5%86%85%E5%AE%B9%E4%B8%BA%EF%BC%9A\">http://127.0.0.1:9200/shopping/_doc，请求体JSON内容为：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;title&quot;</span>:<span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>    <span class=\"hljs-string\">&quot;category&quot;</span>:<span class=\"hljs-string\">&quot;小米&quot;</span>,<br>    <span class=\"hljs-string\">&quot;images&quot;</span>:<span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>    <span class=\"hljs-string\">&quot;price&quot;</span>:<span class=\"hljs-number\">3999.00</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>注意，此处发送请求的方式必须为 POST，不能是 PUT，否则会发生错误 。<br />返回结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<span class=\"hljs-comment\">//索引</span><br>    <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<span class=\"hljs-comment\">//类型-文档</span><br>    <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;ANQqsHgBaKNfVnMbhZYU&quot;</span>,<span class=\"hljs-comment\">//唯一标识，可以类比为 MySQL 中的主键，随机生成</span><br>    <span class=\"hljs-string\">&quot;_version&quot;</span>: <span class=\"hljs-number\">1</span>,<span class=\"hljs-comment\">//版本</span><br>    <span class=\"hljs-string\">&quot;result&quot;</span>: <span class=\"hljs-string\">&quot;created&quot;</span>,<span class=\"hljs-comment\">//结果，这里的 create 表示创建成功</span><br>    <span class=\"hljs-string\">&quot;_shards&quot;</span>: &#123;<span class=\"hljs-comment\">//</span><br>        <span class=\"hljs-string\">&quot;total&quot;</span>: <span class=\"hljs-number\">2</span>,<span class=\"hljs-comment\">//分片 - 总数</span><br>        <span class=\"hljs-string\">&quot;successful&quot;</span>: <span class=\"hljs-number\">1</span>,<span class=\"hljs-comment\">//分片 - 总数</span><br>        <span class=\"hljs-string\">&quot;failed&quot;</span>: <span class=\"hljs-number\">0</span><span class=\"hljs-comment\">//分片 - 总数</span><br>    &#125;,<br>    <span class=\"hljs-string\">&quot;_seq_no&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;_primary_term&quot;</span>: <span class=\"hljs-number\">1</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>上面的数据创建后，由于没有指定数据唯一性标识（ID），默认情况下， ES 服务器会随机生成一个。<br />如果想要自定义唯一性标识，需要在创建时指定： <a href=\"http://127.0.0.1:9200/shopping/_doc/1%EF%BC%8C%E8%AF%B7%E6%B1%82%E4%BD%93JSON%E5%86%85%E5%AE%B9%E4%B8%BA%EF%BC%9A\">http://127.0.0.1:9200/shopping/_doc/1，请求体JSON内容为：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;title&quot;</span>:<span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>    <span class=\"hljs-string\">&quot;category&quot;</span>:<span class=\"hljs-string\">&quot;小米&quot;</span>,<br>    <span class=\"hljs-string\">&quot;images&quot;</span>:<span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>    <span class=\"hljs-string\">&quot;price&quot;</span>:<span class=\"hljs-number\">3999.00</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>返回结果如下：<strong>此处需要注意：如果增加数据时明确数据主键，那么请求方式也可以为 PUT。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span>,<span class=\"hljs-comment\">//&lt;------------------自定义唯一性标识</span><br>    <span class=\"hljs-string\">&quot;_version&quot;</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-string\">&quot;result&quot;</span>: <span class=\"hljs-string\">&quot;created&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_shards&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;total&quot;</span>: <span class=\"hljs-number\">2</span>,<br>        <span class=\"hljs-string\">&quot;successful&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;failed&quot;</span>: <span class=\"hljs-number\">0</span><br>    &#125;,<br>    <span class=\"hljs-string\">&quot;_seq_no&quot;</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-string\">&quot;_primary_term&quot;</span>: <span class=\"hljs-number\">1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"查询-主键查询-amp-全查询\"><a href=\"#查询-主键查询-amp-全查询\" class=\"headerlink\" title=\"查询-主键查询 &amp; 全查询\"></a>查询-主键查询 &amp; 全查询</h2><p>GET 请求 ： <a href=\"http://127.0.0.1:9200/shopping/_doc/1\">http://127.0.0.1:9200/shopping/_doc/1</a> <br />返回结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_version&quot;</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-string\">&quot;_seq_no&quot;</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-string\">&quot;_primary_term&quot;</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-string\">&quot;found&quot;</span>: <span class=\"hljs-keyword\">true</span>,<br>    <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>        <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;小米&quot;</span>,<br>        <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>        <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">3999</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>查找不存在的内容，向 ES 服务器发 GET 请求 ： <a href=\"http://127.0.0.1:9200/shopping/_doc/1001\">http://127.0.0.1:9200/shopping/_doc/1001</a><br />返回结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;1001&quot;</span>,<br>    <span class=\"hljs-string\">&quot;found&quot;</span>: <span class=\"hljs-keyword\">false</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>查看索引下所有数据，向 ES 服务器发 GET 请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search\">http://127.0.0.1:9200/shopping/_search</a><br />返回结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;took&quot;</span>: <span class=\"hljs-number\">133</span>,<br>    <span class=\"hljs-string\">&quot;timed_out&quot;</span>: <span class=\"hljs-keyword\">false</span>,<br>    <span class=\"hljs-string\">&quot;_shards&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;total&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;successful&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;skipped&quot;</span>: <span class=\"hljs-number\">0</span>,<br>        <span class=\"hljs-string\">&quot;failed&quot;</span>: <span class=\"hljs-number\">0</span><br>    &#125;,<br>    <span class=\"hljs-string\">&quot;hits&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;total&quot;</span>: &#123;<br>            <span class=\"hljs-string\">&quot;value&quot;</span>: <span class=\"hljs-number\">2</span>,<br>            <span class=\"hljs-string\">&quot;relation&quot;</span>: <span class=\"hljs-string\">&quot;eq&quot;</span><br>        &#125;,<br>        <span class=\"hljs-string\">&quot;max_score&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;hits&quot;</span>: [<br>            &#123;<br>                <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;ANQqsHgBaKNfVnMbhZYU&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_score&quot;</span>: <span class=\"hljs-number\">1</span>,<br>                <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;小米&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">3999</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_score&quot;</span>: <span class=\"hljs-number\">1</span>,<br>                <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;小米&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">3999</span><br>                &#125;<br>            &#125;<br>        ]<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"全量修改-amp-局部修改-amp-删除\"><a href=\"#全量修改-amp-局部修改-amp-删除\" class=\"headerlink\" title=\"全量修改 &amp; 局部修改 &amp; 删除\"></a>全量修改 &amp; 局部修改 &amp; 删除</h2><h3 id=\"全量修改\"><a href=\"#全量修改\" class=\"headerlink\" title=\"全量修改\"></a>全量修改</h3><p>POST 请求 ： <a href=\"http://127.0.0.1:9200/shopping/_doc/1\">http://127.0.0.1:9200/shopping/_doc/1</a><br />请求体JSON内容为:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;title&quot;</span>:<span class=\"hljs-string\">&quot;华为手机&quot;</span>,<br>    <span class=\"hljs-string\">&quot;category&quot;</span>:<span class=\"hljs-string\">&quot;华为&quot;</span>,<br>    <span class=\"hljs-string\">&quot;images&quot;</span>:<span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/hw.jpg&quot;</span>,<br>    <span class=\"hljs-string\">&quot;price&quot;</span>:<span class=\"hljs-number\">1999.00</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>修改成功后，服务器响应结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_version&quot;</span>: <span class=\"hljs-number\">2</span>,<br>    <span class=\"hljs-string\">&quot;result&quot;</span>: <span class=\"hljs-string\">&quot;updated&quot;</span>,<span class=\"hljs-comment\">//&lt;-----------updated 表示数据被更新</span><br>    <span class=\"hljs-string\">&quot;_shards&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;total&quot;</span>: <span class=\"hljs-number\">2</span>,<br>        <span class=\"hljs-string\">&quot;successful&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;failed&quot;</span>: <span class=\"hljs-number\">0</span><br>    &#125;,<br>    <span class=\"hljs-string\">&quot;_seq_no&quot;</span>: <span class=\"hljs-number\">2</span>,<br>    <span class=\"hljs-string\">&quot;_primary_term&quot;</span>: <span class=\"hljs-number\">1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"局部修改\"><a href=\"#局部修改\" class=\"headerlink\" title=\"局部修改\"></a>局部修改</h3><p>POST 请求 ： <a href=\"http://127.0.0.1:9200/shopping/_update/1\">http://127.0.0.1:9200/shopping/_update/1</a><br />请求体JSON内容为:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;doc&quot;</span>: &#123;<br>\t\t<span class=\"hljs-string\">&quot;title&quot;</span>:<span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>\t\t<span class=\"hljs-string\">&quot;category&quot;</span>:<span class=\"hljs-string\">&quot;小米&quot;</span><br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>返回结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_version&quot;</span>: <span class=\"hljs-number\">3</span>,<br>    <span class=\"hljs-string\">&quot;result&quot;</span>: <span class=\"hljs-string\">&quot;updated&quot;</span>,<span class=\"hljs-comment\">//&lt;-----------updated 表示数据被更新</span><br>    <span class=\"hljs-string\">&quot;_shards&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;total&quot;</span>: <span class=\"hljs-number\">2</span>,<br>        <span class=\"hljs-string\">&quot;successful&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;failed&quot;</span>: <span class=\"hljs-number\">0</span><br>    &#125;,<br>    <span class=\"hljs-string\">&quot;_seq_no&quot;</span>: <span class=\"hljs-number\">3</span>,<br>    <span class=\"hljs-string\">&quot;_primary_term&quot;</span>: <span class=\"hljs-number\">1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p> GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_doc/1%EF%BC%8C%E6%9F%A5%E7%9C%8B%E4%BF%AE%E6%94%B9%E5%86%85%E5%AE%B9%EF%BC%9A\">http://127.0.0.1:9200/shopping/_doc/1，查看修改内容：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_version&quot;</span>: <span class=\"hljs-number\">3</span>,<br>    <span class=\"hljs-string\">&quot;_seq_no&quot;</span>: <span class=\"hljs-number\">3</span>,<br>    <span class=\"hljs-string\">&quot;_primary_term&quot;</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-string\">&quot;found&quot;</span>: <span class=\"hljs-keyword\">true</span>,<br>    <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>        <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;小米&quot;</span>,<br>        <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/hw.jpg&quot;</span>,<br>        <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">1999</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>DELETE 请求 ： <a href=\"http://127.0.0.1:9200/shopping/_doc/1\">http://127.0.0.1:9200/shopping/_doc/1</a><br />返回结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_version&quot;</span>: <span class=\"hljs-number\">4</span>,<br>    <span class=\"hljs-string\">&quot;result&quot;</span>: <span class=\"hljs-string\">&quot;deleted&quot;</span>,<span class=\"hljs-comment\">//&lt;---删除成功</span><br>    <span class=\"hljs-string\">&quot;_shards&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;total&quot;</span>: <span class=\"hljs-number\">2</span>,<br>        <span class=\"hljs-string\">&quot;successful&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;failed&quot;</span>: <span class=\"hljs-number\">0</span><br>    &#125;,<br>    <span class=\"hljs-string\">&quot;_seq_no&quot;</span>: <span class=\"hljs-number\">4</span>,<br>    <span class=\"hljs-string\">&quot;_primary_term&quot;</span>: <span class=\"hljs-number\">1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>向 ES 服务器发 GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_doc/1%EF%BC%8C%E6%9F%A5%E7%9C%8B%E6%98%AF%E5%90%A6%E5%88%A0%E9%99%A4%E6%88%90%E5%8A%9F%EF%BC%9A\">http://127.0.0.1:9200/shopping/_doc/1，查看是否删除成功：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span>,<br>    <span class=\"hljs-string\">&quot;found&quot;</span>: <span class=\"hljs-keyword\">false</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"条件查询-amp-分页查询-amp-查询排序\"><a href=\"#条件查询-amp-分页查询-amp-查询排序\" class=\"headerlink\" title=\"条件查询 &amp; 分页查询 &amp; 查询排序\"></a>条件查询 &amp; 分页查询 &amp; 查询排序</h2><h3 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h3><p>GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search\">http://127.0.0.1:9200/shopping/_search</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;took&quot;</span>: <span class=\"hljs-number\">5</span>,<br>    <span class=\"hljs-string\">&quot;timed_out&quot;</span>: <span class=\"hljs-keyword\">false</span>,<br>    <span class=\"hljs-string\">&quot;_shards&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;total&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;successful&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;skipped&quot;</span>: <span class=\"hljs-number\">0</span>,<br>        <span class=\"hljs-string\">&quot;failed&quot;</span>: <span class=\"hljs-number\">0</span><br>    &#125;,<br>    <span class=\"hljs-string\">&quot;hits&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;total&quot;</span>: &#123;<br>            <span class=\"hljs-string\">&quot;value&quot;</span>: <span class=\"hljs-number\">6</span>,<br>            <span class=\"hljs-string\">&quot;relation&quot;</span>: <span class=\"hljs-string\">&quot;eq&quot;</span><br>        &#125;,<br>        <span class=\"hljs-string\">&quot;max_score&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;hits&quot;</span>: [<br>            &#123;<br>                <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;ANQqsHgBaKNfVnMbhZYU&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_score&quot;</span>: <span class=\"hljs-number\">1</span>,<br>                <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;小米&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">3999</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;A9R5sHgBaKNfVnMb25Ya&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_score&quot;</span>: <span class=\"hljs-number\">1</span>,<br>                <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;小米&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">1999</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;BNR5sHgBaKNfVnMb7pal&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_score&quot;</span>: <span class=\"hljs-number\">1</span>,<br>                <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;小米&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">1999</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;BtR6sHgBaKNfVnMbX5Y5&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_score&quot;</span>: <span class=\"hljs-number\">1</span>,<br>                <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;华为手机&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;华为&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">1999</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;B9R6sHgBaKNfVnMbZpZ6&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_score&quot;</span>: <span class=\"hljs-number\">1</span>,<br>                <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;华为手机&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;华为&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">1999</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;CdR7sHgBaKNfVnMbsJb9&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_score&quot;</span>: <span class=\"hljs-number\">1</span>,<br>                <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;华为手机&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;华为&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">1999</span><br>                &#125;<br>            &#125;<br>        ]<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h4 id=\"URL带参查询\"><a href=\"#URL带参查询\" class=\"headerlink\" title=\"URL带参查询\"></a>URL带参查询</h4><p>GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search?q=category:%E5%B0%8F%E7%B1%B3\">http://127.0.0.1:9200/shopping/_search?q=category:小米</a><br />返回结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;took&quot;</span>: <span class=\"hljs-number\">94</span>,<br>    <span class=\"hljs-string\">&quot;timed_out&quot;</span>: <span class=\"hljs-keyword\">false</span>,<br>    <span class=\"hljs-string\">&quot;_shards&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;total&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;successful&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;skipped&quot;</span>: <span class=\"hljs-number\">0</span>,<br>        <span class=\"hljs-string\">&quot;failed&quot;</span>: <span class=\"hljs-number\">0</span><br>    &#125;,<br>    <span class=\"hljs-string\">&quot;hits&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;total&quot;</span>: &#123;<br>            <span class=\"hljs-string\">&quot;value&quot;</span>: <span class=\"hljs-number\">3</span>,<br>            <span class=\"hljs-string\">&quot;relation&quot;</span>: <span class=\"hljs-string\">&quot;eq&quot;</span><br>        &#125;,<br>        <span class=\"hljs-string\">&quot;max_score&quot;</span>: <span class=\"hljs-number\">1.3862942</span>,<br>        <span class=\"hljs-string\">&quot;hits&quot;</span>: [<br>            &#123;<br>                <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;ANQqsHgBaKNfVnMbhZYU&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_score&quot;</span>: <span class=\"hljs-number\">1.3862942</span>,<br>                <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;小米&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">3999</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;A9R5sHgBaKNfVnMb25Ya&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_score&quot;</span>: <span class=\"hljs-number\">1.3862942</span>,<br>                <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;小米&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">1999</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;BNR5sHgBaKNfVnMb7pal&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_score&quot;</span>: <span class=\"hljs-number\">1.3862942</span>,<br>                <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;小米&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">1999</span><br>                &#125;<br>            &#125;<br>        ]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"请求体带参查询\"><a href=\"#请求体带参查询\" class=\"headerlink\" title=\"请求体带参查询\"></a>请求体带参查询</h4><p>GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;query&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;match&quot;</span>:&#123;<br>\t\t\t<span class=\"hljs-string\">&quot;category&quot;</span>:<span class=\"hljs-string\">&quot;小米&quot;</span><br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"带请求体方式的查找所有内容\"><a href=\"#带请求体方式的查找所有内容\" class=\"headerlink\" title=\"带请求体方式的查找所有内容\"></a>带请求体方式的查找所有内容</h4><p> GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;query&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;match_all&quot;</span>:&#123;&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"查询指定字段\"><a href=\"#查询指定字段\" class=\"headerlink\" title=\"查询指定字段\"></a>查询指定字段</h4><p>GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;query&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;match_all&quot;</span>:&#123;&#125;<br>\t&#125;,<br>\t<span class=\"hljs-string\">&quot;_source&quot;</span>:[<span class=\"hljs-string\">&quot;title&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h3><p>GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;query&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;match_all&quot;</span>:&#123;&#125;<br>\t&#125;,<br>\t<span class=\"hljs-string\">&quot;from&quot;</span>:<span class=\"hljs-number\">0</span>,<br>\t<span class=\"hljs-string\">&quot;size&quot;</span>:<span class=\"hljs-number\">2</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"查询排序\"><a href=\"#查询排序\" class=\"headerlink\" title=\"查询排序\"></a>查询排序</h3><p>GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;query&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;match_all&quot;</span>:&#123;&#125;<br>\t&#125;,<br>\t<span class=\"hljs-string\">&quot;sort&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;price&quot;</span>:&#123;<br>\t\t\t<span class=\"hljs-string\">&quot;order&quot;</span>:<span class=\"hljs-string\">&quot;desc&quot;</span><br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"多条件查询-amp-范围查询\"><a href=\"#多条件查询-amp-范围查询\" class=\"headerlink\" title=\"多条件查询 &amp; 范围查询\"></a>多条件查询 &amp; 范围查询</h2><h3 id=\"多条件查询\"><a href=\"#多条件查询\" class=\"headerlink\" title=\"多条件查询\"></a>多条件查询</h3><p>假设想找出小米牌子，价格为3999元的。（must相当于数据库的&amp;&amp;）<br />GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;query&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;bool&quot;</span>:&#123;<br>\t\t\t<span class=\"hljs-string\">&quot;must&quot;</span>:[&#123;<br>\t\t\t\t<span class=\"hljs-string\">&quot;match&quot;</span>:&#123;<br>\t\t\t\t\t<span class=\"hljs-string\">&quot;category&quot;</span>:<span class=\"hljs-string\">&quot;小米&quot;</span><br>\t\t\t\t&#125;<br>\t\t\t&#125;,&#123;<br>\t\t\t\t<span class=\"hljs-string\">&quot;match&quot;</span>:&#123;<br>\t\t\t\t\t<span class=\"hljs-string\">&quot;price&quot;</span>:<span class=\"hljs-number\">3999.00</span><br>\t\t\t\t&#125;<br>\t\t\t&#125;]<br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>假设想找出小米和华为的牌子。（should相当于数据库的||）<br />GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;query&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;bool&quot;</span>:&#123;<br>\t\t\t<span class=\"hljs-string\">&quot;should&quot;</span>:[&#123;<br>\t\t\t\t<span class=\"hljs-string\">&quot;match&quot;</span>:&#123;<br>\t\t\t\t\t<span class=\"hljs-string\">&quot;category&quot;</span>:<span class=\"hljs-string\">&quot;小米&quot;</span><br>\t\t\t\t&#125;<br>\t\t\t&#125;,&#123;<br>\t\t\t\t<span class=\"hljs-string\">&quot;match&quot;</span>:&#123;<br>\t\t\t\t\t<span class=\"hljs-string\">&quot;category&quot;</span>:<span class=\"hljs-string\">&quot;华为&quot;</span><br>\t\t\t\t&#125;<br>\t\t\t&#125;]<br>\t\t&#125;,<br>        <span class=\"hljs-string\">&quot;filter&quot;</span>:&#123;<br>            <span class=\"hljs-string\">&quot;range&quot;</span>:&#123;<br>                <span class=\"hljs-string\">&quot;price&quot;</span>:&#123;<br>                    <span class=\"hljs-string\">&quot;gt&quot;</span>:<span class=\"hljs-number\">2000</span><br>                &#125;<br>            &#125;<br>        &#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"范围查询\"><a href=\"#范围查询\" class=\"headerlink\" title=\"范围查询\"></a>范围查询</h3><p>假设想找出小米和华为的牌子，价格大于2000元的手机。<br />GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;query&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;bool&quot;</span>:&#123;<br>\t\t\t<span class=\"hljs-string\">&quot;should&quot;</span>:[&#123;<br>\t\t\t\t<span class=\"hljs-string\">&quot;match&quot;</span>:&#123;<br>\t\t\t\t\t<span class=\"hljs-string\">&quot;category&quot;</span>:<span class=\"hljs-string\">&quot;小米&quot;</span><br>\t\t\t\t&#125;<br>\t\t\t&#125;,&#123;<br>\t\t\t\t<span class=\"hljs-string\">&quot;match&quot;</span>:&#123;<br>\t\t\t\t\t<span class=\"hljs-string\">&quot;category&quot;</span>:<span class=\"hljs-string\">&quot;华为&quot;</span><br>\t\t\t\t&#125;<br>\t\t\t&#125;],<br>            <span class=\"hljs-string\">&quot;filter&quot;</span>:&#123;<br>            \t<span class=\"hljs-string\">&quot;range&quot;</span>:&#123;<br>                \t<span class=\"hljs-string\">&quot;price&quot;</span>:&#123;<br>                    \t<span class=\"hljs-string\">&quot;gt&quot;</span>:<span class=\"hljs-number\">2000</span><br>                \t&#125;<br>\t            &#125;<br>    \t    &#125;<br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"全文检索-amp-完全匹配-amp-高亮查询\"><a href=\"#全文检索-amp-完全匹配-amp-高亮查询\" class=\"headerlink\" title=\"全文检索 &amp; 完全匹配 &amp; 高亮查询\"></a>全文检索 &amp; 完全匹配 &amp; 高亮查询</h2><h3 id=\"全文检索\"><a href=\"#全文检索\" class=\"headerlink\" title=\"全文检索\"></a>全文检索</h3><p>这功能像搜索引擎那样，如品牌输入“小华”，返回结果带回品牌有“小米”和华为的。<br />GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;query&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;match&quot;</span>:&#123;<br>\t\t\t<span class=\"hljs-string\">&quot;category&quot;</span> : <span class=\"hljs-string\">&quot;小华&quot;</span><br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"完全匹配\"><a href=\"#完全匹配\" class=\"headerlink\" title=\"完全匹配\"></a>完全匹配</h3><p>GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;query&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;match_phrase&quot;</span>:&#123;<br>\t\t\t<span class=\"hljs-string\">&quot;category&quot;</span> : <span class=\"hljs-string\">&quot;为&quot;</span><br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"高亮查询\"><a href=\"#高亮查询\" class=\"headerlink\" title=\"高亮查询\"></a>高亮查询</h3><p>GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;query&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;match_phrase&quot;</span>:&#123;<br>\t\t\t<span class=\"hljs-string\">&quot;category&quot;</span> : <span class=\"hljs-string\">&quot;为&quot;</span><br>\t\t&#125;<br>\t&#125;,<br>    <span class=\"hljs-string\">&quot;highlight&quot;</span>:&#123;<br>        <span class=\"hljs-string\">&quot;fields&quot;</span>:&#123;<br>            <span class=\"hljs-string\">&quot;category&quot;</span>:&#123;&#125;<span class=\"hljs-comment\">//&lt;----高亮这字段</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"聚合查询\"><a href=\"#聚合查询\" class=\"headerlink\" title=\"聚合查询\"></a>聚合查询</h2><p>聚合允许使用者对 es 文档进行统计分析，类似与关系型数据库中的 group by，当然还有很多其他的聚合，例如取最大值max、平均值avg等等。</p>\n<p>接下来按price字段进行分组：<br />GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search\">http://127.0.0.1:9200/shopping/_search</a>，附带JSON体如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;aggs&quot;</span>:&#123;<span class=\"hljs-comment\">//聚合操作</span><br>\t\t<span class=\"hljs-string\">&quot;price_group&quot;</span>:&#123;<span class=\"hljs-comment\">//名称，随意起名</span><br>\t\t\t<span class=\"hljs-string\">&quot;terms&quot;</span>:&#123;<span class=\"hljs-comment\">//分组</span><br>\t\t\t\t<span class=\"hljs-string\">&quot;field&quot;</span>:<span class=\"hljs-string\">&quot;price&quot;</span><span class=\"hljs-comment\">//分组字段</span><br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>上面返回结果会附带原始数据的。若不想要不附带原始数据的结果，在 Postman 中，向 ES 服务器发 GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;aggs&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;price_group&quot;</span>:&#123;<br>\t\t\t<span class=\"hljs-string\">&quot;terms&quot;</span>:&#123;<br>\t\t\t\t<span class=\"hljs-string\">&quot;field&quot;</span>:<span class=\"hljs-string\">&quot;price&quot;</span><br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;,<br>    <span class=\"hljs-string\">&quot;size&quot;</span>:<span class=\"hljs-number\">0</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>若想对所有手机价格求<strong>平均值</strong>。<br />GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;aggs&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;price_avg&quot;</span>:&#123;<span class=\"hljs-comment\">//名称，随意起名</span><br>\t\t\t<span class=\"hljs-string\">&quot;avg&quot;</span>:&#123;<span class=\"hljs-comment\">//求平均</span><br>\t\t\t\t<span class=\"hljs-string\">&quot;field&quot;</span>:<span class=\"hljs-string\">&quot;price&quot;</span><br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;,<br>    <span class=\"hljs-string\">&quot;size&quot;</span>:<span class=\"hljs-number\">0</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"映射关系\"><a href=\"#映射关系\" class=\"headerlink\" title=\"映射关系\"></a>映射关系</h2><p>有了索引库，等于有了数据库中的 database。</p>\n<p>接下来就需要建索引库(index)中的映射了，类似于数据库(database)中的表结构(table)。</p>\n<p>创建数据库表需要设置字段名称，类型，长度，约束等；索引库也一样，需要知道这个类型下有哪些字段，每个字段有哪些约束信息，这就叫做映射(mapping)。</p>\n<p>先创建一个索引：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"># PUT http:<span class=\"hljs-comment\">//127.0.0.1:9200/user</span><br></code></pre></td></tr></table></figure>\n<p><strong>创建映射</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"># PUT http:<span class=\"hljs-comment\">//127.0.0.1:9200/user/_mapping</span><br><br>&#123;<br>    <span class=\"hljs-string\">&quot;properties&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;name&quot;</span>: &#123;<br>            <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;text&quot;</span>, <span class=\"hljs-comment\">// 允许分词</span><br>            <span class=\"hljs-string\">&quot;index&quot;</span>: <span class=\"hljs-keyword\">true</span><br>        &#125;,<br>        <span class=\"hljs-string\">&quot;sex&quot;</span>: &#123;<br>            <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;keyword&quot;</span>, <span class=\"hljs-comment\">// 关键字无法分开必须完全匹配</span><br>            <span class=\"hljs-string\">&quot;index&quot;</span>: <span class=\"hljs-keyword\">true</span><br>        &#125;,<br>        <span class=\"hljs-string\">&quot;tel&quot;</span>: &#123;<br>            <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;keyword&quot;</span>,<br>            <span class=\"hljs-string\">&quot;index&quot;</span>: <span class=\"hljs-keyword\">false</span>   <span class=\"hljs-comment\">// 不支持索引查询</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>查询映射</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">#GET http:<span class=\"hljs-comment\">//127.0.0.1:9200/user/_mapping</span><br></code></pre></td></tr></table></figure>\n<p>返回结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;user&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;mappings&quot;</span>: &#123;<br>            <span class=\"hljs-string\">&quot;properties&quot;</span>: &#123;<br>                <span class=\"hljs-string\">&quot;name&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;text&quot;</span><br>                &#125;,<br>                <span class=\"hljs-string\">&quot;sex&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;keyword&quot;</span><br>                &#125;,<br>                <span class=\"hljs-string\">&quot;tel&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;keyword&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;index&quot;</span>: <span class=\"hljs-keyword\">false</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>增加数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">#PUT http:<span class=\"hljs-comment\">//127.0.0.1:9200/user/_create/1001</span><br>&#123;<br>\t<span class=\"hljs-string\">&quot;name&quot;</span>:<span class=\"hljs-string\">&quot;小米&quot;</span>,<br>\t<span class=\"hljs-string\">&quot;sex&quot;</span>:<span class=\"hljs-string\">&quot;男的&quot;</span>,<br>\t<span class=\"hljs-string\">&quot;tel&quot;</span>:<span class=\"hljs-string\">&quot;1111&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>查找name含有”小“数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">#GET http:<span class=\"hljs-comment\">//127.0.0.1:9200/user/_search</span><br>&#123;<br>\t<span class=\"hljs-string\">&quot;query&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;match&quot;</span>:&#123;<br>\t\t\t<span class=\"hljs-string\">&quot;name&quot;</span>:<span class=\"hljs-string\">&quot;小&quot;</span><br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"JavaAPI\"><a href=\"#JavaAPI\" class=\"headerlink\" title=\"JavaAPI\"></a>JavaAPI</h2><p>添加依赖：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&lt;dependencies&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;<br>        &lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;<br>        &lt;version&gt;<span class=\"hljs-number\">7.8</span><span class=\"hljs-number\">.0</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;!-- elasticsearch 的客户端 --&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;<br>        &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;<br>        &lt;version&gt;<span class=\"hljs-number\">7.8</span><span class=\"hljs-number\">.0</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;!-- elasticsearch 依赖 <span class=\"hljs-number\">2.</span>x 的 log4j --&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;<br>        &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;<br>        &lt;version&gt;<span class=\"hljs-number\">2.8</span><span class=\"hljs-number\">.2</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;<br>        &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;<br>        &lt;version&gt;<span class=\"hljs-number\">2.8</span><span class=\"hljs-number\">.2</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;<br>        &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;<br>        &lt;version&gt;<span class=\"hljs-number\">2.9</span><span class=\"hljs-number\">.9</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;!-- junit 单元测试 --&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;junit&lt;/groupId&gt;<br>        &lt;artifactId&gt;junit&lt;/artifactId&gt;<br>        &lt;version&gt;<span class=\"hljs-number\">4.12</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br>&lt;/dependencies&gt;<br></code></pre></td></tr></table></figure>\n<p>HelloElasticsearch</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><br><span class=\"hljs-keyword\">import</span> org.apache.http.HttpHost;<br><span class=\"hljs-keyword\">import</span> org.elasticsearch.client.RestClient;<br><span class=\"hljs-keyword\">import</span> org.elasticsearch.client.RestHighLevelClient;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloElasticsearch</span> </span>&#123;<br><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>&#123;<br>\t\t<span class=\"hljs-comment\">// 创建客户端对象</span><br>\t\tRestHighLevelClient client = <span class=\"hljs-keyword\">new</span> RestHighLevelClient(<br>\t\t\t\tRestClient.builder(<span class=\"hljs-keyword\">new</span> HttpHost(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">9200</span>, <span class=\"hljs-string\">&quot;http&quot;</span>)));<br><span class=\"hljs-comment\">//\t\t...</span><br>\t\tSystem.out.println(client);<br><br>\t\t<span class=\"hljs-comment\">// 关闭客户端连接</span><br>\t\tclient.close();<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"JavaAPI-索引-创建\"><a href=\"#JavaAPI-索引-创建\" class=\"headerlink\" title=\"JavaAPI-索引-创建\"></a>JavaAPI-索引-创建</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CreateIndex</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>&#123;<br>        <span class=\"hljs-comment\">// 创建客户端对象</span><br>        RestHighLevelClient client = <span class=\"hljs-keyword\">new</span> RestHighLevelClient(<br>                RestClient.builder(<span class=\"hljs-keyword\">new</span> HttpHost(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">9200</span>, <span class=\"hljs-string\">&quot;http&quot;</span>)));<br><br>        <span class=\"hljs-comment\">// 创建索引 - 请求对象</span><br>        CreateIndexRequest request = <span class=\"hljs-keyword\">new</span> CreateIndexRequest(<span class=\"hljs-string\">&quot;user2&quot;</span>);<br>        <span class=\"hljs-comment\">// 发送请求，获取响应</span><br>        CreateIndexResponse response = client.indices().create(request,<br>                RequestOptions.DEFAULT);<br>        <span class=\"hljs-keyword\">boolean</span> acknowledged = response.isAcknowledged();<br>        <span class=\"hljs-comment\">// 响应状态</span><br>        System.out.println(<span class=\"hljs-string\">&quot;操作状态 = &quot;</span> + acknowledged);<br><br>        <span class=\"hljs-comment\">// 关闭客户端连接</span><br>        client.close();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"JavaAPI-索引-查询-amp-删除\"><a href=\"#JavaAPI-索引-查询-amp-删除\" class=\"headerlink\" title=\"JavaAPI-索引-查询 &amp; 删除\"></a>JavaAPI-索引-查询 &amp; 删除</h3><h4 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SearchIndex</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>&#123;<br>        <span class=\"hljs-comment\">// 创建客户端对象</span><br>        RestHighLevelClient client = <span class=\"hljs-keyword\">new</span> RestHighLevelClient(<br>                RestClient.builder(<span class=\"hljs-keyword\">new</span> HttpHost(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">9200</span>, <span class=\"hljs-string\">&quot;http&quot;</span>)));<br><br>        <span class=\"hljs-comment\">// 查询索引 - 请求对象</span><br>        GetIndexRequest request = <span class=\"hljs-keyword\">new</span> GetIndexRequest(<span class=\"hljs-string\">&quot;user2&quot;</span>);<br>        <span class=\"hljs-comment\">// 发送请求，获取响应</span><br>        GetIndexResponse response = client.indices().get(request,<br>                RequestOptions.DEFAULT);<br>        <br>        System.out.println(<span class=\"hljs-string\">&quot;aliases:&quot;</span>+response.getAliases());<br>        System.out.println(<span class=\"hljs-string\">&quot;mappings:&quot;</span>+response.getMappings());<br>        System.out.println(<span class=\"hljs-string\">&quot;settings:&quot;</span>+response.getSettings());<br><br>        client.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"删除-1\"><a href=\"#删除-1\" class=\"headerlink\" title=\"删除\"></a>删除</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DeleteIndex</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>&#123;<br>        RestHighLevelClient client = <span class=\"hljs-keyword\">new</span> RestHighLevelClient(<br>                RestClient.builder(<span class=\"hljs-keyword\">new</span> HttpHost(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">9200</span>, <span class=\"hljs-string\">&quot;http&quot;</span>)));<br>        <span class=\"hljs-comment\">// 删除索引 - 请求对象</span><br>        DeleteIndexRequest request = <span class=\"hljs-keyword\">new</span> DeleteIndexRequest(<span class=\"hljs-string\">&quot;user2&quot;</span>);<br>        <span class=\"hljs-comment\">// 发送请求，获取响应</span><br>        AcknowledgedResponse response = client.indices().delete(request,RequestOptions.DEFAULT);<br>        <span class=\"hljs-comment\">// 操作结果</span><br>        System.out.println(<span class=\"hljs-string\">&quot;操作结果 ： &quot;</span> + response.isAcknowledged());<br>        client.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"JavaAPI-文档-新增-amp-修改\"><a href=\"#JavaAPI-文档-新增-amp-修改\" class=\"headerlink\" title=\"JavaAPI-文档-新增 &amp; 修改\"></a>JavaAPI-文档-新增 &amp; 修改</h3><h4 id=\"重构\"><a href=\"#重构\" class=\"headerlink\" title=\"重构\"></a>重构</h4><p>上文由于频繁使用以下连接Elasticsearch和关闭它的代码，于是<strong>个人</strong>对它进行重构。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SomeClass</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>&#123;<br>        RestHighLevelClient client = <span class=\"hljs-keyword\">new</span> RestHighLevelClient(<br>                RestClient.builder(<span class=\"hljs-keyword\">new</span> HttpHost(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">9200</span>, <span class=\"hljs-string\">&quot;http&quot;</span>)));<br>\t\t<br>        ...<br>        <br>        client.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>重构后的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.elasticsearch.client.RestHighLevelClient;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ElasticsearchTask</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doSomething</span><span class=\"hljs-params\">(RestHighLevelClient client)</span> <span class=\"hljs-keyword\">throws</span> Exception</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConnectElasticsearch</span></span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">connect</span><span class=\"hljs-params\">(ElasticsearchTask task)</span></span>&#123;<br>        <span class=\"hljs-comment\">// 创建客户端对象</span><br>        RestHighLevelClient client = <span class=\"hljs-keyword\">new</span> RestHighLevelClient(<br>                RestClient.builder(<span class=\"hljs-keyword\">new</span> HttpHost(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">9200</span>, <span class=\"hljs-string\">&quot;http&quot;</span>)));<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            task.doSomething(client);<br>            <span class=\"hljs-comment\">// 关闭客户端连接</span><br>            client.close();<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>接下来，如果想让Elasticsearch完成一些操作，就编写一个lambda式即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SomeClass</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(client -&gt; &#123;<br>\t\t\t<span class=\"hljs-comment\">//do something</span><br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"新增\"><a href=\"#新增\" class=\"headerlink\" title=\"新增\"></a>新增</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">InsertDoc</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(client -&gt; &#123;<br>            <span class=\"hljs-comment\">// 新增文档 - 请求对象</span><br>            IndexRequest request = <span class=\"hljs-keyword\">new</span> IndexRequest();<br>            <span class=\"hljs-comment\">// 设置索引及唯一性标识</span><br>            request.index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1001&quot;</span>);<br><br>            <span class=\"hljs-comment\">// 创建数据对象</span><br>            User user = <span class=\"hljs-keyword\">new</span> User();<br>            user.setName(<span class=\"hljs-string\">&quot;zhangsan&quot;</span>);<br>            user.setAge(<span class=\"hljs-number\">30</span>);<br>            user.setSex(<span class=\"hljs-string\">&quot;男&quot;</span>);<br><br>            ObjectMapper objectMapper = <span class=\"hljs-keyword\">new</span> ObjectMapper();<br>            String productJson = objectMapper.writeValueAsString(user);<br>            <span class=\"hljs-comment\">// 添加文档数据，数据格式为 JSON 格式</span><br>            request.source(productJson, XContentType.JSON);<br>            <span class=\"hljs-comment\">// 客户端发送请求，获取响应对象</span><br>            IndexResponse response = client.index(request, RequestOptions.DEFAULT);<br>            <span class=\"hljs-number\">3.</span>打印结果信息<br>            System.out.println(<span class=\"hljs-string\">&quot;_index:&quot;</span> + response.getIndex());<br>            System.out.println(<span class=\"hljs-string\">&quot;_id:&quot;</span> + response.getId());<br>            System.out.println(<span class=\"hljs-string\">&quot;_result:&quot;</span> + response.getResult());<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UpdateDoc</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(client -&gt; &#123;<br>            <span class=\"hljs-comment\">// 修改文档 - 请求对象</span><br>            UpdateRequest request = <span class=\"hljs-keyword\">new</span> UpdateRequest();<br>            <span class=\"hljs-comment\">// 配置修改参数</span><br>            request.index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1001&quot;</span>);<br>            <span class=\"hljs-comment\">// 设置请求体，对数据进行修改</span><br>            request.doc(XContentType.JSON, <span class=\"hljs-string\">&quot;sex&quot;</span>, <span class=\"hljs-string\">&quot;女&quot;</span>);<br>            <span class=\"hljs-comment\">// 客户端发送请求，获取响应对象</span><br>            UpdateResponse response = client.update(request, RequestOptions.DEFAULT);<br>            System.out.println(<span class=\"hljs-string\">&quot;_index:&quot;</span> + response.getIndex());<br>            System.out.println(<span class=\"hljs-string\">&quot;_id:&quot;</span> + response.getId());<br>            System.out.println(<span class=\"hljs-string\">&quot;_result:&quot;</span> + response.getResult());<br>        &#125;);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"JavaAPI-文档-查询-amp-删除\"><a href=\"#JavaAPI-文档-查询-amp-删除\" class=\"headerlink\" title=\"JavaAPI-文档-查询 &amp; 删除\"></a>JavaAPI-文档-查询 &amp; 删除</h3><h4 id=\"查询-1\"><a href=\"#查询-1\" class=\"headerlink\" title=\"查询\"></a>查询</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GetDoc</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(client -&gt; &#123;<br>            <span class=\"hljs-comment\">//1.创建请求对象</span><br>            GetRequest request = <span class=\"hljs-keyword\">new</span> GetRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1001&quot;</span>);<br>            <span class=\"hljs-comment\">//2.客户端发送请求，获取响应对象</span><br>            GetResponse response = client.get(request, RequestOptions.DEFAULT);<br>            <span class=\"hljs-number\">3.</span>打印结果信息<br>            System.out.println(<span class=\"hljs-string\">&quot;_index:&quot;</span> + response.getIndex());<br>            System.out.println(<span class=\"hljs-string\">&quot;_type:&quot;</span> + response.getType());<br>            System.out.println(<span class=\"hljs-string\">&quot;_id:&quot;</span> + response.getId());<br>            System.out.println(<span class=\"hljs-string\">&quot;source:&quot;</span> + response.getSourceAsString());<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"删除-2\"><a href=\"#删除-2\" class=\"headerlink\" title=\"删除\"></a>删除</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DeleteDoc</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(client -&gt; &#123;<br>            <span class=\"hljs-comment\">//创建请求对象</span><br>            DeleteRequest request = <span class=\"hljs-keyword\">new</span> DeleteRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1001&quot;</span>);<br>            <span class=\"hljs-comment\">//客户端发送请求，获取响应对象</span><br>            DeleteResponse response = client.delete(request, RequestOptions.DEFAULT);<br>            <span class=\"hljs-comment\">//打印信息</span><br>            System.out.println(response.toString());<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"JavaAPI-文档-批量新增-amp-批量删除\"><a href=\"#JavaAPI-文档-批量新增-amp-批量删除\" class=\"headerlink\" title=\"JavaAPI-文档-批量新增 &amp; 批量删除\"></a>JavaAPI-文档-批量新增 &amp; 批量删除</h3><h4 id=\"批量新增\"><a href=\"#批量新增\" class=\"headerlink\" title=\"批量新增\"></a>批量新增</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BatchInsertDoc</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(client -&gt; &#123;<br>            <span class=\"hljs-comment\">//创建批量新增请求对象</span><br>            BulkRequest request = <span class=\"hljs-keyword\">new</span> BulkRequest();<br>            request.add(<span class=\"hljs-keyword\">new</span><br>                    IndexRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1001&quot;</span>).source(XContentType.JSON, <span class=\"hljs-string\">&quot;name&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;zhangsan&quot;</span>));<br>            request.add(<span class=\"hljs-keyword\">new</span><br>                    IndexRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1002&quot;</span>).source(XContentType.JSON, <span class=\"hljs-string\">&quot;name&quot;</span>,<br>                            <span class=\"hljs-string\">&quot;lisi&quot;</span>));<br>            request.add(<span class=\"hljs-keyword\">new</span><br>                    IndexRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1003&quot;</span>).source(XContentType.JSON, <span class=\"hljs-string\">&quot;name&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;wangwu&quot;</span>));<br>            <span class=\"hljs-comment\">//客户端发送请求，获取响应对象</span><br>            BulkResponse responses = client.bulk(request, RequestOptions.DEFAULT);<br>            <span class=\"hljs-comment\">//打印结果信息</span><br>            System.out.println(<span class=\"hljs-string\">&quot;took:&quot;</span> + responses.getTook());<br>            System.out.println(<span class=\"hljs-string\">&quot;items:&quot;</span> + responses.getItems());<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"批量删除\"><a href=\"#批量删除\" class=\"headerlink\" title=\"批量删除\"></a>批量删除</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BatchDeleteDoc</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(client -&gt; &#123;<br>            <span class=\"hljs-comment\">//创建批量删除请求对象</span><br>            BulkRequest request = <span class=\"hljs-keyword\">new</span> BulkRequest();<br>            request.add(<span class=\"hljs-keyword\">new</span> DeleteRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1001&quot;</span>));<br>            request.add(<span class=\"hljs-keyword\">new</span> DeleteRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1002&quot;</span>));<br>            request.add(<span class=\"hljs-keyword\">new</span> DeleteRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1003&quot;</span>));<br>            <span class=\"hljs-comment\">//客户端发送请求，获取响应对象</span><br>            BulkResponse responses = client.bulk(request, RequestOptions.DEFAULT);<br>            <span class=\"hljs-comment\">//打印结果信息</span><br>            System.out.println(<span class=\"hljs-string\">&quot;took:&quot;</span> + responses.getTook());<br>            System.out.println(<span class=\"hljs-string\">&quot;items:&quot;</span> + responses.getItems());<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"JavaAPI-文档-高级查询-全量查询\"><a href=\"#JavaAPI-文档-高级查询-全量查询\" class=\"headerlink\" title=\"JavaAPI-文档-高级查询-全量查询\"></a>JavaAPI-文档-高级查询-全量查询</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BatchInsertDoc</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(client -&gt; &#123;<br>            <span class=\"hljs-comment\">//创建批量新增请求对象</span><br>            BulkRequest request = <span class=\"hljs-keyword\">new</span> BulkRequest();<br>            request.add(<span class=\"hljs-keyword\">new</span> IndexRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1001&quot;</span>).source(XContentType.JSON, <span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;zhangsan&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;10&quot;</span>, <span class=\"hljs-string\">&quot;sex&quot;</span>,<span class=\"hljs-string\">&quot;女&quot;</span>));<br>            request.add(<span class=\"hljs-keyword\">new</span> IndexRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1002&quot;</span>).source(XContentType.JSON, <span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;lisi&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;30&quot;</span>, <span class=\"hljs-string\">&quot;sex&quot;</span>,<span class=\"hljs-string\">&quot;女&quot;</span>));<br>            request.add(<span class=\"hljs-keyword\">new</span> IndexRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1003&quot;</span>).source(XContentType.JSON, <span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;wangwu1&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;40&quot;</span>, <span class=\"hljs-string\">&quot;sex&quot;</span>,<span class=\"hljs-string\">&quot;男&quot;</span>));<br>            request.add(<span class=\"hljs-keyword\">new</span> IndexRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1004&quot;</span>).source(XContentType.JSON, <span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;wangwu2&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;20&quot;</span>, <span class=\"hljs-string\">&quot;sex&quot;</span>,<span class=\"hljs-string\">&quot;女&quot;</span>));<br>            request.add(<span class=\"hljs-keyword\">new</span> IndexRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1005&quot;</span>).source(XContentType.JSON, <span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;wangwu3&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;50&quot;</span>, <span class=\"hljs-string\">&quot;sex&quot;</span>,<span class=\"hljs-string\">&quot;男&quot;</span>));<br>            request.add(<span class=\"hljs-keyword\">new</span> IndexRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1006&quot;</span>).source(XContentType.JSON, <span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;wangwu4&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;20&quot;</span>, <span class=\"hljs-string\">&quot;sex&quot;</span>,<span class=\"hljs-string\">&quot;男&quot;</span>));<br>            <span class=\"hljs-comment\">//客户端发送请求，获取响应对象</span><br>            BulkResponse responses = client.bulk(request, RequestOptions.DEFAULT);<br>            <span class=\"hljs-comment\">//打印结果信息</span><br>            System.out.println(<span class=\"hljs-string\">&quot;took:&quot;</span> + responses.getTook());<br>            System.out.println(<span class=\"hljs-string\">&quot;items:&quot;</span> + responses.getItems());<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>查询所有索引数据</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryDoc</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(client -&gt; &#123;<br>            <span class=\"hljs-comment\">// 创建搜索请求对象</span><br>            SearchRequest request = <span class=\"hljs-keyword\">new</span> SearchRequest();<br>            request.indices(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>            <span class=\"hljs-comment\">// 构建查询的请求体</span><br>            SearchSourceBuilder sourceBuilder = <span class=\"hljs-keyword\">new</span> SearchSourceBuilder();<br>            <span class=\"hljs-comment\">// 查询所有数据</span><br>            sourceBuilder.query(QueryBuilders.matchAllQuery());<br>            request.source(sourceBuilder);<br>            SearchResponse response = client.search(request, RequestOptions.DEFAULT);<br>            <span class=\"hljs-comment\">// 查询匹配</span><br>            SearchHits hits = response.getHits();<br>            System.out.println(<span class=\"hljs-string\">&quot;took:&quot;</span> + response.getTook());<br>            System.out.println(<span class=\"hljs-string\">&quot;timeout:&quot;</span> + response.isTimedOut());<br>            System.out.println(<span class=\"hljs-string\">&quot;total:&quot;</span> + hits.getTotalHits());<br>            System.out.println(<span class=\"hljs-string\">&quot;MaxScore:&quot;</span> + hits.getMaxScore());<br>            System.out.println(<span class=\"hljs-string\">&quot;hits========&gt;&gt;&quot;</span>);<br>            <span class=\"hljs-keyword\">for</span> (SearchHit hit : hits) &#123;<br>            <span class=\"hljs-comment\">//输出每条查询的结果信息</span><br>                System.out.println(hit.getSourceAsString());<br>            &#125;<br>            System.out.println(<span class=\"hljs-string\">&quot;&lt;&lt;========&quot;</span>);<br>        &#125;);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"JavaAPI-文档-高级查询-分页查询-amp-条件查询-amp-查询排序\"><a href=\"#JavaAPI-文档-高级查询-分页查询-amp-条件查询-amp-查询排序\" class=\"headerlink\" title=\"JavaAPI-文档-高级查询-分页查询 &amp; 条件查询 &amp; 查询排序\"></a>JavaAPI-文档-高级查询-分页查询 &amp; 条件查询 &amp; 查询排序</h3><h4 id=\"条件查询-1\"><a href=\"#条件查询-1\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryDoc</span> </span>&#123;<br>    <br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ElasticsearchTask SEARCH_BY_CONDITION = client -&gt; &#123;<br>        <span class=\"hljs-comment\">// 创建搜索请求对象</span><br>        SearchRequest request = <span class=\"hljs-keyword\">new</span> SearchRequest();<br>        request.indices(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>        <span class=\"hljs-comment\">// 构建查询的请求体</span><br>        SearchSourceBuilder sourceBuilder = <span class=\"hljs-keyword\">new</span> SearchSourceBuilder();<br>        sourceBuilder.query(QueryBuilders.termQuery(<span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;30&quot;</span>));<br>        request.source(sourceBuilder);<br>        SearchResponse response = client.search(request, RequestOptions.DEFAULT);<br>        <span class=\"hljs-comment\">// 查询匹配</span><br>        SearchHits hits = response.getHits();<br>        System.out.println(<span class=\"hljs-string\">&quot;took:&quot;</span> + response.getTook());<br>        System.out.println(<span class=\"hljs-string\">&quot;timeout:&quot;</span> + response.isTimedOut());<br>        System.out.println(<span class=\"hljs-string\">&quot;total:&quot;</span> + hits.getTotalHits());<br>        System.out.println(<span class=\"hljs-string\">&quot;MaxScore:&quot;</span> + hits.getMaxScore());<br>        System.out.println(<span class=\"hljs-string\">&quot;hits========&gt;&gt;&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (SearchHit hit : hits) &#123;<br>            <span class=\"hljs-comment\">//输出每条查询的结果信息</span><br>            System.out.println(hit.getSourceAsString());<br>        &#125;<br>        System.out.println(<span class=\"hljs-string\">&quot;&lt;&lt;========&quot;</span>);<br>    &#125;;<br>    <br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(SEARCH_BY_CONDITION);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"分页查询-1\"><a href=\"#分页查询-1\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryDoc</span> </span>&#123;<br>    <br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ElasticsearchTask SEARCH_BY_PAGING = client -&gt; &#123;<br>        <span class=\"hljs-comment\">// 创建搜索请求对象</span><br>        SearchRequest request = <span class=\"hljs-keyword\">new</span> SearchRequest();<br>        request.indices(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>        <span class=\"hljs-comment\">// 构建查询的请求体</span><br>        SearchSourceBuilder sourceBuilder = <span class=\"hljs-keyword\">new</span> SearchSourceBuilder();<br>        sourceBuilder.query(QueryBuilders.matchAllQuery());<br>        <span class=\"hljs-comment\">// 分页查询</span><br>        <span class=\"hljs-comment\">// 当前页其实索引(第一条数据的顺序号)， from</span><br>        sourceBuilder.from(<span class=\"hljs-number\">0</span>);<br><br>        <span class=\"hljs-comment\">// 每页显示多少条 size</span><br>        sourceBuilder.size(<span class=\"hljs-number\">2</span>);<br>        request.source(sourceBuilder);<br>        SearchResponse response = client.search(request, RequestOptions.DEFAULT);<br>        <span class=\"hljs-comment\">// 查询匹配</span><br>        SearchHits hits = response.getHits();<br>        System.out.println(<span class=\"hljs-string\">&quot;took:&quot;</span> + response.getTook());<br>        System.out.println(<span class=\"hljs-string\">&quot;timeout:&quot;</span> + response.isTimedOut());<br>        System.out.println(<span class=\"hljs-string\">&quot;total:&quot;</span> + hits.getTotalHits());<br>        System.out.println(<span class=\"hljs-string\">&quot;MaxScore:&quot;</span> + hits.getMaxScore());<br>        System.out.println(<span class=\"hljs-string\">&quot;hits========&gt;&gt;&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (SearchHit hit : hits) &#123;<br>            <span class=\"hljs-comment\">//输出每条查询的结果信息</span><br>            System.out.println(hit.getSourceAsString());<br>        &#125;<br>        System.out.println(<span class=\"hljs-string\">&quot;&lt;&lt;========&quot;</span>);<br>    &#125;;<br>    <br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(SEARCH_BY_CONDITION);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"查询排序-1\"><a href=\"#查询排序-1\" class=\"headerlink\" title=\"查询排序\"></a>查询排序</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryDoc</span> </span>&#123;<br>    <br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ElasticsearchTask SEARCH_WITH_ORDER = client -&gt; &#123;<br>        <span class=\"hljs-comment\">// 创建搜索请求对象</span><br>        SearchRequest request = <span class=\"hljs-keyword\">new</span> SearchRequest();<br>        request.indices(<span class=\"hljs-string\">&quot;user&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 构建查询的请求体</span><br>        SearchSourceBuilder sourceBuilder = <span class=\"hljs-keyword\">new</span> SearchSourceBuilder();<br>        sourceBuilder.query(QueryBuilders.matchAllQuery());<br>        <span class=\"hljs-comment\">// 排序</span><br>        sourceBuilder.sort(<span class=\"hljs-string\">&quot;age&quot;</span>, SortOrder.ASC);<br>        request.source(sourceBuilder);<br>        SearchResponse response = client.search(request, RequestOptions.DEFAULT);<br>        <span class=\"hljs-comment\">// 查询匹配</span><br>        SearchHits hits = response.getHits();<br>        System.out.println(<span class=\"hljs-string\">&quot;took:&quot;</span> + response.getTook());<br>        System.out.println(<span class=\"hljs-string\">&quot;timeout:&quot;</span> + response.isTimedOut());<br>        System.out.println(<span class=\"hljs-string\">&quot;total:&quot;</span> + hits.getTotalHits());<br>        System.out.println(<span class=\"hljs-string\">&quot;MaxScore:&quot;</span> + hits.getMaxScore());<br>        System.out.println(<span class=\"hljs-string\">&quot;hits========&gt;&gt;&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (SearchHit hit : hits) &#123;<br>        <span class=\"hljs-comment\">//输出每条查询的结果信息</span><br>            System.out.println(hit.getSourceAsString());<br>        &#125;<br>        System.out.println(<span class=\"hljs-string\">&quot;&lt;&lt;========&quot;</span>);<br>    &#125;;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(SEARCH_WITH_ORDER);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"JavaAPI-文档-高级查询-组合查询-amp-范围查询\"><a href=\"#JavaAPI-文档-高级查询-组合查询-amp-范围查询\" class=\"headerlink\" title=\"JavaAPI-文档-高级查询-组合查询 &amp; 范围查询\"></a>JavaAPI-文档-高级查询-组合查询 &amp; 范围查询</h3><h4 id=\"组合查询\"><a href=\"#组合查询\" class=\"headerlink\" title=\"组合查询\"></a>组合查询</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryDoc</span> </span>&#123;<br>    <br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ElasticsearchTask SEARCH_BY_BOOL_CONDITION = client -&gt; &#123;<br>        <span class=\"hljs-comment\">// 创建搜索请求对象</span><br>        SearchRequest request = <span class=\"hljs-keyword\">new</span> SearchRequest();<br>        request.indices(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>        <span class=\"hljs-comment\">// 构建查询的请求体</span><br>        SearchSourceBuilder sourceBuilder = <span class=\"hljs-keyword\">new</span> SearchSourceBuilder();<br>        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();<br>        <span class=\"hljs-comment\">// 必须包含</span><br>        boolQueryBuilder.must(QueryBuilders.matchQuery(<span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;30&quot;</span>));<br>        <span class=\"hljs-comment\">// 一定不含</span><br>        boolQueryBuilder.mustNot(QueryBuilders.matchQuery(<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;zhangsan&quot;</span>));<br>        <span class=\"hljs-comment\">// 可能包含</span><br>        boolQueryBuilder.should(QueryBuilders.matchQuery(<span class=\"hljs-string\">&quot;sex&quot;</span>, <span class=\"hljs-string\">&quot;男&quot;</span>));<br>        sourceBuilder.query(boolQueryBuilder);<br>        request.source(sourceBuilder);<br>        SearchResponse response = client.search(request, RequestOptions.DEFAULT);<br>        <span class=\"hljs-comment\">// 查询匹配</span><br>        SearchHits hits = response.getHits();<br>        System.out.println(<span class=\"hljs-string\">&quot;took:&quot;</span> + response.getTook());<br>        System.out.println(<span class=\"hljs-string\">&quot;timeout:&quot;</span> + response.isTimedOut());<br>        System.out.println(<span class=\"hljs-string\">&quot;total:&quot;</span> + hits.getTotalHits());<br>        System.out.println(<span class=\"hljs-string\">&quot;MaxScore:&quot;</span> + hits.getMaxScore());<br>        System.out.println(<span class=\"hljs-string\">&quot;hits========&gt;&gt;&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (SearchHit hit : hits) &#123;<br>            <span class=\"hljs-comment\">//输出每条查询的结果信息</span><br>            System.out.println(hit.getSourceAsString());<br>        &#125;<br>        System.out.println(<span class=\"hljs-string\">&quot;&lt;&lt;========&quot;</span>);<br><br>    &#125;;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(SEARCH_BY_BOOL_CONDITION);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"范围查询-1\"><a href=\"#范围查询-1\" class=\"headerlink\" title=\"范围查询\"></a>范围查询</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryDoc</span> </span>&#123;<br>    <br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ElasticsearchTask SEARCH_BY_RANGE = client -&gt; &#123;<br>        <span class=\"hljs-comment\">// 创建搜索请求对象</span><br>        SearchRequest request = <span class=\"hljs-keyword\">new</span> SearchRequest();<br>        request.indices(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>        <span class=\"hljs-comment\">// 构建查询的请求体</span><br>        SearchSourceBuilder sourceBuilder = <span class=\"hljs-keyword\">new</span> SearchSourceBuilder();<br>        RangeQueryBuilder rangeQuery = QueryBuilders.rangeQuery(<span class=\"hljs-string\">&quot;age&quot;</span>);<br>        <span class=\"hljs-comment\">// 大于等于</span><br>        <span class=\"hljs-comment\">//rangeQuery.gte(&quot;30&quot;);</span><br>        <span class=\"hljs-comment\">// 小于等于</span><br>        rangeQuery.lte(<span class=\"hljs-string\">&quot;40&quot;</span>);<br>        sourceBuilder.query(rangeQuery);<br>        request.source(sourceBuilder);<br>        SearchResponse response = client.search(request, RequestOptions.DEFAULT);<br>        <span class=\"hljs-comment\">// 查询匹配</span><br>        SearchHits hits = response.getHits();<br>        System.out.println(<span class=\"hljs-string\">&quot;took:&quot;</span> + response.getTook());<br>        System.out.println(<span class=\"hljs-string\">&quot;timeout:&quot;</span> + response.isTimedOut());<br>        System.out.println(<span class=\"hljs-string\">&quot;total:&quot;</span> + hits.getTotalHits());<br>        System.out.println(<span class=\"hljs-string\">&quot;MaxScore:&quot;</span> + hits.getMaxScore());<br>        System.out.println(<span class=\"hljs-string\">&quot;hits========&gt;&gt;&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (SearchHit hit : hits) &#123;<br>        <span class=\"hljs-comment\">//输出每条查询的结果信息</span><br>            System.out.println(hit.getSourceAsString());<br>        &#125;<br>        System.out.println(<span class=\"hljs-string\">&quot;&lt;&lt;========&quot;</span>);<br>    &#125;;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(SEARCH_BY_RANGE);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"JavaAPI-文档-高级查询-模糊查询-amp-高亮查询\"><a href=\"#JavaAPI-文档-高级查询-模糊查询-amp-高亮查询\" class=\"headerlink\" title=\"JavaAPI-文档-高级查询-模糊查询 &amp; 高亮查询\"></a>JavaAPI-文档-高级查询-模糊查询 &amp; 高亮查询</h3><h4 id=\"模糊查询\"><a href=\"#模糊查询\" class=\"headerlink\" title=\"模糊查询\"></a>模糊查询</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryDoc</span> </span>&#123;<br>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ElasticsearchTask SEARCH_BY_FUZZY_CONDITION = client -&gt; &#123;<br>        <span class=\"hljs-comment\">// 创建搜索请求对象</span><br>        SearchRequest request = <span class=\"hljs-keyword\">new</span> SearchRequest();<br>        request.indices(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>        <span class=\"hljs-comment\">// 构建查询的请求体</span><br>        SearchSourceBuilder sourceBuilder = <span class=\"hljs-keyword\">new</span> SearchSourceBuilder();<br>        sourceBuilder.query(QueryBuilders.fuzzyQuery(<span class=\"hljs-string\">&quot;name&quot;</span>,<span class=\"hljs-string\">&quot;wangwu&quot;</span>).fuzziness(Fuzziness.ONE));<br>        request.source(sourceBuilder);<br>        SearchResponse response = client.search(request, RequestOptions.DEFAULT);<br>        <span class=\"hljs-comment\">// 查询匹配</span><br>        SearchHits hits = response.getHits();<br>        System.out.println(<span class=\"hljs-string\">&quot;took:&quot;</span> + response.getTook());<br>        System.out.println(<span class=\"hljs-string\">&quot;timeout:&quot;</span> + response.isTimedOut());<br>        System.out.println(<span class=\"hljs-string\">&quot;total:&quot;</span> + hits.getTotalHits());<br>        System.out.println(<span class=\"hljs-string\">&quot;MaxScore:&quot;</span> + hits.getMaxScore());<br>        System.out.println(<span class=\"hljs-string\">&quot;hits========&gt;&gt;&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (SearchHit hit : hits) &#123;<br>            <span class=\"hljs-comment\">//输出每条查询的结果信息</span><br>            System.out.println(hit.getSourceAsString());<br>        &#125;<br>        System.out.println(<span class=\"hljs-string\">&quot;&lt;&lt;========&quot;</span>);<br>    &#125;;<br><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br><span class=\"hljs-comment\">//        ConnectElasticsearch.connect(SEARCH_ALL);</span><br><span class=\"hljs-comment\">//        ConnectElasticsearch.connect(SEARCH_BY_CONDITION);</span><br><span class=\"hljs-comment\">//        ConnectElasticsearch.connect(SEARCH_BY_PAGING);</span><br><span class=\"hljs-comment\">//        ConnectElasticsearch.connect(SEARCH_WITH_ORDER);</span><br><span class=\"hljs-comment\">//        ConnectElasticsearch.connect(SEARCH_BY_BOOL_CONDITION);</span><br><span class=\"hljs-comment\">//        ConnectElasticsearch.connect(SEARCH_BY_RANGE);</span><br>        ConnectElasticsearch.connect(SEARCH_BY_FUZZY_CONDITION);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"高亮查询-1\"><a href=\"#高亮查询-1\" class=\"headerlink\" title=\"高亮查询\"></a>高亮查询</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryDoc</span> </span>&#123;<br>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ElasticsearchTask SEARCH_WITH_HIGHLIGHT = client -&gt; &#123;<br>        <span class=\"hljs-comment\">// 高亮查询</span><br>        SearchRequest request = <span class=\"hljs-keyword\">new</span> SearchRequest().indices(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>        <span class=\"hljs-comment\">//2.创建查询请求体构建器</span><br>        SearchSourceBuilder sourceBuilder = <span class=\"hljs-keyword\">new</span> SearchSourceBuilder();<br>        <span class=\"hljs-comment\">//构建查询方式：高亮查询</span><br>        TermsQueryBuilder termsQueryBuilder =<br>                QueryBuilders.termsQuery(<span class=\"hljs-string\">&quot;name&quot;</span>,<span class=\"hljs-string\">&quot;zhangsan&quot;</span>);<br>        <span class=\"hljs-comment\">//设置查询方式</span><br>        sourceBuilder.query(termsQueryBuilder);<br>        <span class=\"hljs-comment\">//构建高亮字段</span><br>        HighlightBuilder highlightBuilder = <span class=\"hljs-keyword\">new</span> HighlightBuilder();<br>        highlightBuilder.preTags(<span class=\"hljs-string\">&quot;&lt;font color=&#x27;red&#x27;&gt;&quot;</span>);<span class=\"hljs-comment\">//设置标签前缀</span><br>        highlightBuilder.postTags(<span class=\"hljs-string\">&quot;&lt;/font&gt;&quot;</span>);<span class=\"hljs-comment\">//设置标签后缀</span><br>        highlightBuilder.field(<span class=\"hljs-string\">&quot;name&quot;</span>);<span class=\"hljs-comment\">//设置高亮字段</span><br>        <span class=\"hljs-comment\">//设置高亮构建对象</span><br>        sourceBuilder.highlighter(highlightBuilder);<br>        <span class=\"hljs-comment\">//设置请求体</span><br>        request.source(sourceBuilder);<br>        <span class=\"hljs-comment\">//3.客户端发送请求，获取响应对象</span><br>        SearchResponse response = client.search(request, RequestOptions.DEFAULT);<br>        <span class=\"hljs-comment\">//4.打印响应结果</span><br>        SearchHits hits = response.getHits();<br>        System.out.println(<span class=\"hljs-string\">&quot;took::&quot;</span>+response.getTook());<br>        System.out.println(<span class=\"hljs-string\">&quot;time_out::&quot;</span>+response.isTimedOut());<br>        System.out.println(<span class=\"hljs-string\">&quot;total::&quot;</span>+hits.getTotalHits());<br>        System.out.println(<span class=\"hljs-string\">&quot;max_score::&quot;</span>+hits.getMaxScore());<br>        System.out.println(<span class=\"hljs-string\">&quot;hits::::&gt;&gt;&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (SearchHit hit : hits) &#123;<br>            String sourceAsString = hit.getSourceAsString();<br>            System.out.println(sourceAsString);<br>            <span class=\"hljs-comment\">//打印高亮结果</span><br>            Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();<br>            System.out.println(highlightFields);<br>        &#125;<br>        System.out.println(<span class=\"hljs-string\">&quot;&lt;&lt;::::&quot;</span>);<br>    &#125;;<br><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(SEARCH_WITH_HIGHLIGHT);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"JavaAPI-文档-高级查询-最大值查询-amp-分组查询\"><a href=\"#JavaAPI-文档-高级查询-最大值查询-amp-分组查询\" class=\"headerlink\" title=\"JavaAPI-文档-高级查询-最大值查询 &amp; 分组查询\"></a>JavaAPI-文档-高级查询-最大值查询 &amp; 分组查询</h3><h4 id=\"最大值查询\"><a href=\"#最大值查询\" class=\"headerlink\" title=\"最大值查询\"></a>最大值查询</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryDoc</span> </span>&#123;<br>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ElasticsearchTask SEARCH_WITH_MAX = client -&gt; &#123;<br>        <span class=\"hljs-comment\">// 高亮查询</span><br>        SearchRequest request = <span class=\"hljs-keyword\">new</span> SearchRequest().indices(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>        SearchSourceBuilder sourceBuilder = <span class=\"hljs-keyword\">new</span> SearchSourceBuilder();<br>        sourceBuilder.aggregation(AggregationBuilders.max(<span class=\"hljs-string\">&quot;maxAge&quot;</span>).field(<span class=\"hljs-string\">&quot;age&quot;</span>));<br>        <span class=\"hljs-comment\">//设置请求体</span><br>        request.source(sourceBuilder);<br>        <span class=\"hljs-comment\">//3.客户端发送请求，获取响应对象</span><br>        SearchResponse response = client.search(request, RequestOptions.DEFAULT);<br>        <span class=\"hljs-comment\">//4.打印响应结果</span><br>        SearchHits hits = response.getHits();<br>        System.out.println(response);<br>    &#125;;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(SEARCH_WITH_MAX);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"分组查询\"><a href=\"#分组查询\" class=\"headerlink\" title=\"分组查询\"></a>分组查询</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryDoc</span> </span>&#123;<br><br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ElasticsearchTask SEARCH_WITH_GROUP = client -&gt; &#123;<br>        SearchRequest request = <span class=\"hljs-keyword\">new</span> SearchRequest().indices(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>        SearchSourceBuilder sourceBuilder = <span class=\"hljs-keyword\">new</span> SearchSourceBuilder();<br>        sourceBuilder.aggregation(AggregationBuilders.terms(<span class=\"hljs-string\">&quot;age_groupby&quot;</span>).field(<span class=\"hljs-string\">&quot;age&quot;</span>));<br>        <span class=\"hljs-comment\">//设置请求体</span><br>        request.source(sourceBuilder);<br>        <span class=\"hljs-comment\">//3.客户端发送请求，获取响应对象</span><br>        SearchResponse response = client.search(request, RequestOptions.DEFAULT);<br>        <span class=\"hljs-comment\">//4.打印响应结果</span><br>        SearchHits hits = response.getHits();<br>        System.out.println(response);<br>    &#125;;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(SEARCH_WITH_GROUP);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h1 id=\"Elasticsearch环境\"><a href=\"#Elasticsearch环境\" class=\"headerlink\" title=\"Elasticsearch环境\"></a>Elasticsearch环境</h1><p><strong>单机 &amp; 集群</strong><br />单台 Elasticsearch 服务器提供服务，往往都有最大的负载能力，超过这个阈值，服务器<br />性能就会大大降低甚至不可用，所以生产环境中，一般都是运行在指定服务器集群中。<br />除了负载能力，单点服务器也存在其他问题：</p>\n<p>单台机器存储容量有限<br />单服务器容易出现单点故障，无法实现高可用<br />单服务的并发处理能力有限<br />配置服务器集群时，集群中节点数量没有限制，大于等于 2 个节点就可以看做是集群了。一<br />般出于高性能及高可用方面来考虑集群中节点数量都是 3 个以上</p>\n<p>总之，集群能提高性能，增加容错。</p>\n<p><strong>集群 Cluster</strong><br />一个集群就是由一个或多个服务器节点组织在一起，共同持有整个的数据，并一起提供索引和搜索功能。**一个 Elasticsearch 集群有一个唯一的名字标识，这个名字默认就是”elasticsearch”。这个名字是重要的，因为一个节点只能通过指定某个集群的名字，来加入这个集群。</p>\n<p><strong>节点 Node</strong><br />集群中包含很多服务器， 一个节点就是其中的一个服务器。 作为集群的一部分，它存储数据，参与集群的索引和搜索功能。</p>\n<p>一个节点也是由一个名字来标识的，默认情况下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网络中的哪些服务器对应于 Elasticsearch 集群中的哪些节点。</p>\n<p>一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫做“elasticsearch”的集群中，这意味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中。</p>\n<p>在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运<br />行任何 Elasticsearch 节点，这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的<br />集群。</p>\n<h2 id=\"Windows集群部署\"><a href=\"#Windows集群部署\" class=\"headerlink\" title=\"Windows集群部署\"></a>Windows集群部署</h2><ul>\n<li>创建 elasticsearch-cluster 文件夹</li>\n<li>创建 elasticsearch-7.8.0-cluster 文件夹，在内部复制三个 elasticsearch 服务</li>\n<li>修改集群文件目录中每个节点的 config/elasticsearch.yml 配置文件</li>\n<li>如果有必要，删除每个节点中的 data 目录中所有内容</li>\n</ul>\n<p><img src=\"/image/blog/elk1.png?raw=true\" alt=\"image.png\"></p>\n<p><img src=\"/image/blog/elk2.png?raw=true\" alt=\"image.png\"><img src=\"/image/blog/elk3.png?raw=true\" alt=\"image.png\"></p>\n<p><strong>启动集群</strong><br />分别依次双击执行节点的bin/elasticsearch.bat, 启动节点服务器（可以编写一个脚本启动），启动后，会自动加入指定名称的集群。</p>\n<p><strong>测试集群</strong><br />用Postman，查看集群状态<br />GET <a href=\"http://127.0.0.1:1001/_cluster/health\">http://127.0.0.1:1001/_cluster/health</a><br />GET <a href=\"http://127.0.0.1:1002/_cluster/health\">http://127.0.0.1:1002/_cluster/health</a><br />GET <a href=\"http://127.0.0.1:1003/_cluster/health\">http://127.0.0.1:1003/_cluster/health</a><br /><a href=\"https://blog.csdn.net/u011863024/article/details/115721328\"><br /></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;cluster_name&quot;</span>: <span class=\"hljs-string\">&quot;my-application&quot;</span>,<br>    <span class=\"hljs-string\">&quot;status&quot;</span>: <span class=\"hljs-string\">&quot;green&quot;</span>,<br>    <span class=\"hljs-string\">&quot;timed_out&quot;</span>: <span class=\"hljs-keyword\">false</span>,<br>    <span class=\"hljs-string\">&quot;number_of_nodes&quot;</span>: <span class=\"hljs-number\">3</span>,<br>    <span class=\"hljs-string\">&quot;number_of_data_nodes&quot;</span>: <span class=\"hljs-number\">3</span>,<br>    <span class=\"hljs-string\">&quot;active_primary_shards&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;active_shards&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;relocating_shards&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;initializing_shards&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;unassigned_shards&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;delayed_unassigned_shards&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;number_of_pending_tasks&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;number_of_in_flight_fetch&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;task_max_waiting_in_queue_millis&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;active_shards_percent_as_number&quot;</span>: <span class=\"hljs-number\">100.0</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>status字段</strong>指示着当前集群在总体上是否工作正常。它的三种颜色含义如下：</p>\n<ol>\n<li>green：所有的主分片和副本分片都正常运行</li>\n<li>yellow：所有的主分片都正常运行，但不是所有的副本分片都正常运行</li>\n<li>red：有主分片没能正常运行</li>\n</ol>\n<p>用Postman，在一节点增加索引，另一节点获取索引</p>\n<p>向集群中的node-1001节点增加索引：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">#PUT http:<span class=\"hljs-comment\">//127.0.0.1:1001/user</span><br></code></pre></td></tr></table></figure>\n<p>向集群中的node-1003节点获取索引：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">#GET http:<span class=\"hljs-comment\">//127.0.0.1:1003/user</span><br></code></pre></td></tr></table></figure>\n<p>如果在1003创建索引，同样在1001也能获取索引信息，这就是集群能力</p>\n<h2 id=\"环境-Linux单节点部署\"><a href=\"#环境-Linux单节点部署\" class=\"headerlink\" title=\"环境-Linux单节点部署\"></a>环境-Linux单节点部署</h2><blockquote>\n<p>下载软件 <a href=\"https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0\">链接</a></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"># 解压缩<br>tar -zxvf elasticsearch-<span class=\"hljs-number\">7.8</span><span class=\"hljs-number\">.0</span>-linux-x86_64.tar.gz -C /opt/<span class=\"hljs-keyword\">module</span><br><br># 改名<br>mv elasticsearch-<span class=\"hljs-number\">7.8</span><span class=\"hljs-number\">.0</span> es<br><br>useradd es #新增 es 用户<br><br>passwd es #为 es 用户设置密码<br><br>userdel -r es #如果错了，可以删除再加<br><br>chown -R es:es /opt/<span class=\"hljs-keyword\">module</span>/es #文件夹所有者<br></code></pre></td></tr></table></figure>\n<p>修改/opt/module/es/config/elasticsearch.yml文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"># 加入如下配置<br>cluster.name: elasticsearch<br>node.name: node-<span class=\"hljs-number\">1</span><br>network.host: <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span><br>http.port: <span class=\"hljs-number\">9200</span><br>cluster.initial_master_nodes: [<span class=\"hljs-string\">&quot;node-1&quot;</span>]<br></code></pre></td></tr></table></figure>\n<p>修改/etc/security/limits.conf</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"># 在文件末尾中增加下面内容<br># 每个进程可以打开的文件数的限制<br>es soft nofile <span class=\"hljs-number\">65536</span><br>es hard nofile <span class=\"hljs-number\">65536</span><br></code></pre></td></tr></table></figure>\n<p>修改/etc/security/limits.d/20-nproc.conf</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"># 在文件末尾中增加下面内容<br># 每个进程可以打开的文件数的限制<br>es soft nofile <span class=\"hljs-number\">65536</span><br>es hard nofile <span class=\"hljs-number\">65536</span><br># 操作系统级别对每个用户创建的进程数的限制<br>* hard nproc <span class=\"hljs-number\">4096</span><br># 注： * 带表 Linux 所有用户名称<br></code></pre></td></tr></table></figure>\n<p>修改/etc/sysctl.conf</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"># 在文件中增加下面内容<br># 一个进程可以拥有的 VMA(虚拟内存区域)的数量,默认值为 <span class=\"hljs-number\">65536</span><br>vm.max_map_count=<span class=\"hljs-number\">655360</span><br></code></pre></td></tr></table></figure>\n<p>重新加载</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">sysctl -p<br><br># 使用 ES 用户启动<br>cd /opt/<span class=\"hljs-keyword\">module</span>/es/<br>    <br>#启动<br>bin/elasticsearch<br><br>#后台启动<br>bin/elasticsearch -d  <br><br></code></pre></td></tr></table></figure>\n<p>启动时，会动态生成文件，如果文件所属用户不匹配，会发生错误，需要重新进行修改用户和用户组</p>\n<p><img src=\"/image/blog/elk4.png?raw=true\" alt=\"image.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">#暂时关闭防火墙<br>systemctl stop firewalld<br>#永久关闭防火墙<br>systemctl enable firewalld.service #打开防火墙永久性生效，重启后不会复原<br>systemctl disable firewalld.service #关闭防火墙，永久性生效，重启后不会复原<br></code></pre></td></tr></table></figure>\n<h3 id=\"测试软件\"><a href=\"#测试软件\" class=\"headerlink\" title=\"测试软件\"></a>测试软件</h3><p>浏览器中输入地址： <a href=\"http://linux1:9200/\">http://linux1:9200/</a><br /><img src=\"/image/blog/elk5.png?raw=true\" alt=\"image.png\"></p>\n<h1 id=\"Elasticsearch进阶\"><a href=\"#Elasticsearch进阶\" class=\"headerlink\" title=\"Elasticsearch进阶\"></a>Elasticsearch进阶</h1><h1 id=\"ELK-Stack\"><a href=\"#ELK-Stack\" class=\"headerlink\" title=\"ELK Stack\"></a>ELK Stack</h1><p><img src=\"/image/blog/elk6.png?raw=true\" alt=\"image.png\"><br />Input:：输入，输出数据可以是stdin，File，TCP，Redis，Syslog等<br />Filter：过滤，将日志格式化，有丰富的过滤插件，Grok正则捕获，Date日期处理，JSON解码，Mutate数据修改<br />Output：输出，输出目标可以是Stdin，File，TCP，Redis，ES等</p>\n<h1 id=\"Elasticsearch-Head插件\"><a href=\"#Elasticsearch-Head插件\" class=\"headerlink\" title=\"Elasticsearch-Head插件\"></a>Elasticsearch-Head插件</h1><blockquote>\n<p><a href=\"https://github.com/mobz/elasticsearch-head/releases\">下载</a></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><code class=\"hljs shell\">npm install<br>npm run start<br><span class=\"hljs-meta\">#</span><span class=\"bash\">  http://localhost:9100/</span><br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 修改es的yml文件</span><br>http.cors.enabled: true<br>http.cors.allow-origin: &quot;*&quot;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Logstash\"><a href=\"#Logstash\" class=\"headerlink\" title=\"Logstash\"></a>Logstash</h1><blockquote>\n<p><a href=\"https://elasticsearch.cn/download/#seg-3\">下载</a> </p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  beats &#123;<br>    port =&gt; 5044<br>  &#125;<br>&#125;<br><br>output &#123;<br>  elasticsearch &#123;<br>    hosts =&gt; [<span class=\"hljs-attr\">&quot;http://localhost:9200&quot;</span>]<br>    index =&gt; <span class=\"hljs-attr\">&quot;%&#123;[@metadata][beat]&#125;-%&#123;[@metadata][version]&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">logstash -f logstash.conf<br></code></pre></td></tr></table></figure>\n<h2 id=\"Input插件\"><a href=\"#Input插件\" class=\"headerlink\" title=\"Input插件\"></a>Input插件</h2><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  stdin &#123;<br>    <br>  &#125;<br>&#125;<br><br>output &#123;<br>  stdout &#123;<br>    codec =&gt; rubydebug<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  file &#123;<br>    path =&gt; <span class=\"hljs-attr\">&quot;/var/log/message&quot;</span><br>    tages =&gt; <span class=\"hljs-attr\">&quot;123&quot;</span><br>    type =&gt; <span class=\"hljs-attr\">&quot;syslog&quot;</span><br>  &#125;<br>&#125;<br> <br>output &#123;<br>  stdout &#123;<br>    codec =&gt; rubydebug<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  tcp &#123;<br>    port =&gt; 9200<br>    type =&gt; <span class=\"hljs-attr\">&quot;nc&quot;</span><br>  &#125; <br>&#125;<br> <br>output &#123;<br>  stdout &#123;<br>    codec =&gt; rubydebug<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  beats &#123;<br>    port =&gt; 5044<br>  &#125;<br>&#125;<br><br>output &#123;<br>  stdout &#123;<br>    codec =&gt; rubydebug<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Codec插件\"><a href=\"#Codec插件\" class=\"headerlink\" title=\"Codec插件\"></a>Codec插件</h2><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  stdin &#123;<br>    codec =&gt; json &#123;<br>      charset =&gt; [<span class=\"hljs-attr\">&quot;UTF-8&quot;</span>]<br>    &#125;<br>  &#125;<br>&#125;<br><br>output &#123;<br>  stdout &#123;<br>    codec =&gt; rubydebug<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  stdin &#123;<br>    codec =&gt; multiline &#123;<br>      <span class=\"hljs-comment\">// 不是以字符开头的，合并到上一行 正则匹配</span><br>      pattern =&gt; <span class=\"hljs-attr\">&quot;^\\s&quot;</span><br>      <span class=\"hljs-comment\">// 合并到上一行还是下一行</span><br>      what =&gt; <span class=\"hljs-attr\">&quot;previous&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br><br>output &#123;<br>  stdout &#123;<br>    codec =&gt; rubydebug<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Filter\"><a href=\"#Filter\" class=\"headerlink\" title=\"Filter\"></a>Filter</h2><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  stdin &#123;<br>   <br>  &#125;<br>&#125;<br>filter &#123;<br>  json &#123;<br>    <span class=\"hljs-comment\">// 解析字段</span><br>    source =&gt; <span class=\"hljs-attr\">&quot;message&quot;</span><br>    <span class=\"hljs-comment\">// 目标字段</span><br>    target =&gt; <span class=\"hljs-attr\">&quot;content&quot;</span><br>  &#125;<br>&#125;<br><br>output &#123;<br>  stdout &#123;<br>    codec =&gt; rubydebug<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  stdin &#123;<br>   <br>  &#125;<br>&#125;<br>filter &#123;<br>  kv &#123;<br>    <span class=\"hljs-comment\">// 根据 &amp; 和 ? 拆分字符串</span><br>    fleld_split =&gt; <span class=\"hljs-attr\">&quot;&amp;?&quot;</span> <br>    <span class=\"hljs-comment\">// 使用正则表达式</span><br>    fleld_split_pattern =&gt; <span class=\"hljs-attr\">&quot;:+&quot;</span><br>  &#125;<br>&#125;<br><br>output &#123;<br>  stdout &#123;<br>    codec =&gt; rubydebug<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p> <br /><img src=\"/image/blog/elk7.png?raw=true\" alt=\"image.png\"></p>\n<blockquote>\n<p><a href=\"https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-City&license_key=O38GA2SviPLnqfF5&suffix=tar.gz\">GEOIP下载</a> <a href=\"https://www.maxmind.com/en/accounts/347303/geoip/downloads?show_all_dates=1\">官网</a> <a href=\"https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-City&license_key=O38GA2SviPLnqfF5&suffix=tar.gz.sha256\">校验文件下载</a>  <a href=\"http://grokdebug.herokuapp.com/\">grok正则</a></p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  stdin &#123;<br>   <br>  &#125;<br>&#125;<br>filter &#123;<br>  gork &#123;<br>    match =&gt; &#123;<br>      <span class=\"hljs-comment\">// 正则匹配消息 日志示例： 223.72.85.86 GET /index.html 15824 0.043</span><br>      <span class=\"hljs-attr\">&quot;message&quot;</span> =&gt; <span class=\"hljs-attr\">&quot;%&#123;IP:client&#125; %&#123;WORD:method&#125; %&#123;URIPATHPARAM:request&#125; %&#123;NUMBER:bytes&#125; %&#123;NUMBER:duration&#125;&quot;</span><br>    &#125;<br>  &#125;<br>  geoip &#123;<br>    source =&gt; <span class=\"hljs-attr\">&quot;client&quot;</span><br>    database =&gt; <span class=\"hljs-attr\">&quot;D:\\path\\ELK\\GeoLite2-City_20220503/GeoLite2-City.mmdb&quot;</span><br>  &#125;<br>&#125;<br><br>output &#123;<br>  stdout &#123;<br>    codec =&gt; rubydebug<br>  &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 自定义匹配方式</span><br>gork &#123;<br>    <span class=\"hljs-comment\">// ID [0-9A-Z]&#123;10,11&#125;</span><br>    patterns_dir =&gt; <span class=\"hljs-attr\">&quot;D:\\path\\ELK\\patterns\\id_dir&quot;</span><br>    match =&gt; &#123;<br>      <span class=\"hljs-comment\">// 正则匹配消息 日志示例： 123124452A</span><br>      <span class=\"hljs-attr\">&quot;message&quot;</span> =&gt; <span class=\"hljs-attr\">&quot;%&#123;ID:id&#125;&quot;</span><br>    &#125;<br>  &#125;<br><br><span class=\"hljs-comment\">// 匹配多个</span><br>gork &#123;<br>    <span class=\"hljs-comment\">// ID [0-9A-Z]&#123;10,11&#125;</span><br>    patterns_dir =&gt; <span class=\"hljs-attr\">&quot;D:\\path\\ELK\\patterns\\id_dir&quot;</span><br>    match =&gt; [<br>      <span class=\"hljs-attr\">&quot;message&quot;</span>, <span class=\"hljs-attr\">&quot;%&#123;IP:client&#125; %&#123;WORD:method&#125;&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;message&quot;</span>, <span class=\"hljs-attr\">&quot;%&#123;ID:id&#125;&quot;</span><br>    ]<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p><img src=\"/image/blog/elk8.png?raw=true\" alt=\"image.png\"><img src=\"/image/blog/elk9.png?raw=true\" alt=\"image.png\"><br /><img src=\"/image/blog/elk10.png?raw=true\" alt=\"image.png\"></p>\n<h2 id=\"Output插件\"><a href=\"#Output插件\" class=\"headerlink\" title=\"Output插件\"></a>Output插件</h2><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  file &#123;<br>    path =&gt; [<span class=\"hljs-attr\">&quot;/var/log/messages&quot;</span>]<br>    type =&gt; <span class=\"hljs-attr\">&quot;system&quot;</span><br>    tags =&gt; [<span class=\"hljs-attr\">&quot;syslog&quot;</span>,<span class=\"hljs-attr\">&quot;test&quot;</span>]<br>    start_position =&gt; <span class=\"hljs-attr\">&quot;beginning&quot;</span><br>  &#125;<br>  file &#123;<br>    path =&gt; [<span class=\"hljs-attr\">&quot;/var/log/audit/audit.log&quot;</span>]<br>    type =&gt; <span class=\"hljs-attr\">&quot;system&quot;</span><br>    tags =&gt; [<span class=\"hljs-attr\">&quot;auth&quot;</span>,<span class=\"hljs-attr\">&quot;test&quot;</span>]<br>    start_position =&gt; <span class=\"hljs-attr\">&quot;beginning&quot;</span><br>  &#125;<br>&#125;<br>filter &#123;<br> <br>&#125;<br><br>output &#123;<br>  if [type] == <span class=\"hljs-attr\">&quot;system&quot;</span> &#123;<br>    if [tages][0] == <span class=\"hljs-attr\">&quot;syslog&quot;</span> &#123;<br>      elasticsearch &#123;<br>         hosts =&gt; [<span class=\"hljs-attr\">&quot;http://localhost:9200&quot;</span>]<br>         index =&gt; <span class=\"hljs-attr\">&quot;logstash-system-syslog-%&#123;+YYYY.MM.dd&#125;&quot;</span><br>      &#125;<br>      stdout &#123;<br>         codec =&gt; rubydebug<br>      &#125;<br>    &#125;<br>    else if [tages][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;auth&quot;</span> &#123;<br>       elasticsearch &#123;<br>         hosts =&gt; [<span class=\"hljs-attr\">&quot;http://localhost:9200&quot;</span>]<br>         index =&gt; <span class=\"hljs-attr\">&quot;logstash-system-auth-%&#123;+YYYY.MM.dd&#125;&quot;</span><br>      &#125;<br>      stdout &#123;<br>         codec =&gt; rubydebug<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"Kibana\"><a href=\"#Kibana\" class=\"headerlink\" title=\"Kibana\"></a>Kibana</h1><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">i18n.locale:</span> <span class=\"hljs-string\">&quot;zh-CN&quot;</span><br></code></pre></td></tr></table></figure>\n<p><img src=\"/image/blog/elk11.png?raw=true\" alt=\"image.png\"><br />使用nginx代理kibana</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-section\">http</span> &#123;<br>  <span class=\"hljs-section\">server</span> &#123;<br>    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;<br>    <span class=\"hljs-attribute\">server_name</span> localhost;<br>    <br>    <span class=\"hljs-attribute\">location</span> / &#123;<br>      <span class=\"hljs-attribute\">proxy_pass</span> http://localhost:5601;<br>      <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">&quot;请输入用户名和密码！&quot;</span>;<br>      // 指定用户文件<br>      <span class=\"hljs-attribute\">auth_basic_user_file</span> /mydata/nginx/conf/user.db;  <br>      <span class=\"hljs-attribute\">root</span> html;<br>      <span class=\"hljs-attribute\">index</span> index.html index.htm;<br>    &#125;<br>    <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 生成密文密码</span><br>openssl passwd -crytp 123456<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><code class=\"hljs nginx\">// 用户名：密码<br>fxb: faHgR3X/qNehA<br></code></pre></td></tr></table></figure>\n<h1 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h1><p><img src=\"/image/blog/elk12.png?raw=true\" alt=\"image.png\"><br />   </p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  file &#123;<br>    path =&gt; [<span class=\"hljs-attr\">&quot;/var/log/messages&quot;</span>]<br>    type =&gt; <span class=\"hljs-attr\">&quot;system&quot;</span><br>    tags =&gt; [<span class=\"hljs-attr\">&quot;syslog&quot;</span>,<span class=\"hljs-attr\">&quot;test&quot;</span>]<br>    start_position =&gt; <span class=\"hljs-attr\">&quot;beginning&quot;</span><br>  &#125;<br>  file &#123;<br>    path =&gt; [<span class=\"hljs-attr\">&quot;/var/log/audit/audit.log&quot;</span>]<br>    type =&gt; <span class=\"hljs-attr\">&quot;system&quot;</span><br>    tags =&gt; [<span class=\"hljs-attr\">&quot;auth&quot;</span>,<span class=\"hljs-attr\">&quot;test&quot;</span>]<br>    start_position =&gt; <span class=\"hljs-attr\">&quot;beginning&quot;</span><br>  &#125;<br>&#125;<br><br>filter &#123;<br> <br>&#125;<br><br>output &#123;<br>  redis &#123;<br>     host =&gt; [<span class=\"hljs-attr\">&quot;localhost:6379&quot;</span>]<br>     password =&gt; <span class=\"hljs-attr\">&quot;123456&quot;</span><br>     db =&gt; <span class=\"hljs-attr\">&quot;0&quot;</span><br>     data_type =&gt; <span class=\"hljs-attr\">&quot;list&quot;</span><br>     key =&gt; <span class=\"hljs-attr\">&quot;logstash&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  redis &#123;<br>    host =&gt; <span class=\"hljs-attr\">&quot;localhost&quot;</span><br>    port =&gt; 6379<br>    password =&gt; <span class=\"hljs-attr\">&quot;123456&quot;</span><br>    db =&gt; <span class=\"hljs-attr\">&quot;0&quot;</span><br>    data_type =&gt; <span class=\"hljs-attr\">&quot;list&quot;</span><br>    key =&gt; <span class=\"hljs-attr\">&quot;logstash&quot;</span><br>  &#125;<br>&#125;<br><br>filter &#123;<br>  <br>&#125;<br><br>output &#123;<br>  if [type] == <span class=\"hljs-attr\">&quot;system&quot;</span> &#123;<br>    if [tages][0] == <span class=\"hljs-attr\">&quot;syslog&quot;</span> &#123;<br>      elasticsearch &#123;<br>        hosts =&gt; [<span class=\"hljs-attr\">&quot;http://localhost:9200&quot;</span>]<br>        index =&gt; <span class=\"hljs-attr\">&quot;logstash-system-syslog-%&#123;+YYYY.MM.dd&#125;&quot;</span><br>      &#125;<br>      stdout &#123;<br>        codec =&gt; rubydebug<br>      &#125;<br>    &#125;<br>    else if [tages][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;auth&quot;</span> &#123;<br>      elasticsearch &#123;<br>        hosts =&gt; [<span class=\"hljs-attr\">&quot;http://localhost:9200&quot;</span>]<br>        index =&gt; <span class=\"hljs-attr\">&quot;logstash-system-auth-%&#123;+YYYY.MM.dd&#125;&quot;</span><br>      &#125;<br>      stdout &#123;<br>        codec =&gt; rubydebug<br>      &#125; <br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"FileBeat\"><a href=\"#FileBeat\" class=\"headerlink\" title=\"FileBeat\"></a>FileBeat</h1><p><img src=\"/image/blog/elk13.png?raw=true\" alt=\"image.png\"></p>\n<blockquote>\n<p><a href=\"https://www.elastic.co/guide/en/beats/filebeat/7.7/configuration-filebeat-options.html\">相关说明</a></p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">filebeat.inputs:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">log</span> <br>  <span class=\"hljs-attr\">paths:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/var/log/system.log</span><br>  <span class=\"hljs-attr\">tags:</span> [<span class=\"hljs-string\">&quot;syslog&quot;</span>]<br><span class=\"hljs-attr\">fields:</span><br>  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">system</span><br><span class=\"hljs-attr\">fields_under_root:</span> <span class=\"hljs-literal\">true</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">log</span> <br>  <span class=\"hljs-attr\">paths:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/var/log/auth.log</span><br>  <span class=\"hljs-attr\">tags:</span> [<span class=\"hljs-string\">&quot;auth&quot;</span>]<br><span class=\"hljs-attr\">fields:</span><br>  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">system</span><br><span class=\"hljs-attr\">fields_under_root:</span> <span class=\"hljs-literal\">true</span><br><br><span class=\"hljs-attr\">output.redis:</span><br>  <span class=\"hljs-attr\">hosts:</span> [<span class=\"hljs-string\">&quot;localhost:6379&quot;</span>]<br>  <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">&quot;123456&quot;</span><br>  <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">&quot;filebeat&quot;</span><br>  <span class=\"hljs-attr\">db:</span> <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-number\">5</span><br>  <span class=\"hljs-attr\">datatype:</span> <span class=\"hljs-string\">list</span><br></code></pre></td></tr></table></figure>\n<h1 id=\"日志收集\"><a href=\"#日志收集\" class=\"headerlink\" title=\"日志收集\"></a>日志收集</h1><h2 id=\"Nginx日志收集\"><a href=\"#Nginx日志收集\" class=\"headerlink\" title=\"Nginx日志收集\"></a>Nginx日志收集</h2><p><img src=\"/image/blog/elk14.png?raw=true\" alt=\"image.png\"><img src=\"/image/blog/elk15.png?raw=true\" alt=\"image.png\"></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-comment\"># 日志</span><br><span class=\"hljs-attribute\">error_log</span>  /var/log/nginx/error.log <span class=\"hljs-literal\">warn</span>;<br><span class=\"hljs-attribute\">pid</span>        /var/run/nginx.pid;<br><br><span class=\"hljs-comment\"># http块</span><br><span class=\"hljs-section\">http</span> &#123;<br>    <span class=\"hljs-comment\"># nginx默认格式  </span><br>    <span class=\"hljs-attribute\">log_format</span>  main  <span class=\"hljs-string\">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>                      <span class=\"hljs-string\">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>                      <span class=\"hljs-string\">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;<br>    <span class=\"hljs-comment\"># 自定义格式</span><br>    <span class=\"hljs-comment\"># 时间戳 + 远程地址 + 远程用户 + 请求时间 + 状态码 + 请求方法 + 内存大小 + 扩展头部 + 用户代理</span><br>    <span class=\"hljs-attribute\">log_format</span> json <span class=\"hljs-string\">&#x27;&#123; &quot;@timestamp&quot;: &quot;$time_iso8601&quot;, &#x27;</span><br>         <span class=\"hljs-string\">&#x27;&quot;remote_addr&quot;: &quot;$remote_addr&quot;, &#x27;</span><br>         <span class=\"hljs-string\">&#x27;&quot;remote_user&quot;: &quot;$remote_user&quot;, &#x27;</span><br>         <span class=\"hljs-string\">&#x27;&quot;request_time&quot;: &quot;$request_time&quot;, &#x27;</span><br>         <span class=\"hljs-string\">&#x27;&quot;status&quot;: &quot;$status&quot;, &#x27;</span><br>         <span class=\"hljs-string\">&#x27;&quot;request_uri&quot;: &quot;$request_uri&quot;, &#x27;</span><br>         <span class=\"hljs-string\">&#x27;&quot;request_method&quot;: &quot;$request_method&quot;, &#x27;</span><br>         <span class=\"hljs-string\">&#x27;&quot;http_referrer&quot;: &quot;$http_referer&quot;, &#x27;</span><br>         <span class=\"hljs-string\">&#x27;&quot;body_bytes_sent&quot;: &quot;$body_bytes_sent&quot;, &#x27;</span><br>         <span class=\"hljs-string\">&#x27;&quot;http_x_forwarded_for&quot;: &quot;$http_x_forwarded_for&quot;, &#x27;</span><br>         <span class=\"hljs-string\">&#x27;&quot;http_user_agent&quot;: &quot;$http_user_agent&quot;&#125;&#x27;</span>;、<br>    <br>    <span class=\"hljs-attribute\">access_log</span>  /var/log/nginx/access.log  json;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><img src=\"/image/blog/elk16.png?raw=true\" alt=\"image.png\"><br /> </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">filebeat.inputs:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">log</span> <br>  <span class=\"hljs-attr\">paths:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/var/log/nginx/access.log</span><br>  <span class=\"hljs-attr\">tags:</span> [<span class=\"hljs-string\">&quot;access&quot;</span>]<br><span class=\"hljs-attr\">fields:</span><br>  <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">www</span><br>  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">ngxin-access</span><br><span class=\"hljs-attr\">fields_under_root:</span> <span class=\"hljs-literal\">true</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">log</span> <br>  <span class=\"hljs-attr\">paths:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/var/log/nginx/error.log</span><br>  <span class=\"hljs-attr\">tags:</span> [<span class=\"hljs-string\">&quot;error&quot;</span>]<br><span class=\"hljs-attr\">fields:</span><br>  <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">www</span><br>  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">ngxin-error</span><br><span class=\"hljs-attr\">fields_under_root:</span> <span class=\"hljs-literal\">true</span><br><br><span class=\"hljs-attr\">output.redis:</span><br>  <span class=\"hljs-attr\">hosts:</span> [<span class=\"hljs-string\">&quot;localhost:6379&quot;</span>]<br>  <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">&quot;123456&quot;</span><br>  <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">&quot;filebeat&quot;</span><br>  <span class=\"hljs-attr\">db:</span> <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-number\">5</span><br>  <span class=\"hljs-attr\">datatype:</span> <span class=\"hljs-string\">list</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>    redis &#123;<br>        host =&gt; <span class=\"hljs-attr\">&quot;localhost&quot;</span><br>        port =&gt; 6379<br>        password =&gt; <span class=\"hljs-attr\">&quot;123456&quot;</span><br>        db =&gt; <span class=\"hljs-attr\">&quot;0&quot;</span><br>        data_type =&gt; <span class=\"hljs-attr\">&quot;list&quot;</span><br>        key =&gt; <span class=\"hljs-attr\">&quot;filebeat&quot;</span><br>    &#125;<br>&#125;<br><br>filter &#123;<br>  if [app] == <span class=\"hljs-attr\">&quot;www&quot;</span> &#123;<br>    if [type] == <span class=\"hljs-attr\">&quot;nginx-access&quot;</span> &#123;<br>      json &#123;<br>          source =&gt; <span class=\"hljs-attr\">&quot;message&quot;</span><br>          remove_field =&gt; [<span class=\"hljs-attr\">&quot;message&quot;</span>]<br>      &#125;<br>      geoip &#123;<br>          source =&gt; <span class=\"hljs-attr\">&quot;remote_addr&quot;</span><br>          target =&gt; <span class=\"hljs-attr\">&quot;geoip&quot;</span><br>          database =&gt; <span class=\"hljs-attr\">&quot;D:\\path\\ELK\\GeoLite2-City_20220503\\GeoLite2-City.mmdb&quot;</span><br>          add_field =&gt; [<span class=\"hljs-attr\">&quot;[geoip][coordinates]&quot;</span>, <span class=\"hljs-attr\">&quot;%&#123;[geoip][longitude]&#125;&quot;</span>] <br>          add_field =&gt; [<span class=\"hljs-attr\">&quot;[geoip][coordinates]&quot;</span>, <span class=\"hljs-attr\">&quot;%&#123;[geoip][latitude]&#125;&quot;</span>]<br>      &#125;<br>      mutate &#123;<br>          convert =&gt; [<span class=\"hljs-attr\">&quot;[geoip][coordinates]&quot;</span>, <span class=\"hljs-attr\">&quot;float&quot;</span>]  <br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br>output &#123;<br>  elasticsearch &#123;<br>      hosts  =&gt; [<span class=\"hljs-attr\">&quot;http://localhost:9200&quot;</span>]<br>      index  =&gt; <span class=\"hljs-attr\">&quot;logstash-%&#123;type&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span><br>  &#125;<br>  stdout&#123;codec =&gt; rubydebug &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><img src=\"/image/blog/elk17.png?raw=true\" alt=\"image.png\"></p>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><br /></h1><h2 id=\"Java堆栈日志收集\"><a href=\"#Java堆栈日志收集\" class=\"headerlink\" title=\"Java堆栈日志收集\"></a>Java堆栈日志收集</h2><p><img src=\"/image/blog/elk18.png?raw=true\" alt=\"image.png\"></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">filebeat.prospectors:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">log</span><br>  <span class=\"hljs-attr\">paths:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/usr/local/tomcat/logs/catalina.out</span><br>  <span class=\"hljs-attr\">tags:</span> [<span class=\"hljs-string\">&quot;tomcat&quot;</span>]<br>  <span class=\"hljs-attr\">fields:</span><br>    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">www</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">tomcat-catalina</span><br>  <span class=\"hljs-attr\">fields_under_root:</span> <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-attr\">multiline:</span><br>    <span class=\"hljs-attr\">pattern:</span> <span class=\"hljs-string\">&#x27;^\\[&#x27;</span><br>    <span class=\"hljs-attr\">negate:</span> <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-attr\">match:</span> <span class=\"hljs-string\">after</span><br><br><span class=\"hljs-attr\">output.redis:</span><br>  <span class=\"hljs-attr\">hosts:</span> [<span class=\"hljs-string\">&quot;localhost:6379&quot;</span>]<br>  <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">&quot;123456&quot;</span><br>  <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">&quot;filebeat&quot;</span><br>  <span class=\"hljs-attr\">db:</span> <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-attr\">datatype:</span> <span class=\"hljs-string\">list</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"定制日志格式收集\"><a href=\"#定制日志格式收集\" class=\"headerlink\" title=\"定制日志格式收集\"></a>定制日志格式收集</h2><p>ngxin默认的 main 格式日志<br /><img src=\"/image/blog/elk19.png?raw=true\" alt=\"image.png\"><br />使用 Grok 进行匹配</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>    redis &#123;<br>        host =&gt; <span class=\"hljs-attr\">&quot;localhost&quot;</span><br>        port =&gt; 6379<br>        password =&gt; <span class=\"hljs-attr\">&quot;123456&quot;</span><br>        db =&gt; <span class=\"hljs-attr\">&quot;0&quot;</span><br>        data_type =&gt; <span class=\"hljs-attr\">&quot;list&quot;</span><br>        key =&gt; <span class=\"hljs-attr\">&quot;filebeat&quot;</span><br>    &#125;<br>&#125;<br><br>filter &#123;<br>  if [app] == <span class=\"hljs-attr\">&quot;www&quot;</span> &#123;<br>    if [type] == <span class=\"hljs-attr\">&quot;nginx-access&quot;</span> &#123;<br>      grok &#123;<br>        match =&gt; &#123;<br>          <span class=\"hljs-attr\">&quot;message&quot;</span> =&gt; <span class=\"hljs-attr\">&quot;%&#123;IPV4:remote_addr&#125; - (%&#123;USERNAME:remote_user&#125;|-) \\[%&#123;HTTPDATE:time_local&#125;\\] \\&quot;%&#123;WORD:request_method&#125; %&#123;URIPATHPARAM:request_uri&#125; HTTP/%&#123;NUMBER:http_protocol&#125;\\&quot; %&#123;NUMBER:http_status&#125; %&#123;NUMBER:body_bytes_sent&#125; \\&quot;%&#123;GREEDYDATA:http_referer&#125;\\&quot; \\&quot;%&#123;GREEDYDATA:http_user_agent&#125;\\&quot; \\&quot;(%&#123;IPV4:http_x_forwarded_for&#125;|-)\\&quot;&quot;</span><br>        &#125;<br>        overwrite =&gt; [<span class=\"hljs-string\">&quot;message&quot;</span>]<br>      &#125;<br>      geoip &#123;<br>          source =&gt; <span class=\"hljs-attr\">&quot;remote_addr&quot;</span><br>          target =&gt; <span class=\"hljs-attr\">&quot;geoip&quot;</span><br>          database =&gt; <span class=\"hljs-attr\">&quot;/opt/GeoLite2-City.mmdb&quot;</span><br>          add_field =&gt; [<span class=\"hljs-attr\">&quot;[geoip][coordinates]&quot;</span>, <span class=\"hljs-attr\">&quot;%&#123;[geoip][longitude]&#125;&quot;</span>] <br>          add_field =&gt; [<span class=\"hljs-attr\">&quot;[geoip][coordinates]&quot;</span>, <span class=\"hljs-attr\">&quot;%&#123;[geoip][latitude]&#125;&quot;</span>]<br>      &#125;<br>      date &#123;<br>          locale =&gt; <span class=\"hljs-attr\">&quot;en&quot;</span><br>          match =&gt; [<span class=\"hljs-attr\">&quot;time_local&quot;</span>, <span class=\"hljs-attr\">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span>]<br>      &#125;<br>      mutate &#123;<br>          convert =&gt; [<span class=\"hljs-attr\">&quot;[geoip][coordinates]&quot;</span>, <span class=\"hljs-attr\">&quot;float&quot;</span>]  <br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br>output &#123;<br>  elasticsearch &#123;<br>      hosts  =&gt; [<span class=\"hljs-attr\">&quot;http://lcoalhost:9200&quot;</span>]<br>      index  =&gt; <span class=\"hljs-attr\">&quot;logstash-%&#123;type&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span><br>  &#125;<br>  stdout&#123;codec =&gt; rubydebug &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"Log4j收集\"><a href=\"#Log4j收集\" class=\"headerlink\" title=\"Log4j收集\"></a>Log4j收集</h2><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-comment\">### 设置###</span><br><span class=\"hljs-meta\">log4j.rootLogger</span> = <span class=\"hljs-string\">debug,stdout,D,E,logstash</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">### 输出信息到控制抬 ###</span><br><span class=\"hljs-meta\">log4j.appender.stdout</span> = <span class=\"hljs-string\">org.apache.log4j.ConsoleAppender</span><br><span class=\"hljs-meta\">log4j.appender.stdout.Target</span> = <span class=\"hljs-string\">System.out</span><br><span class=\"hljs-meta\">log4j.appender.stdout.layout</span> = <span class=\"hljs-string\">org.apache.log4j.PatternLayout</span><br><span class=\"hljs-meta\">log4j.appender.stdout.layout.ConversionPattern</span> = <span class=\"hljs-string\">[%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">### 输出DEBUG 级别以上的日志到=/Users/bee/Documents/elk/log4j/debug.log###</span><br><span class=\"hljs-meta\">log4j.appender.D</span> = <span class=\"hljs-string\">org.apache.log4j.DailyRollingFileAppender</span><br><span class=\"hljs-meta\">log4j.appender.D.File</span> = <span class=\"hljs-string\">/Users/bee/Documents/elk/log4j/debug.log</span><br><span class=\"hljs-meta\">log4j.appender.D.Append</span> = <span class=\"hljs-string\">true</span><br><span class=\"hljs-meta\">log4j.appender.D.Threshold</span> = <span class=\"hljs-string\">DEBUG </span><br><span class=\"hljs-meta\">log4j.appender.D.layout</span> = <span class=\"hljs-string\">org.apache.log4j.PatternLayout</span><br><span class=\"hljs-meta\">log4j.appender.D.layout.ConversionPattern</span> = <span class=\"hljs-string\">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">### 输出ERROR 级别以上的日志到=/Users/bee/Documents/elk/log4j/error.log  ###</span><br><span class=\"hljs-meta\">log4j.appender.E</span> = <span class=\"hljs-string\">org.apache.log4j.DailyRollingFileAppender</span><br><span class=\"hljs-meta\">log4j.appender.E.File</span> =<span class=\"hljs-string\">/Users/bee/Documents/elk/log4j/error.log </span><br><span class=\"hljs-meta\">log4j.appender.E.Append</span> = <span class=\"hljs-string\">true</span><br><span class=\"hljs-meta\">log4j.appender.E.Threshold</span> = <span class=\"hljs-string\">ERROR </span><br><span class=\"hljs-meta\">log4j.appender.E.layout</span> = <span class=\"hljs-string\">org.apache.log4j.PatternLayout</span><br><span class=\"hljs-meta\">log4j.appender.E.layout.ConversionPattern</span> = <span class=\"hljs-string\">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">#输出日志到logstash</span><br><span class=\"hljs-meta\">log4j.appender.logstash</span>=<span class=\"hljs-string\">org.apache.log4j.net.SocketAppender</span><br><span class=\"hljs-meta\">log4j.appender.logstash.RemoteHost</span>=<span class=\"hljs-string\">127.0.0.1</span><br><span class=\"hljs-meta\">log4j.appender.logstash.port</span>=<span class=\"hljs-string\">4560</span><br><span class=\"hljs-meta\">log4j.appender.logstash.ReconnectionDelay</span>=<span class=\"hljs-string\">60000</span><br><span class=\"hljs-meta\">log4j.appender.logstash.LocationInfo</span>=<span class=\"hljs-string\">true</span><br></code></pre></td></tr></table></figure>\n\n<ol>\n<li>第一份输出到控制台</li>\n<li>第二份把DEBUG 级别以上的日志到文件</li>\n<li>第三份把输出ERROR 级别以上的日志到文件</li>\n<li>第四份输出到logstash<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>    log4j &#123;<br>        host =&gt; <span class=\"hljs-attr\">&quot;127.0.0.1&quot;</span><br>        port =&gt; 8001<br>    &#125;<br>&#125;<br><br>output &#123;<br>    elasticsearch&#123;<br>        hosts =&gt; [<span class=\"hljs-attr\">&quot;localhost:9200&quot;</span>]<br>        index =&gt; <span class=\"hljs-attr\">&quot;log4j-%&#123;+YYYY.MM.dd&#125;&quot;</span><br>    &#125;<br>    stdout &#123;<br>      codec =&gt; rubydebug<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.apache.log4j.Logger;<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Created by bee on 17/3/6.</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Log4jTest</span> </span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Logger logger=Logger.getLogger(Log4jTest.class);<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        logger.debug(<span class=\"hljs-string\">&quot;This is a debug message!&quot;</span>);<br>        logger.info(<span class=\"hljs-string\">&quot;This is info message!&quot;</span>);<br>        logger.warn(<span class=\"hljs-string\">&quot;This is a warn message!&quot;</span>);<br>        logger.error(<span class=\"hljs-string\">&quot;This is error message!&quot;</span>);<br>        <span class=\"hljs-keyword\">try</span>&#123;<br>           System.out.println(<span class=\"hljs-number\">5</span>/<span class=\"hljs-number\">0</span>);<br>        &#125;<span class=\"hljs-keyword\">catch</span>(Exception e)&#123;<br>            logger.error(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<img src=\"/image/blog/elk20.png?raw=true\"></li>\n</ol>\n<h2 id=\"Kibana仪表盘可视化\"><a href=\"#Kibana仪表盘可视化\" class=\"headerlink\" title=\"Kibana仪表盘可视化\"></a>Kibana仪表盘可视化</h2><ul>\n<li>PV/UV</li>\n<li>用户地理位置分布</li>\n<li>URL，HTTP Status，IP TOP10</li>\n</ul>\n<p><img src=\"/image/blog/elk21.png?raw=true\" alt=\"image.png\"></p>\n","site":{"data":{}},"more":"<h1 id=\"Elasticsearch\"><a href=\"#Elasticsearch\" class=\"headerlink\" title=\"Elasticsearch\"></a>Elasticsearch</h1><blockquote>\n<p>分布式、RESTful风格的搜索和分析</p>\n</blockquote>\n<p><strong>全文搜索引擎</strong><br />Google，百度类的网站搜索，它们都是根据网页中的关键字生成索引，我们在搜索的时候输入关键字，它们会将该关键字即索引匹配到的所有网页返回；还有常见的项目中应用日志的搜索等等。对于这些非结构化的数据文本，关系型数据库搜索不是能很好的支持。</p>\n<p>一般传统数据库，全文检索都实现的很鸡肋，因为一般也没人用数据库存文本字段。进行全文检索需要扫描整个表，如果数据量大的话即使对 SQL 的语法优化，也收效甚微。建立了索引，但是维护起来也很麻烦，对于 insert 和 update 操作都会重新构建索引。</p>\n<p>基于以上原因可以分析得出，在一些生产环境中，使用常规的搜索方式，性能是非常差的：</p>\n<p>搜索的数据对象是大量的非结构化的文本数据。<br />文件记录量达到数十万或数百万个甚至更多。<br />支持大量基于交互式文本的查询。<br />需求非常灵活的全文搜索查询。<br />对高度相关的搜索结果的有特殊需求，但是没有可用的关系数据库可以满足。<br />对不同记录类型、非文本数据操作或安全事务处理的需求相对较少的情况。为了解决结构化数据搜索和非结构化数据搜索性能问题，我们就需要专业，健壮，强大的全文搜索引擎 。</p>\n<p><strong>这里说到的全文搜索引擎指的是目前广泛应用的主流搜索引擎</strong>。它的工作原理是计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。这个过程类似于通过字典中的检索字表查字的过程。<br /><strong>Elasticsearch 应用案例</strong><br />GitHub: 2013 年初，抛弃了 Solr，采取 Elasticsearch 来做 PB 级的搜索。 “GitHub 使用Elasticsearch 搜索 20TB 的数据，包括 13 亿文件和 1300 亿行代码”。<br />维基百科：启动以 Elasticsearch 为基础的核心搜索架构<br />百度：目前广泛使用 Elasticsearch 作为文本数据分析，采集百度所有服务器上的各类指标数据及用户自定义数据，通过对各种数据进行多维分析展示，辅助定位分析实例异常或业务层面异常。目前覆盖百度内部 20 多个业务线（包括云分析、网盟、预测、文库、直达号、钱包、 风控等），单集群最大 100 台机器， 200 个 ES 节点，每天导入 30TB+数据。<br />新浪：使用 Elasticsearch 分析处理 32 亿条实时日志。<br />阿里：使用 Elasticsearch 构建日志采集和分析体系。<br />Stack Overflow：解决 Bug 问题的网站，全英文，编程人员交流的网站。<br /></p>\n<h2 id=\"Elasticsearch入门\"><a href=\"#Elasticsearch入门\" class=\"headerlink\" title=\"Elasticsearch入门\"></a>Elasticsearch入门</h2><blockquote>\n<p><a href=\"https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0\">下载连接</a> <a href=\"https://www.elastic.co/guide/index.html\">官方文档</a> <a href=\"https://www.postman.com/downloads/\">postman</a></p>\n</blockquote>\n<p>Windows 版的 Elasticsearch 压缩包，解压即安装完毕，解压后的 Elasticsearch 的目录结构如下 ：</p>\n<table>\n<thead>\n<tr>\n<th><strong>目录</strong></th>\n<th><strong>含义</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bin</td>\n<td>可执行脚本目录</td>\n</tr>\n<tr>\n<td>config</td>\n<td>配置目录</td>\n</tr>\n<tr>\n<td>jdk</td>\n<td>内置 JDK 目录</td>\n</tr>\n<tr>\n<td>lib</td>\n<td>类库</td>\n</tr>\n<tr>\n<td>logs</td>\n<td>日志目录</td>\n</tr>\n<tr>\n<td>modules</td>\n<td>模块目录</td>\n</tr>\n<tr>\n<td>plugins</td>\n<td>插件目录</td>\n</tr>\n</tbody></table>\n<p>解压后，进入 bin 文件目录，点击 elasticsearch.bat 文件启动 ES 服务 。</p>\n<p>注意： 9300 端口为 Elasticsearch 集群间组件的通信端口， 9200 端口为浏览器访问的 http协议 RESTful 端口。</p>\n<p>打开浏览器，输入地址： <a href=\"http://localhost:9200/\">http://localhost:9200</a>，测试返回结果，返回结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>  <span class=\"hljs-string\">&quot;name&quot;</span> : <span class=\"hljs-string\">&quot;DESKTOP-LNJQ0VF&quot;</span>,<br>  <span class=\"hljs-string\">&quot;cluster_name&quot;</span> : <span class=\"hljs-string\">&quot;elasticsearch&quot;</span>,<br>  <span class=\"hljs-string\">&quot;cluster_uuid&quot;</span> : <span class=\"hljs-string\">&quot;nCZqBhfdT1-pw8Yas4QU9w&quot;</span>,<br>  <span class=\"hljs-string\">&quot;version&quot;</span> : &#123;<br>    <span class=\"hljs-string\">&quot;number&quot;</span> : <span class=\"hljs-string\">&quot;7.8.0&quot;</span>,<br>    <span class=\"hljs-string\">&quot;build_flavor&quot;</span> : <span class=\"hljs-string\">&quot;default&quot;</span>,<br>    <span class=\"hljs-string\">&quot;build_type&quot;</span> : <span class=\"hljs-string\">&quot;zip&quot;</span>,<br>    <span class=\"hljs-string\">&quot;build_hash&quot;</span> : <span class=\"hljs-string\">&quot;757314695644ea9a1dc2fecd26d1a43856725e65&quot;</span>,<br>    <span class=\"hljs-string\">&quot;build_date&quot;</span> : <span class=\"hljs-string\">&quot;2020-06-14T19:35:50.234439Z&quot;</span>,<br>    <span class=\"hljs-string\">&quot;build_snapshot&quot;</span> : <span class=\"hljs-keyword\">false</span>,<br>    <span class=\"hljs-string\">&quot;lucene_version&quot;</span> : <span class=\"hljs-string\">&quot;8.5.1&quot;</span>,<br>    <span class=\"hljs-string\">&quot;minimum_wire_compatibility_version&quot;</span> : <span class=\"hljs-string\">&quot;6.8.0&quot;</span>,<br>    <span class=\"hljs-string\">&quot;minimum_index_compatibility_version&quot;</span> : <span class=\"hljs-string\">&quot;6.0.0-beta1&quot;</span><br>  &#125;,<br>  <span class=\"hljs-string\">&quot;tagline&quot;</span> : <span class=\"hljs-string\">&quot;You Know, for Search&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>Elasticsearch 是<strong>面向文档型数据库</strong>，一条数据在这里就是一个文档。 为了方便大家理解，我们将 Elasticsearch 里存储文档数据和关系型数据库 MySQL 存储数据的概念进行一个类比</p>\n<p><img src=\"/image/blog/image2.png\" alt=\"image.png\"><br />ES 里的 Index 可以看做一个库，而 Types 相当于表， Documents 则相当于表的行。这里 Types 的概念已经被逐渐弱化， Elasticsearch 6.X 中，一个 index 下已经只能包含一个type， Elasticsearch 7.X 中, Type 的概念已经被删除了。</p>\n<h2 id=\"索引-创建\"><a href=\"#索引-创建\" class=\"headerlink\" title=\"索引-创建\"></a>索引-创建</h2><p>对比关系型数据库，创建索引就等同于创建数据库。<br />在 Postman 中，向 ES 服务器发 PUT 请求 ：** <a href=\"http://127.0.0.1:9200/shopping\">http://127.0.0.1:9200/shopping</a>**<br />请求后，服务器返回响应：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;acknowledged&quot;</span>: <span class=\"hljs-keyword\">true</span>,<span class=\"hljs-comment\">//响应结果</span><br>    <span class=\"hljs-string\">&quot;shards_acknowledged&quot;</span>: <span class=\"hljs-keyword\">true</span>,<span class=\"hljs-comment\">//分片结果</span><br>    <span class=\"hljs-string\">&quot;index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span><span class=\"hljs-comment\">//索引名称</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"索引-查询-amp-删除\"><a href=\"#索引-查询-amp-删除\" class=\"headerlink\" title=\"索引-查询 &amp; 删除\"></a>索引-查询 &amp; 删除</h2><h3 id=\"查看所有索引\"><a href=\"#查看所有索引\" class=\"headerlink\" title=\"查看所有索引\"></a>查看所有索引</h3><p>在 Postman 中，向 ES 服务器发 GET 请求 ： <a href=\"http://127.0.0.1:9200/_cat/indices?v\">http://127.0.0.1:9200/_cat/indices?v</a></p>\n<p>这里请求路径中的_cat 表示查看的意思， indices 表示索引，所以整体含义就是查看当前 ES服务器中的所有索引，就好像 MySQL 中的 show tables 的感觉，服务器响应结果如下 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">health status index    uuid                   pri rep docs.count docs.deleted store.size pri.store.size<br>yellow open   shopping J0WlEhh4R7aDrfIc3AkwWQ   <span class=\"hljs-number\">1</span>   <span class=\"hljs-number\">1</span>          <span class=\"hljs-number\">0</span>            <span class=\"hljs-number\">0</span>       208b           208b<br></code></pre></td></tr></table></figure>\n<p><img src=\"/image/blog/image%20(1).png\" alt=\"image.png\"></p>\n<h3 id=\"查看单个索引\"><a href=\"#查看单个索引\" class=\"headerlink\" title=\"查看单个索引\"></a>查看单个索引</h3><p> GET 请求 ： <a href=\"http://127.0.0.1:9200/shopping\">http://127.0.0.1:9200/shopping</a><br />返回结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;shopping&quot;</span>: &#123;<span class=\"hljs-comment\">//索引名</span><br>        <span class=\"hljs-string\">&quot;aliases&quot;</span>: &#123;&#125;,<span class=\"hljs-comment\">//别名</span><br>        <span class=\"hljs-string\">&quot;mappings&quot;</span>: &#123;&#125;,<span class=\"hljs-comment\">//映射</span><br>        <span class=\"hljs-string\">&quot;settings&quot;</span>: &#123;<span class=\"hljs-comment\">//设置</span><br>            <span class=\"hljs-string\">&quot;index&quot;</span>: &#123;<span class=\"hljs-comment\">//设置 - 索引</span><br>                <span class=\"hljs-string\">&quot;creation_date&quot;</span>: <span class=\"hljs-string\">&quot;1617861426847&quot;</span>,<span class=\"hljs-comment\">//设置 - 索引 - 创建时间</span><br>                <span class=\"hljs-string\">&quot;number_of_shards&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span>,<span class=\"hljs-comment\">//设置 - 索引 - 主分片数量</span><br>                <span class=\"hljs-string\">&quot;number_of_replicas&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span>,<span class=\"hljs-comment\">//设置 - 索引 - 主分片数量</span><br>                <span class=\"hljs-string\">&quot;uuid&quot;</span>: <span class=\"hljs-string\">&quot;J0WlEhh4R7aDrfIc3AkwWQ&quot;</span>,<span class=\"hljs-comment\">//设置 - 索引 - 主分片数量</span><br>                <span class=\"hljs-string\">&quot;version&quot;</span>: &#123;<span class=\"hljs-comment\">//设置 - 索引 - 主分片数量</span><br>                    <span class=\"hljs-string\">&quot;created&quot;</span>: <span class=\"hljs-string\">&quot;7080099&quot;</span><br>                &#125;,<br>                <span class=\"hljs-string\">&quot;provided_name&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span><span class=\"hljs-comment\">//设置 - 索引 - 主分片数量</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"删除索引\"><a href=\"#删除索引\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h3><p>DELETE 请求 ： <a href=\"http://127.0.0.1:9200/shopping\">http://127.0.0.1:9200/shopping</a><br />返回结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;acknowledged&quot;</span>: <span class=\"hljs-keyword\">true</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>再次查看所有索引，GET <a href=\"http://127.0.0.1:9200/_cat/indices?v%EF%BC%8C%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/_cat/indices?v，返回结果如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">health status index uuid pri rep docs.count docs.deleted store.size pri.store.size<br></code></pre></td></tr></table></figure>\n<p>成功删除。</p>\n<h2 id=\"文档-创建（Put-amp-Post）\"><a href=\"#文档-创建（Put-amp-Post）\" class=\"headerlink\" title=\"文档-创建（Put &amp; Post）\"></a>文档-创建（Put &amp; Post）</h2><p>POST 请求 ： <a href=\"http://127.0.0.1:9200/shopping/_doc%EF%BC%8C%E8%AF%B7%E6%B1%82%E4%BD%93JSON%E5%86%85%E5%AE%B9%E4%B8%BA%EF%BC%9A\">http://127.0.0.1:9200/shopping/_doc，请求体JSON内容为：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;title&quot;</span>:<span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>    <span class=\"hljs-string\">&quot;category&quot;</span>:<span class=\"hljs-string\">&quot;小米&quot;</span>,<br>    <span class=\"hljs-string\">&quot;images&quot;</span>:<span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>    <span class=\"hljs-string\">&quot;price&quot;</span>:<span class=\"hljs-number\">3999.00</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>注意，此处发送请求的方式必须为 POST，不能是 PUT，否则会发生错误 。<br />返回结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<span class=\"hljs-comment\">//索引</span><br>    <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<span class=\"hljs-comment\">//类型-文档</span><br>    <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;ANQqsHgBaKNfVnMbhZYU&quot;</span>,<span class=\"hljs-comment\">//唯一标识，可以类比为 MySQL 中的主键，随机生成</span><br>    <span class=\"hljs-string\">&quot;_version&quot;</span>: <span class=\"hljs-number\">1</span>,<span class=\"hljs-comment\">//版本</span><br>    <span class=\"hljs-string\">&quot;result&quot;</span>: <span class=\"hljs-string\">&quot;created&quot;</span>,<span class=\"hljs-comment\">//结果，这里的 create 表示创建成功</span><br>    <span class=\"hljs-string\">&quot;_shards&quot;</span>: &#123;<span class=\"hljs-comment\">//</span><br>        <span class=\"hljs-string\">&quot;total&quot;</span>: <span class=\"hljs-number\">2</span>,<span class=\"hljs-comment\">//分片 - 总数</span><br>        <span class=\"hljs-string\">&quot;successful&quot;</span>: <span class=\"hljs-number\">1</span>,<span class=\"hljs-comment\">//分片 - 总数</span><br>        <span class=\"hljs-string\">&quot;failed&quot;</span>: <span class=\"hljs-number\">0</span><span class=\"hljs-comment\">//分片 - 总数</span><br>    &#125;,<br>    <span class=\"hljs-string\">&quot;_seq_no&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;_primary_term&quot;</span>: <span class=\"hljs-number\">1</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>上面的数据创建后，由于没有指定数据唯一性标识（ID），默认情况下， ES 服务器会随机生成一个。<br />如果想要自定义唯一性标识，需要在创建时指定： <a href=\"http://127.0.0.1:9200/shopping/_doc/1%EF%BC%8C%E8%AF%B7%E6%B1%82%E4%BD%93JSON%E5%86%85%E5%AE%B9%E4%B8%BA%EF%BC%9A\">http://127.0.0.1:9200/shopping/_doc/1，请求体JSON内容为：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;title&quot;</span>:<span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>    <span class=\"hljs-string\">&quot;category&quot;</span>:<span class=\"hljs-string\">&quot;小米&quot;</span>,<br>    <span class=\"hljs-string\">&quot;images&quot;</span>:<span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>    <span class=\"hljs-string\">&quot;price&quot;</span>:<span class=\"hljs-number\">3999.00</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>返回结果如下：<strong>此处需要注意：如果增加数据时明确数据主键，那么请求方式也可以为 PUT。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span>,<span class=\"hljs-comment\">//&lt;------------------自定义唯一性标识</span><br>    <span class=\"hljs-string\">&quot;_version&quot;</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-string\">&quot;result&quot;</span>: <span class=\"hljs-string\">&quot;created&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_shards&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;total&quot;</span>: <span class=\"hljs-number\">2</span>,<br>        <span class=\"hljs-string\">&quot;successful&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;failed&quot;</span>: <span class=\"hljs-number\">0</span><br>    &#125;,<br>    <span class=\"hljs-string\">&quot;_seq_no&quot;</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-string\">&quot;_primary_term&quot;</span>: <span class=\"hljs-number\">1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"查询-主键查询-amp-全查询\"><a href=\"#查询-主键查询-amp-全查询\" class=\"headerlink\" title=\"查询-主键查询 &amp; 全查询\"></a>查询-主键查询 &amp; 全查询</h2><p>GET 请求 ： <a href=\"http://127.0.0.1:9200/shopping/_doc/1\">http://127.0.0.1:9200/shopping/_doc/1</a> <br />返回结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_version&quot;</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-string\">&quot;_seq_no&quot;</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-string\">&quot;_primary_term&quot;</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-string\">&quot;found&quot;</span>: <span class=\"hljs-keyword\">true</span>,<br>    <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>        <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;小米&quot;</span>,<br>        <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>        <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">3999</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>查找不存在的内容，向 ES 服务器发 GET 请求 ： <a href=\"http://127.0.0.1:9200/shopping/_doc/1001\">http://127.0.0.1:9200/shopping/_doc/1001</a><br />返回结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;1001&quot;</span>,<br>    <span class=\"hljs-string\">&quot;found&quot;</span>: <span class=\"hljs-keyword\">false</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>查看索引下所有数据，向 ES 服务器发 GET 请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search\">http://127.0.0.1:9200/shopping/_search</a><br />返回结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;took&quot;</span>: <span class=\"hljs-number\">133</span>,<br>    <span class=\"hljs-string\">&quot;timed_out&quot;</span>: <span class=\"hljs-keyword\">false</span>,<br>    <span class=\"hljs-string\">&quot;_shards&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;total&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;successful&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;skipped&quot;</span>: <span class=\"hljs-number\">0</span>,<br>        <span class=\"hljs-string\">&quot;failed&quot;</span>: <span class=\"hljs-number\">0</span><br>    &#125;,<br>    <span class=\"hljs-string\">&quot;hits&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;total&quot;</span>: &#123;<br>            <span class=\"hljs-string\">&quot;value&quot;</span>: <span class=\"hljs-number\">2</span>,<br>            <span class=\"hljs-string\">&quot;relation&quot;</span>: <span class=\"hljs-string\">&quot;eq&quot;</span><br>        &#125;,<br>        <span class=\"hljs-string\">&quot;max_score&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;hits&quot;</span>: [<br>            &#123;<br>                <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;ANQqsHgBaKNfVnMbhZYU&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_score&quot;</span>: <span class=\"hljs-number\">1</span>,<br>                <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;小米&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">3999</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_score&quot;</span>: <span class=\"hljs-number\">1</span>,<br>                <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;小米&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">3999</span><br>                &#125;<br>            &#125;<br>        ]<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"全量修改-amp-局部修改-amp-删除\"><a href=\"#全量修改-amp-局部修改-amp-删除\" class=\"headerlink\" title=\"全量修改 &amp; 局部修改 &amp; 删除\"></a>全量修改 &amp; 局部修改 &amp; 删除</h2><h3 id=\"全量修改\"><a href=\"#全量修改\" class=\"headerlink\" title=\"全量修改\"></a>全量修改</h3><p>POST 请求 ： <a href=\"http://127.0.0.1:9200/shopping/_doc/1\">http://127.0.0.1:9200/shopping/_doc/1</a><br />请求体JSON内容为:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;title&quot;</span>:<span class=\"hljs-string\">&quot;华为手机&quot;</span>,<br>    <span class=\"hljs-string\">&quot;category&quot;</span>:<span class=\"hljs-string\">&quot;华为&quot;</span>,<br>    <span class=\"hljs-string\">&quot;images&quot;</span>:<span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/hw.jpg&quot;</span>,<br>    <span class=\"hljs-string\">&quot;price&quot;</span>:<span class=\"hljs-number\">1999.00</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>修改成功后，服务器响应结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_version&quot;</span>: <span class=\"hljs-number\">2</span>,<br>    <span class=\"hljs-string\">&quot;result&quot;</span>: <span class=\"hljs-string\">&quot;updated&quot;</span>,<span class=\"hljs-comment\">//&lt;-----------updated 表示数据被更新</span><br>    <span class=\"hljs-string\">&quot;_shards&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;total&quot;</span>: <span class=\"hljs-number\">2</span>,<br>        <span class=\"hljs-string\">&quot;successful&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;failed&quot;</span>: <span class=\"hljs-number\">0</span><br>    &#125;,<br>    <span class=\"hljs-string\">&quot;_seq_no&quot;</span>: <span class=\"hljs-number\">2</span>,<br>    <span class=\"hljs-string\">&quot;_primary_term&quot;</span>: <span class=\"hljs-number\">1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"局部修改\"><a href=\"#局部修改\" class=\"headerlink\" title=\"局部修改\"></a>局部修改</h3><p>POST 请求 ： <a href=\"http://127.0.0.1:9200/shopping/_update/1\">http://127.0.0.1:9200/shopping/_update/1</a><br />请求体JSON内容为:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;doc&quot;</span>: &#123;<br>\t\t<span class=\"hljs-string\">&quot;title&quot;</span>:<span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>\t\t<span class=\"hljs-string\">&quot;category&quot;</span>:<span class=\"hljs-string\">&quot;小米&quot;</span><br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>返回结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_version&quot;</span>: <span class=\"hljs-number\">3</span>,<br>    <span class=\"hljs-string\">&quot;result&quot;</span>: <span class=\"hljs-string\">&quot;updated&quot;</span>,<span class=\"hljs-comment\">//&lt;-----------updated 表示数据被更新</span><br>    <span class=\"hljs-string\">&quot;_shards&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;total&quot;</span>: <span class=\"hljs-number\">2</span>,<br>        <span class=\"hljs-string\">&quot;successful&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;failed&quot;</span>: <span class=\"hljs-number\">0</span><br>    &#125;,<br>    <span class=\"hljs-string\">&quot;_seq_no&quot;</span>: <span class=\"hljs-number\">3</span>,<br>    <span class=\"hljs-string\">&quot;_primary_term&quot;</span>: <span class=\"hljs-number\">1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p> GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_doc/1%EF%BC%8C%E6%9F%A5%E7%9C%8B%E4%BF%AE%E6%94%B9%E5%86%85%E5%AE%B9%EF%BC%9A\">http://127.0.0.1:9200/shopping/_doc/1，查看修改内容：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_version&quot;</span>: <span class=\"hljs-number\">3</span>,<br>    <span class=\"hljs-string\">&quot;_seq_no&quot;</span>: <span class=\"hljs-number\">3</span>,<br>    <span class=\"hljs-string\">&quot;_primary_term&quot;</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-string\">&quot;found&quot;</span>: <span class=\"hljs-keyword\">true</span>,<br>    <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>        <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;小米&quot;</span>,<br>        <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/hw.jpg&quot;</span>,<br>        <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">1999</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>DELETE 请求 ： <a href=\"http://127.0.0.1:9200/shopping/_doc/1\">http://127.0.0.1:9200/shopping/_doc/1</a><br />返回结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_version&quot;</span>: <span class=\"hljs-number\">4</span>,<br>    <span class=\"hljs-string\">&quot;result&quot;</span>: <span class=\"hljs-string\">&quot;deleted&quot;</span>,<span class=\"hljs-comment\">//&lt;---删除成功</span><br>    <span class=\"hljs-string\">&quot;_shards&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;total&quot;</span>: <span class=\"hljs-number\">2</span>,<br>        <span class=\"hljs-string\">&quot;successful&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;failed&quot;</span>: <span class=\"hljs-number\">0</span><br>    &#125;,<br>    <span class=\"hljs-string\">&quot;_seq_no&quot;</span>: <span class=\"hljs-number\">4</span>,<br>    <span class=\"hljs-string\">&quot;_primary_term&quot;</span>: <span class=\"hljs-number\">1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>向 ES 服务器发 GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_doc/1%EF%BC%8C%E6%9F%A5%E7%9C%8B%E6%98%AF%E5%90%A6%E5%88%A0%E9%99%A4%E6%88%90%E5%8A%9F%EF%BC%9A\">http://127.0.0.1:9200/shopping/_doc/1，查看是否删除成功：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>    <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span>,<br>    <span class=\"hljs-string\">&quot;found&quot;</span>: <span class=\"hljs-keyword\">false</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"条件查询-amp-分页查询-amp-查询排序\"><a href=\"#条件查询-amp-分页查询-amp-查询排序\" class=\"headerlink\" title=\"条件查询 &amp; 分页查询 &amp; 查询排序\"></a>条件查询 &amp; 分页查询 &amp; 查询排序</h2><h3 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h3><p>GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search\">http://127.0.0.1:9200/shopping/_search</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;took&quot;</span>: <span class=\"hljs-number\">5</span>,<br>    <span class=\"hljs-string\">&quot;timed_out&quot;</span>: <span class=\"hljs-keyword\">false</span>,<br>    <span class=\"hljs-string\">&quot;_shards&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;total&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;successful&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;skipped&quot;</span>: <span class=\"hljs-number\">0</span>,<br>        <span class=\"hljs-string\">&quot;failed&quot;</span>: <span class=\"hljs-number\">0</span><br>    &#125;,<br>    <span class=\"hljs-string\">&quot;hits&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;total&quot;</span>: &#123;<br>            <span class=\"hljs-string\">&quot;value&quot;</span>: <span class=\"hljs-number\">6</span>,<br>            <span class=\"hljs-string\">&quot;relation&quot;</span>: <span class=\"hljs-string\">&quot;eq&quot;</span><br>        &#125;,<br>        <span class=\"hljs-string\">&quot;max_score&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;hits&quot;</span>: [<br>            &#123;<br>                <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;ANQqsHgBaKNfVnMbhZYU&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_score&quot;</span>: <span class=\"hljs-number\">1</span>,<br>                <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;小米&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">3999</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;A9R5sHgBaKNfVnMb25Ya&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_score&quot;</span>: <span class=\"hljs-number\">1</span>,<br>                <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;小米&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">1999</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;BNR5sHgBaKNfVnMb7pal&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_score&quot;</span>: <span class=\"hljs-number\">1</span>,<br>                <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;小米&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">1999</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;BtR6sHgBaKNfVnMbX5Y5&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_score&quot;</span>: <span class=\"hljs-number\">1</span>,<br>                <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;华为手机&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;华为&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">1999</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;B9R6sHgBaKNfVnMbZpZ6&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_score&quot;</span>: <span class=\"hljs-number\">1</span>,<br>                <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;华为手机&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;华为&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">1999</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;CdR7sHgBaKNfVnMbsJb9&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_score&quot;</span>: <span class=\"hljs-number\">1</span>,<br>                <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;华为手机&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;华为&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">1999</span><br>                &#125;<br>            &#125;<br>        ]<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h4 id=\"URL带参查询\"><a href=\"#URL带参查询\" class=\"headerlink\" title=\"URL带参查询\"></a>URL带参查询</h4><p>GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search?q=category:%E5%B0%8F%E7%B1%B3\">http://127.0.0.1:9200/shopping/_search?q=category:小米</a><br />返回结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;took&quot;</span>: <span class=\"hljs-number\">94</span>,<br>    <span class=\"hljs-string\">&quot;timed_out&quot;</span>: <span class=\"hljs-keyword\">false</span>,<br>    <span class=\"hljs-string\">&quot;_shards&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;total&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;successful&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;skipped&quot;</span>: <span class=\"hljs-number\">0</span>,<br>        <span class=\"hljs-string\">&quot;failed&quot;</span>: <span class=\"hljs-number\">0</span><br>    &#125;,<br>    <span class=\"hljs-string\">&quot;hits&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;total&quot;</span>: &#123;<br>            <span class=\"hljs-string\">&quot;value&quot;</span>: <span class=\"hljs-number\">3</span>,<br>            <span class=\"hljs-string\">&quot;relation&quot;</span>: <span class=\"hljs-string\">&quot;eq&quot;</span><br>        &#125;,<br>        <span class=\"hljs-string\">&quot;max_score&quot;</span>: <span class=\"hljs-number\">1.3862942</span>,<br>        <span class=\"hljs-string\">&quot;hits&quot;</span>: [<br>            &#123;<br>                <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;ANQqsHgBaKNfVnMbhZYU&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_score&quot;</span>: <span class=\"hljs-number\">1.3862942</span>,<br>                <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;小米&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">3999</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;A9R5sHgBaKNfVnMb25Ya&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_score&quot;</span>: <span class=\"hljs-number\">1.3862942</span>,<br>                <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;小米&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">1999</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-string\">&quot;_index&quot;</span>: <span class=\"hljs-string\">&quot;shopping&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_type&quot;</span>: <span class=\"hljs-string\">&quot;_doc&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_id&quot;</span>: <span class=\"hljs-string\">&quot;BNR5sHgBaKNfVnMb7pal&quot;</span>,<br>                <span class=\"hljs-string\">&quot;_score&quot;</span>: <span class=\"hljs-number\">1.3862942</span>,<br>                <span class=\"hljs-string\">&quot;_source&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;小米手机&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;category&quot;</span>: <span class=\"hljs-string\">&quot;小米&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;images&quot;</span>: <span class=\"hljs-string\">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;price&quot;</span>: <span class=\"hljs-number\">1999</span><br>                &#125;<br>            &#125;<br>        ]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"请求体带参查询\"><a href=\"#请求体带参查询\" class=\"headerlink\" title=\"请求体带参查询\"></a>请求体带参查询</h4><p>GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;query&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;match&quot;</span>:&#123;<br>\t\t\t<span class=\"hljs-string\">&quot;category&quot;</span>:<span class=\"hljs-string\">&quot;小米&quot;</span><br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"带请求体方式的查找所有内容\"><a href=\"#带请求体方式的查找所有内容\" class=\"headerlink\" title=\"带请求体方式的查找所有内容\"></a>带请求体方式的查找所有内容</h4><p> GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;query&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;match_all&quot;</span>:&#123;&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"查询指定字段\"><a href=\"#查询指定字段\" class=\"headerlink\" title=\"查询指定字段\"></a>查询指定字段</h4><p>GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;query&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;match_all&quot;</span>:&#123;&#125;<br>\t&#125;,<br>\t<span class=\"hljs-string\">&quot;_source&quot;</span>:[<span class=\"hljs-string\">&quot;title&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h3><p>GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;query&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;match_all&quot;</span>:&#123;&#125;<br>\t&#125;,<br>\t<span class=\"hljs-string\">&quot;from&quot;</span>:<span class=\"hljs-number\">0</span>,<br>\t<span class=\"hljs-string\">&quot;size&quot;</span>:<span class=\"hljs-number\">2</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"查询排序\"><a href=\"#查询排序\" class=\"headerlink\" title=\"查询排序\"></a>查询排序</h3><p>GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;query&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;match_all&quot;</span>:&#123;&#125;<br>\t&#125;,<br>\t<span class=\"hljs-string\">&quot;sort&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;price&quot;</span>:&#123;<br>\t\t\t<span class=\"hljs-string\">&quot;order&quot;</span>:<span class=\"hljs-string\">&quot;desc&quot;</span><br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"多条件查询-amp-范围查询\"><a href=\"#多条件查询-amp-范围查询\" class=\"headerlink\" title=\"多条件查询 &amp; 范围查询\"></a>多条件查询 &amp; 范围查询</h2><h3 id=\"多条件查询\"><a href=\"#多条件查询\" class=\"headerlink\" title=\"多条件查询\"></a>多条件查询</h3><p>假设想找出小米牌子，价格为3999元的。（must相当于数据库的&amp;&amp;）<br />GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;query&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;bool&quot;</span>:&#123;<br>\t\t\t<span class=\"hljs-string\">&quot;must&quot;</span>:[&#123;<br>\t\t\t\t<span class=\"hljs-string\">&quot;match&quot;</span>:&#123;<br>\t\t\t\t\t<span class=\"hljs-string\">&quot;category&quot;</span>:<span class=\"hljs-string\">&quot;小米&quot;</span><br>\t\t\t\t&#125;<br>\t\t\t&#125;,&#123;<br>\t\t\t\t<span class=\"hljs-string\">&quot;match&quot;</span>:&#123;<br>\t\t\t\t\t<span class=\"hljs-string\">&quot;price&quot;</span>:<span class=\"hljs-number\">3999.00</span><br>\t\t\t\t&#125;<br>\t\t\t&#125;]<br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>假设想找出小米和华为的牌子。（should相当于数据库的||）<br />GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;query&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;bool&quot;</span>:&#123;<br>\t\t\t<span class=\"hljs-string\">&quot;should&quot;</span>:[&#123;<br>\t\t\t\t<span class=\"hljs-string\">&quot;match&quot;</span>:&#123;<br>\t\t\t\t\t<span class=\"hljs-string\">&quot;category&quot;</span>:<span class=\"hljs-string\">&quot;小米&quot;</span><br>\t\t\t\t&#125;<br>\t\t\t&#125;,&#123;<br>\t\t\t\t<span class=\"hljs-string\">&quot;match&quot;</span>:&#123;<br>\t\t\t\t\t<span class=\"hljs-string\">&quot;category&quot;</span>:<span class=\"hljs-string\">&quot;华为&quot;</span><br>\t\t\t\t&#125;<br>\t\t\t&#125;]<br>\t\t&#125;,<br>        <span class=\"hljs-string\">&quot;filter&quot;</span>:&#123;<br>            <span class=\"hljs-string\">&quot;range&quot;</span>:&#123;<br>                <span class=\"hljs-string\">&quot;price&quot;</span>:&#123;<br>                    <span class=\"hljs-string\">&quot;gt&quot;</span>:<span class=\"hljs-number\">2000</span><br>                &#125;<br>            &#125;<br>        &#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"范围查询\"><a href=\"#范围查询\" class=\"headerlink\" title=\"范围查询\"></a>范围查询</h3><p>假设想找出小米和华为的牌子，价格大于2000元的手机。<br />GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;query&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;bool&quot;</span>:&#123;<br>\t\t\t<span class=\"hljs-string\">&quot;should&quot;</span>:[&#123;<br>\t\t\t\t<span class=\"hljs-string\">&quot;match&quot;</span>:&#123;<br>\t\t\t\t\t<span class=\"hljs-string\">&quot;category&quot;</span>:<span class=\"hljs-string\">&quot;小米&quot;</span><br>\t\t\t\t&#125;<br>\t\t\t&#125;,&#123;<br>\t\t\t\t<span class=\"hljs-string\">&quot;match&quot;</span>:&#123;<br>\t\t\t\t\t<span class=\"hljs-string\">&quot;category&quot;</span>:<span class=\"hljs-string\">&quot;华为&quot;</span><br>\t\t\t\t&#125;<br>\t\t\t&#125;],<br>            <span class=\"hljs-string\">&quot;filter&quot;</span>:&#123;<br>            \t<span class=\"hljs-string\">&quot;range&quot;</span>:&#123;<br>                \t<span class=\"hljs-string\">&quot;price&quot;</span>:&#123;<br>                    \t<span class=\"hljs-string\">&quot;gt&quot;</span>:<span class=\"hljs-number\">2000</span><br>                \t&#125;<br>\t            &#125;<br>    \t    &#125;<br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"全文检索-amp-完全匹配-amp-高亮查询\"><a href=\"#全文检索-amp-完全匹配-amp-高亮查询\" class=\"headerlink\" title=\"全文检索 &amp; 完全匹配 &amp; 高亮查询\"></a>全文检索 &amp; 完全匹配 &amp; 高亮查询</h2><h3 id=\"全文检索\"><a href=\"#全文检索\" class=\"headerlink\" title=\"全文检索\"></a>全文检索</h3><p>这功能像搜索引擎那样，如品牌输入“小华”，返回结果带回品牌有“小米”和华为的。<br />GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;query&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;match&quot;</span>:&#123;<br>\t\t\t<span class=\"hljs-string\">&quot;category&quot;</span> : <span class=\"hljs-string\">&quot;小华&quot;</span><br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"完全匹配\"><a href=\"#完全匹配\" class=\"headerlink\" title=\"完全匹配\"></a>完全匹配</h3><p>GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;query&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;match_phrase&quot;</span>:&#123;<br>\t\t\t<span class=\"hljs-string\">&quot;category&quot;</span> : <span class=\"hljs-string\">&quot;为&quot;</span><br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"高亮查询\"><a href=\"#高亮查询\" class=\"headerlink\" title=\"高亮查询\"></a>高亮查询</h3><p>GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;query&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;match_phrase&quot;</span>:&#123;<br>\t\t\t<span class=\"hljs-string\">&quot;category&quot;</span> : <span class=\"hljs-string\">&quot;为&quot;</span><br>\t\t&#125;<br>\t&#125;,<br>    <span class=\"hljs-string\">&quot;highlight&quot;</span>:&#123;<br>        <span class=\"hljs-string\">&quot;fields&quot;</span>:&#123;<br>            <span class=\"hljs-string\">&quot;category&quot;</span>:&#123;&#125;<span class=\"hljs-comment\">//&lt;----高亮这字段</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"聚合查询\"><a href=\"#聚合查询\" class=\"headerlink\" title=\"聚合查询\"></a>聚合查询</h2><p>聚合允许使用者对 es 文档进行统计分析，类似与关系型数据库中的 group by，当然还有很多其他的聚合，例如取最大值max、平均值avg等等。</p>\n<p>接下来按price字段进行分组：<br />GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search\">http://127.0.0.1:9200/shopping/_search</a>，附带JSON体如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;aggs&quot;</span>:&#123;<span class=\"hljs-comment\">//聚合操作</span><br>\t\t<span class=\"hljs-string\">&quot;price_group&quot;</span>:&#123;<span class=\"hljs-comment\">//名称，随意起名</span><br>\t\t\t<span class=\"hljs-string\">&quot;terms&quot;</span>:&#123;<span class=\"hljs-comment\">//分组</span><br>\t\t\t\t<span class=\"hljs-string\">&quot;field&quot;</span>:<span class=\"hljs-string\">&quot;price&quot;</span><span class=\"hljs-comment\">//分组字段</span><br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>上面返回结果会附带原始数据的。若不想要不附带原始数据的结果，在 Postman 中，向 ES 服务器发 GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;aggs&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;price_group&quot;</span>:&#123;<br>\t\t\t<span class=\"hljs-string\">&quot;terms&quot;</span>:&#123;<br>\t\t\t\t<span class=\"hljs-string\">&quot;field&quot;</span>:<span class=\"hljs-string\">&quot;price&quot;</span><br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;,<br>    <span class=\"hljs-string\">&quot;size&quot;</span>:<span class=\"hljs-number\">0</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>若想对所有手机价格求<strong>平均值</strong>。<br />GET请求 ： <a href=\"http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>\t<span class=\"hljs-string\">&quot;aggs&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;price_avg&quot;</span>:&#123;<span class=\"hljs-comment\">//名称，随意起名</span><br>\t\t\t<span class=\"hljs-string\">&quot;avg&quot;</span>:&#123;<span class=\"hljs-comment\">//求平均</span><br>\t\t\t\t<span class=\"hljs-string\">&quot;field&quot;</span>:<span class=\"hljs-string\">&quot;price&quot;</span><br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;,<br>    <span class=\"hljs-string\">&quot;size&quot;</span>:<span class=\"hljs-number\">0</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"映射关系\"><a href=\"#映射关系\" class=\"headerlink\" title=\"映射关系\"></a>映射关系</h2><p>有了索引库，等于有了数据库中的 database。</p>\n<p>接下来就需要建索引库(index)中的映射了，类似于数据库(database)中的表结构(table)。</p>\n<p>创建数据库表需要设置字段名称，类型，长度，约束等；索引库也一样，需要知道这个类型下有哪些字段，每个字段有哪些约束信息，这就叫做映射(mapping)。</p>\n<p>先创建一个索引：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"># PUT http:<span class=\"hljs-comment\">//127.0.0.1:9200/user</span><br></code></pre></td></tr></table></figure>\n<p><strong>创建映射</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"># PUT http:<span class=\"hljs-comment\">//127.0.0.1:9200/user/_mapping</span><br><br>&#123;<br>    <span class=\"hljs-string\">&quot;properties&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;name&quot;</span>: &#123;<br>            <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;text&quot;</span>, <span class=\"hljs-comment\">// 允许分词</span><br>            <span class=\"hljs-string\">&quot;index&quot;</span>: <span class=\"hljs-keyword\">true</span><br>        &#125;,<br>        <span class=\"hljs-string\">&quot;sex&quot;</span>: &#123;<br>            <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;keyword&quot;</span>, <span class=\"hljs-comment\">// 关键字无法分开必须完全匹配</span><br>            <span class=\"hljs-string\">&quot;index&quot;</span>: <span class=\"hljs-keyword\">true</span><br>        &#125;,<br>        <span class=\"hljs-string\">&quot;tel&quot;</span>: &#123;<br>            <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;keyword&quot;</span>,<br>            <span class=\"hljs-string\">&quot;index&quot;</span>: <span class=\"hljs-keyword\">false</span>   <span class=\"hljs-comment\">// 不支持索引查询</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>查询映射</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">#GET http:<span class=\"hljs-comment\">//127.0.0.1:9200/user/_mapping</span><br></code></pre></td></tr></table></figure>\n<p>返回结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;user&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;mappings&quot;</span>: &#123;<br>            <span class=\"hljs-string\">&quot;properties&quot;</span>: &#123;<br>                <span class=\"hljs-string\">&quot;name&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;text&quot;</span><br>                &#125;,<br>                <span class=\"hljs-string\">&quot;sex&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;keyword&quot;</span><br>                &#125;,<br>                <span class=\"hljs-string\">&quot;tel&quot;</span>: &#123;<br>                    <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;keyword&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;index&quot;</span>: <span class=\"hljs-keyword\">false</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>增加数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">#PUT http:<span class=\"hljs-comment\">//127.0.0.1:9200/user/_create/1001</span><br>&#123;<br>\t<span class=\"hljs-string\">&quot;name&quot;</span>:<span class=\"hljs-string\">&quot;小米&quot;</span>,<br>\t<span class=\"hljs-string\">&quot;sex&quot;</span>:<span class=\"hljs-string\">&quot;男的&quot;</span>,<br>\t<span class=\"hljs-string\">&quot;tel&quot;</span>:<span class=\"hljs-string\">&quot;1111&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>查找name含有”小“数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">#GET http:<span class=\"hljs-comment\">//127.0.0.1:9200/user/_search</span><br>&#123;<br>\t<span class=\"hljs-string\">&quot;query&quot;</span>:&#123;<br>\t\t<span class=\"hljs-string\">&quot;match&quot;</span>:&#123;<br>\t\t\t<span class=\"hljs-string\">&quot;name&quot;</span>:<span class=\"hljs-string\">&quot;小&quot;</span><br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"JavaAPI\"><a href=\"#JavaAPI\" class=\"headerlink\" title=\"JavaAPI\"></a>JavaAPI</h2><p>添加依赖：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&lt;dependencies&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;<br>        &lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;<br>        &lt;version&gt;<span class=\"hljs-number\">7.8</span><span class=\"hljs-number\">.0</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;!-- elasticsearch 的客户端 --&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;<br>        &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;<br>        &lt;version&gt;<span class=\"hljs-number\">7.8</span><span class=\"hljs-number\">.0</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;!-- elasticsearch 依赖 <span class=\"hljs-number\">2.</span>x 的 log4j --&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;<br>        &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;<br>        &lt;version&gt;<span class=\"hljs-number\">2.8</span><span class=\"hljs-number\">.2</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;<br>        &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;<br>        &lt;version&gt;<span class=\"hljs-number\">2.8</span><span class=\"hljs-number\">.2</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;<br>        &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;<br>        &lt;version&gt;<span class=\"hljs-number\">2.9</span><span class=\"hljs-number\">.9</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;!-- junit 单元测试 --&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;junit&lt;/groupId&gt;<br>        &lt;artifactId&gt;junit&lt;/artifactId&gt;<br>        &lt;version&gt;<span class=\"hljs-number\">4.12</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br>&lt;/dependencies&gt;<br></code></pre></td></tr></table></figure>\n<p>HelloElasticsearch</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><br><span class=\"hljs-keyword\">import</span> org.apache.http.HttpHost;<br><span class=\"hljs-keyword\">import</span> org.elasticsearch.client.RestClient;<br><span class=\"hljs-keyword\">import</span> org.elasticsearch.client.RestHighLevelClient;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloElasticsearch</span> </span>&#123;<br><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>&#123;<br>\t\t<span class=\"hljs-comment\">// 创建客户端对象</span><br>\t\tRestHighLevelClient client = <span class=\"hljs-keyword\">new</span> RestHighLevelClient(<br>\t\t\t\tRestClient.builder(<span class=\"hljs-keyword\">new</span> HttpHost(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">9200</span>, <span class=\"hljs-string\">&quot;http&quot;</span>)));<br><span class=\"hljs-comment\">//\t\t...</span><br>\t\tSystem.out.println(client);<br><br>\t\t<span class=\"hljs-comment\">// 关闭客户端连接</span><br>\t\tclient.close();<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"JavaAPI-索引-创建\"><a href=\"#JavaAPI-索引-创建\" class=\"headerlink\" title=\"JavaAPI-索引-创建\"></a>JavaAPI-索引-创建</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CreateIndex</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>&#123;<br>        <span class=\"hljs-comment\">// 创建客户端对象</span><br>        RestHighLevelClient client = <span class=\"hljs-keyword\">new</span> RestHighLevelClient(<br>                RestClient.builder(<span class=\"hljs-keyword\">new</span> HttpHost(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">9200</span>, <span class=\"hljs-string\">&quot;http&quot;</span>)));<br><br>        <span class=\"hljs-comment\">// 创建索引 - 请求对象</span><br>        CreateIndexRequest request = <span class=\"hljs-keyword\">new</span> CreateIndexRequest(<span class=\"hljs-string\">&quot;user2&quot;</span>);<br>        <span class=\"hljs-comment\">// 发送请求，获取响应</span><br>        CreateIndexResponse response = client.indices().create(request,<br>                RequestOptions.DEFAULT);<br>        <span class=\"hljs-keyword\">boolean</span> acknowledged = response.isAcknowledged();<br>        <span class=\"hljs-comment\">// 响应状态</span><br>        System.out.println(<span class=\"hljs-string\">&quot;操作状态 = &quot;</span> + acknowledged);<br><br>        <span class=\"hljs-comment\">// 关闭客户端连接</span><br>        client.close();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"JavaAPI-索引-查询-amp-删除\"><a href=\"#JavaAPI-索引-查询-amp-删除\" class=\"headerlink\" title=\"JavaAPI-索引-查询 &amp; 删除\"></a>JavaAPI-索引-查询 &amp; 删除</h3><h4 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SearchIndex</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>&#123;<br>        <span class=\"hljs-comment\">// 创建客户端对象</span><br>        RestHighLevelClient client = <span class=\"hljs-keyword\">new</span> RestHighLevelClient(<br>                RestClient.builder(<span class=\"hljs-keyword\">new</span> HttpHost(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">9200</span>, <span class=\"hljs-string\">&quot;http&quot;</span>)));<br><br>        <span class=\"hljs-comment\">// 查询索引 - 请求对象</span><br>        GetIndexRequest request = <span class=\"hljs-keyword\">new</span> GetIndexRequest(<span class=\"hljs-string\">&quot;user2&quot;</span>);<br>        <span class=\"hljs-comment\">// 发送请求，获取响应</span><br>        GetIndexResponse response = client.indices().get(request,<br>                RequestOptions.DEFAULT);<br>        <br>        System.out.println(<span class=\"hljs-string\">&quot;aliases:&quot;</span>+response.getAliases());<br>        System.out.println(<span class=\"hljs-string\">&quot;mappings:&quot;</span>+response.getMappings());<br>        System.out.println(<span class=\"hljs-string\">&quot;settings:&quot;</span>+response.getSettings());<br><br>        client.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"删除-1\"><a href=\"#删除-1\" class=\"headerlink\" title=\"删除\"></a>删除</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DeleteIndex</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>&#123;<br>        RestHighLevelClient client = <span class=\"hljs-keyword\">new</span> RestHighLevelClient(<br>                RestClient.builder(<span class=\"hljs-keyword\">new</span> HttpHost(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">9200</span>, <span class=\"hljs-string\">&quot;http&quot;</span>)));<br>        <span class=\"hljs-comment\">// 删除索引 - 请求对象</span><br>        DeleteIndexRequest request = <span class=\"hljs-keyword\">new</span> DeleteIndexRequest(<span class=\"hljs-string\">&quot;user2&quot;</span>);<br>        <span class=\"hljs-comment\">// 发送请求，获取响应</span><br>        AcknowledgedResponse response = client.indices().delete(request,RequestOptions.DEFAULT);<br>        <span class=\"hljs-comment\">// 操作结果</span><br>        System.out.println(<span class=\"hljs-string\">&quot;操作结果 ： &quot;</span> + response.isAcknowledged());<br>        client.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"JavaAPI-文档-新增-amp-修改\"><a href=\"#JavaAPI-文档-新增-amp-修改\" class=\"headerlink\" title=\"JavaAPI-文档-新增 &amp; 修改\"></a>JavaAPI-文档-新增 &amp; 修改</h3><h4 id=\"重构\"><a href=\"#重构\" class=\"headerlink\" title=\"重构\"></a>重构</h4><p>上文由于频繁使用以下连接Elasticsearch和关闭它的代码，于是<strong>个人</strong>对它进行重构。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SomeClass</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>&#123;<br>        RestHighLevelClient client = <span class=\"hljs-keyword\">new</span> RestHighLevelClient(<br>                RestClient.builder(<span class=\"hljs-keyword\">new</span> HttpHost(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">9200</span>, <span class=\"hljs-string\">&quot;http&quot;</span>)));<br>\t\t<br>        ...<br>        <br>        client.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>重构后的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.elasticsearch.client.RestHighLevelClient;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ElasticsearchTask</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doSomething</span><span class=\"hljs-params\">(RestHighLevelClient client)</span> <span class=\"hljs-keyword\">throws</span> Exception</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConnectElasticsearch</span></span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">connect</span><span class=\"hljs-params\">(ElasticsearchTask task)</span></span>&#123;<br>        <span class=\"hljs-comment\">// 创建客户端对象</span><br>        RestHighLevelClient client = <span class=\"hljs-keyword\">new</span> RestHighLevelClient(<br>                RestClient.builder(<span class=\"hljs-keyword\">new</span> HttpHost(<span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-number\">9200</span>, <span class=\"hljs-string\">&quot;http&quot;</span>)));<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            task.doSomething(client);<br>            <span class=\"hljs-comment\">// 关闭客户端连接</span><br>            client.close();<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>接下来，如果想让Elasticsearch完成一些操作，就编写一个lambda式即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SomeClass</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(client -&gt; &#123;<br>\t\t\t<span class=\"hljs-comment\">//do something</span><br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"新增\"><a href=\"#新增\" class=\"headerlink\" title=\"新增\"></a>新增</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">InsertDoc</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(client -&gt; &#123;<br>            <span class=\"hljs-comment\">// 新增文档 - 请求对象</span><br>            IndexRequest request = <span class=\"hljs-keyword\">new</span> IndexRequest();<br>            <span class=\"hljs-comment\">// 设置索引及唯一性标识</span><br>            request.index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1001&quot;</span>);<br><br>            <span class=\"hljs-comment\">// 创建数据对象</span><br>            User user = <span class=\"hljs-keyword\">new</span> User();<br>            user.setName(<span class=\"hljs-string\">&quot;zhangsan&quot;</span>);<br>            user.setAge(<span class=\"hljs-number\">30</span>);<br>            user.setSex(<span class=\"hljs-string\">&quot;男&quot;</span>);<br><br>            ObjectMapper objectMapper = <span class=\"hljs-keyword\">new</span> ObjectMapper();<br>            String productJson = objectMapper.writeValueAsString(user);<br>            <span class=\"hljs-comment\">// 添加文档数据，数据格式为 JSON 格式</span><br>            request.source(productJson, XContentType.JSON);<br>            <span class=\"hljs-comment\">// 客户端发送请求，获取响应对象</span><br>            IndexResponse response = client.index(request, RequestOptions.DEFAULT);<br>            <span class=\"hljs-number\">3.</span>打印结果信息<br>            System.out.println(<span class=\"hljs-string\">&quot;_index:&quot;</span> + response.getIndex());<br>            System.out.println(<span class=\"hljs-string\">&quot;_id:&quot;</span> + response.getId());<br>            System.out.println(<span class=\"hljs-string\">&quot;_result:&quot;</span> + response.getResult());<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UpdateDoc</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(client -&gt; &#123;<br>            <span class=\"hljs-comment\">// 修改文档 - 请求对象</span><br>            UpdateRequest request = <span class=\"hljs-keyword\">new</span> UpdateRequest();<br>            <span class=\"hljs-comment\">// 配置修改参数</span><br>            request.index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1001&quot;</span>);<br>            <span class=\"hljs-comment\">// 设置请求体，对数据进行修改</span><br>            request.doc(XContentType.JSON, <span class=\"hljs-string\">&quot;sex&quot;</span>, <span class=\"hljs-string\">&quot;女&quot;</span>);<br>            <span class=\"hljs-comment\">// 客户端发送请求，获取响应对象</span><br>            UpdateResponse response = client.update(request, RequestOptions.DEFAULT);<br>            System.out.println(<span class=\"hljs-string\">&quot;_index:&quot;</span> + response.getIndex());<br>            System.out.println(<span class=\"hljs-string\">&quot;_id:&quot;</span> + response.getId());<br>            System.out.println(<span class=\"hljs-string\">&quot;_result:&quot;</span> + response.getResult());<br>        &#125;);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"JavaAPI-文档-查询-amp-删除\"><a href=\"#JavaAPI-文档-查询-amp-删除\" class=\"headerlink\" title=\"JavaAPI-文档-查询 &amp; 删除\"></a>JavaAPI-文档-查询 &amp; 删除</h3><h4 id=\"查询-1\"><a href=\"#查询-1\" class=\"headerlink\" title=\"查询\"></a>查询</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GetDoc</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(client -&gt; &#123;<br>            <span class=\"hljs-comment\">//1.创建请求对象</span><br>            GetRequest request = <span class=\"hljs-keyword\">new</span> GetRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1001&quot;</span>);<br>            <span class=\"hljs-comment\">//2.客户端发送请求，获取响应对象</span><br>            GetResponse response = client.get(request, RequestOptions.DEFAULT);<br>            <span class=\"hljs-number\">3.</span>打印结果信息<br>            System.out.println(<span class=\"hljs-string\">&quot;_index:&quot;</span> + response.getIndex());<br>            System.out.println(<span class=\"hljs-string\">&quot;_type:&quot;</span> + response.getType());<br>            System.out.println(<span class=\"hljs-string\">&quot;_id:&quot;</span> + response.getId());<br>            System.out.println(<span class=\"hljs-string\">&quot;source:&quot;</span> + response.getSourceAsString());<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"删除-2\"><a href=\"#删除-2\" class=\"headerlink\" title=\"删除\"></a>删除</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DeleteDoc</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(client -&gt; &#123;<br>            <span class=\"hljs-comment\">//创建请求对象</span><br>            DeleteRequest request = <span class=\"hljs-keyword\">new</span> DeleteRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1001&quot;</span>);<br>            <span class=\"hljs-comment\">//客户端发送请求，获取响应对象</span><br>            DeleteResponse response = client.delete(request, RequestOptions.DEFAULT);<br>            <span class=\"hljs-comment\">//打印信息</span><br>            System.out.println(response.toString());<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"JavaAPI-文档-批量新增-amp-批量删除\"><a href=\"#JavaAPI-文档-批量新增-amp-批量删除\" class=\"headerlink\" title=\"JavaAPI-文档-批量新增 &amp; 批量删除\"></a>JavaAPI-文档-批量新增 &amp; 批量删除</h3><h4 id=\"批量新增\"><a href=\"#批量新增\" class=\"headerlink\" title=\"批量新增\"></a>批量新增</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BatchInsertDoc</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(client -&gt; &#123;<br>            <span class=\"hljs-comment\">//创建批量新增请求对象</span><br>            BulkRequest request = <span class=\"hljs-keyword\">new</span> BulkRequest();<br>            request.add(<span class=\"hljs-keyword\">new</span><br>                    IndexRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1001&quot;</span>).source(XContentType.JSON, <span class=\"hljs-string\">&quot;name&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;zhangsan&quot;</span>));<br>            request.add(<span class=\"hljs-keyword\">new</span><br>                    IndexRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1002&quot;</span>).source(XContentType.JSON, <span class=\"hljs-string\">&quot;name&quot;</span>,<br>                            <span class=\"hljs-string\">&quot;lisi&quot;</span>));<br>            request.add(<span class=\"hljs-keyword\">new</span><br>                    IndexRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1003&quot;</span>).source(XContentType.JSON, <span class=\"hljs-string\">&quot;name&quot;</span>,<br>                    <span class=\"hljs-string\">&quot;wangwu&quot;</span>));<br>            <span class=\"hljs-comment\">//客户端发送请求，获取响应对象</span><br>            BulkResponse responses = client.bulk(request, RequestOptions.DEFAULT);<br>            <span class=\"hljs-comment\">//打印结果信息</span><br>            System.out.println(<span class=\"hljs-string\">&quot;took:&quot;</span> + responses.getTook());<br>            System.out.println(<span class=\"hljs-string\">&quot;items:&quot;</span> + responses.getItems());<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"批量删除\"><a href=\"#批量删除\" class=\"headerlink\" title=\"批量删除\"></a>批量删除</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BatchDeleteDoc</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(client -&gt; &#123;<br>            <span class=\"hljs-comment\">//创建批量删除请求对象</span><br>            BulkRequest request = <span class=\"hljs-keyword\">new</span> BulkRequest();<br>            request.add(<span class=\"hljs-keyword\">new</span> DeleteRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1001&quot;</span>));<br>            request.add(<span class=\"hljs-keyword\">new</span> DeleteRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1002&quot;</span>));<br>            request.add(<span class=\"hljs-keyword\">new</span> DeleteRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1003&quot;</span>));<br>            <span class=\"hljs-comment\">//客户端发送请求，获取响应对象</span><br>            BulkResponse responses = client.bulk(request, RequestOptions.DEFAULT);<br>            <span class=\"hljs-comment\">//打印结果信息</span><br>            System.out.println(<span class=\"hljs-string\">&quot;took:&quot;</span> + responses.getTook());<br>            System.out.println(<span class=\"hljs-string\">&quot;items:&quot;</span> + responses.getItems());<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"JavaAPI-文档-高级查询-全量查询\"><a href=\"#JavaAPI-文档-高级查询-全量查询\" class=\"headerlink\" title=\"JavaAPI-文档-高级查询-全量查询\"></a>JavaAPI-文档-高级查询-全量查询</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BatchInsertDoc</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(client -&gt; &#123;<br>            <span class=\"hljs-comment\">//创建批量新增请求对象</span><br>            BulkRequest request = <span class=\"hljs-keyword\">new</span> BulkRequest();<br>            request.add(<span class=\"hljs-keyword\">new</span> IndexRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1001&quot;</span>).source(XContentType.JSON, <span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;zhangsan&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;10&quot;</span>, <span class=\"hljs-string\">&quot;sex&quot;</span>,<span class=\"hljs-string\">&quot;女&quot;</span>));<br>            request.add(<span class=\"hljs-keyword\">new</span> IndexRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1002&quot;</span>).source(XContentType.JSON, <span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;lisi&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;30&quot;</span>, <span class=\"hljs-string\">&quot;sex&quot;</span>,<span class=\"hljs-string\">&quot;女&quot;</span>));<br>            request.add(<span class=\"hljs-keyword\">new</span> IndexRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1003&quot;</span>).source(XContentType.JSON, <span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;wangwu1&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;40&quot;</span>, <span class=\"hljs-string\">&quot;sex&quot;</span>,<span class=\"hljs-string\">&quot;男&quot;</span>));<br>            request.add(<span class=\"hljs-keyword\">new</span> IndexRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1004&quot;</span>).source(XContentType.JSON, <span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;wangwu2&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;20&quot;</span>, <span class=\"hljs-string\">&quot;sex&quot;</span>,<span class=\"hljs-string\">&quot;女&quot;</span>));<br>            request.add(<span class=\"hljs-keyword\">new</span> IndexRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1005&quot;</span>).source(XContentType.JSON, <span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;wangwu3&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;50&quot;</span>, <span class=\"hljs-string\">&quot;sex&quot;</span>,<span class=\"hljs-string\">&quot;男&quot;</span>));<br>            request.add(<span class=\"hljs-keyword\">new</span> IndexRequest().index(<span class=\"hljs-string\">&quot;user&quot;</span>).id(<span class=\"hljs-string\">&quot;1006&quot;</span>).source(XContentType.JSON, <span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;wangwu4&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;20&quot;</span>, <span class=\"hljs-string\">&quot;sex&quot;</span>,<span class=\"hljs-string\">&quot;男&quot;</span>));<br>            <span class=\"hljs-comment\">//客户端发送请求，获取响应对象</span><br>            BulkResponse responses = client.bulk(request, RequestOptions.DEFAULT);<br>            <span class=\"hljs-comment\">//打印结果信息</span><br>            System.out.println(<span class=\"hljs-string\">&quot;took:&quot;</span> + responses.getTook());<br>            System.out.println(<span class=\"hljs-string\">&quot;items:&quot;</span> + responses.getItems());<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>查询所有索引数据</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryDoc</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(client -&gt; &#123;<br>            <span class=\"hljs-comment\">// 创建搜索请求对象</span><br>            SearchRequest request = <span class=\"hljs-keyword\">new</span> SearchRequest();<br>            request.indices(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>            <span class=\"hljs-comment\">// 构建查询的请求体</span><br>            SearchSourceBuilder sourceBuilder = <span class=\"hljs-keyword\">new</span> SearchSourceBuilder();<br>            <span class=\"hljs-comment\">// 查询所有数据</span><br>            sourceBuilder.query(QueryBuilders.matchAllQuery());<br>            request.source(sourceBuilder);<br>            SearchResponse response = client.search(request, RequestOptions.DEFAULT);<br>            <span class=\"hljs-comment\">// 查询匹配</span><br>            SearchHits hits = response.getHits();<br>            System.out.println(<span class=\"hljs-string\">&quot;took:&quot;</span> + response.getTook());<br>            System.out.println(<span class=\"hljs-string\">&quot;timeout:&quot;</span> + response.isTimedOut());<br>            System.out.println(<span class=\"hljs-string\">&quot;total:&quot;</span> + hits.getTotalHits());<br>            System.out.println(<span class=\"hljs-string\">&quot;MaxScore:&quot;</span> + hits.getMaxScore());<br>            System.out.println(<span class=\"hljs-string\">&quot;hits========&gt;&gt;&quot;</span>);<br>            <span class=\"hljs-keyword\">for</span> (SearchHit hit : hits) &#123;<br>            <span class=\"hljs-comment\">//输出每条查询的结果信息</span><br>                System.out.println(hit.getSourceAsString());<br>            &#125;<br>            System.out.println(<span class=\"hljs-string\">&quot;&lt;&lt;========&quot;</span>);<br>        &#125;);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"JavaAPI-文档-高级查询-分页查询-amp-条件查询-amp-查询排序\"><a href=\"#JavaAPI-文档-高级查询-分页查询-amp-条件查询-amp-查询排序\" class=\"headerlink\" title=\"JavaAPI-文档-高级查询-分页查询 &amp; 条件查询 &amp; 查询排序\"></a>JavaAPI-文档-高级查询-分页查询 &amp; 条件查询 &amp; 查询排序</h3><h4 id=\"条件查询-1\"><a href=\"#条件查询-1\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryDoc</span> </span>&#123;<br>    <br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ElasticsearchTask SEARCH_BY_CONDITION = client -&gt; &#123;<br>        <span class=\"hljs-comment\">// 创建搜索请求对象</span><br>        SearchRequest request = <span class=\"hljs-keyword\">new</span> SearchRequest();<br>        request.indices(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>        <span class=\"hljs-comment\">// 构建查询的请求体</span><br>        SearchSourceBuilder sourceBuilder = <span class=\"hljs-keyword\">new</span> SearchSourceBuilder();<br>        sourceBuilder.query(QueryBuilders.termQuery(<span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;30&quot;</span>));<br>        request.source(sourceBuilder);<br>        SearchResponse response = client.search(request, RequestOptions.DEFAULT);<br>        <span class=\"hljs-comment\">// 查询匹配</span><br>        SearchHits hits = response.getHits();<br>        System.out.println(<span class=\"hljs-string\">&quot;took:&quot;</span> + response.getTook());<br>        System.out.println(<span class=\"hljs-string\">&quot;timeout:&quot;</span> + response.isTimedOut());<br>        System.out.println(<span class=\"hljs-string\">&quot;total:&quot;</span> + hits.getTotalHits());<br>        System.out.println(<span class=\"hljs-string\">&quot;MaxScore:&quot;</span> + hits.getMaxScore());<br>        System.out.println(<span class=\"hljs-string\">&quot;hits========&gt;&gt;&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (SearchHit hit : hits) &#123;<br>            <span class=\"hljs-comment\">//输出每条查询的结果信息</span><br>            System.out.println(hit.getSourceAsString());<br>        &#125;<br>        System.out.println(<span class=\"hljs-string\">&quot;&lt;&lt;========&quot;</span>);<br>    &#125;;<br>    <br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(SEARCH_BY_CONDITION);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"分页查询-1\"><a href=\"#分页查询-1\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryDoc</span> </span>&#123;<br>    <br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ElasticsearchTask SEARCH_BY_PAGING = client -&gt; &#123;<br>        <span class=\"hljs-comment\">// 创建搜索请求对象</span><br>        SearchRequest request = <span class=\"hljs-keyword\">new</span> SearchRequest();<br>        request.indices(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>        <span class=\"hljs-comment\">// 构建查询的请求体</span><br>        SearchSourceBuilder sourceBuilder = <span class=\"hljs-keyword\">new</span> SearchSourceBuilder();<br>        sourceBuilder.query(QueryBuilders.matchAllQuery());<br>        <span class=\"hljs-comment\">// 分页查询</span><br>        <span class=\"hljs-comment\">// 当前页其实索引(第一条数据的顺序号)， from</span><br>        sourceBuilder.from(<span class=\"hljs-number\">0</span>);<br><br>        <span class=\"hljs-comment\">// 每页显示多少条 size</span><br>        sourceBuilder.size(<span class=\"hljs-number\">2</span>);<br>        request.source(sourceBuilder);<br>        SearchResponse response = client.search(request, RequestOptions.DEFAULT);<br>        <span class=\"hljs-comment\">// 查询匹配</span><br>        SearchHits hits = response.getHits();<br>        System.out.println(<span class=\"hljs-string\">&quot;took:&quot;</span> + response.getTook());<br>        System.out.println(<span class=\"hljs-string\">&quot;timeout:&quot;</span> + response.isTimedOut());<br>        System.out.println(<span class=\"hljs-string\">&quot;total:&quot;</span> + hits.getTotalHits());<br>        System.out.println(<span class=\"hljs-string\">&quot;MaxScore:&quot;</span> + hits.getMaxScore());<br>        System.out.println(<span class=\"hljs-string\">&quot;hits========&gt;&gt;&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (SearchHit hit : hits) &#123;<br>            <span class=\"hljs-comment\">//输出每条查询的结果信息</span><br>            System.out.println(hit.getSourceAsString());<br>        &#125;<br>        System.out.println(<span class=\"hljs-string\">&quot;&lt;&lt;========&quot;</span>);<br>    &#125;;<br>    <br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(SEARCH_BY_CONDITION);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"查询排序-1\"><a href=\"#查询排序-1\" class=\"headerlink\" title=\"查询排序\"></a>查询排序</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryDoc</span> </span>&#123;<br>    <br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ElasticsearchTask SEARCH_WITH_ORDER = client -&gt; &#123;<br>        <span class=\"hljs-comment\">// 创建搜索请求对象</span><br>        SearchRequest request = <span class=\"hljs-keyword\">new</span> SearchRequest();<br>        request.indices(<span class=\"hljs-string\">&quot;user&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 构建查询的请求体</span><br>        SearchSourceBuilder sourceBuilder = <span class=\"hljs-keyword\">new</span> SearchSourceBuilder();<br>        sourceBuilder.query(QueryBuilders.matchAllQuery());<br>        <span class=\"hljs-comment\">// 排序</span><br>        sourceBuilder.sort(<span class=\"hljs-string\">&quot;age&quot;</span>, SortOrder.ASC);<br>        request.source(sourceBuilder);<br>        SearchResponse response = client.search(request, RequestOptions.DEFAULT);<br>        <span class=\"hljs-comment\">// 查询匹配</span><br>        SearchHits hits = response.getHits();<br>        System.out.println(<span class=\"hljs-string\">&quot;took:&quot;</span> + response.getTook());<br>        System.out.println(<span class=\"hljs-string\">&quot;timeout:&quot;</span> + response.isTimedOut());<br>        System.out.println(<span class=\"hljs-string\">&quot;total:&quot;</span> + hits.getTotalHits());<br>        System.out.println(<span class=\"hljs-string\">&quot;MaxScore:&quot;</span> + hits.getMaxScore());<br>        System.out.println(<span class=\"hljs-string\">&quot;hits========&gt;&gt;&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (SearchHit hit : hits) &#123;<br>        <span class=\"hljs-comment\">//输出每条查询的结果信息</span><br>            System.out.println(hit.getSourceAsString());<br>        &#125;<br>        System.out.println(<span class=\"hljs-string\">&quot;&lt;&lt;========&quot;</span>);<br>    &#125;;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(SEARCH_WITH_ORDER);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"JavaAPI-文档-高级查询-组合查询-amp-范围查询\"><a href=\"#JavaAPI-文档-高级查询-组合查询-amp-范围查询\" class=\"headerlink\" title=\"JavaAPI-文档-高级查询-组合查询 &amp; 范围查询\"></a>JavaAPI-文档-高级查询-组合查询 &amp; 范围查询</h3><h4 id=\"组合查询\"><a href=\"#组合查询\" class=\"headerlink\" title=\"组合查询\"></a>组合查询</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryDoc</span> </span>&#123;<br>    <br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ElasticsearchTask SEARCH_BY_BOOL_CONDITION = client -&gt; &#123;<br>        <span class=\"hljs-comment\">// 创建搜索请求对象</span><br>        SearchRequest request = <span class=\"hljs-keyword\">new</span> SearchRequest();<br>        request.indices(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>        <span class=\"hljs-comment\">// 构建查询的请求体</span><br>        SearchSourceBuilder sourceBuilder = <span class=\"hljs-keyword\">new</span> SearchSourceBuilder();<br>        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();<br>        <span class=\"hljs-comment\">// 必须包含</span><br>        boolQueryBuilder.must(QueryBuilders.matchQuery(<span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;30&quot;</span>));<br>        <span class=\"hljs-comment\">// 一定不含</span><br>        boolQueryBuilder.mustNot(QueryBuilders.matchQuery(<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;zhangsan&quot;</span>));<br>        <span class=\"hljs-comment\">// 可能包含</span><br>        boolQueryBuilder.should(QueryBuilders.matchQuery(<span class=\"hljs-string\">&quot;sex&quot;</span>, <span class=\"hljs-string\">&quot;男&quot;</span>));<br>        sourceBuilder.query(boolQueryBuilder);<br>        request.source(sourceBuilder);<br>        SearchResponse response = client.search(request, RequestOptions.DEFAULT);<br>        <span class=\"hljs-comment\">// 查询匹配</span><br>        SearchHits hits = response.getHits();<br>        System.out.println(<span class=\"hljs-string\">&quot;took:&quot;</span> + response.getTook());<br>        System.out.println(<span class=\"hljs-string\">&quot;timeout:&quot;</span> + response.isTimedOut());<br>        System.out.println(<span class=\"hljs-string\">&quot;total:&quot;</span> + hits.getTotalHits());<br>        System.out.println(<span class=\"hljs-string\">&quot;MaxScore:&quot;</span> + hits.getMaxScore());<br>        System.out.println(<span class=\"hljs-string\">&quot;hits========&gt;&gt;&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (SearchHit hit : hits) &#123;<br>            <span class=\"hljs-comment\">//输出每条查询的结果信息</span><br>            System.out.println(hit.getSourceAsString());<br>        &#125;<br>        System.out.println(<span class=\"hljs-string\">&quot;&lt;&lt;========&quot;</span>);<br><br>    &#125;;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(SEARCH_BY_BOOL_CONDITION);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"范围查询-1\"><a href=\"#范围查询-1\" class=\"headerlink\" title=\"范围查询\"></a>范围查询</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryDoc</span> </span>&#123;<br>    <br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ElasticsearchTask SEARCH_BY_RANGE = client -&gt; &#123;<br>        <span class=\"hljs-comment\">// 创建搜索请求对象</span><br>        SearchRequest request = <span class=\"hljs-keyword\">new</span> SearchRequest();<br>        request.indices(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>        <span class=\"hljs-comment\">// 构建查询的请求体</span><br>        SearchSourceBuilder sourceBuilder = <span class=\"hljs-keyword\">new</span> SearchSourceBuilder();<br>        RangeQueryBuilder rangeQuery = QueryBuilders.rangeQuery(<span class=\"hljs-string\">&quot;age&quot;</span>);<br>        <span class=\"hljs-comment\">// 大于等于</span><br>        <span class=\"hljs-comment\">//rangeQuery.gte(&quot;30&quot;);</span><br>        <span class=\"hljs-comment\">// 小于等于</span><br>        rangeQuery.lte(<span class=\"hljs-string\">&quot;40&quot;</span>);<br>        sourceBuilder.query(rangeQuery);<br>        request.source(sourceBuilder);<br>        SearchResponse response = client.search(request, RequestOptions.DEFAULT);<br>        <span class=\"hljs-comment\">// 查询匹配</span><br>        SearchHits hits = response.getHits();<br>        System.out.println(<span class=\"hljs-string\">&quot;took:&quot;</span> + response.getTook());<br>        System.out.println(<span class=\"hljs-string\">&quot;timeout:&quot;</span> + response.isTimedOut());<br>        System.out.println(<span class=\"hljs-string\">&quot;total:&quot;</span> + hits.getTotalHits());<br>        System.out.println(<span class=\"hljs-string\">&quot;MaxScore:&quot;</span> + hits.getMaxScore());<br>        System.out.println(<span class=\"hljs-string\">&quot;hits========&gt;&gt;&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (SearchHit hit : hits) &#123;<br>        <span class=\"hljs-comment\">//输出每条查询的结果信息</span><br>            System.out.println(hit.getSourceAsString());<br>        &#125;<br>        System.out.println(<span class=\"hljs-string\">&quot;&lt;&lt;========&quot;</span>);<br>    &#125;;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(SEARCH_BY_RANGE);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"JavaAPI-文档-高级查询-模糊查询-amp-高亮查询\"><a href=\"#JavaAPI-文档-高级查询-模糊查询-amp-高亮查询\" class=\"headerlink\" title=\"JavaAPI-文档-高级查询-模糊查询 &amp; 高亮查询\"></a>JavaAPI-文档-高级查询-模糊查询 &amp; 高亮查询</h3><h4 id=\"模糊查询\"><a href=\"#模糊查询\" class=\"headerlink\" title=\"模糊查询\"></a>模糊查询</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryDoc</span> </span>&#123;<br>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ElasticsearchTask SEARCH_BY_FUZZY_CONDITION = client -&gt; &#123;<br>        <span class=\"hljs-comment\">// 创建搜索请求对象</span><br>        SearchRequest request = <span class=\"hljs-keyword\">new</span> SearchRequest();<br>        request.indices(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>        <span class=\"hljs-comment\">// 构建查询的请求体</span><br>        SearchSourceBuilder sourceBuilder = <span class=\"hljs-keyword\">new</span> SearchSourceBuilder();<br>        sourceBuilder.query(QueryBuilders.fuzzyQuery(<span class=\"hljs-string\">&quot;name&quot;</span>,<span class=\"hljs-string\">&quot;wangwu&quot;</span>).fuzziness(Fuzziness.ONE));<br>        request.source(sourceBuilder);<br>        SearchResponse response = client.search(request, RequestOptions.DEFAULT);<br>        <span class=\"hljs-comment\">// 查询匹配</span><br>        SearchHits hits = response.getHits();<br>        System.out.println(<span class=\"hljs-string\">&quot;took:&quot;</span> + response.getTook());<br>        System.out.println(<span class=\"hljs-string\">&quot;timeout:&quot;</span> + response.isTimedOut());<br>        System.out.println(<span class=\"hljs-string\">&quot;total:&quot;</span> + hits.getTotalHits());<br>        System.out.println(<span class=\"hljs-string\">&quot;MaxScore:&quot;</span> + hits.getMaxScore());<br>        System.out.println(<span class=\"hljs-string\">&quot;hits========&gt;&gt;&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (SearchHit hit : hits) &#123;<br>            <span class=\"hljs-comment\">//输出每条查询的结果信息</span><br>            System.out.println(hit.getSourceAsString());<br>        &#125;<br>        System.out.println(<span class=\"hljs-string\">&quot;&lt;&lt;========&quot;</span>);<br>    &#125;;<br><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br><span class=\"hljs-comment\">//        ConnectElasticsearch.connect(SEARCH_ALL);</span><br><span class=\"hljs-comment\">//        ConnectElasticsearch.connect(SEARCH_BY_CONDITION);</span><br><span class=\"hljs-comment\">//        ConnectElasticsearch.connect(SEARCH_BY_PAGING);</span><br><span class=\"hljs-comment\">//        ConnectElasticsearch.connect(SEARCH_WITH_ORDER);</span><br><span class=\"hljs-comment\">//        ConnectElasticsearch.connect(SEARCH_BY_BOOL_CONDITION);</span><br><span class=\"hljs-comment\">//        ConnectElasticsearch.connect(SEARCH_BY_RANGE);</span><br>        ConnectElasticsearch.connect(SEARCH_BY_FUZZY_CONDITION);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"高亮查询-1\"><a href=\"#高亮查询-1\" class=\"headerlink\" title=\"高亮查询\"></a>高亮查询</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryDoc</span> </span>&#123;<br>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ElasticsearchTask SEARCH_WITH_HIGHLIGHT = client -&gt; &#123;<br>        <span class=\"hljs-comment\">// 高亮查询</span><br>        SearchRequest request = <span class=\"hljs-keyword\">new</span> SearchRequest().indices(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>        <span class=\"hljs-comment\">//2.创建查询请求体构建器</span><br>        SearchSourceBuilder sourceBuilder = <span class=\"hljs-keyword\">new</span> SearchSourceBuilder();<br>        <span class=\"hljs-comment\">//构建查询方式：高亮查询</span><br>        TermsQueryBuilder termsQueryBuilder =<br>                QueryBuilders.termsQuery(<span class=\"hljs-string\">&quot;name&quot;</span>,<span class=\"hljs-string\">&quot;zhangsan&quot;</span>);<br>        <span class=\"hljs-comment\">//设置查询方式</span><br>        sourceBuilder.query(termsQueryBuilder);<br>        <span class=\"hljs-comment\">//构建高亮字段</span><br>        HighlightBuilder highlightBuilder = <span class=\"hljs-keyword\">new</span> HighlightBuilder();<br>        highlightBuilder.preTags(<span class=\"hljs-string\">&quot;&lt;font color=&#x27;red&#x27;&gt;&quot;</span>);<span class=\"hljs-comment\">//设置标签前缀</span><br>        highlightBuilder.postTags(<span class=\"hljs-string\">&quot;&lt;/font&gt;&quot;</span>);<span class=\"hljs-comment\">//设置标签后缀</span><br>        highlightBuilder.field(<span class=\"hljs-string\">&quot;name&quot;</span>);<span class=\"hljs-comment\">//设置高亮字段</span><br>        <span class=\"hljs-comment\">//设置高亮构建对象</span><br>        sourceBuilder.highlighter(highlightBuilder);<br>        <span class=\"hljs-comment\">//设置请求体</span><br>        request.source(sourceBuilder);<br>        <span class=\"hljs-comment\">//3.客户端发送请求，获取响应对象</span><br>        SearchResponse response = client.search(request, RequestOptions.DEFAULT);<br>        <span class=\"hljs-comment\">//4.打印响应结果</span><br>        SearchHits hits = response.getHits();<br>        System.out.println(<span class=\"hljs-string\">&quot;took::&quot;</span>+response.getTook());<br>        System.out.println(<span class=\"hljs-string\">&quot;time_out::&quot;</span>+response.isTimedOut());<br>        System.out.println(<span class=\"hljs-string\">&quot;total::&quot;</span>+hits.getTotalHits());<br>        System.out.println(<span class=\"hljs-string\">&quot;max_score::&quot;</span>+hits.getMaxScore());<br>        System.out.println(<span class=\"hljs-string\">&quot;hits::::&gt;&gt;&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (SearchHit hit : hits) &#123;<br>            String sourceAsString = hit.getSourceAsString();<br>            System.out.println(sourceAsString);<br>            <span class=\"hljs-comment\">//打印高亮结果</span><br>            Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();<br>            System.out.println(highlightFields);<br>        &#125;<br>        System.out.println(<span class=\"hljs-string\">&quot;&lt;&lt;::::&quot;</span>);<br>    &#125;;<br><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(SEARCH_WITH_HIGHLIGHT);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"JavaAPI-文档-高级查询-最大值查询-amp-分组查询\"><a href=\"#JavaAPI-文档-高级查询-最大值查询-amp-分组查询\" class=\"headerlink\" title=\"JavaAPI-文档-高级查询-最大值查询 &amp; 分组查询\"></a>JavaAPI-文档-高级查询-最大值查询 &amp; 分组查询</h3><h4 id=\"最大值查询\"><a href=\"#最大值查询\" class=\"headerlink\" title=\"最大值查询\"></a>最大值查询</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryDoc</span> </span>&#123;<br>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ElasticsearchTask SEARCH_WITH_MAX = client -&gt; &#123;<br>        <span class=\"hljs-comment\">// 高亮查询</span><br>        SearchRequest request = <span class=\"hljs-keyword\">new</span> SearchRequest().indices(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>        SearchSourceBuilder sourceBuilder = <span class=\"hljs-keyword\">new</span> SearchSourceBuilder();<br>        sourceBuilder.aggregation(AggregationBuilders.max(<span class=\"hljs-string\">&quot;maxAge&quot;</span>).field(<span class=\"hljs-string\">&quot;age&quot;</span>));<br>        <span class=\"hljs-comment\">//设置请求体</span><br>        request.source(sourceBuilder);<br>        <span class=\"hljs-comment\">//3.客户端发送请求，获取响应对象</span><br>        SearchResponse response = client.search(request, RequestOptions.DEFAULT);<br>        <span class=\"hljs-comment\">//4.打印响应结果</span><br>        SearchHits hits = response.getHits();<br>        System.out.println(response);<br>    &#125;;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(SEARCH_WITH_MAX);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"分组查询\"><a href=\"#分组查询\" class=\"headerlink\" title=\"分组查询\"></a>分组查询</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryDoc</span> </span>&#123;<br><br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ElasticsearchTask SEARCH_WITH_GROUP = client -&gt; &#123;<br>        SearchRequest request = <span class=\"hljs-keyword\">new</span> SearchRequest().indices(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>        SearchSourceBuilder sourceBuilder = <span class=\"hljs-keyword\">new</span> SearchSourceBuilder();<br>        sourceBuilder.aggregation(AggregationBuilders.terms(<span class=\"hljs-string\">&quot;age_groupby&quot;</span>).field(<span class=\"hljs-string\">&quot;age&quot;</span>));<br>        <span class=\"hljs-comment\">//设置请求体</span><br>        request.source(sourceBuilder);<br>        <span class=\"hljs-comment\">//3.客户端发送请求，获取响应对象</span><br>        SearchResponse response = client.search(request, RequestOptions.DEFAULT);<br>        <span class=\"hljs-comment\">//4.打印响应结果</span><br>        SearchHits hits = response.getHits();<br>        System.out.println(response);<br>    &#125;;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        ConnectElasticsearch.connect(SEARCH_WITH_GROUP);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h1 id=\"Elasticsearch环境\"><a href=\"#Elasticsearch环境\" class=\"headerlink\" title=\"Elasticsearch环境\"></a>Elasticsearch环境</h1><p><strong>单机 &amp; 集群</strong><br />单台 Elasticsearch 服务器提供服务，往往都有最大的负载能力，超过这个阈值，服务器<br />性能就会大大降低甚至不可用，所以生产环境中，一般都是运行在指定服务器集群中。<br />除了负载能力，单点服务器也存在其他问题：</p>\n<p>单台机器存储容量有限<br />单服务器容易出现单点故障，无法实现高可用<br />单服务的并发处理能力有限<br />配置服务器集群时，集群中节点数量没有限制，大于等于 2 个节点就可以看做是集群了。一<br />般出于高性能及高可用方面来考虑集群中节点数量都是 3 个以上</p>\n<p>总之，集群能提高性能，增加容错。</p>\n<p><strong>集群 Cluster</strong><br />一个集群就是由一个或多个服务器节点组织在一起，共同持有整个的数据，并一起提供索引和搜索功能。**一个 Elasticsearch 集群有一个唯一的名字标识，这个名字默认就是”elasticsearch”。这个名字是重要的，因为一个节点只能通过指定某个集群的名字，来加入这个集群。</p>\n<p><strong>节点 Node</strong><br />集群中包含很多服务器， 一个节点就是其中的一个服务器。 作为集群的一部分，它存储数据，参与集群的索引和搜索功能。</p>\n<p>一个节点也是由一个名字来标识的，默认情况下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网络中的哪些服务器对应于 Elasticsearch 集群中的哪些节点。</p>\n<p>一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫做“elasticsearch”的集群中，这意味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中。</p>\n<p>在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运<br />行任何 Elasticsearch 节点，这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的<br />集群。</p>\n<h2 id=\"Windows集群部署\"><a href=\"#Windows集群部署\" class=\"headerlink\" title=\"Windows集群部署\"></a>Windows集群部署</h2><ul>\n<li>创建 elasticsearch-cluster 文件夹</li>\n<li>创建 elasticsearch-7.8.0-cluster 文件夹，在内部复制三个 elasticsearch 服务</li>\n<li>修改集群文件目录中每个节点的 config/elasticsearch.yml 配置文件</li>\n<li>如果有必要，删除每个节点中的 data 目录中所有内容</li>\n</ul>\n<p><img src=\"/image/blog/elk1.png?raw=true\" alt=\"image.png\"></p>\n<p><img src=\"/image/blog/elk2.png?raw=true\" alt=\"image.png\"><img src=\"/image/blog/elk3.png?raw=true\" alt=\"image.png\"></p>\n<p><strong>启动集群</strong><br />分别依次双击执行节点的bin/elasticsearch.bat, 启动节点服务器（可以编写一个脚本启动），启动后，会自动加入指定名称的集群。</p>\n<p><strong>测试集群</strong><br />用Postman，查看集群状态<br />GET <a href=\"http://127.0.0.1:1001/_cluster/health\">http://127.0.0.1:1001/_cluster/health</a><br />GET <a href=\"http://127.0.0.1:1002/_cluster/health\">http://127.0.0.1:1002/_cluster/health</a><br />GET <a href=\"http://127.0.0.1:1003/_cluster/health\">http://127.0.0.1:1003/_cluster/health</a><br /><a href=\"https://blog.csdn.net/u011863024/article/details/115721328\"><br /></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123;<br>    <span class=\"hljs-string\">&quot;cluster_name&quot;</span>: <span class=\"hljs-string\">&quot;my-application&quot;</span>,<br>    <span class=\"hljs-string\">&quot;status&quot;</span>: <span class=\"hljs-string\">&quot;green&quot;</span>,<br>    <span class=\"hljs-string\">&quot;timed_out&quot;</span>: <span class=\"hljs-keyword\">false</span>,<br>    <span class=\"hljs-string\">&quot;number_of_nodes&quot;</span>: <span class=\"hljs-number\">3</span>,<br>    <span class=\"hljs-string\">&quot;number_of_data_nodes&quot;</span>: <span class=\"hljs-number\">3</span>,<br>    <span class=\"hljs-string\">&quot;active_primary_shards&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;active_shards&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;relocating_shards&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;initializing_shards&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;unassigned_shards&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;delayed_unassigned_shards&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;number_of_pending_tasks&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;number_of_in_flight_fetch&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;task_max_waiting_in_queue_millis&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;active_shards_percent_as_number&quot;</span>: <span class=\"hljs-number\">100.0</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>status字段</strong>指示着当前集群在总体上是否工作正常。它的三种颜色含义如下：</p>\n<ol>\n<li>green：所有的主分片和副本分片都正常运行</li>\n<li>yellow：所有的主分片都正常运行，但不是所有的副本分片都正常运行</li>\n<li>red：有主分片没能正常运行</li>\n</ol>\n<p>用Postman，在一节点增加索引，另一节点获取索引</p>\n<p>向集群中的node-1001节点增加索引：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">#PUT http:<span class=\"hljs-comment\">//127.0.0.1:1001/user</span><br></code></pre></td></tr></table></figure>\n<p>向集群中的node-1003节点获取索引：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">#GET http:<span class=\"hljs-comment\">//127.0.0.1:1003/user</span><br></code></pre></td></tr></table></figure>\n<p>如果在1003创建索引，同样在1001也能获取索引信息，这就是集群能力</p>\n<h2 id=\"环境-Linux单节点部署\"><a href=\"#环境-Linux单节点部署\" class=\"headerlink\" title=\"环境-Linux单节点部署\"></a>环境-Linux单节点部署</h2><blockquote>\n<p>下载软件 <a href=\"https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0\">链接</a></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"># 解压缩<br>tar -zxvf elasticsearch-<span class=\"hljs-number\">7.8</span><span class=\"hljs-number\">.0</span>-linux-x86_64.tar.gz -C /opt/<span class=\"hljs-keyword\">module</span><br><br># 改名<br>mv elasticsearch-<span class=\"hljs-number\">7.8</span><span class=\"hljs-number\">.0</span> es<br><br>useradd es #新增 es 用户<br><br>passwd es #为 es 用户设置密码<br><br>userdel -r es #如果错了，可以删除再加<br><br>chown -R es:es /opt/<span class=\"hljs-keyword\">module</span>/es #文件夹所有者<br></code></pre></td></tr></table></figure>\n<p>修改/opt/module/es/config/elasticsearch.yml文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"># 加入如下配置<br>cluster.name: elasticsearch<br>node.name: node-<span class=\"hljs-number\">1</span><br>network.host: <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span><br>http.port: <span class=\"hljs-number\">9200</span><br>cluster.initial_master_nodes: [<span class=\"hljs-string\">&quot;node-1&quot;</span>]<br></code></pre></td></tr></table></figure>\n<p>修改/etc/security/limits.conf</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"># 在文件末尾中增加下面内容<br># 每个进程可以打开的文件数的限制<br>es soft nofile <span class=\"hljs-number\">65536</span><br>es hard nofile <span class=\"hljs-number\">65536</span><br></code></pre></td></tr></table></figure>\n<p>修改/etc/security/limits.d/20-nproc.conf</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"># 在文件末尾中增加下面内容<br># 每个进程可以打开的文件数的限制<br>es soft nofile <span class=\"hljs-number\">65536</span><br>es hard nofile <span class=\"hljs-number\">65536</span><br># 操作系统级别对每个用户创建的进程数的限制<br>* hard nproc <span class=\"hljs-number\">4096</span><br># 注： * 带表 Linux 所有用户名称<br></code></pre></td></tr></table></figure>\n<p>修改/etc/sysctl.conf</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"># 在文件中增加下面内容<br># 一个进程可以拥有的 VMA(虚拟内存区域)的数量,默认值为 <span class=\"hljs-number\">65536</span><br>vm.max_map_count=<span class=\"hljs-number\">655360</span><br></code></pre></td></tr></table></figure>\n<p>重新加载</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">sysctl -p<br><br># 使用 ES 用户启动<br>cd /opt/<span class=\"hljs-keyword\">module</span>/es/<br>    <br>#启动<br>bin/elasticsearch<br><br>#后台启动<br>bin/elasticsearch -d  <br><br></code></pre></td></tr></table></figure>\n<p>启动时，会动态生成文件，如果文件所属用户不匹配，会发生错误，需要重新进行修改用户和用户组</p>\n<p><img src=\"/image/blog/elk4.png?raw=true\" alt=\"image.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">#暂时关闭防火墙<br>systemctl stop firewalld<br>#永久关闭防火墙<br>systemctl enable firewalld.service #打开防火墙永久性生效，重启后不会复原<br>systemctl disable firewalld.service #关闭防火墙，永久性生效，重启后不会复原<br></code></pre></td></tr></table></figure>\n<h3 id=\"测试软件\"><a href=\"#测试软件\" class=\"headerlink\" title=\"测试软件\"></a>测试软件</h3><p>浏览器中输入地址： <a href=\"http://linux1:9200/\">http://linux1:9200/</a><br /><img src=\"/image/blog/elk5.png?raw=true\" alt=\"image.png\"></p>\n<h1 id=\"Elasticsearch进阶\"><a href=\"#Elasticsearch进阶\" class=\"headerlink\" title=\"Elasticsearch进阶\"></a>Elasticsearch进阶</h1><h1 id=\"ELK-Stack\"><a href=\"#ELK-Stack\" class=\"headerlink\" title=\"ELK Stack\"></a>ELK Stack</h1><p><img src=\"/image/blog/elk6.png?raw=true\" alt=\"image.png\"><br />Input:：输入，输出数据可以是stdin，File，TCP，Redis，Syslog等<br />Filter：过滤，将日志格式化，有丰富的过滤插件，Grok正则捕获，Date日期处理，JSON解码，Mutate数据修改<br />Output：输出，输出目标可以是Stdin，File，TCP，Redis，ES等</p>\n<h1 id=\"Elasticsearch-Head插件\"><a href=\"#Elasticsearch-Head插件\" class=\"headerlink\" title=\"Elasticsearch-Head插件\"></a>Elasticsearch-Head插件</h1><blockquote>\n<p><a href=\"https://github.com/mobz/elasticsearch-head/releases\">下载</a></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><code class=\"hljs shell\">npm install<br>npm run start<br><span class=\"hljs-meta\">#</span><span class=\"bash\">  http://localhost:9100/</span><br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 修改es的yml文件</span><br>http.cors.enabled: true<br>http.cors.allow-origin: &quot;*&quot;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Logstash\"><a href=\"#Logstash\" class=\"headerlink\" title=\"Logstash\"></a>Logstash</h1><blockquote>\n<p><a href=\"https://elasticsearch.cn/download/#seg-3\">下载</a> </p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  beats &#123;<br>    port =&gt; 5044<br>  &#125;<br>&#125;<br><br>output &#123;<br>  elasticsearch &#123;<br>    hosts =&gt; [<span class=\"hljs-attr\">&quot;http://localhost:9200&quot;</span>]<br>    index =&gt; <span class=\"hljs-attr\">&quot;%&#123;[@metadata][beat]&#125;-%&#123;[@metadata][version]&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">logstash -f logstash.conf<br></code></pre></td></tr></table></figure>\n<h2 id=\"Input插件\"><a href=\"#Input插件\" class=\"headerlink\" title=\"Input插件\"></a>Input插件</h2><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  stdin &#123;<br>    <br>  &#125;<br>&#125;<br><br>output &#123;<br>  stdout &#123;<br>    codec =&gt; rubydebug<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  file &#123;<br>    path =&gt; <span class=\"hljs-attr\">&quot;/var/log/message&quot;</span><br>    tages =&gt; <span class=\"hljs-attr\">&quot;123&quot;</span><br>    type =&gt; <span class=\"hljs-attr\">&quot;syslog&quot;</span><br>  &#125;<br>&#125;<br> <br>output &#123;<br>  stdout &#123;<br>    codec =&gt; rubydebug<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  tcp &#123;<br>    port =&gt; 9200<br>    type =&gt; <span class=\"hljs-attr\">&quot;nc&quot;</span><br>  &#125; <br>&#125;<br> <br>output &#123;<br>  stdout &#123;<br>    codec =&gt; rubydebug<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  beats &#123;<br>    port =&gt; 5044<br>  &#125;<br>&#125;<br><br>output &#123;<br>  stdout &#123;<br>    codec =&gt; rubydebug<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Codec插件\"><a href=\"#Codec插件\" class=\"headerlink\" title=\"Codec插件\"></a>Codec插件</h2><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  stdin &#123;<br>    codec =&gt; json &#123;<br>      charset =&gt; [<span class=\"hljs-attr\">&quot;UTF-8&quot;</span>]<br>    &#125;<br>  &#125;<br>&#125;<br><br>output &#123;<br>  stdout &#123;<br>    codec =&gt; rubydebug<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  stdin &#123;<br>    codec =&gt; multiline &#123;<br>      <span class=\"hljs-comment\">// 不是以字符开头的，合并到上一行 正则匹配</span><br>      pattern =&gt; <span class=\"hljs-attr\">&quot;^\\s&quot;</span><br>      <span class=\"hljs-comment\">// 合并到上一行还是下一行</span><br>      what =&gt; <span class=\"hljs-attr\">&quot;previous&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br><br>output &#123;<br>  stdout &#123;<br>    codec =&gt; rubydebug<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Filter\"><a href=\"#Filter\" class=\"headerlink\" title=\"Filter\"></a>Filter</h2><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  stdin &#123;<br>   <br>  &#125;<br>&#125;<br>filter &#123;<br>  json &#123;<br>    <span class=\"hljs-comment\">// 解析字段</span><br>    source =&gt; <span class=\"hljs-attr\">&quot;message&quot;</span><br>    <span class=\"hljs-comment\">// 目标字段</span><br>    target =&gt; <span class=\"hljs-attr\">&quot;content&quot;</span><br>  &#125;<br>&#125;<br><br>output &#123;<br>  stdout &#123;<br>    codec =&gt; rubydebug<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  stdin &#123;<br>   <br>  &#125;<br>&#125;<br>filter &#123;<br>  kv &#123;<br>    <span class=\"hljs-comment\">// 根据 &amp; 和 ? 拆分字符串</span><br>    fleld_split =&gt; <span class=\"hljs-attr\">&quot;&amp;?&quot;</span> <br>    <span class=\"hljs-comment\">// 使用正则表达式</span><br>    fleld_split_pattern =&gt; <span class=\"hljs-attr\">&quot;:+&quot;</span><br>  &#125;<br>&#125;<br><br>output &#123;<br>  stdout &#123;<br>    codec =&gt; rubydebug<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p> <br /><img src=\"/image/blog/elk7.png?raw=true\" alt=\"image.png\"></p>\n<blockquote>\n<p><a href=\"https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-City&license_key=O38GA2SviPLnqfF5&suffix=tar.gz\">GEOIP下载</a> <a href=\"https://www.maxmind.com/en/accounts/347303/geoip/downloads?show_all_dates=1\">官网</a> <a href=\"https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-City&license_key=O38GA2SviPLnqfF5&suffix=tar.gz.sha256\">校验文件下载</a>  <a href=\"http://grokdebug.herokuapp.com/\">grok正则</a></p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  stdin &#123;<br>   <br>  &#125;<br>&#125;<br>filter &#123;<br>  gork &#123;<br>    match =&gt; &#123;<br>      <span class=\"hljs-comment\">// 正则匹配消息 日志示例： 223.72.85.86 GET /index.html 15824 0.043</span><br>      <span class=\"hljs-attr\">&quot;message&quot;</span> =&gt; <span class=\"hljs-attr\">&quot;%&#123;IP:client&#125; %&#123;WORD:method&#125; %&#123;URIPATHPARAM:request&#125; %&#123;NUMBER:bytes&#125; %&#123;NUMBER:duration&#125;&quot;</span><br>    &#125;<br>  &#125;<br>  geoip &#123;<br>    source =&gt; <span class=\"hljs-attr\">&quot;client&quot;</span><br>    database =&gt; <span class=\"hljs-attr\">&quot;D:\\path\\ELK\\GeoLite2-City_20220503/GeoLite2-City.mmdb&quot;</span><br>  &#125;<br>&#125;<br><br>output &#123;<br>  stdout &#123;<br>    codec =&gt; rubydebug<br>  &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 自定义匹配方式</span><br>gork &#123;<br>    <span class=\"hljs-comment\">// ID [0-9A-Z]&#123;10,11&#125;</span><br>    patterns_dir =&gt; <span class=\"hljs-attr\">&quot;D:\\path\\ELK\\patterns\\id_dir&quot;</span><br>    match =&gt; &#123;<br>      <span class=\"hljs-comment\">// 正则匹配消息 日志示例： 123124452A</span><br>      <span class=\"hljs-attr\">&quot;message&quot;</span> =&gt; <span class=\"hljs-attr\">&quot;%&#123;ID:id&#125;&quot;</span><br>    &#125;<br>  &#125;<br><br><span class=\"hljs-comment\">// 匹配多个</span><br>gork &#123;<br>    <span class=\"hljs-comment\">// ID [0-9A-Z]&#123;10,11&#125;</span><br>    patterns_dir =&gt; <span class=\"hljs-attr\">&quot;D:\\path\\ELK\\patterns\\id_dir&quot;</span><br>    match =&gt; [<br>      <span class=\"hljs-attr\">&quot;message&quot;</span>, <span class=\"hljs-attr\">&quot;%&#123;IP:client&#125; %&#123;WORD:method&#125;&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;message&quot;</span>, <span class=\"hljs-attr\">&quot;%&#123;ID:id&#125;&quot;</span><br>    ]<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p><img src=\"/image/blog/elk8.png?raw=true\" alt=\"image.png\"><img src=\"/image/blog/elk9.png?raw=true\" alt=\"image.png\"><br /><img src=\"/image/blog/elk10.png?raw=true\" alt=\"image.png\"></p>\n<h2 id=\"Output插件\"><a href=\"#Output插件\" class=\"headerlink\" title=\"Output插件\"></a>Output插件</h2><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  file &#123;<br>    path =&gt; [<span class=\"hljs-attr\">&quot;/var/log/messages&quot;</span>]<br>    type =&gt; <span class=\"hljs-attr\">&quot;system&quot;</span><br>    tags =&gt; [<span class=\"hljs-attr\">&quot;syslog&quot;</span>,<span class=\"hljs-attr\">&quot;test&quot;</span>]<br>    start_position =&gt; <span class=\"hljs-attr\">&quot;beginning&quot;</span><br>  &#125;<br>  file &#123;<br>    path =&gt; [<span class=\"hljs-attr\">&quot;/var/log/audit/audit.log&quot;</span>]<br>    type =&gt; <span class=\"hljs-attr\">&quot;system&quot;</span><br>    tags =&gt; [<span class=\"hljs-attr\">&quot;auth&quot;</span>,<span class=\"hljs-attr\">&quot;test&quot;</span>]<br>    start_position =&gt; <span class=\"hljs-attr\">&quot;beginning&quot;</span><br>  &#125;<br>&#125;<br>filter &#123;<br> <br>&#125;<br><br>output &#123;<br>  if [type] == <span class=\"hljs-attr\">&quot;system&quot;</span> &#123;<br>    if [tages][0] == <span class=\"hljs-attr\">&quot;syslog&quot;</span> &#123;<br>      elasticsearch &#123;<br>         hosts =&gt; [<span class=\"hljs-attr\">&quot;http://localhost:9200&quot;</span>]<br>         index =&gt; <span class=\"hljs-attr\">&quot;logstash-system-syslog-%&#123;+YYYY.MM.dd&#125;&quot;</span><br>      &#125;<br>      stdout &#123;<br>         codec =&gt; rubydebug<br>      &#125;<br>    &#125;<br>    else if [tages][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;auth&quot;</span> &#123;<br>       elasticsearch &#123;<br>         hosts =&gt; [<span class=\"hljs-attr\">&quot;http://localhost:9200&quot;</span>]<br>         index =&gt; <span class=\"hljs-attr\">&quot;logstash-system-auth-%&#123;+YYYY.MM.dd&#125;&quot;</span><br>      &#125;<br>      stdout &#123;<br>         codec =&gt; rubydebug<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"Kibana\"><a href=\"#Kibana\" class=\"headerlink\" title=\"Kibana\"></a>Kibana</h1><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">i18n.locale:</span> <span class=\"hljs-string\">&quot;zh-CN&quot;</span><br></code></pre></td></tr></table></figure>\n<p><img src=\"/image/blog/elk11.png?raw=true\" alt=\"image.png\"><br />使用nginx代理kibana</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-section\">http</span> &#123;<br>  <span class=\"hljs-section\">server</span> &#123;<br>    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;<br>    <span class=\"hljs-attribute\">server_name</span> localhost;<br>    <br>    <span class=\"hljs-attribute\">location</span> / &#123;<br>      <span class=\"hljs-attribute\">proxy_pass</span> http://localhost:5601;<br>      <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">&quot;请输入用户名和密码！&quot;</span>;<br>      // 指定用户文件<br>      <span class=\"hljs-attribute\">auth_basic_user_file</span> /mydata/nginx/conf/user.db;  <br>      <span class=\"hljs-attribute\">root</span> html;<br>      <span class=\"hljs-attribute\">index</span> index.html index.htm;<br>    &#125;<br>    <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 生成密文密码</span><br>openssl passwd -crytp 123456<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><code class=\"hljs nginx\">// 用户名：密码<br>fxb: faHgR3X/qNehA<br></code></pre></td></tr></table></figure>\n<h1 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h1><p><img src=\"/image/blog/elk12.png?raw=true\" alt=\"image.png\"><br />   </p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  file &#123;<br>    path =&gt; [<span class=\"hljs-attr\">&quot;/var/log/messages&quot;</span>]<br>    type =&gt; <span class=\"hljs-attr\">&quot;system&quot;</span><br>    tags =&gt; [<span class=\"hljs-attr\">&quot;syslog&quot;</span>,<span class=\"hljs-attr\">&quot;test&quot;</span>]<br>    start_position =&gt; <span class=\"hljs-attr\">&quot;beginning&quot;</span><br>  &#125;<br>  file &#123;<br>    path =&gt; [<span class=\"hljs-attr\">&quot;/var/log/audit/audit.log&quot;</span>]<br>    type =&gt; <span class=\"hljs-attr\">&quot;system&quot;</span><br>    tags =&gt; [<span class=\"hljs-attr\">&quot;auth&quot;</span>,<span class=\"hljs-attr\">&quot;test&quot;</span>]<br>    start_position =&gt; <span class=\"hljs-attr\">&quot;beginning&quot;</span><br>  &#125;<br>&#125;<br><br>filter &#123;<br> <br>&#125;<br><br>output &#123;<br>  redis &#123;<br>     host =&gt; [<span class=\"hljs-attr\">&quot;localhost:6379&quot;</span>]<br>     password =&gt; <span class=\"hljs-attr\">&quot;123456&quot;</span><br>     db =&gt; <span class=\"hljs-attr\">&quot;0&quot;</span><br>     data_type =&gt; <span class=\"hljs-attr\">&quot;list&quot;</span><br>     key =&gt; <span class=\"hljs-attr\">&quot;logstash&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>  redis &#123;<br>    host =&gt; <span class=\"hljs-attr\">&quot;localhost&quot;</span><br>    port =&gt; 6379<br>    password =&gt; <span class=\"hljs-attr\">&quot;123456&quot;</span><br>    db =&gt; <span class=\"hljs-attr\">&quot;0&quot;</span><br>    data_type =&gt; <span class=\"hljs-attr\">&quot;list&quot;</span><br>    key =&gt; <span class=\"hljs-attr\">&quot;logstash&quot;</span><br>  &#125;<br>&#125;<br><br>filter &#123;<br>  <br>&#125;<br><br>output &#123;<br>  if [type] == <span class=\"hljs-attr\">&quot;system&quot;</span> &#123;<br>    if [tages][0] == <span class=\"hljs-attr\">&quot;syslog&quot;</span> &#123;<br>      elasticsearch &#123;<br>        hosts =&gt; [<span class=\"hljs-attr\">&quot;http://localhost:9200&quot;</span>]<br>        index =&gt; <span class=\"hljs-attr\">&quot;logstash-system-syslog-%&#123;+YYYY.MM.dd&#125;&quot;</span><br>      &#125;<br>      stdout &#123;<br>        codec =&gt; rubydebug<br>      &#125;<br>    &#125;<br>    else if [tages][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;auth&quot;</span> &#123;<br>      elasticsearch &#123;<br>        hosts =&gt; [<span class=\"hljs-attr\">&quot;http://localhost:9200&quot;</span>]<br>        index =&gt; <span class=\"hljs-attr\">&quot;logstash-system-auth-%&#123;+YYYY.MM.dd&#125;&quot;</span><br>      &#125;<br>      stdout &#123;<br>        codec =&gt; rubydebug<br>      &#125; <br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"FileBeat\"><a href=\"#FileBeat\" class=\"headerlink\" title=\"FileBeat\"></a>FileBeat</h1><p><img src=\"/image/blog/elk13.png?raw=true\" alt=\"image.png\"></p>\n<blockquote>\n<p><a href=\"https://www.elastic.co/guide/en/beats/filebeat/7.7/configuration-filebeat-options.html\">相关说明</a></p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">filebeat.inputs:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">log</span> <br>  <span class=\"hljs-attr\">paths:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/var/log/system.log</span><br>  <span class=\"hljs-attr\">tags:</span> [<span class=\"hljs-string\">&quot;syslog&quot;</span>]<br><span class=\"hljs-attr\">fields:</span><br>  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">system</span><br><span class=\"hljs-attr\">fields_under_root:</span> <span class=\"hljs-literal\">true</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">log</span> <br>  <span class=\"hljs-attr\">paths:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/var/log/auth.log</span><br>  <span class=\"hljs-attr\">tags:</span> [<span class=\"hljs-string\">&quot;auth&quot;</span>]<br><span class=\"hljs-attr\">fields:</span><br>  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">system</span><br><span class=\"hljs-attr\">fields_under_root:</span> <span class=\"hljs-literal\">true</span><br><br><span class=\"hljs-attr\">output.redis:</span><br>  <span class=\"hljs-attr\">hosts:</span> [<span class=\"hljs-string\">&quot;localhost:6379&quot;</span>]<br>  <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">&quot;123456&quot;</span><br>  <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">&quot;filebeat&quot;</span><br>  <span class=\"hljs-attr\">db:</span> <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-number\">5</span><br>  <span class=\"hljs-attr\">datatype:</span> <span class=\"hljs-string\">list</span><br></code></pre></td></tr></table></figure>\n<h1 id=\"日志收集\"><a href=\"#日志收集\" class=\"headerlink\" title=\"日志收集\"></a>日志收集</h1><h2 id=\"Nginx日志收集\"><a href=\"#Nginx日志收集\" class=\"headerlink\" title=\"Nginx日志收集\"></a>Nginx日志收集</h2><p><img src=\"/image/blog/elk14.png?raw=true\" alt=\"image.png\"><img src=\"/image/blog/elk15.png?raw=true\" alt=\"image.png\"></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-comment\"># 日志</span><br><span class=\"hljs-attribute\">error_log</span>  /var/log/nginx/error.log <span class=\"hljs-literal\">warn</span>;<br><span class=\"hljs-attribute\">pid</span>        /var/run/nginx.pid;<br><br><span class=\"hljs-comment\"># http块</span><br><span class=\"hljs-section\">http</span> &#123;<br>    <span class=\"hljs-comment\"># nginx默认格式  </span><br>    <span class=\"hljs-attribute\">log_format</span>  main  <span class=\"hljs-string\">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>                      <span class=\"hljs-string\">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>                      <span class=\"hljs-string\">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;<br>    <span class=\"hljs-comment\"># 自定义格式</span><br>    <span class=\"hljs-comment\"># 时间戳 + 远程地址 + 远程用户 + 请求时间 + 状态码 + 请求方法 + 内存大小 + 扩展头部 + 用户代理</span><br>    <span class=\"hljs-attribute\">log_format</span> json <span class=\"hljs-string\">&#x27;&#123; &quot;@timestamp&quot;: &quot;$time_iso8601&quot;, &#x27;</span><br>         <span class=\"hljs-string\">&#x27;&quot;remote_addr&quot;: &quot;$remote_addr&quot;, &#x27;</span><br>         <span class=\"hljs-string\">&#x27;&quot;remote_user&quot;: &quot;$remote_user&quot;, &#x27;</span><br>         <span class=\"hljs-string\">&#x27;&quot;request_time&quot;: &quot;$request_time&quot;, &#x27;</span><br>         <span class=\"hljs-string\">&#x27;&quot;status&quot;: &quot;$status&quot;, &#x27;</span><br>         <span class=\"hljs-string\">&#x27;&quot;request_uri&quot;: &quot;$request_uri&quot;, &#x27;</span><br>         <span class=\"hljs-string\">&#x27;&quot;request_method&quot;: &quot;$request_method&quot;, &#x27;</span><br>         <span class=\"hljs-string\">&#x27;&quot;http_referrer&quot;: &quot;$http_referer&quot;, &#x27;</span><br>         <span class=\"hljs-string\">&#x27;&quot;body_bytes_sent&quot;: &quot;$body_bytes_sent&quot;, &#x27;</span><br>         <span class=\"hljs-string\">&#x27;&quot;http_x_forwarded_for&quot;: &quot;$http_x_forwarded_for&quot;, &#x27;</span><br>         <span class=\"hljs-string\">&#x27;&quot;http_user_agent&quot;: &quot;$http_user_agent&quot;&#125;&#x27;</span>;、<br>    <br>    <span class=\"hljs-attribute\">access_log</span>  /var/log/nginx/access.log  json;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><img src=\"/image/blog/elk16.png?raw=true\" alt=\"image.png\"><br /> </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">filebeat.inputs:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">log</span> <br>  <span class=\"hljs-attr\">paths:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/var/log/nginx/access.log</span><br>  <span class=\"hljs-attr\">tags:</span> [<span class=\"hljs-string\">&quot;access&quot;</span>]<br><span class=\"hljs-attr\">fields:</span><br>  <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">www</span><br>  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">ngxin-access</span><br><span class=\"hljs-attr\">fields_under_root:</span> <span class=\"hljs-literal\">true</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">log</span> <br>  <span class=\"hljs-attr\">paths:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/var/log/nginx/error.log</span><br>  <span class=\"hljs-attr\">tags:</span> [<span class=\"hljs-string\">&quot;error&quot;</span>]<br><span class=\"hljs-attr\">fields:</span><br>  <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">www</span><br>  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">ngxin-error</span><br><span class=\"hljs-attr\">fields_under_root:</span> <span class=\"hljs-literal\">true</span><br><br><span class=\"hljs-attr\">output.redis:</span><br>  <span class=\"hljs-attr\">hosts:</span> [<span class=\"hljs-string\">&quot;localhost:6379&quot;</span>]<br>  <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">&quot;123456&quot;</span><br>  <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">&quot;filebeat&quot;</span><br>  <span class=\"hljs-attr\">db:</span> <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-number\">5</span><br>  <span class=\"hljs-attr\">datatype:</span> <span class=\"hljs-string\">list</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>    redis &#123;<br>        host =&gt; <span class=\"hljs-attr\">&quot;localhost&quot;</span><br>        port =&gt; 6379<br>        password =&gt; <span class=\"hljs-attr\">&quot;123456&quot;</span><br>        db =&gt; <span class=\"hljs-attr\">&quot;0&quot;</span><br>        data_type =&gt; <span class=\"hljs-attr\">&quot;list&quot;</span><br>        key =&gt; <span class=\"hljs-attr\">&quot;filebeat&quot;</span><br>    &#125;<br>&#125;<br><br>filter &#123;<br>  if [app] == <span class=\"hljs-attr\">&quot;www&quot;</span> &#123;<br>    if [type] == <span class=\"hljs-attr\">&quot;nginx-access&quot;</span> &#123;<br>      json &#123;<br>          source =&gt; <span class=\"hljs-attr\">&quot;message&quot;</span><br>          remove_field =&gt; [<span class=\"hljs-attr\">&quot;message&quot;</span>]<br>      &#125;<br>      geoip &#123;<br>          source =&gt; <span class=\"hljs-attr\">&quot;remote_addr&quot;</span><br>          target =&gt; <span class=\"hljs-attr\">&quot;geoip&quot;</span><br>          database =&gt; <span class=\"hljs-attr\">&quot;D:\\path\\ELK\\GeoLite2-City_20220503\\GeoLite2-City.mmdb&quot;</span><br>          add_field =&gt; [<span class=\"hljs-attr\">&quot;[geoip][coordinates]&quot;</span>, <span class=\"hljs-attr\">&quot;%&#123;[geoip][longitude]&#125;&quot;</span>] <br>          add_field =&gt; [<span class=\"hljs-attr\">&quot;[geoip][coordinates]&quot;</span>, <span class=\"hljs-attr\">&quot;%&#123;[geoip][latitude]&#125;&quot;</span>]<br>      &#125;<br>      mutate &#123;<br>          convert =&gt; [<span class=\"hljs-attr\">&quot;[geoip][coordinates]&quot;</span>, <span class=\"hljs-attr\">&quot;float&quot;</span>]  <br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br>output &#123;<br>  elasticsearch &#123;<br>      hosts  =&gt; [<span class=\"hljs-attr\">&quot;http://localhost:9200&quot;</span>]<br>      index  =&gt; <span class=\"hljs-attr\">&quot;logstash-%&#123;type&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span><br>  &#125;<br>  stdout&#123;codec =&gt; rubydebug &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><img src=\"/image/blog/elk17.png?raw=true\" alt=\"image.png\"></p>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><br /></h1><h2 id=\"Java堆栈日志收集\"><a href=\"#Java堆栈日志收集\" class=\"headerlink\" title=\"Java堆栈日志收集\"></a>Java堆栈日志收集</h2><p><img src=\"/image/blog/elk18.png?raw=true\" alt=\"image.png\"></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">filebeat.prospectors:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">log</span><br>  <span class=\"hljs-attr\">paths:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/usr/local/tomcat/logs/catalina.out</span><br>  <span class=\"hljs-attr\">tags:</span> [<span class=\"hljs-string\">&quot;tomcat&quot;</span>]<br>  <span class=\"hljs-attr\">fields:</span><br>    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">www</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">tomcat-catalina</span><br>  <span class=\"hljs-attr\">fields_under_root:</span> <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-attr\">multiline:</span><br>    <span class=\"hljs-attr\">pattern:</span> <span class=\"hljs-string\">&#x27;^\\[&#x27;</span><br>    <span class=\"hljs-attr\">negate:</span> <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-attr\">match:</span> <span class=\"hljs-string\">after</span><br><br><span class=\"hljs-attr\">output.redis:</span><br>  <span class=\"hljs-attr\">hosts:</span> [<span class=\"hljs-string\">&quot;localhost:6379&quot;</span>]<br>  <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">&quot;123456&quot;</span><br>  <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">&quot;filebeat&quot;</span><br>  <span class=\"hljs-attr\">db:</span> <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-attr\">datatype:</span> <span class=\"hljs-string\">list</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"定制日志格式收集\"><a href=\"#定制日志格式收集\" class=\"headerlink\" title=\"定制日志格式收集\"></a>定制日志格式收集</h2><p>ngxin默认的 main 格式日志<br /><img src=\"/image/blog/elk19.png?raw=true\" alt=\"image.png\"><br />使用 Grok 进行匹配</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>    redis &#123;<br>        host =&gt; <span class=\"hljs-attr\">&quot;localhost&quot;</span><br>        port =&gt; 6379<br>        password =&gt; <span class=\"hljs-attr\">&quot;123456&quot;</span><br>        db =&gt; <span class=\"hljs-attr\">&quot;0&quot;</span><br>        data_type =&gt; <span class=\"hljs-attr\">&quot;list&quot;</span><br>        key =&gt; <span class=\"hljs-attr\">&quot;filebeat&quot;</span><br>    &#125;<br>&#125;<br><br>filter &#123;<br>  if [app] == <span class=\"hljs-attr\">&quot;www&quot;</span> &#123;<br>    if [type] == <span class=\"hljs-attr\">&quot;nginx-access&quot;</span> &#123;<br>      grok &#123;<br>        match =&gt; &#123;<br>          <span class=\"hljs-attr\">&quot;message&quot;</span> =&gt; <span class=\"hljs-attr\">&quot;%&#123;IPV4:remote_addr&#125; - (%&#123;USERNAME:remote_user&#125;|-) \\[%&#123;HTTPDATE:time_local&#125;\\] \\&quot;%&#123;WORD:request_method&#125; %&#123;URIPATHPARAM:request_uri&#125; HTTP/%&#123;NUMBER:http_protocol&#125;\\&quot; %&#123;NUMBER:http_status&#125; %&#123;NUMBER:body_bytes_sent&#125; \\&quot;%&#123;GREEDYDATA:http_referer&#125;\\&quot; \\&quot;%&#123;GREEDYDATA:http_user_agent&#125;\\&quot; \\&quot;(%&#123;IPV4:http_x_forwarded_for&#125;|-)\\&quot;&quot;</span><br>        &#125;<br>        overwrite =&gt; [<span class=\"hljs-string\">&quot;message&quot;</span>]<br>      &#125;<br>      geoip &#123;<br>          source =&gt; <span class=\"hljs-attr\">&quot;remote_addr&quot;</span><br>          target =&gt; <span class=\"hljs-attr\">&quot;geoip&quot;</span><br>          database =&gt; <span class=\"hljs-attr\">&quot;/opt/GeoLite2-City.mmdb&quot;</span><br>          add_field =&gt; [<span class=\"hljs-attr\">&quot;[geoip][coordinates]&quot;</span>, <span class=\"hljs-attr\">&quot;%&#123;[geoip][longitude]&#125;&quot;</span>] <br>          add_field =&gt; [<span class=\"hljs-attr\">&quot;[geoip][coordinates]&quot;</span>, <span class=\"hljs-attr\">&quot;%&#123;[geoip][latitude]&#125;&quot;</span>]<br>      &#125;<br>      date &#123;<br>          locale =&gt; <span class=\"hljs-attr\">&quot;en&quot;</span><br>          match =&gt; [<span class=\"hljs-attr\">&quot;time_local&quot;</span>, <span class=\"hljs-attr\">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span>]<br>      &#125;<br>      mutate &#123;<br>          convert =&gt; [<span class=\"hljs-attr\">&quot;[geoip][coordinates]&quot;</span>, <span class=\"hljs-attr\">&quot;float&quot;</span>]  <br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br>output &#123;<br>  elasticsearch &#123;<br>      hosts  =&gt; [<span class=\"hljs-attr\">&quot;http://lcoalhost:9200&quot;</span>]<br>      index  =&gt; <span class=\"hljs-attr\">&quot;logstash-%&#123;type&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span><br>  &#125;<br>  stdout&#123;codec =&gt; rubydebug &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"Log4j收集\"><a href=\"#Log4j收集\" class=\"headerlink\" title=\"Log4j收集\"></a>Log4j收集</h2><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-comment\">### 设置###</span><br><span class=\"hljs-meta\">log4j.rootLogger</span> = <span class=\"hljs-string\">debug,stdout,D,E,logstash</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">### 输出信息到控制抬 ###</span><br><span class=\"hljs-meta\">log4j.appender.stdout</span> = <span class=\"hljs-string\">org.apache.log4j.ConsoleAppender</span><br><span class=\"hljs-meta\">log4j.appender.stdout.Target</span> = <span class=\"hljs-string\">System.out</span><br><span class=\"hljs-meta\">log4j.appender.stdout.layout</span> = <span class=\"hljs-string\">org.apache.log4j.PatternLayout</span><br><span class=\"hljs-meta\">log4j.appender.stdout.layout.ConversionPattern</span> = <span class=\"hljs-string\">[%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">### 输出DEBUG 级别以上的日志到=/Users/bee/Documents/elk/log4j/debug.log###</span><br><span class=\"hljs-meta\">log4j.appender.D</span> = <span class=\"hljs-string\">org.apache.log4j.DailyRollingFileAppender</span><br><span class=\"hljs-meta\">log4j.appender.D.File</span> = <span class=\"hljs-string\">/Users/bee/Documents/elk/log4j/debug.log</span><br><span class=\"hljs-meta\">log4j.appender.D.Append</span> = <span class=\"hljs-string\">true</span><br><span class=\"hljs-meta\">log4j.appender.D.Threshold</span> = <span class=\"hljs-string\">DEBUG </span><br><span class=\"hljs-meta\">log4j.appender.D.layout</span> = <span class=\"hljs-string\">org.apache.log4j.PatternLayout</span><br><span class=\"hljs-meta\">log4j.appender.D.layout.ConversionPattern</span> = <span class=\"hljs-string\">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">### 输出ERROR 级别以上的日志到=/Users/bee/Documents/elk/log4j/error.log  ###</span><br><span class=\"hljs-meta\">log4j.appender.E</span> = <span class=\"hljs-string\">org.apache.log4j.DailyRollingFileAppender</span><br><span class=\"hljs-meta\">log4j.appender.E.File</span> =<span class=\"hljs-string\">/Users/bee/Documents/elk/log4j/error.log </span><br><span class=\"hljs-meta\">log4j.appender.E.Append</span> = <span class=\"hljs-string\">true</span><br><span class=\"hljs-meta\">log4j.appender.E.Threshold</span> = <span class=\"hljs-string\">ERROR </span><br><span class=\"hljs-meta\">log4j.appender.E.layout</span> = <span class=\"hljs-string\">org.apache.log4j.PatternLayout</span><br><span class=\"hljs-meta\">log4j.appender.E.layout.ConversionPattern</span> = <span class=\"hljs-string\">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">#输出日志到logstash</span><br><span class=\"hljs-meta\">log4j.appender.logstash</span>=<span class=\"hljs-string\">org.apache.log4j.net.SocketAppender</span><br><span class=\"hljs-meta\">log4j.appender.logstash.RemoteHost</span>=<span class=\"hljs-string\">127.0.0.1</span><br><span class=\"hljs-meta\">log4j.appender.logstash.port</span>=<span class=\"hljs-string\">4560</span><br><span class=\"hljs-meta\">log4j.appender.logstash.ReconnectionDelay</span>=<span class=\"hljs-string\">60000</span><br><span class=\"hljs-meta\">log4j.appender.logstash.LocationInfo</span>=<span class=\"hljs-string\">true</span><br></code></pre></td></tr></table></figure>\n\n<ol>\n<li>第一份输出到控制台</li>\n<li>第二份把DEBUG 级别以上的日志到文件</li>\n<li>第三份把输出ERROR 级别以上的日志到文件</li>\n<li>第四份输出到logstash<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\">input &#123;<br>    log4j &#123;<br>        host =&gt; <span class=\"hljs-attr\">&quot;127.0.0.1&quot;</span><br>        port =&gt; 8001<br>    &#125;<br>&#125;<br><br>output &#123;<br>    elasticsearch&#123;<br>        hosts =&gt; [<span class=\"hljs-attr\">&quot;localhost:9200&quot;</span>]<br>        index =&gt; <span class=\"hljs-attr\">&quot;log4j-%&#123;+YYYY.MM.dd&#125;&quot;</span><br>    &#125;<br>    stdout &#123;<br>      codec =&gt; rubydebug<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.apache.log4j.Logger;<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Created by bee on 17/3/6.</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Log4jTest</span> </span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Logger logger=Logger.getLogger(Log4jTest.class);<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        logger.debug(<span class=\"hljs-string\">&quot;This is a debug message!&quot;</span>);<br>        logger.info(<span class=\"hljs-string\">&quot;This is info message!&quot;</span>);<br>        logger.warn(<span class=\"hljs-string\">&quot;This is a warn message!&quot;</span>);<br>        logger.error(<span class=\"hljs-string\">&quot;This is error message!&quot;</span>);<br>        <span class=\"hljs-keyword\">try</span>&#123;<br>           System.out.println(<span class=\"hljs-number\">5</span>/<span class=\"hljs-number\">0</span>);<br>        &#125;<span class=\"hljs-keyword\">catch</span>(Exception e)&#123;<br>            logger.error(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<img src=\"/image/blog/elk20.png?raw=true\"></li>\n</ol>\n<h2 id=\"Kibana仪表盘可视化\"><a href=\"#Kibana仪表盘可视化\" class=\"headerlink\" title=\"Kibana仪表盘可视化\"></a>Kibana仪表盘可视化</h2><ul>\n<li>PV/UV</li>\n<li>用户地理位置分布</li>\n<li>URL，HTTP Status，IP TOP10</li>\n</ul>\n<p><img src=\"/image/blog/elk21.png?raw=true\" alt=\"image.png\"></p>\n"},{"title":"MySql索引使用","excerpt":"MySql索引使用","date":"2022-08-10T16:00:00.000Z","cover":"/image/blog/mysql_index.jpg","_content":"\n\n\n# 简介\n\n索引一般以文件形式存在磁盘中（也可以存于内存中），存储的索引的原理大致概括为以空间换时间，数据库在未添加索引的时候进行查询默认的是进行全量搜索，也就是进行全局扫描，有多少条数据就要进行多少次查询，然后找到相匹配的数据就把他放到结果集中，直到全表扫描完。而建立索引之后，会将建立索引的KEY值放在一个n叉树上（BTree）。因为B树的特点就是适合在磁盘等直接存储设备上组织动态查找表，每次以索引进行条件查询时，会去树上根据key值直接进行搜索\n\n## 优点\n> **建立索引的目的是加快对表中记录的查找或排序！**\n\n1. 建立索引的列可以保证行的唯一性，生成唯一的rowId\n1. 建立索引可以有效缩短数据的检索时间\n1. 建立索引可以加快表与表之间的连接\n1. 为用来排序或者是分组的字段添加索引可以加快分组和排序顺序\n\n\n\n## 缺点\n> **数据库中表的数据量较大的情况下，对于查询响应时间不能满足业务需求，可以合理的使用索引提升查询效率**\n\n1. 创建索引和维护索引需要时间成本，这个成本随着数据量的增加而加大\n1. 创建索引和维护索引需要空间成本，每一条索引都要占据数据库的物理存储空间，数据量越大，占用空间也越大（数据表占据的是数据库的数据空间）\n1. 会降低表的增删改的效率，因为每次增删改索引需要进行动态维护，导致时间变长\n\n# 简单使用\n## 基本类型\n\n1. 普通索引（单列索引）\n1. 复合索引（组合索引）\n1. 唯一索引\n1. 主键索引\n1. 全文索引\n\n\n\n## 基本语句\n```sql\nCREATE TABLE table_name[col_name data type]\n[unique|fulltext][index|key][index_name](col_name[length])[asc|desc]\n```\n\n- unique|fulltext为可选参数，分别表示唯一索引、全文索引\n- index和key为同义词，两者作用相同，用来指定创建索引\n- col_name为需要创建索引的字段列，该列必须从数据表中该定义的多个列中选择\n- index_name指定索引的名称，为可选参数，如果不指定，默认col_name为索引值\n- ength为可选参数，表示索引的长度，只有字符串类型的字段才能指定索引长度\n- asc或desc指定升序或降序的索引值存储\n\n\n\n### 普通索引（单列索引）\n```sql\n# 直接创建索引\nCREATE INDEX index_name ON table_name(col_name)\n\n# 修改表结构的方式添加索引\nALTER TABLE table_name ADD INDEX index_name(col_name)\n\n# 创建表的时候同时创建索引\nCREATE TABLE `news` (\n    `id` int(11) NOT NULL AUTO_INCREMENT ,\n    `title` varchar(255)  NOT NULL ,\n    `content` varchar(255)  NULL ,\n    `time` varchar(20) NULL DEFAULT NULL ,\n    PRIMARY KEY (`id`),\n    INDEX index_name (title(255))\n)\n\n# 删除索引\nDROP INDEX index_name ON table_name;\n或者\nalter table `表名` drop index 索引名;\n```\n### 复合索引（组合索引）\n```sql\n# 直接创建索引\ncreate index index_name on table_name(col_name1,col_name2,...)\n\n# 修改表结构的方式添加索引\nalter table table_name add index index_name(col_name,col_name2,...)\n```\n### 唯一索引\n唯一索引：唯一索引和普通索引类似，主要的区别在于，**唯一索引限制列的值必须唯一，但允许存在空值（只允许存在一条空值）**。\n如果在已经有数据的表上添加唯一性索引的话:\n\n- 如果添加索引的列的值存在两个或者两个以上的空值，则不能创建唯一性索引会失败。（一般在创建表的时候，要对自动设置唯一性索引，需要在字段上加上 not null）\n- 如果添加索引的列的值存在两个或者两个以上的null值，还是可以创建唯一性索引，只是后面创建的数据不能再插入null值 ，并且严格意义上此列并不是唯一的，因为存在多个null值\n\n对于多个字段创建唯一索引规定列值的组合必须唯一\n比如：在order表创建orderId字段和 productId字段 的唯一性索引，那么这两列的组合值必须唯一！\n```sql\n “空值” 和”NULL”的概念： \n1：空值是不占用空间的 .\n2: MySQL中的NULL其实是占用空间的.\n \n长度验证：注意空值的之间是没有空格的。\n \n> select length(''),length(null),length(' ');\n+------------+--------------+-------------+\n| length('') | length(null) | length(' ') |\n+------------+--------------+-------------+\n|          0 |         NULL |           1 |\n+------------+--------------+-------------+\n\n\n# 创建单个索引\nCREATE UNIQUE INDEX index_name ON table_name(col_name)\n \n# 创建多个索引\nCREATE UNIQUE INDEX index_name on table_name(col_name,...)\n\n\n# 修改表结构的方式 单个\nALTER TABLE table_name ADD UNIQUE index index_name(col_name)\n# 修改表结构的方式 多个\nALTER TABLE table_name ADD UNIQUE index index_name(col_name,...)\n\n# 创建表的时候同时创建索引\nCREATE TABLE `news` (\n    `id` int(11) NOT NULL AUTO_INCREMENT ,\n    `title` varchar(255)  NOT NULL ,\n    `content` varchar(255)  NULL ,\n    `time` varchar(20) NULL DEFAULT NULL ,\n    PRIMARY KEY (`id`),\n    UNIQUE index_name_unique(title)\n)\n```\n### 主键索引\n```sql\n# 主键索引(创建表时添加)\nCREATE TABLE `news` (\n    `id` int(11) NOT NULL AUTO_INCREMENT ,\n    `title` varchar(255)  NOT NULL ,\n    `content` varchar(255)  NULL ,\n    `time` varchar(20) NULL DEFAULT NULL ,\n    PRIMARY KEY (`id`)\n)\n# 创建表后添加\nalter table tbl_name add primary key(col_name)\n\n\nCREATE TABLE `order` (\n    `orderId` varchar(36) NOT NULL,\n    `productId` varchar(36)  NOT NULL ,\n    `time` varchar(20) NULL DEFAULT NULL\n)\n \nalter table `order` add primary key(`orderId`)\n```\n### 全文索引\n在一般情况下，模糊查询都是通过 like 的方式进行查询。但是，对于海量数据，这并不是一个好办法，在 like “value%” 可以使用索引，但是对于 like “%value%” 这样的方式，执行全表查询，这在数据量小的表，不存在性能问题，但是对于海量数据，全表扫描是非常可怕的事情,所以 like 进行模糊匹配性能很差。\n这种情况下，需要考虑使用全文搜索的方式进行优化。全文搜索在 MySQL 中是一个 FULLTEXT 类型索引。**FULLTEXT 索引在 MySQL 5.6 版本之后支持 InnoDB，而之前的版本只支持 MyISAM 表**。\n全文索引主要用来查找文本中的关键字，而不是直接与索引中的值相比较。fulltext索引跟其它索引大不相同，它更像是一个搜索引擎，而不是简单的where语句的参数匹配。fulltext索引配合match against操作使用，而不是一般的where语句加like。目前只有char、varchar，text 列上可以创建全文索引。\n小技巧：\n在数据量较大时候，先将数据放入一个没有全局索引的表中，然后再用CREATE index创建fulltext索引，要比先为一张表建立fulltext然后再将数据写入的速度快很多\n```sql\n# 创建表的适合添加全文索引\nCREATE TABLE `news` (\n    `id` int(11) NOT NULL AUTO_INCREMENT ,\n    `title` varchar(255)  NOT NULL ,\n    `content` text  NOT NULL ,\n    `time` varchar(20) NULL DEFAULT NULL ,\n     PRIMARY KEY (`id`),\n    FULLTEXT (content)\n)\n\n# 修改表结构的时候创建索引\nALTER TABLE table_name ADD FULLTEXT index_fulltext_content(col_name)\n\n# 直接创建索引\nCREATE FULLTEXT INDEX index_fulltext_content ON table_name(col_name)\n```\n注意： 默认 MySQL 不支持中文全文检索！\nMySQL 全文搜索只是一个临时方案，对于全文搜索场景，更专业的做法是使用全文搜索引擎，例如 ElasticSearch 或 Solr\n索引的查询和删除\n```sql\n# 查看:\nshow indexes from `表名`;\n# 或\nshow keys from `表名`;\n \n# 删除\nalter table `表名` drop index 索引名;\n```\n# 索引失效\n```sql\n# 查看索引使用情况\nshow status like ‘Handler_read%’\n\nhandler_read_key:\t\t\t\t这个值越高越好，越高表示使用索引查询到的次数\nhandler_read_rnd_next:\t这个值越高，说明查询低效\n```\n\n```sql\nDROP TABLE IF EXISTS `students`;\nCREATE TABLE `students` (\n  `stud_id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(50) NOT NULL,\n  `email` varchar(50) NOT NULL,\n  `phone` varchar(1) NOT NULL,\n  `create_date` date DEFAULT NULL,\n  PRIMARY KEY (`stud_id`)\n \n)\n \nINSERT INTO `learn_mybatis`.`students` (`stud_id`, `name`, `email`, `phone`, `create_date`) VALUES ('1', 'admin', 'student1@gmail.com', '18729902095', '1983-06-25');\nINSERT INTO `learn_mybatis`.`students` (`stud_id`, `name`, `email`, `phone`, `create_date`) VALUES ('2', 'root', '74298110186@qq.com', '2', '1983-12-25');\nINSERT INTO `learn_mybatis`.`students` (`stud_id`, `name`, `email`, `phone`, `create_date`) VALUES ('3', '110', '7429811086@qq.com', '3dsad', '2017-04-28');\n```\n\n## 1.在where后使用or，导致索引失效（尽量少用or）\n```sql\nCREATE INDEX index_name_email ON students(email)\n\nCREATE INDEX index_name_phone ON students(phone)\n\n\n# 使用了索引\nEXPLAIN select * from students where stud_id='1'  or phone='18729902095'\n\n# 使用了索引\nEXPLAIN select * from students where stud_id='1'  or email='742981086@qq.com'\n \n#--------------------------\n \n# 没有使用索引\nEXPLAIN select * from students where phone='18729902095' or email='742981086@qq.com'\n \n# 没有使用索引\nEXPLAIN select * from students where stud_id='1'  or phone='222' or email='742981086@qq.com'\n\n```\n## 2.使用like ，like查询是以%开头\n```sql\n# 使用了index_name_email索引\nEXPLAIN select * from students where email like '742981086@qq.com%'\n \n# 没有使用index_name_email索引，索引失效\nEXPLAIN select * from students where email like '%742981086@qq.com'\n \n# 没有使用index_name_email索引，索引失效\nEXPLAIN select * from students where email like '%742981086@qq.com%'\n```\n## 3.复合索引遵守“最左前缀”原则\n> 在查询条件中使用了复合索引的第一个字段，索引才会被使用\n\n```sql\ncreate index index_email_phone on students(email,phone)\n\n\n# 使用了 index_email_phone 索引\nEXPLAIN select * from students where email='742981086@qq.com' and  phone='18729902095'\n \n# 使用了 index_email_phone 索引\nEXPLAIN select * from students where phone='18729902095' and  email='742981086@qq.com'\n \n# 使用了 index_email_phone 索引\nEXPLAIN select * from students where email='742981086@qq.com' and name='admin'\n \n# 没有使用index_email_phone索引，复合索引失效\nEXPLAIN select * from students where phone='18729902095' and name='admin'\n```\n\n## 4.字符串类型字段未使用引号\n```sql\nCREATE INDEX index_name ON students(name)\n\n\n# 使用索引\nEXPLAIN select * from students where name='110'\n \n# 没有使用索引\nEXPLAIN select * from students where name=110\n```\n## 5.使用in导致索引失效\n```sql\n# 使用索引\nEXPLAIN select * from students where name='admin'\n \n# 没有使用索引\nEXPLAIN SELECT * from students where name in ('admin')\n```\n## 6.DATE_FORMAT()格式化时间\n```sql\nCREATE INDEX index_create_date ON students(create_date)\n\n\n# 使用索引\nEXPLAIN SELECT * from students where create_date >= '2010-05-05'\n \n# 没有使用索引\nEXPLAIN SELECT * from students where DATE_FORMAT(create_date,'%Y-%m-%d') >= '2010-05-05'\n```\n## 7.order by、group by 、 union、 distinc 中的字段出现在where条件中时，才会利用索引\n\n## 8.对索引列进行运算导致索引失效,我所指的对索引列进行运算包括(+，-，*，/，! 等) \n```sql\n# 使用索引\nselect * from students where id=10 \n\n# 没有使用索引\nselect * from students where id-1=9\n```\n## 9.使用mysql内部函数导致索引失效.对于这样情况应当创建基于函数的索引\n```sql\n# 使用索引\ncreate index test_id_fbi_idx on students(round(id))\nselect * from test where round(id)=10\n\n# 没有使用索引\nselect * from students where round(id)=10;\n```\n## 10.在JOIN操作中（需要从多个数据表提取数据时），MYSQL只有在主键和外键的数据类型相同时才能使用索引，否则即使建立了 索引也不会使用\n\n## 11.重复数据太多，例如“性别”\n## 12.索引不会包含有NULL值的列\n\n## 13.NOT IN和<>操作都不会使用索引将进行全表扫描。NOT IN可以NOT EXISTS代替，id<>3则可使用id>3 or id<3来代替\n\n## 14.查询的数量是大表的大部分，应该是30％以上\n","source":"_posts/mysql_index.md","raw":"---\ntitle: MySql索引使用\ncategories: 原理分析\ntags:\n  - mysql\nexcerpt: MySql索引使用\ndate: 2022-8-11\ncover: '/image/blog/mysql_index.jpg' \n---\n\n\n\n# 简介\n\n索引一般以文件形式存在磁盘中（也可以存于内存中），存储的索引的原理大致概括为以空间换时间，数据库在未添加索引的时候进行查询默认的是进行全量搜索，也就是进行全局扫描，有多少条数据就要进行多少次查询，然后找到相匹配的数据就把他放到结果集中，直到全表扫描完。而建立索引之后，会将建立索引的KEY值放在一个n叉树上（BTree）。因为B树的特点就是适合在磁盘等直接存储设备上组织动态查找表，每次以索引进行条件查询时，会去树上根据key值直接进行搜索\n\n## 优点\n> **建立索引的目的是加快对表中记录的查找或排序！**\n\n1. 建立索引的列可以保证行的唯一性，生成唯一的rowId\n1. 建立索引可以有效缩短数据的检索时间\n1. 建立索引可以加快表与表之间的连接\n1. 为用来排序或者是分组的字段添加索引可以加快分组和排序顺序\n\n\n\n## 缺点\n> **数据库中表的数据量较大的情况下，对于查询响应时间不能满足业务需求，可以合理的使用索引提升查询效率**\n\n1. 创建索引和维护索引需要时间成本，这个成本随着数据量的增加而加大\n1. 创建索引和维护索引需要空间成本，每一条索引都要占据数据库的物理存储空间，数据量越大，占用空间也越大（数据表占据的是数据库的数据空间）\n1. 会降低表的增删改的效率，因为每次增删改索引需要进行动态维护，导致时间变长\n\n# 简单使用\n## 基本类型\n\n1. 普通索引（单列索引）\n1. 复合索引（组合索引）\n1. 唯一索引\n1. 主键索引\n1. 全文索引\n\n\n\n## 基本语句\n```sql\nCREATE TABLE table_name[col_name data type]\n[unique|fulltext][index|key][index_name](col_name[length])[asc|desc]\n```\n\n- unique|fulltext为可选参数，分别表示唯一索引、全文索引\n- index和key为同义词，两者作用相同，用来指定创建索引\n- col_name为需要创建索引的字段列，该列必须从数据表中该定义的多个列中选择\n- index_name指定索引的名称，为可选参数，如果不指定，默认col_name为索引值\n- ength为可选参数，表示索引的长度，只有字符串类型的字段才能指定索引长度\n- asc或desc指定升序或降序的索引值存储\n\n\n\n### 普通索引（单列索引）\n```sql\n# 直接创建索引\nCREATE INDEX index_name ON table_name(col_name)\n\n# 修改表结构的方式添加索引\nALTER TABLE table_name ADD INDEX index_name(col_name)\n\n# 创建表的时候同时创建索引\nCREATE TABLE `news` (\n    `id` int(11) NOT NULL AUTO_INCREMENT ,\n    `title` varchar(255)  NOT NULL ,\n    `content` varchar(255)  NULL ,\n    `time` varchar(20) NULL DEFAULT NULL ,\n    PRIMARY KEY (`id`),\n    INDEX index_name (title(255))\n)\n\n# 删除索引\nDROP INDEX index_name ON table_name;\n或者\nalter table `表名` drop index 索引名;\n```\n### 复合索引（组合索引）\n```sql\n# 直接创建索引\ncreate index index_name on table_name(col_name1,col_name2,...)\n\n# 修改表结构的方式添加索引\nalter table table_name add index index_name(col_name,col_name2,...)\n```\n### 唯一索引\n唯一索引：唯一索引和普通索引类似，主要的区别在于，**唯一索引限制列的值必须唯一，但允许存在空值（只允许存在一条空值）**。\n如果在已经有数据的表上添加唯一性索引的话:\n\n- 如果添加索引的列的值存在两个或者两个以上的空值，则不能创建唯一性索引会失败。（一般在创建表的时候，要对自动设置唯一性索引，需要在字段上加上 not null）\n- 如果添加索引的列的值存在两个或者两个以上的null值，还是可以创建唯一性索引，只是后面创建的数据不能再插入null值 ，并且严格意义上此列并不是唯一的，因为存在多个null值\n\n对于多个字段创建唯一索引规定列值的组合必须唯一\n比如：在order表创建orderId字段和 productId字段 的唯一性索引，那么这两列的组合值必须唯一！\n```sql\n “空值” 和”NULL”的概念： \n1：空值是不占用空间的 .\n2: MySQL中的NULL其实是占用空间的.\n \n长度验证：注意空值的之间是没有空格的。\n \n> select length(''),length(null),length(' ');\n+------------+--------------+-------------+\n| length('') | length(null) | length(' ') |\n+------------+--------------+-------------+\n|          0 |         NULL |           1 |\n+------------+--------------+-------------+\n\n\n# 创建单个索引\nCREATE UNIQUE INDEX index_name ON table_name(col_name)\n \n# 创建多个索引\nCREATE UNIQUE INDEX index_name on table_name(col_name,...)\n\n\n# 修改表结构的方式 单个\nALTER TABLE table_name ADD UNIQUE index index_name(col_name)\n# 修改表结构的方式 多个\nALTER TABLE table_name ADD UNIQUE index index_name(col_name,...)\n\n# 创建表的时候同时创建索引\nCREATE TABLE `news` (\n    `id` int(11) NOT NULL AUTO_INCREMENT ,\n    `title` varchar(255)  NOT NULL ,\n    `content` varchar(255)  NULL ,\n    `time` varchar(20) NULL DEFAULT NULL ,\n    PRIMARY KEY (`id`),\n    UNIQUE index_name_unique(title)\n)\n```\n### 主键索引\n```sql\n# 主键索引(创建表时添加)\nCREATE TABLE `news` (\n    `id` int(11) NOT NULL AUTO_INCREMENT ,\n    `title` varchar(255)  NOT NULL ,\n    `content` varchar(255)  NULL ,\n    `time` varchar(20) NULL DEFAULT NULL ,\n    PRIMARY KEY (`id`)\n)\n# 创建表后添加\nalter table tbl_name add primary key(col_name)\n\n\nCREATE TABLE `order` (\n    `orderId` varchar(36) NOT NULL,\n    `productId` varchar(36)  NOT NULL ,\n    `time` varchar(20) NULL DEFAULT NULL\n)\n \nalter table `order` add primary key(`orderId`)\n```\n### 全文索引\n在一般情况下，模糊查询都是通过 like 的方式进行查询。但是，对于海量数据，这并不是一个好办法，在 like “value%” 可以使用索引，但是对于 like “%value%” 这样的方式，执行全表查询，这在数据量小的表，不存在性能问题，但是对于海量数据，全表扫描是非常可怕的事情,所以 like 进行模糊匹配性能很差。\n这种情况下，需要考虑使用全文搜索的方式进行优化。全文搜索在 MySQL 中是一个 FULLTEXT 类型索引。**FULLTEXT 索引在 MySQL 5.6 版本之后支持 InnoDB，而之前的版本只支持 MyISAM 表**。\n全文索引主要用来查找文本中的关键字，而不是直接与索引中的值相比较。fulltext索引跟其它索引大不相同，它更像是一个搜索引擎，而不是简单的where语句的参数匹配。fulltext索引配合match against操作使用，而不是一般的where语句加like。目前只有char、varchar，text 列上可以创建全文索引。\n小技巧：\n在数据量较大时候，先将数据放入一个没有全局索引的表中，然后再用CREATE index创建fulltext索引，要比先为一张表建立fulltext然后再将数据写入的速度快很多\n```sql\n# 创建表的适合添加全文索引\nCREATE TABLE `news` (\n    `id` int(11) NOT NULL AUTO_INCREMENT ,\n    `title` varchar(255)  NOT NULL ,\n    `content` text  NOT NULL ,\n    `time` varchar(20) NULL DEFAULT NULL ,\n     PRIMARY KEY (`id`),\n    FULLTEXT (content)\n)\n\n# 修改表结构的时候创建索引\nALTER TABLE table_name ADD FULLTEXT index_fulltext_content(col_name)\n\n# 直接创建索引\nCREATE FULLTEXT INDEX index_fulltext_content ON table_name(col_name)\n```\n注意： 默认 MySQL 不支持中文全文检索！\nMySQL 全文搜索只是一个临时方案，对于全文搜索场景，更专业的做法是使用全文搜索引擎，例如 ElasticSearch 或 Solr\n索引的查询和删除\n```sql\n# 查看:\nshow indexes from `表名`;\n# 或\nshow keys from `表名`;\n \n# 删除\nalter table `表名` drop index 索引名;\n```\n# 索引失效\n```sql\n# 查看索引使用情况\nshow status like ‘Handler_read%’\n\nhandler_read_key:\t\t\t\t这个值越高越好，越高表示使用索引查询到的次数\nhandler_read_rnd_next:\t这个值越高，说明查询低效\n```\n\n```sql\nDROP TABLE IF EXISTS `students`;\nCREATE TABLE `students` (\n  `stud_id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(50) NOT NULL,\n  `email` varchar(50) NOT NULL,\n  `phone` varchar(1) NOT NULL,\n  `create_date` date DEFAULT NULL,\n  PRIMARY KEY (`stud_id`)\n \n)\n \nINSERT INTO `learn_mybatis`.`students` (`stud_id`, `name`, `email`, `phone`, `create_date`) VALUES ('1', 'admin', 'student1@gmail.com', '18729902095', '1983-06-25');\nINSERT INTO `learn_mybatis`.`students` (`stud_id`, `name`, `email`, `phone`, `create_date`) VALUES ('2', 'root', '74298110186@qq.com', '2', '1983-12-25');\nINSERT INTO `learn_mybatis`.`students` (`stud_id`, `name`, `email`, `phone`, `create_date`) VALUES ('3', '110', '7429811086@qq.com', '3dsad', '2017-04-28');\n```\n\n## 1.在where后使用or，导致索引失效（尽量少用or）\n```sql\nCREATE INDEX index_name_email ON students(email)\n\nCREATE INDEX index_name_phone ON students(phone)\n\n\n# 使用了索引\nEXPLAIN select * from students where stud_id='1'  or phone='18729902095'\n\n# 使用了索引\nEXPLAIN select * from students where stud_id='1'  or email='742981086@qq.com'\n \n#--------------------------\n \n# 没有使用索引\nEXPLAIN select * from students where phone='18729902095' or email='742981086@qq.com'\n \n# 没有使用索引\nEXPLAIN select * from students where stud_id='1'  or phone='222' or email='742981086@qq.com'\n\n```\n## 2.使用like ，like查询是以%开头\n```sql\n# 使用了index_name_email索引\nEXPLAIN select * from students where email like '742981086@qq.com%'\n \n# 没有使用index_name_email索引，索引失效\nEXPLAIN select * from students where email like '%742981086@qq.com'\n \n# 没有使用index_name_email索引，索引失效\nEXPLAIN select * from students where email like '%742981086@qq.com%'\n```\n## 3.复合索引遵守“最左前缀”原则\n> 在查询条件中使用了复合索引的第一个字段，索引才会被使用\n\n```sql\ncreate index index_email_phone on students(email,phone)\n\n\n# 使用了 index_email_phone 索引\nEXPLAIN select * from students where email='742981086@qq.com' and  phone='18729902095'\n \n# 使用了 index_email_phone 索引\nEXPLAIN select * from students where phone='18729902095' and  email='742981086@qq.com'\n \n# 使用了 index_email_phone 索引\nEXPLAIN select * from students where email='742981086@qq.com' and name='admin'\n \n# 没有使用index_email_phone索引，复合索引失效\nEXPLAIN select * from students where phone='18729902095' and name='admin'\n```\n\n## 4.字符串类型字段未使用引号\n```sql\nCREATE INDEX index_name ON students(name)\n\n\n# 使用索引\nEXPLAIN select * from students where name='110'\n \n# 没有使用索引\nEXPLAIN select * from students where name=110\n```\n## 5.使用in导致索引失效\n```sql\n# 使用索引\nEXPLAIN select * from students where name='admin'\n \n# 没有使用索引\nEXPLAIN SELECT * from students where name in ('admin')\n```\n## 6.DATE_FORMAT()格式化时间\n```sql\nCREATE INDEX index_create_date ON students(create_date)\n\n\n# 使用索引\nEXPLAIN SELECT * from students where create_date >= '2010-05-05'\n \n# 没有使用索引\nEXPLAIN SELECT * from students where DATE_FORMAT(create_date,'%Y-%m-%d') >= '2010-05-05'\n```\n## 7.order by、group by 、 union、 distinc 中的字段出现在where条件中时，才会利用索引\n\n## 8.对索引列进行运算导致索引失效,我所指的对索引列进行运算包括(+，-，*，/，! 等) \n```sql\n# 使用索引\nselect * from students where id=10 \n\n# 没有使用索引\nselect * from students where id-1=9\n```\n## 9.使用mysql内部函数导致索引失效.对于这样情况应当创建基于函数的索引\n```sql\n# 使用索引\ncreate index test_id_fbi_idx on students(round(id))\nselect * from test where round(id)=10\n\n# 没有使用索引\nselect * from students where round(id)=10;\n```\n## 10.在JOIN操作中（需要从多个数据表提取数据时），MYSQL只有在主键和外键的数据类型相同时才能使用索引，否则即使建立了 索引也不会使用\n\n## 11.重复数据太多，例如“性别”\n## 12.索引不会包含有NULL值的列\n\n## 13.NOT IN和<>操作都不会使用索引将进行全表扫描。NOT IN可以NOT EXISTS代替，id<>3则可使用id>3 or id<3来代替\n\n## 14.查询的数量是大表的大部分，应该是30％以上\n","slug":"mysql_index","published":1,"updated":"2024-02-29T09:09:54.765Z","_id":"cl6ovafby0043keuqfuf74g02","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>索引一般以文件形式存在磁盘中（也可以存于内存中），存储的索引的原理大致概括为以空间换时间，数据库在未添加索引的时候进行查询默认的是进行全量搜索，也就是进行全局扫描，有多少条数据就要进行多少次查询，然后找到相匹配的数据就把他放到结果集中，直到全表扫描完。而建立索引之后，会将建立索引的KEY值放在一个n叉树上（BTree）。因为B树的特点就是适合在磁盘等直接存储设备上组织动态查找表，每次以索引进行条件查询时，会去树上根据key值直接进行搜索</p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><blockquote>\n<p><strong>建立索引的目的是加快对表中记录的查找或排序！</strong></p>\n</blockquote>\n<ol>\n<li>建立索引的列可以保证行的唯一性，生成唯一的rowId</li>\n<li>建立索引可以有效缩短数据的检索时间</li>\n<li>建立索引可以加快表与表之间的连接</li>\n<li>为用来排序或者是分组的字段添加索引可以加快分组和排序顺序</li>\n</ol>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><blockquote>\n<p><strong>数据库中表的数据量较大的情况下，对于查询响应时间不能满足业务需求，可以合理的使用索引提升查询效率</strong></p>\n</blockquote>\n<ol>\n<li>创建索引和维护索引需要时间成本，这个成本随着数据量的增加而加大</li>\n<li>创建索引和维护索引需要空间成本，每一条索引都要占据数据库的物理存储空间，数据量越大，占用空间也越大（数据表占据的是数据库的数据空间）</li>\n<li>会降低表的增删改的效率，因为每次增删改索引需要进行动态维护，导致时间变长</li>\n</ol>\n<h1 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h1><h2 id=\"基本类型\"><a href=\"#基本类型\" class=\"headerlink\" title=\"基本类型\"></a>基本类型</h2><ol>\n<li>普通索引（单列索引）</li>\n<li>复合索引（组合索引）</li>\n<li>唯一索引</li>\n<li>主键索引</li>\n<li>全文索引</li>\n</ol>\n<h2 id=\"基本语句\"><a href=\"#基本语句\" class=\"headerlink\" title=\"基本语句\"></a>基本语句</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> table_name[col_name data type]<br>[<span class=\"hljs-keyword\">unique</span><span class=\"hljs-operator\">|</span>fulltext][index<span class=\"hljs-operator\">|</span>key][index_name](col_name[length])[<span class=\"hljs-keyword\">asc</span><span class=\"hljs-operator\">|</span><span class=\"hljs-keyword\">desc</span>]<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>unique|fulltext为可选参数，分别表示唯一索引、全文索引</li>\n<li>index和key为同义词，两者作用相同，用来指定创建索引</li>\n<li>col_name为需要创建索引的字段列，该列必须从数据表中该定义的多个列中选择</li>\n<li>index_name指定索引的名称，为可选参数，如果不指定，默认col_name为索引值</li>\n<li>ength为可选参数，表示索引的长度，只有字符串类型的字段才能指定索引长度</li>\n<li>asc或desc指定升序或降序的索引值存储</li>\n</ul>\n<h3 id=\"普通索引（单列索引）\"><a href=\"#普通索引（单列索引）\" class=\"headerlink\" title=\"普通索引（单列索引）\"></a>普通索引（单列索引）</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"># 直接创建索引<br><span class=\"hljs-keyword\">CREATE</span> INDEX index_name <span class=\"hljs-keyword\">ON</span> table_name(col_name)<br><br># 修改表结构的方式添加索引<br><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> table_name <span class=\"hljs-keyword\">ADD</span> INDEX index_name(col_name)<br><br># 创建表的时候同时创建索引<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `news` (<br>    `id` <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT ,<br>    `title` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">255</span>)  <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> ,<br>    `content` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">255</span>)  <span class=\"hljs-keyword\">NULL</span> ,<br>    `<span class=\"hljs-type\">time</span>` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> ,<br>    <span class=\"hljs-keyword\">PRIMARY</span> KEY (`id`),<br>    INDEX index_name (title(<span class=\"hljs-number\">255</span>))<br>)<br><br># 删除索引<br><span class=\"hljs-keyword\">DROP</span> INDEX index_name <span class=\"hljs-keyword\">ON</span> table_name;<br>或者<br><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> `表名` <span class=\"hljs-keyword\">drop</span> index 索引名;<br></code></pre></td></tr></table></figure>\n<h3 id=\"复合索引（组合索引）\"><a href=\"#复合索引（组合索引）\" class=\"headerlink\" title=\"复合索引（组合索引）\"></a>复合索引（组合索引）</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"># 直接创建索引<br><span class=\"hljs-keyword\">create</span> index index_name <span class=\"hljs-keyword\">on</span> table_name(col_name1,col_name2,...)<br><br># 修改表结构的方式添加索引<br><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> table_name <span class=\"hljs-keyword\">add</span> index index_name(col_name,col_name2,...)<br></code></pre></td></tr></table></figure>\n<h3 id=\"唯一索引\"><a href=\"#唯一索引\" class=\"headerlink\" title=\"唯一索引\"></a>唯一索引</h3><p>唯一索引：唯一索引和普通索引类似，主要的区别在于，<strong>唯一索引限制列的值必须唯一，但允许存在空值（只允许存在一条空值）</strong>。<br>如果在已经有数据的表上添加唯一性索引的话:</p>\n<ul>\n<li>如果添加索引的列的值存在两个或者两个以上的空值，则不能创建唯一性索引会失败。（一般在创建表的时候，要对自动设置唯一性索引，需要在字段上加上 not null）</li>\n<li>如果添加索引的列的值存在两个或者两个以上的null值，还是可以创建唯一性索引，只是后面创建的数据不能再插入null值 ，并且严格意义上此列并不是唯一的，因为存在多个null值</li>\n</ul>\n<p>对于多个字段创建唯一索引规定列值的组合必须唯一<br>比如：在order表创建orderId字段和 productId字段 的唯一性索引，那么这两列的组合值必须唯一！</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"> “空值” 和”<span class=\"hljs-keyword\">NULL</span>”的概念： <br><span class=\"hljs-number\">1</span>：空值是不占用空间的 .<br><span class=\"hljs-number\">2</span>: MySQL中的<span class=\"hljs-keyword\">NULL</span>其实是占用空间的.<br> <br>长度验证：注意空值的之间是没有空格的。<br> <br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">select</span> length(<span class=\"hljs-string\">&#x27;&#x27;</span>),length(<span class=\"hljs-keyword\">null</span>),length(<span class=\"hljs-string\">&#x27; &#x27;</span>);<br><span class=\"hljs-operator\">+</span><span class=\"hljs-comment\">------------+--------------+-------------+</span><br><span class=\"hljs-operator\">|</span> length(<span class=\"hljs-string\">&#x27;&#x27;</span>) <span class=\"hljs-operator\">|</span> length(<span class=\"hljs-keyword\">null</span>) <span class=\"hljs-operator\">|</span> length(<span class=\"hljs-string\">&#x27; &#x27;</span>) <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">+</span><span class=\"hljs-comment\">------------+--------------+-------------+</span><br><span class=\"hljs-operator\">|</span>          <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">|</span>         <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-operator\">|</span>           <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">+</span><span class=\"hljs-comment\">------------+--------------+-------------+</span><br><br><br># 创建单个索引<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">UNIQUE</span> INDEX index_name <span class=\"hljs-keyword\">ON</span> table_name(col_name)<br> <br># 创建多个索引<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">UNIQUE</span> INDEX index_name <span class=\"hljs-keyword\">on</span> table_name(col_name,...)<br><br><br># 修改表结构的方式 单个<br><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> table_name <span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">UNIQUE</span> index index_name(col_name)<br># 修改表结构的方式 多个<br><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> table_name <span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">UNIQUE</span> index index_name(col_name,...)<br><br># 创建表的时候同时创建索引<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `news` (<br>    `id` <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT ,<br>    `title` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">255</span>)  <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> ,<br>    `content` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">255</span>)  <span class=\"hljs-keyword\">NULL</span> ,<br>    `<span class=\"hljs-type\">time</span>` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> ,<br>    <span class=\"hljs-keyword\">PRIMARY</span> KEY (`id`),<br>    <span class=\"hljs-keyword\">UNIQUE</span> index_name_unique(title)<br>)<br></code></pre></td></tr></table></figure>\n<h3 id=\"主键索引\"><a href=\"#主键索引\" class=\"headerlink\" title=\"主键索引\"></a>主键索引</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"># 主键索引(创建表时添加)<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `news` (<br>    `id` <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT ,<br>    `title` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">255</span>)  <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> ,<br>    `content` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">255</span>)  <span class=\"hljs-keyword\">NULL</span> ,<br>    `<span class=\"hljs-type\">time</span>` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> ,<br>    <span class=\"hljs-keyword\">PRIMARY</span> KEY (`id`)<br>)<br># 创建表后添加<br><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> tbl_name <span class=\"hljs-keyword\">add</span> <span class=\"hljs-keyword\">primary</span> key(col_name)<br><br><br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `<span class=\"hljs-keyword\">order</span>` (<br>    `orderId` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">36</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>    `productId` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">36</span>)  <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> ,<br>    `<span class=\"hljs-type\">time</span>` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span><br>)<br> <br><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> `<span class=\"hljs-keyword\">order</span>` <span class=\"hljs-keyword\">add</span> <span class=\"hljs-keyword\">primary</span> key(`orderId`)<br></code></pre></td></tr></table></figure>\n<h3 id=\"全文索引\"><a href=\"#全文索引\" class=\"headerlink\" title=\"全文索引\"></a>全文索引</h3><p>在一般情况下，模糊查询都是通过 like 的方式进行查询。但是，对于海量数据，这并不是一个好办法，在 like “value%” 可以使用索引，但是对于 like “%value%” 这样的方式，执行全表查询，这在数据量小的表，不存在性能问题，但是对于海量数据，全表扫描是非常可怕的事情,所以 like 进行模糊匹配性能很差。<br>这种情况下，需要考虑使用全文搜索的方式进行优化。全文搜索在 MySQL 中是一个 FULLTEXT 类型索引。<strong>FULLTEXT 索引在 MySQL 5.6 版本之后支持 InnoDB，而之前的版本只支持 MyISAM 表</strong>。<br>全文索引主要用来查找文本中的关键字，而不是直接与索引中的值相比较。fulltext索引跟其它索引大不相同，它更像是一个搜索引擎，而不是简单的where语句的参数匹配。fulltext索引配合match against操作使用，而不是一般的where语句加like。目前只有char、varchar，text 列上可以创建全文索引。<br>小技巧：<br>在数据量较大时候，先将数据放入一个没有全局索引的表中，然后再用CREATE index创建fulltext索引，要比先为一张表建立fulltext然后再将数据写入的速度快很多</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"># 创建表的适合添加全文索引<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `news` (<br>    `id` <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT ,<br>    `title` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">255</span>)  <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> ,<br>    `content` text  <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> ,<br>    `<span class=\"hljs-type\">time</span>` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> ,<br>     <span class=\"hljs-keyword\">PRIMARY</span> KEY (`id`),<br>    FULLTEXT (content)<br>)<br><br># 修改表结构的时候创建索引<br><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> table_name <span class=\"hljs-keyword\">ADD</span> FULLTEXT index_fulltext_content(col_name)<br><br># 直接创建索引<br><span class=\"hljs-keyword\">CREATE</span> FULLTEXT INDEX index_fulltext_content <span class=\"hljs-keyword\">ON</span> table_name(col_name)<br></code></pre></td></tr></table></figure>\n<p>注意： 默认 MySQL 不支持中文全文检索！<br>MySQL 全文搜索只是一个临时方案，对于全文搜索场景，更专业的做法是使用全文搜索引擎，例如 ElasticSearch 或 Solr<br>索引的查询和删除</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"># 查看:<br><span class=\"hljs-keyword\">show</span> indexes <span class=\"hljs-keyword\">from</span> `表名`;<br># 或<br><span class=\"hljs-keyword\">show</span> keys <span class=\"hljs-keyword\">from</span> `表名`;<br> <br># 删除<br><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> `表名` <span class=\"hljs-keyword\">drop</span> index 索引名;<br></code></pre></td></tr></table></figure>\n<h1 id=\"索引失效\"><a href=\"#索引失效\" class=\"headerlink\" title=\"索引失效\"></a>索引失效</h1><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"># 查看索引使用情况<br><span class=\"hljs-keyword\">show</span> status <span class=\"hljs-keyword\">like</span> ‘Handler_read<span class=\"hljs-operator\">%</span>’<br><br>handler_read_key:\t\t\t\t这个值越高越好，越高表示使用索引查询到的次数<br>handler_read_rnd_next:\t这个值越高，说明查询低效<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> IF <span class=\"hljs-keyword\">EXISTS</span> `students`;<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `students` (<br>  `stud_id` <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT,<br>  `name` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">50</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>  `email` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">50</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>  `phone` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>  `create_date` <span class=\"hljs-type\">date</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span>,<br>  <span class=\"hljs-keyword\">PRIMARY</span> KEY (`stud_id`)<br> <br>)<br> <br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `learn_mybatis`.`students` (`stud_id`, `name`, `email`, `phone`, `create_date`) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;admin&#x27;</span>, <span class=\"hljs-string\">&#x27;student1@gmail.com&#x27;</span>, <span class=\"hljs-string\">&#x27;18729902095&#x27;</span>, <span class=\"hljs-string\">&#x27;1983-06-25&#x27;</span>);<br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `learn_mybatis`.`students` (`stud_id`, `name`, `email`, `phone`, `create_date`) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;2&#x27;</span>, <span class=\"hljs-string\">&#x27;root&#x27;</span>, <span class=\"hljs-string\">&#x27;74298110186@qq.com&#x27;</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>, <span class=\"hljs-string\">&#x27;1983-12-25&#x27;</span>);<br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `learn_mybatis`.`students` (`stud_id`, `name`, `email`, `phone`, `create_date`) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;3&#x27;</span>, <span class=\"hljs-string\">&#x27;110&#x27;</span>, <span class=\"hljs-string\">&#x27;7429811086@qq.com&#x27;</span>, <span class=\"hljs-string\">&#x27;3dsad&#x27;</span>, <span class=\"hljs-string\">&#x27;2017-04-28&#x27;</span>);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"1-在where后使用or，导致索引失效（尽量少用or）\"><a href=\"#1-在where后使用or，导致索引失效（尽量少用or）\" class=\"headerlink\" title=\"1.在where后使用or，导致索引失效（尽量少用or）\"></a>1.在where后使用or，导致索引失效（尽量少用or）</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> INDEX index_name_email <span class=\"hljs-keyword\">ON</span> students(email)<br><br><span class=\"hljs-keyword\">CREATE</span> INDEX index_name_phone <span class=\"hljs-keyword\">ON</span> students(phone)<br><br><br># 使用了索引<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> stud_id<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;1&#x27;</span>  <span class=\"hljs-keyword\">or</span> phone<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;18729902095&#x27;</span><br><br># 使用了索引<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> stud_id<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;1&#x27;</span>  <span class=\"hljs-keyword\">or</span> email<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;742981086@qq.com&#x27;</span><br> <br>#<span class=\"hljs-comment\">--------------------------</span><br> <br># 没有使用索引<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> phone<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;18729902095&#x27;</span> <span class=\"hljs-keyword\">or</span> email<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;742981086@qq.com&#x27;</span><br> <br># 没有使用索引<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> stud_id<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;1&#x27;</span>  <span class=\"hljs-keyword\">or</span> phone<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;222&#x27;</span> <span class=\"hljs-keyword\">or</span> email<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;742981086@qq.com&#x27;</span><br><br></code></pre></td></tr></table></figure>\n<h2 id=\"2-使用like-，like查询是以-开头\"><a href=\"#2-使用like-，like查询是以-开头\" class=\"headerlink\" title=\"2.使用like ，like查询是以%开头\"></a>2.使用like ，like查询是以%开头</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"># 使用了index_name_email索引<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> email <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;742981086@qq.com%&#x27;</span><br> <br># 没有使用index_name_email索引，索引失效<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> email <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;%742981086@qq.com&#x27;</span><br> <br># 没有使用index_name_email索引，索引失效<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> email <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;%742981086@qq.com%&#x27;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"3-复合索引遵守“最左前缀”原则\"><a href=\"#3-复合索引遵守“最左前缀”原则\" class=\"headerlink\" title=\"3.复合索引遵守“最左前缀”原则\"></a>3.复合索引遵守“最左前缀”原则</h2><blockquote>\n<p>在查询条件中使用了复合索引的第一个字段，索引才会被使用</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> index index_email_phone <span class=\"hljs-keyword\">on</span> students(email,phone)<br><br><br># 使用了 index_email_phone 索引<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> email<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;742981086@qq.com&#x27;</span> <span class=\"hljs-keyword\">and</span>  phone<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;18729902095&#x27;</span><br> <br># 使用了 index_email_phone 索引<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> phone<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;18729902095&#x27;</span> <span class=\"hljs-keyword\">and</span>  email<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;742981086@qq.com&#x27;</span><br> <br># 使用了 index_email_phone 索引<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> email<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;742981086@qq.com&#x27;</span> <span class=\"hljs-keyword\">and</span> name<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;admin&#x27;</span><br> <br># 没有使用index_email_phone索引，复合索引失效<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> phone<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;18729902095&#x27;</span> <span class=\"hljs-keyword\">and</span> name<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;admin&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-字符串类型字段未使用引号\"><a href=\"#4-字符串类型字段未使用引号\" class=\"headerlink\" title=\"4.字符串类型字段未使用引号\"></a>4.字符串类型字段未使用引号</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> INDEX index_name <span class=\"hljs-keyword\">ON</span> students(name)<br><br><br># 使用索引<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> name<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;110&#x27;</span><br> <br># 没有使用索引<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> name<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">110</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"5-使用in导致索引失效\"><a href=\"#5-使用in导致索引失效\" class=\"headerlink\" title=\"5.使用in导致索引失效\"></a>5.使用in导致索引失效</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"># 使用索引<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> name<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;admin&#x27;</span><br> <br># 没有使用索引<br>EXPLAIN <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> name <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-string\">&#x27;admin&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<h2 id=\"6-DATE-FORMAT-格式化时间\"><a href=\"#6-DATE-FORMAT-格式化时间\" class=\"headerlink\" title=\"6.DATE_FORMAT()格式化时间\"></a>6.DATE_FORMAT()格式化时间</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> INDEX index_create_date <span class=\"hljs-keyword\">ON</span> students(create_date)<br><br><br># 使用索引<br>EXPLAIN <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> create_date <span class=\"hljs-operator\">&gt;=</span> <span class=\"hljs-string\">&#x27;2010-05-05&#x27;</span><br> <br># 没有使用索引<br>EXPLAIN <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> DATE_FORMAT(create_date,<span class=\"hljs-string\">&#x27;%Y-%m-%d&#x27;</span>) <span class=\"hljs-operator\">&gt;=</span> <span class=\"hljs-string\">&#x27;2010-05-05&#x27;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"7-order-by、group-by-、-union、-distinc-中的字段出现在where条件中时，才会利用索引\"><a href=\"#7-order-by、group-by-、-union、-distinc-中的字段出现在where条件中时，才会利用索引\" class=\"headerlink\" title=\"7.order by、group by 、 union、 distinc 中的字段出现在where条件中时，才会利用索引\"></a>7.order by、group by 、 union、 distinc 中的字段出现在where条件中时，才会利用索引</h2><h2 id=\"8-对索引列进行运算导致索引失效-我所指的对索引列进行运算包括-，-，-，-，-等\"><a href=\"#8-对索引列进行运算导致索引失效-我所指的对索引列进行运算包括-，-，-，-，-等\" class=\"headerlink\" title=\"8.对索引列进行运算导致索引失效,我所指的对索引列进行运算包括(+，-，*，/，! 等)\"></a>8.对索引列进行运算导致索引失效,我所指的对索引列进行运算包括(+，-，*，/，! 等)</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"># 使用索引<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> id<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">10</span> <br><br># 没有使用索引<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> id<span class=\"hljs-number\">-1</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">9</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"9-使用mysql内部函数导致索引失效-对于这样情况应当创建基于函数的索引\"><a href=\"#9-使用mysql内部函数导致索引失效-对于这样情况应当创建基于函数的索引\" class=\"headerlink\" title=\"9.使用mysql内部函数导致索引失效.对于这样情况应当创建基于函数的索引\"></a>9.使用mysql内部函数导致索引失效.对于这样情况应当创建基于函数的索引</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"># 使用索引<br><span class=\"hljs-keyword\">create</span> index test_id_fbi_idx <span class=\"hljs-keyword\">on</span> students(round(id))<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> test <span class=\"hljs-keyword\">where</span> round(id)<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">10</span><br><br># 没有使用索引<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> round(id)<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">10</span>;<br></code></pre></td></tr></table></figure>\n<h2 id=\"10-在JOIN操作中（需要从多个数据表提取数据时），MYSQL只有在主键和外键的数据类型相同时才能使用索引，否则即使建立了-索引也不会使用\"><a href=\"#10-在JOIN操作中（需要从多个数据表提取数据时），MYSQL只有在主键和外键的数据类型相同时才能使用索引，否则即使建立了-索引也不会使用\" class=\"headerlink\" title=\"10.在JOIN操作中（需要从多个数据表提取数据时），MYSQL只有在主键和外键的数据类型相同时才能使用索引，否则即使建立了 索引也不会使用\"></a>10.在JOIN操作中（需要从多个数据表提取数据时），MYSQL只有在主键和外键的数据类型相同时才能使用索引，否则即使建立了 索引也不会使用</h2><h2 id=\"11-重复数据太多，例如“性别”\"><a href=\"#11-重复数据太多，例如“性别”\" class=\"headerlink\" title=\"11.重复数据太多，例如“性别”\"></a>11.重复数据太多，例如“性别”</h2><h2 id=\"12-索引不会包含有NULL值的列\"><a href=\"#12-索引不会包含有NULL值的列\" class=\"headerlink\" title=\"12.索引不会包含有NULL值的列\"></a>12.索引不会包含有NULL值的列</h2><h2 id=\"13-NOT-IN和-lt-gt-操作都不会使用索引将进行全表扫描。NOT-IN可以NOT-EXISTS代替，id-lt-gt-3则可使用id-gt-3-or-id-lt-3来代替\"><a href=\"#13-NOT-IN和-lt-gt-操作都不会使用索引将进行全表扫描。NOT-IN可以NOT-EXISTS代替，id-lt-gt-3则可使用id-gt-3-or-id-lt-3来代替\" class=\"headerlink\" title=\"13.NOT IN和&lt;&gt;操作都不会使用索引将进行全表扫描。NOT IN可以NOT EXISTS代替，id&lt;&gt;3则可使用id&gt;3 or id&lt;3来代替\"></a>13.NOT IN和&lt;&gt;操作都不会使用索引将进行全表扫描。NOT IN可以NOT EXISTS代替，id&lt;&gt;3则可使用id&gt;3 or id&lt;3来代替</h2><h2 id=\"14-查询的数量是大表的大部分，应该是30％以上\"><a href=\"#14-查询的数量是大表的大部分，应该是30％以上\" class=\"headerlink\" title=\"14.查询的数量是大表的大部分，应该是30％以上\"></a>14.查询的数量是大表的大部分，应该是30％以上</h2>","site":{"data":{}},"more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>索引一般以文件形式存在磁盘中（也可以存于内存中），存储的索引的原理大致概括为以空间换时间，数据库在未添加索引的时候进行查询默认的是进行全量搜索，也就是进行全局扫描，有多少条数据就要进行多少次查询，然后找到相匹配的数据就把他放到结果集中，直到全表扫描完。而建立索引之后，会将建立索引的KEY值放在一个n叉树上（BTree）。因为B树的特点就是适合在磁盘等直接存储设备上组织动态查找表，每次以索引进行条件查询时，会去树上根据key值直接进行搜索</p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><blockquote>\n<p><strong>建立索引的目的是加快对表中记录的查找或排序！</strong></p>\n</blockquote>\n<ol>\n<li>建立索引的列可以保证行的唯一性，生成唯一的rowId</li>\n<li>建立索引可以有效缩短数据的检索时间</li>\n<li>建立索引可以加快表与表之间的连接</li>\n<li>为用来排序或者是分组的字段添加索引可以加快分组和排序顺序</li>\n</ol>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><blockquote>\n<p><strong>数据库中表的数据量较大的情况下，对于查询响应时间不能满足业务需求，可以合理的使用索引提升查询效率</strong></p>\n</blockquote>\n<ol>\n<li>创建索引和维护索引需要时间成本，这个成本随着数据量的增加而加大</li>\n<li>创建索引和维护索引需要空间成本，每一条索引都要占据数据库的物理存储空间，数据量越大，占用空间也越大（数据表占据的是数据库的数据空间）</li>\n<li>会降低表的增删改的效率，因为每次增删改索引需要进行动态维护，导致时间变长</li>\n</ol>\n<h1 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h1><h2 id=\"基本类型\"><a href=\"#基本类型\" class=\"headerlink\" title=\"基本类型\"></a>基本类型</h2><ol>\n<li>普通索引（单列索引）</li>\n<li>复合索引（组合索引）</li>\n<li>唯一索引</li>\n<li>主键索引</li>\n<li>全文索引</li>\n</ol>\n<h2 id=\"基本语句\"><a href=\"#基本语句\" class=\"headerlink\" title=\"基本语句\"></a>基本语句</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> table_name[col_name data type]<br>[<span class=\"hljs-keyword\">unique</span><span class=\"hljs-operator\">|</span>fulltext][index<span class=\"hljs-operator\">|</span>key][index_name](col_name[length])[<span class=\"hljs-keyword\">asc</span><span class=\"hljs-operator\">|</span><span class=\"hljs-keyword\">desc</span>]<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>unique|fulltext为可选参数，分别表示唯一索引、全文索引</li>\n<li>index和key为同义词，两者作用相同，用来指定创建索引</li>\n<li>col_name为需要创建索引的字段列，该列必须从数据表中该定义的多个列中选择</li>\n<li>index_name指定索引的名称，为可选参数，如果不指定，默认col_name为索引值</li>\n<li>ength为可选参数，表示索引的长度，只有字符串类型的字段才能指定索引长度</li>\n<li>asc或desc指定升序或降序的索引值存储</li>\n</ul>\n<h3 id=\"普通索引（单列索引）\"><a href=\"#普通索引（单列索引）\" class=\"headerlink\" title=\"普通索引（单列索引）\"></a>普通索引（单列索引）</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"># 直接创建索引<br><span class=\"hljs-keyword\">CREATE</span> INDEX index_name <span class=\"hljs-keyword\">ON</span> table_name(col_name)<br><br># 修改表结构的方式添加索引<br><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> table_name <span class=\"hljs-keyword\">ADD</span> INDEX index_name(col_name)<br><br># 创建表的时候同时创建索引<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `news` (<br>    `id` <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT ,<br>    `title` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">255</span>)  <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> ,<br>    `content` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">255</span>)  <span class=\"hljs-keyword\">NULL</span> ,<br>    `<span class=\"hljs-type\">time</span>` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> ,<br>    <span class=\"hljs-keyword\">PRIMARY</span> KEY (`id`),<br>    INDEX index_name (title(<span class=\"hljs-number\">255</span>))<br>)<br><br># 删除索引<br><span class=\"hljs-keyword\">DROP</span> INDEX index_name <span class=\"hljs-keyword\">ON</span> table_name;<br>或者<br><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> `表名` <span class=\"hljs-keyword\">drop</span> index 索引名;<br></code></pre></td></tr></table></figure>\n<h3 id=\"复合索引（组合索引）\"><a href=\"#复合索引（组合索引）\" class=\"headerlink\" title=\"复合索引（组合索引）\"></a>复合索引（组合索引）</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"># 直接创建索引<br><span class=\"hljs-keyword\">create</span> index index_name <span class=\"hljs-keyword\">on</span> table_name(col_name1,col_name2,...)<br><br># 修改表结构的方式添加索引<br><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> table_name <span class=\"hljs-keyword\">add</span> index index_name(col_name,col_name2,...)<br></code></pre></td></tr></table></figure>\n<h3 id=\"唯一索引\"><a href=\"#唯一索引\" class=\"headerlink\" title=\"唯一索引\"></a>唯一索引</h3><p>唯一索引：唯一索引和普通索引类似，主要的区别在于，<strong>唯一索引限制列的值必须唯一，但允许存在空值（只允许存在一条空值）</strong>。<br>如果在已经有数据的表上添加唯一性索引的话:</p>\n<ul>\n<li>如果添加索引的列的值存在两个或者两个以上的空值，则不能创建唯一性索引会失败。（一般在创建表的时候，要对自动设置唯一性索引，需要在字段上加上 not null）</li>\n<li>如果添加索引的列的值存在两个或者两个以上的null值，还是可以创建唯一性索引，只是后面创建的数据不能再插入null值 ，并且严格意义上此列并不是唯一的，因为存在多个null值</li>\n</ul>\n<p>对于多个字段创建唯一索引规定列值的组合必须唯一<br>比如：在order表创建orderId字段和 productId字段 的唯一性索引，那么这两列的组合值必须唯一！</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"> “空值” 和”<span class=\"hljs-keyword\">NULL</span>”的概念： <br><span class=\"hljs-number\">1</span>：空值是不占用空间的 .<br><span class=\"hljs-number\">2</span>: MySQL中的<span class=\"hljs-keyword\">NULL</span>其实是占用空间的.<br> <br>长度验证：注意空值的之间是没有空格的。<br> <br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">select</span> length(<span class=\"hljs-string\">&#x27;&#x27;</span>),length(<span class=\"hljs-keyword\">null</span>),length(<span class=\"hljs-string\">&#x27; &#x27;</span>);<br><span class=\"hljs-operator\">+</span><span class=\"hljs-comment\">------------+--------------+-------------+</span><br><span class=\"hljs-operator\">|</span> length(<span class=\"hljs-string\">&#x27;&#x27;</span>) <span class=\"hljs-operator\">|</span> length(<span class=\"hljs-keyword\">null</span>) <span class=\"hljs-operator\">|</span> length(<span class=\"hljs-string\">&#x27; &#x27;</span>) <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">+</span><span class=\"hljs-comment\">------------+--------------+-------------+</span><br><span class=\"hljs-operator\">|</span>          <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">|</span>         <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-operator\">|</span>           <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">+</span><span class=\"hljs-comment\">------------+--------------+-------------+</span><br><br><br># 创建单个索引<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">UNIQUE</span> INDEX index_name <span class=\"hljs-keyword\">ON</span> table_name(col_name)<br> <br># 创建多个索引<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">UNIQUE</span> INDEX index_name <span class=\"hljs-keyword\">on</span> table_name(col_name,...)<br><br><br># 修改表结构的方式 单个<br><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> table_name <span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">UNIQUE</span> index index_name(col_name)<br># 修改表结构的方式 多个<br><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> table_name <span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">UNIQUE</span> index index_name(col_name,...)<br><br># 创建表的时候同时创建索引<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `news` (<br>    `id` <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT ,<br>    `title` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">255</span>)  <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> ,<br>    `content` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">255</span>)  <span class=\"hljs-keyword\">NULL</span> ,<br>    `<span class=\"hljs-type\">time</span>` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> ,<br>    <span class=\"hljs-keyword\">PRIMARY</span> KEY (`id`),<br>    <span class=\"hljs-keyword\">UNIQUE</span> index_name_unique(title)<br>)<br></code></pre></td></tr></table></figure>\n<h3 id=\"主键索引\"><a href=\"#主键索引\" class=\"headerlink\" title=\"主键索引\"></a>主键索引</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"># 主键索引(创建表时添加)<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `news` (<br>    `id` <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT ,<br>    `title` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">255</span>)  <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> ,<br>    `content` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">255</span>)  <span class=\"hljs-keyword\">NULL</span> ,<br>    `<span class=\"hljs-type\">time</span>` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> ,<br>    <span class=\"hljs-keyword\">PRIMARY</span> KEY (`id`)<br>)<br># 创建表后添加<br><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> tbl_name <span class=\"hljs-keyword\">add</span> <span class=\"hljs-keyword\">primary</span> key(col_name)<br><br><br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `<span class=\"hljs-keyword\">order</span>` (<br>    `orderId` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">36</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>    `productId` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">36</span>)  <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> ,<br>    `<span class=\"hljs-type\">time</span>` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span><br>)<br> <br><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> `<span class=\"hljs-keyword\">order</span>` <span class=\"hljs-keyword\">add</span> <span class=\"hljs-keyword\">primary</span> key(`orderId`)<br></code></pre></td></tr></table></figure>\n<h3 id=\"全文索引\"><a href=\"#全文索引\" class=\"headerlink\" title=\"全文索引\"></a>全文索引</h3><p>在一般情况下，模糊查询都是通过 like 的方式进行查询。但是，对于海量数据，这并不是一个好办法，在 like “value%” 可以使用索引，但是对于 like “%value%” 这样的方式，执行全表查询，这在数据量小的表，不存在性能问题，但是对于海量数据，全表扫描是非常可怕的事情,所以 like 进行模糊匹配性能很差。<br>这种情况下，需要考虑使用全文搜索的方式进行优化。全文搜索在 MySQL 中是一个 FULLTEXT 类型索引。<strong>FULLTEXT 索引在 MySQL 5.6 版本之后支持 InnoDB，而之前的版本只支持 MyISAM 表</strong>。<br>全文索引主要用来查找文本中的关键字，而不是直接与索引中的值相比较。fulltext索引跟其它索引大不相同，它更像是一个搜索引擎，而不是简单的where语句的参数匹配。fulltext索引配合match against操作使用，而不是一般的where语句加like。目前只有char、varchar，text 列上可以创建全文索引。<br>小技巧：<br>在数据量较大时候，先将数据放入一个没有全局索引的表中，然后再用CREATE index创建fulltext索引，要比先为一张表建立fulltext然后再将数据写入的速度快很多</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"># 创建表的适合添加全文索引<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `news` (<br>    `id` <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT ,<br>    `title` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">255</span>)  <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> ,<br>    `content` text  <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> ,<br>    `<span class=\"hljs-type\">time</span>` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> ,<br>     <span class=\"hljs-keyword\">PRIMARY</span> KEY (`id`),<br>    FULLTEXT (content)<br>)<br><br># 修改表结构的时候创建索引<br><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> table_name <span class=\"hljs-keyword\">ADD</span> FULLTEXT index_fulltext_content(col_name)<br><br># 直接创建索引<br><span class=\"hljs-keyword\">CREATE</span> FULLTEXT INDEX index_fulltext_content <span class=\"hljs-keyword\">ON</span> table_name(col_name)<br></code></pre></td></tr></table></figure>\n<p>注意： 默认 MySQL 不支持中文全文检索！<br>MySQL 全文搜索只是一个临时方案，对于全文搜索场景，更专业的做法是使用全文搜索引擎，例如 ElasticSearch 或 Solr<br>索引的查询和删除</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"># 查看:<br><span class=\"hljs-keyword\">show</span> indexes <span class=\"hljs-keyword\">from</span> `表名`;<br># 或<br><span class=\"hljs-keyword\">show</span> keys <span class=\"hljs-keyword\">from</span> `表名`;<br> <br># 删除<br><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> `表名` <span class=\"hljs-keyword\">drop</span> index 索引名;<br></code></pre></td></tr></table></figure>\n<h1 id=\"索引失效\"><a href=\"#索引失效\" class=\"headerlink\" title=\"索引失效\"></a>索引失效</h1><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"># 查看索引使用情况<br><span class=\"hljs-keyword\">show</span> status <span class=\"hljs-keyword\">like</span> ‘Handler_read<span class=\"hljs-operator\">%</span>’<br><br>handler_read_key:\t\t\t\t这个值越高越好，越高表示使用索引查询到的次数<br>handler_read_rnd_next:\t这个值越高，说明查询低效<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> IF <span class=\"hljs-keyword\">EXISTS</span> `students`;<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `students` (<br>  `stud_id` <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT,<br>  `name` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">50</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>  `email` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">50</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>  `phone` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>  `create_date` <span class=\"hljs-type\">date</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span>,<br>  <span class=\"hljs-keyword\">PRIMARY</span> KEY (`stud_id`)<br> <br>)<br> <br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `learn_mybatis`.`students` (`stud_id`, `name`, `email`, `phone`, `create_date`) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;admin&#x27;</span>, <span class=\"hljs-string\">&#x27;student1@gmail.com&#x27;</span>, <span class=\"hljs-string\">&#x27;18729902095&#x27;</span>, <span class=\"hljs-string\">&#x27;1983-06-25&#x27;</span>);<br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `learn_mybatis`.`students` (`stud_id`, `name`, `email`, `phone`, `create_date`) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;2&#x27;</span>, <span class=\"hljs-string\">&#x27;root&#x27;</span>, <span class=\"hljs-string\">&#x27;74298110186@qq.com&#x27;</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>, <span class=\"hljs-string\">&#x27;1983-12-25&#x27;</span>);<br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `learn_mybatis`.`students` (`stud_id`, `name`, `email`, `phone`, `create_date`) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;3&#x27;</span>, <span class=\"hljs-string\">&#x27;110&#x27;</span>, <span class=\"hljs-string\">&#x27;7429811086@qq.com&#x27;</span>, <span class=\"hljs-string\">&#x27;3dsad&#x27;</span>, <span class=\"hljs-string\">&#x27;2017-04-28&#x27;</span>);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"1-在where后使用or，导致索引失效（尽量少用or）\"><a href=\"#1-在where后使用or，导致索引失效（尽量少用or）\" class=\"headerlink\" title=\"1.在where后使用or，导致索引失效（尽量少用or）\"></a>1.在where后使用or，导致索引失效（尽量少用or）</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> INDEX index_name_email <span class=\"hljs-keyword\">ON</span> students(email)<br><br><span class=\"hljs-keyword\">CREATE</span> INDEX index_name_phone <span class=\"hljs-keyword\">ON</span> students(phone)<br><br><br># 使用了索引<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> stud_id<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;1&#x27;</span>  <span class=\"hljs-keyword\">or</span> phone<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;18729902095&#x27;</span><br><br># 使用了索引<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> stud_id<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;1&#x27;</span>  <span class=\"hljs-keyword\">or</span> email<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;742981086@qq.com&#x27;</span><br> <br>#<span class=\"hljs-comment\">--------------------------</span><br> <br># 没有使用索引<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> phone<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;18729902095&#x27;</span> <span class=\"hljs-keyword\">or</span> email<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;742981086@qq.com&#x27;</span><br> <br># 没有使用索引<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> stud_id<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;1&#x27;</span>  <span class=\"hljs-keyword\">or</span> phone<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;222&#x27;</span> <span class=\"hljs-keyword\">or</span> email<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;742981086@qq.com&#x27;</span><br><br></code></pre></td></tr></table></figure>\n<h2 id=\"2-使用like-，like查询是以-开头\"><a href=\"#2-使用like-，like查询是以-开头\" class=\"headerlink\" title=\"2.使用like ，like查询是以%开头\"></a>2.使用like ，like查询是以%开头</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"># 使用了index_name_email索引<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> email <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;742981086@qq.com%&#x27;</span><br> <br># 没有使用index_name_email索引，索引失效<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> email <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;%742981086@qq.com&#x27;</span><br> <br># 没有使用index_name_email索引，索引失效<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> email <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;%742981086@qq.com%&#x27;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"3-复合索引遵守“最左前缀”原则\"><a href=\"#3-复合索引遵守“最左前缀”原则\" class=\"headerlink\" title=\"3.复合索引遵守“最左前缀”原则\"></a>3.复合索引遵守“最左前缀”原则</h2><blockquote>\n<p>在查询条件中使用了复合索引的第一个字段，索引才会被使用</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> index index_email_phone <span class=\"hljs-keyword\">on</span> students(email,phone)<br><br><br># 使用了 index_email_phone 索引<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> email<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;742981086@qq.com&#x27;</span> <span class=\"hljs-keyword\">and</span>  phone<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;18729902095&#x27;</span><br> <br># 使用了 index_email_phone 索引<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> phone<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;18729902095&#x27;</span> <span class=\"hljs-keyword\">and</span>  email<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;742981086@qq.com&#x27;</span><br> <br># 使用了 index_email_phone 索引<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> email<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;742981086@qq.com&#x27;</span> <span class=\"hljs-keyword\">and</span> name<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;admin&#x27;</span><br> <br># 没有使用index_email_phone索引，复合索引失效<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> phone<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;18729902095&#x27;</span> <span class=\"hljs-keyword\">and</span> name<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;admin&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-字符串类型字段未使用引号\"><a href=\"#4-字符串类型字段未使用引号\" class=\"headerlink\" title=\"4.字符串类型字段未使用引号\"></a>4.字符串类型字段未使用引号</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> INDEX index_name <span class=\"hljs-keyword\">ON</span> students(name)<br><br><br># 使用索引<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> name<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;110&#x27;</span><br> <br># 没有使用索引<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> name<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">110</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"5-使用in导致索引失效\"><a href=\"#5-使用in导致索引失效\" class=\"headerlink\" title=\"5.使用in导致索引失效\"></a>5.使用in导致索引失效</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"># 使用索引<br>EXPLAIN <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> name<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;admin&#x27;</span><br> <br># 没有使用索引<br>EXPLAIN <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> name <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-string\">&#x27;admin&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<h2 id=\"6-DATE-FORMAT-格式化时间\"><a href=\"#6-DATE-FORMAT-格式化时间\" class=\"headerlink\" title=\"6.DATE_FORMAT()格式化时间\"></a>6.DATE_FORMAT()格式化时间</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> INDEX index_create_date <span class=\"hljs-keyword\">ON</span> students(create_date)<br><br><br># 使用索引<br>EXPLAIN <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> create_date <span class=\"hljs-operator\">&gt;=</span> <span class=\"hljs-string\">&#x27;2010-05-05&#x27;</span><br> <br># 没有使用索引<br>EXPLAIN <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> DATE_FORMAT(create_date,<span class=\"hljs-string\">&#x27;%Y-%m-%d&#x27;</span>) <span class=\"hljs-operator\">&gt;=</span> <span class=\"hljs-string\">&#x27;2010-05-05&#x27;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"7-order-by、group-by-、-union、-distinc-中的字段出现在where条件中时，才会利用索引\"><a href=\"#7-order-by、group-by-、-union、-distinc-中的字段出现在where条件中时，才会利用索引\" class=\"headerlink\" title=\"7.order by、group by 、 union、 distinc 中的字段出现在where条件中时，才会利用索引\"></a>7.order by、group by 、 union、 distinc 中的字段出现在where条件中时，才会利用索引</h2><h2 id=\"8-对索引列进行运算导致索引失效-我所指的对索引列进行运算包括-，-，-，-，-等\"><a href=\"#8-对索引列进行运算导致索引失效-我所指的对索引列进行运算包括-，-，-，-，-等\" class=\"headerlink\" title=\"8.对索引列进行运算导致索引失效,我所指的对索引列进行运算包括(+，-，*，/，! 等)\"></a>8.对索引列进行运算导致索引失效,我所指的对索引列进行运算包括(+，-，*，/，! 等)</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"># 使用索引<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> id<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">10</span> <br><br># 没有使用索引<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> id<span class=\"hljs-number\">-1</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">9</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"9-使用mysql内部函数导致索引失效-对于这样情况应当创建基于函数的索引\"><a href=\"#9-使用mysql内部函数导致索引失效-对于这样情况应当创建基于函数的索引\" class=\"headerlink\" title=\"9.使用mysql内部函数导致索引失效.对于这样情况应当创建基于函数的索引\"></a>9.使用mysql内部函数导致索引失效.对于这样情况应当创建基于函数的索引</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"># 使用索引<br><span class=\"hljs-keyword\">create</span> index test_id_fbi_idx <span class=\"hljs-keyword\">on</span> students(round(id))<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> test <span class=\"hljs-keyword\">where</span> round(id)<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">10</span><br><br># 没有使用索引<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> students <span class=\"hljs-keyword\">where</span> round(id)<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">10</span>;<br></code></pre></td></tr></table></figure>\n<h2 id=\"10-在JOIN操作中（需要从多个数据表提取数据时），MYSQL只有在主键和外键的数据类型相同时才能使用索引，否则即使建立了-索引也不会使用\"><a href=\"#10-在JOIN操作中（需要从多个数据表提取数据时），MYSQL只有在主键和外键的数据类型相同时才能使用索引，否则即使建立了-索引也不会使用\" class=\"headerlink\" title=\"10.在JOIN操作中（需要从多个数据表提取数据时），MYSQL只有在主键和外键的数据类型相同时才能使用索引，否则即使建立了 索引也不会使用\"></a>10.在JOIN操作中（需要从多个数据表提取数据时），MYSQL只有在主键和外键的数据类型相同时才能使用索引，否则即使建立了 索引也不会使用</h2><h2 id=\"11-重复数据太多，例如“性别”\"><a href=\"#11-重复数据太多，例如“性别”\" class=\"headerlink\" title=\"11.重复数据太多，例如“性别”\"></a>11.重复数据太多，例如“性别”</h2><h2 id=\"12-索引不会包含有NULL值的列\"><a href=\"#12-索引不会包含有NULL值的列\" class=\"headerlink\" title=\"12.索引不会包含有NULL值的列\"></a>12.索引不会包含有NULL值的列</h2><h2 id=\"13-NOT-IN和-lt-gt-操作都不会使用索引将进行全表扫描。NOT-IN可以NOT-EXISTS代替，id-lt-gt-3则可使用id-gt-3-or-id-lt-3来代替\"><a href=\"#13-NOT-IN和-lt-gt-操作都不会使用索引将进行全表扫描。NOT-IN可以NOT-EXISTS代替，id-lt-gt-3则可使用id-gt-3-or-id-lt-3来代替\" class=\"headerlink\" title=\"13.NOT IN和&lt;&gt;操作都不会使用索引将进行全表扫描。NOT IN可以NOT EXISTS代替，id&lt;&gt;3则可使用id&gt;3 or id&lt;3来代替\"></a>13.NOT IN和&lt;&gt;操作都不会使用索引将进行全表扫描。NOT IN可以NOT EXISTS代替，id&lt;&gt;3则可使用id&gt;3 or id&lt;3来代替</h2><h2 id=\"14-查询的数量是大表的大部分，应该是30％以上\"><a href=\"#14-查询的数量是大表的大部分，应该是30％以上\" class=\"headerlink\" title=\"14.查询的数量是大表的大部分，应该是30％以上\"></a>14.查询的数量是大表的大部分，应该是30％以上</h2>"},{"title":"JDK17 新特性","excerpt":"Hexo","date":"2023-01-30T08:02:45.000Z","cover":"/image/blog/jdk17_index.jpg?raw=true","_content":"<a name=\"Vl3vn\"></a>\n## JDK 17 新特性一览\n\n> JDK 17 这个版本提供了 14 个增强功能，另外在性能、稳定性和安全性上面也得到了大量的提升，以及还有一些孵化和预览特性，有了这些新变化，Java 会进一步提高开发人员的生产力\n\n| id  | 特性                                                 | 说明                   |\n| --- | -------------------------------------------------- | -------------------- |\n| 1   | 306:Restore Always-Strict Floating-Point Semantics | 恢复始终执行严格模式的浮点定义      |\n| 2   | 356:Enhanced Pseudo-Random Number Generators       | 增强型伪随机数生成器           |\n| 3   | 382:New macOS Rendering Pipeline                   | 新的 macOS 渲染管道        |\n| 4   | 391:macOS/AArch64 Port                             | macOS AArch64 端口     |\n| 5   | 398:Deprecate the Applet API for Removal           | 弃用 Applet API        |\n| 6   | 403:Strongly Encapsulate JDK Internals             | JDK 内部强封装            |\n| 7   | 406:Pattern Matching for switch (Preview)          | 为 switch 支持模式匹配      |\n| 8   | 407:Remove RMI Activation                          | 移除 RMI 激活            |\n| 9   | 409:Sealed Classes                                 | 密封类                  |\n| 10  | 410:Remove the Experimental AOT and JIT Compiler   | 移除实验性的 AOT 和 JIT 编译器 |\n| 11  | 411:Deprecate the Security Manager for Removal     | 弃用安全管理器              |\n| 12  | 412:Foreign Function & Memory API (Incubator)      | 外部函数和内存 API（孵化中）     |\n| 13  | 414:Vector API (Second Incubator)                  | 矢量 API（二次孵化中）        |\n| 14  | 415:Context-Specific Deserialization Filters       | 上下文特定反序列化过滤器         |\n\n## 语言特性\n\n### JEP 406：为 switch 支持模式匹配\n\n老版\n\n```java\nstatic String formatter(Object o) {\n    String formatted = \"unknown\";\n    if (o instanceof Integer i) {\n        formatted = String.format(\"int %d\", i);\n    } else if (o instanceof Long l) {\n        formatted = String.format(\"long %d\", l);\n    } else if (o instanceof Double d) {\n        formatted = String.format(\"double %f\", d);\n    } else if (o instanceof String s) {\n        formatted = String.format(\"String %s\", s);\n    }\n    return formatted;\n}\n```\n\n新版\n\n```java\nstatic String formatterPatternSwitch(Object o) {\n    return switch (o) {\n        case Integer i -> String.format(\"int %d\", i);\n        case Long l    -> String.format(\"long %d\", l);\n        case Double d  -> String.format(\"double %f\", d);\n        case String s  -> String.format(\"String %s\", s);\n        default        -> o.toString();\n    };\n}\n```\n\n---\n\n### JEP 409：密封类\n\n密封类，这个特性在 [JDK 15](https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw%3D%3D&idx=1&mid=2247507309&scene=21&sn=e78cfee56a2b5cd617c0370f64f4c83d#wechat_redirect) 中首次成为预览特性，在 JDK 16 中进行二次预览，在 JDK 17 这个版本中终于正式转正了。\n密封类可以用来增强 Java 编程语言，防止其他类或接口扩展或实现它们\n类 Student 被 **sealed **修饰，说明它是一个密封类，并且只允许指定的 3 个子类继承\n\n```java\npublic abstract sealed class Student\n    permits ZhangSan, LiSi, ZhaoLiu {\n    ...\n\n}\n```\n\n---\n\n### JEP 412: 外部函数和内存 API（孵化中）\n\n改进了 [JDK 14](https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw%3D%3D&idx=1&mid=2247493274&scene=21&sn=9aa8abcd70ce58d7ee6c0a44d73c8cf1#wechat_redirect) 和 [JDK 15](https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw%3D%3D&idx=1&mid=2247507309&scene=21&sn=e78cfee56a2b5cd617c0370f64f4c83d#wechat_redirect) 引入的 API，通过有效调用外部函数（即 JVM 之外的代码），以及安全地访问外部内存（JVM 之外的内存），这些 API 可以调用本地库和处理本地数据，与 Java 运行环境之外的代码和数据进行交互\n\n### JEP 414: 矢量 API（二次孵化中）\n\nVector API 这是一个新的初始迭代孵化器模块，模块包：jdk.incubator.vector，用于表示在运行时可靠地编译到支持的 CPU 架构上的最佳矢量硬件指令的矢量计算，矢量运算可以提供优于等效标量计算的性能，并且在机器学习、人工智能和密码学等领域非常普遍\n本次增强的 API 允许以一种在运行时，可靠地编译为支持的 CPU 架构上的最佳向量指令的方式表达向量计算\n\n---\n\n## 核心增强\n\n### JEP 306：恢复始终执行严格模式的浮点定义\n\nJava 最初只有严格的浮点语义，但从 JDK 1.2 开始，为了适应当时硬件架构的限制，默认情况下允许这些严格语义中的细微变化，而现在这些都没有必要了，已被 JEP 306 删除\n\n---\n\n### JEP 356：增强型伪随机数发生器\n\n增加了伪随机数相关的类和接口来让开发者使用stream流进行操作\n\n- RandomGenerator\n- RandomGeneratorFactory\n\n之前的 java.util.Random 和 java.util.concurrent.ThreadLocalRandom 都是 RandomGenerator 接口的实现类\n\n```java\nRandomGenerator generator = RandomGeneratorFactory.all()\n    .filter(RandomGeneratorFactory::isJumpable)\n    .filter(factory -> factory.stateBits() > 128)\n    .findAny()\n    .map(RandomGeneratorFactory::create)\n//  if you need a `JumpableGenerator`:\n//  .map(JumpableGenerator.class::cast)\n    .orElseThrow();\n```\n\n---\n\n### JEP 382: 新的macOS渲染管道\n\n这个新管道通过使用新的 Apple Metal API 为 macOS 实现 Java 2D 渲染管道，减少了 JDK 对已弃用的 Apple OpenGL API 的依赖\n\n---\n\n### JEP 403: JDK 内部强封装\n\nJDK 内部强封装，它是 JDK 16 中 JEP 396 的延续，JDK 16 开始对 JDK 内部大部分元素默认进行强封装，sun.misc.Unsafe 之类的关键内部 API 除外，从而限制对它们的访问。\n此外，用户仍然可以选择自 JDK 9 以来的默认的宽松的强封装，这样可以帮助用户毫不费力地升级到未来的 Java 版本\n\n---\n\n### JEP 415: 上下文特定反序列化过滤器\n\n允许应用配置 context-specific 和 dynamically-selected 过滤器，通过一个 JVM 范围的过滤器工厂，用来为每个单独的反序列化操作选择一个过滤器\n\n---\n\n## 新平台支持\n\n### JEP 391 : macOS AArch64 端口\n\nmacOS AArch64 端口，即提供可适用于 macOS 的 JDK 版本，该版本可在基于 Arm 64 的较新的 macOS 系统上本地化运行\n\n---\n\n## 弃用和移除项\n\n### JEP 411: 弃用安全管理器\n\n安全管理器从 Java 1.0 开始，这些年来它一直都不是保护 Java 应用程序代码的主要手段，也很少用于保护 Java 服务器端代码，所以这个版本标识为弃用状态了，未来的版本会进行移除\n\n---\n\n### JEP 398: 弃用 Applet API\n\nApplet 是一种运行在 Web 浏览器内的 Java 程序，但 Applet 早就没什么鸟用了，现在很少有浏览器支持 Java Applet\n\n---\n\n### JEP 407: 移除 RMI 激活\n\nRMI 激活机制已于 2020 年 9 月在 [JDK 15](https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw%3D%3D&idx=1&mid=2247507309&scene=21&sn=e78cfee56a2b5cd617c0370f64f4c83d#wechat_redirect) 中移除了，远程方法调用 (RMI) 激活机制现也已被移除，需要说明的是，RMI 激活是 RMI 中一个过时的组件，自 Java 8 以来一直是可选的\n\n---\n\n### JEP 410: 移除实验性的 AOT 和 JIT 编译器\n\nAOT 和 JIT 这两个实验性的编译器，自从在 JDK 9 中引入以来几乎没有怎么使用，市面上也出现了更为广泛使用的替代方案，并且维护它们所需的工作量很大，所以在 JDK 16 中就已经删除了，本次从 [OpenJDK](https://so.csdn.net/so/search?q=OpenJDK&spm=1001.2101.3001.7020) 项目中删除了源代码\n\n---\n","source":"_posts/jdk_support.md","raw":"---\ntitle: JDK17 新特性\ncategories:  java\ntags:\n  - java\nexcerpt:  Hexo\ndate: 2023-01-30 16:02:45\ncover: '/image/blog/jdk17_index.jpg?raw=true'\n---\n<a name=\"Vl3vn\"></a>\n## JDK 17 新特性一览\n\n> JDK 17 这个版本提供了 14 个增强功能，另外在性能、稳定性和安全性上面也得到了大量的提升，以及还有一些孵化和预览特性，有了这些新变化，Java 会进一步提高开发人员的生产力\n\n| id  | 特性                                                 | 说明                   |\n| --- | -------------------------------------------------- | -------------------- |\n| 1   | 306:Restore Always-Strict Floating-Point Semantics | 恢复始终执行严格模式的浮点定义      |\n| 2   | 356:Enhanced Pseudo-Random Number Generators       | 增强型伪随机数生成器           |\n| 3   | 382:New macOS Rendering Pipeline                   | 新的 macOS 渲染管道        |\n| 4   | 391:macOS/AArch64 Port                             | macOS AArch64 端口     |\n| 5   | 398:Deprecate the Applet API for Removal           | 弃用 Applet API        |\n| 6   | 403:Strongly Encapsulate JDK Internals             | JDK 内部强封装            |\n| 7   | 406:Pattern Matching for switch (Preview)          | 为 switch 支持模式匹配      |\n| 8   | 407:Remove RMI Activation                          | 移除 RMI 激活            |\n| 9   | 409:Sealed Classes                                 | 密封类                  |\n| 10  | 410:Remove the Experimental AOT and JIT Compiler   | 移除实验性的 AOT 和 JIT 编译器 |\n| 11  | 411:Deprecate the Security Manager for Removal     | 弃用安全管理器              |\n| 12  | 412:Foreign Function & Memory API (Incubator)      | 外部函数和内存 API（孵化中）     |\n| 13  | 414:Vector API (Second Incubator)                  | 矢量 API（二次孵化中）        |\n| 14  | 415:Context-Specific Deserialization Filters       | 上下文特定反序列化过滤器         |\n\n## 语言特性\n\n### JEP 406：为 switch 支持模式匹配\n\n老版\n\n```java\nstatic String formatter(Object o) {\n    String formatted = \"unknown\";\n    if (o instanceof Integer i) {\n        formatted = String.format(\"int %d\", i);\n    } else if (o instanceof Long l) {\n        formatted = String.format(\"long %d\", l);\n    } else if (o instanceof Double d) {\n        formatted = String.format(\"double %f\", d);\n    } else if (o instanceof String s) {\n        formatted = String.format(\"String %s\", s);\n    }\n    return formatted;\n}\n```\n\n新版\n\n```java\nstatic String formatterPatternSwitch(Object o) {\n    return switch (o) {\n        case Integer i -> String.format(\"int %d\", i);\n        case Long l    -> String.format(\"long %d\", l);\n        case Double d  -> String.format(\"double %f\", d);\n        case String s  -> String.format(\"String %s\", s);\n        default        -> o.toString();\n    };\n}\n```\n\n---\n\n### JEP 409：密封类\n\n密封类，这个特性在 [JDK 15](https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw%3D%3D&idx=1&mid=2247507309&scene=21&sn=e78cfee56a2b5cd617c0370f64f4c83d#wechat_redirect) 中首次成为预览特性，在 JDK 16 中进行二次预览，在 JDK 17 这个版本中终于正式转正了。\n密封类可以用来增强 Java 编程语言，防止其他类或接口扩展或实现它们\n类 Student 被 **sealed **修饰，说明它是一个密封类，并且只允许指定的 3 个子类继承\n\n```java\npublic abstract sealed class Student\n    permits ZhangSan, LiSi, ZhaoLiu {\n    ...\n\n}\n```\n\n---\n\n### JEP 412: 外部函数和内存 API（孵化中）\n\n改进了 [JDK 14](https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw%3D%3D&idx=1&mid=2247493274&scene=21&sn=9aa8abcd70ce58d7ee6c0a44d73c8cf1#wechat_redirect) 和 [JDK 15](https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw%3D%3D&idx=1&mid=2247507309&scene=21&sn=e78cfee56a2b5cd617c0370f64f4c83d#wechat_redirect) 引入的 API，通过有效调用外部函数（即 JVM 之外的代码），以及安全地访问外部内存（JVM 之外的内存），这些 API 可以调用本地库和处理本地数据，与 Java 运行环境之外的代码和数据进行交互\n\n### JEP 414: 矢量 API（二次孵化中）\n\nVector API 这是一个新的初始迭代孵化器模块，模块包：jdk.incubator.vector，用于表示在运行时可靠地编译到支持的 CPU 架构上的最佳矢量硬件指令的矢量计算，矢量运算可以提供优于等效标量计算的性能，并且在机器学习、人工智能和密码学等领域非常普遍\n本次增强的 API 允许以一种在运行时，可靠地编译为支持的 CPU 架构上的最佳向量指令的方式表达向量计算\n\n---\n\n## 核心增强\n\n### JEP 306：恢复始终执行严格模式的浮点定义\n\nJava 最初只有严格的浮点语义，但从 JDK 1.2 开始，为了适应当时硬件架构的限制，默认情况下允许这些严格语义中的细微变化，而现在这些都没有必要了，已被 JEP 306 删除\n\n---\n\n### JEP 356：增强型伪随机数发生器\n\n增加了伪随机数相关的类和接口来让开发者使用stream流进行操作\n\n- RandomGenerator\n- RandomGeneratorFactory\n\n之前的 java.util.Random 和 java.util.concurrent.ThreadLocalRandom 都是 RandomGenerator 接口的实现类\n\n```java\nRandomGenerator generator = RandomGeneratorFactory.all()\n    .filter(RandomGeneratorFactory::isJumpable)\n    .filter(factory -> factory.stateBits() > 128)\n    .findAny()\n    .map(RandomGeneratorFactory::create)\n//  if you need a `JumpableGenerator`:\n//  .map(JumpableGenerator.class::cast)\n    .orElseThrow();\n```\n\n---\n\n### JEP 382: 新的macOS渲染管道\n\n这个新管道通过使用新的 Apple Metal API 为 macOS 实现 Java 2D 渲染管道，减少了 JDK 对已弃用的 Apple OpenGL API 的依赖\n\n---\n\n### JEP 403: JDK 内部强封装\n\nJDK 内部强封装，它是 JDK 16 中 JEP 396 的延续，JDK 16 开始对 JDK 内部大部分元素默认进行强封装，sun.misc.Unsafe 之类的关键内部 API 除外，从而限制对它们的访问。\n此外，用户仍然可以选择自 JDK 9 以来的默认的宽松的强封装，这样可以帮助用户毫不费力地升级到未来的 Java 版本\n\n---\n\n### JEP 415: 上下文特定反序列化过滤器\n\n允许应用配置 context-specific 和 dynamically-selected 过滤器，通过一个 JVM 范围的过滤器工厂，用来为每个单独的反序列化操作选择一个过滤器\n\n---\n\n## 新平台支持\n\n### JEP 391 : macOS AArch64 端口\n\nmacOS AArch64 端口，即提供可适用于 macOS 的 JDK 版本，该版本可在基于 Arm 64 的较新的 macOS 系统上本地化运行\n\n---\n\n## 弃用和移除项\n\n### JEP 411: 弃用安全管理器\n\n安全管理器从 Java 1.0 开始，这些年来它一直都不是保护 Java 应用程序代码的主要手段，也很少用于保护 Java 服务器端代码，所以这个版本标识为弃用状态了，未来的版本会进行移除\n\n---\n\n### JEP 398: 弃用 Applet API\n\nApplet 是一种运行在 Web 浏览器内的 Java 程序，但 Applet 早就没什么鸟用了，现在很少有浏览器支持 Java Applet\n\n---\n\n### JEP 407: 移除 RMI 激活\n\nRMI 激活机制已于 2020 年 9 月在 [JDK 15](https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw%3D%3D&idx=1&mid=2247507309&scene=21&sn=e78cfee56a2b5cd617c0370f64f4c83d#wechat_redirect) 中移除了，远程方法调用 (RMI) 激活机制现也已被移除，需要说明的是，RMI 激活是 RMI 中一个过时的组件，自 Java 8 以来一直是可选的\n\n---\n\n### JEP 410: 移除实验性的 AOT 和 JIT 编译器\n\nAOT 和 JIT 这两个实验性的编译器，自从在 JDK 9 中引入以来几乎没有怎么使用，市面上也出现了更为广泛使用的替代方案，并且维护它们所需的工作量很大，所以在 JDK 16 中就已经删除了，本次从 [OpenJDK](https://so.csdn.net/so/search?q=OpenJDK&spm=1001.2101.3001.7020) 项目中删除了源代码\n\n---\n","slug":"jdk_support","published":1,"updated":"2024-02-29T09:09:54.922Z","_id":"cldiixcmk004akeuqgy4c4q4n","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a name=\"Vl3vn\"></a></p>\n<h2 id=\"JDK-17-新特性一览\"><a href=\"#JDK-17-新特性一览\" class=\"headerlink\" title=\"JDK 17 新特性一览\"></a>JDK 17 新特性一览</h2><blockquote>\n<p>JDK 17 这个版本提供了 14 个增强功能，另外在性能、稳定性和安全性上面也得到了大量的提升，以及还有一些孵化和预览特性，有了这些新变化，Java 会进一步提高开发人员的生产力</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>特性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>306:Restore Always-Strict Floating-Point Semantics</td>\n<td>恢复始终执行严格模式的浮点定义</td>\n</tr>\n<tr>\n<td>2</td>\n<td>356:Enhanced Pseudo-Random Number Generators</td>\n<td>增强型伪随机数生成器</td>\n</tr>\n<tr>\n<td>3</td>\n<td>382:New macOS Rendering Pipeline</td>\n<td>新的 macOS 渲染管道</td>\n</tr>\n<tr>\n<td>4</td>\n<td>391:macOS/AArch64 Port</td>\n<td>macOS AArch64 端口</td>\n</tr>\n<tr>\n<td>5</td>\n<td>398:Deprecate the Applet API for Removal</td>\n<td>弃用 Applet API</td>\n</tr>\n<tr>\n<td>6</td>\n<td>403:Strongly Encapsulate JDK Internals</td>\n<td>JDK 内部强封装</td>\n</tr>\n<tr>\n<td>7</td>\n<td>406:Pattern Matching for switch (Preview)</td>\n<td>为 switch 支持模式匹配</td>\n</tr>\n<tr>\n<td>8</td>\n<td>407:Remove RMI Activation</td>\n<td>移除 RMI 激活</td>\n</tr>\n<tr>\n<td>9</td>\n<td>409:Sealed Classes</td>\n<td>密封类</td>\n</tr>\n<tr>\n<td>10</td>\n<td>410:Remove the Experimental AOT and JIT Compiler</td>\n<td>移除实验性的 AOT 和 JIT 编译器</td>\n</tr>\n<tr>\n<td>11</td>\n<td>411:Deprecate the Security Manager for Removal</td>\n<td>弃用安全管理器</td>\n</tr>\n<tr>\n<td>12</td>\n<td>412:Foreign Function &amp; Memory API (Incubator)</td>\n<td>外部函数和内存 API（孵化中）</td>\n</tr>\n<tr>\n<td>13</td>\n<td>414:Vector API (Second Incubator)</td>\n<td>矢量 API（二次孵化中）</td>\n</tr>\n<tr>\n<td>14</td>\n<td>415:Context-Specific Deserialization Filters</td>\n<td>上下文特定反序列化过滤器</td>\n</tr>\n</tbody></table>\n<h2 id=\"语言特性\"><a href=\"#语言特性\" class=\"headerlink\" title=\"语言特性\"></a>语言特性</h2><h3 id=\"JEP-406：为-switch-支持模式匹配\"><a href=\"#JEP-406：为-switch-支持模式匹配\" class=\"headerlink\" title=\"JEP 406：为 switch 支持模式匹配\"></a>JEP 406：为 switch 支持模式匹配</h3><p>老版</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title\">formatter</span><span class=\"hljs-params\">(Object o)</span> </span>&#123;<br>    String formatted = <span class=\"hljs-string\">&quot;unknown&quot;</span>;<br>    <span class=\"hljs-keyword\">if</span> (o <span class=\"hljs-keyword\">instanceof</span> Integer i) &#123;<br>        formatted = String.format(<span class=\"hljs-string\">&quot;int %d&quot;</span>, i);<br>    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (o <span class=\"hljs-keyword\">instanceof</span> Long l) &#123;<br>        formatted = String.format(<span class=\"hljs-string\">&quot;long %d&quot;</span>, l);<br>    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (o <span class=\"hljs-keyword\">instanceof</span> Double d) &#123;<br>        formatted = String.format(<span class=\"hljs-string\">&quot;double %f&quot;</span>, d);<br>    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (o <span class=\"hljs-keyword\">instanceof</span> String s) &#123;<br>        formatted = String.format(<span class=\"hljs-string\">&quot;String %s&quot;</span>, s);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> formatted;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>新版</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title\">formatterPatternSwitch</span><span class=\"hljs-params\">(Object o)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">switch</span> (o) &#123;<br>        <span class=\"hljs-keyword\">case</span> Integer i -&gt; String.format(<span class=\"hljs-string\">&quot;int %d&quot;</span>, i);<br>        <span class=\"hljs-keyword\">case</span> Long l    -&gt; String.format(<span class=\"hljs-string\">&quot;long %d&quot;</span>, l);<br>        <span class=\"hljs-keyword\">case</span> Double d  -&gt; String.format(<span class=\"hljs-string\">&quot;double %f&quot;</span>, d);<br>        <span class=\"hljs-keyword\">case</span> String s  -&gt; String.format(<span class=\"hljs-string\">&quot;String %s&quot;</span>, s);<br>        <span class=\"hljs-keyword\">default</span>        -&gt; o.toString();<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"JEP-409：密封类\"><a href=\"#JEP-409：密封类\" class=\"headerlink\" title=\"JEP 409：密封类\"></a>JEP 409：密封类</h3><p>密封类，这个特性在 <a href=\"https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&idx=1&mid=2247507309&scene=21&sn=e78cfee56a2b5cd617c0370f64f4c83d#wechat_redirect\">JDK 15</a> 中首次成为预览特性，在 JDK 16 中进行二次预览，在 JDK 17 这个版本中终于正式转正了。<br>密封类可以用来增强 Java 编程语言，防止其他类或接口扩展或实现它们<br>类 Student 被 **sealed **修饰，说明它是一个密封类，并且只允许指定的 3 个子类继承</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> sealed <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span></span><br><span class=\"hljs-class\">    <span class=\"hljs-title\">permits</span> <span class=\"hljs-title\">ZhangSan</span>, <span class=\"hljs-title\">LiSi</span>, <span class=\"hljs-title\">ZhaoLiu</span> </span>&#123;<br>    ...<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"JEP-412-外部函数和内存-API（孵化中）\"><a href=\"#JEP-412-外部函数和内存-API（孵化中）\" class=\"headerlink\" title=\"JEP 412: 外部函数和内存 API（孵化中）\"></a>JEP 412: 外部函数和内存 API（孵化中）</h3><p>改进了 <a href=\"https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&idx=1&mid=2247493274&scene=21&sn=9aa8abcd70ce58d7ee6c0a44d73c8cf1#wechat_redirect\">JDK 14</a> 和 <a href=\"https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&idx=1&mid=2247507309&scene=21&sn=e78cfee56a2b5cd617c0370f64f4c83d#wechat_redirect\">JDK 15</a> 引入的 API，通过有效调用外部函数（即 JVM 之外的代码），以及安全地访问外部内存（JVM 之外的内存），这些 API 可以调用本地库和处理本地数据，与 Java 运行环境之外的代码和数据进行交互</p>\n<h3 id=\"JEP-414-矢量-API（二次孵化中）\"><a href=\"#JEP-414-矢量-API（二次孵化中）\" class=\"headerlink\" title=\"JEP 414: 矢量 API（二次孵化中）\"></a>JEP 414: 矢量 API（二次孵化中）</h3><p>Vector API 这是一个新的初始迭代孵化器模块，模块包：jdk.incubator.vector，用于表示在运行时可靠地编译到支持的 CPU 架构上的最佳矢量硬件指令的矢量计算，矢量运算可以提供优于等效标量计算的性能，并且在机器学习、人工智能和密码学等领域非常普遍<br>本次增强的 API 允许以一种在运行时，可靠地编译为支持的 CPU 架构上的最佳向量指令的方式表达向量计算</p>\n<hr>\n<h2 id=\"核心增强\"><a href=\"#核心增强\" class=\"headerlink\" title=\"核心增强\"></a>核心增强</h2><h3 id=\"JEP-306：恢复始终执行严格模式的浮点定义\"><a href=\"#JEP-306：恢复始终执行严格模式的浮点定义\" class=\"headerlink\" title=\"JEP 306：恢复始终执行严格模式的浮点定义\"></a>JEP 306：恢复始终执行严格模式的浮点定义</h3><p>Java 最初只有严格的浮点语义，但从 JDK 1.2 开始，为了适应当时硬件架构的限制，默认情况下允许这些严格语义中的细微变化，而现在这些都没有必要了，已被 JEP 306 删除</p>\n<hr>\n<h3 id=\"JEP-356：增强型伪随机数发生器\"><a href=\"#JEP-356：增强型伪随机数发生器\" class=\"headerlink\" title=\"JEP 356：增强型伪随机数发生器\"></a>JEP 356：增强型伪随机数发生器</h3><p>增加了伪随机数相关的类和接口来让开发者使用stream流进行操作</p>\n<ul>\n<li>RandomGenerator</li>\n<li>RandomGeneratorFactory</li>\n</ul>\n<p>之前的 java.util.Random 和 java.util.concurrent.ThreadLocalRandom 都是 RandomGenerator 接口的实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">RandomGenerator generator = RandomGeneratorFactory.all()<br>    .filter(RandomGeneratorFactory::isJumpable)<br>    .filter(factory -&gt; factory.stateBits() &gt; <span class=\"hljs-number\">128</span>)<br>    .findAny()<br>    .map(RandomGeneratorFactory::create)<br><span class=\"hljs-comment\">//  if you need a `JumpableGenerator`:</span><br><span class=\"hljs-comment\">//  .map(JumpableGenerator.class::cast)</span><br>    .orElseThrow();<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"JEP-382-新的macOS渲染管道\"><a href=\"#JEP-382-新的macOS渲染管道\" class=\"headerlink\" title=\"JEP 382: 新的macOS渲染管道\"></a>JEP 382: 新的macOS渲染管道</h3><p>这个新管道通过使用新的 Apple Metal API 为 macOS 实现 Java 2D 渲染管道，减少了 JDK 对已弃用的 Apple OpenGL API 的依赖</p>\n<hr>\n<h3 id=\"JEP-403-JDK-内部强封装\"><a href=\"#JEP-403-JDK-内部强封装\" class=\"headerlink\" title=\"JEP 403: JDK 内部强封装\"></a>JEP 403: JDK 内部强封装</h3><p>JDK 内部强封装，它是 JDK 16 中 JEP 396 的延续，JDK 16 开始对 JDK 内部大部分元素默认进行强封装，sun.misc.Unsafe 之类的关键内部 API 除外，从而限制对它们的访问。<br>此外，用户仍然可以选择自 JDK 9 以来的默认的宽松的强封装，这样可以帮助用户毫不费力地升级到未来的 Java 版本</p>\n<hr>\n<h3 id=\"JEP-415-上下文特定反序列化过滤器\"><a href=\"#JEP-415-上下文特定反序列化过滤器\" class=\"headerlink\" title=\"JEP 415: 上下文特定反序列化过滤器\"></a>JEP 415: 上下文特定反序列化过滤器</h3><p>允许应用配置 context-specific 和 dynamically-selected 过滤器，通过一个 JVM 范围的过滤器工厂，用来为每个单独的反序列化操作选择一个过滤器</p>\n<hr>\n<h2 id=\"新平台支持\"><a href=\"#新平台支持\" class=\"headerlink\" title=\"新平台支持\"></a>新平台支持</h2><h3 id=\"JEP-391-macOS-AArch64-端口\"><a href=\"#JEP-391-macOS-AArch64-端口\" class=\"headerlink\" title=\"JEP 391 : macOS AArch64 端口\"></a>JEP 391 : macOS AArch64 端口</h3><p>macOS AArch64 端口，即提供可适用于 macOS 的 JDK 版本，该版本可在基于 Arm 64 的较新的 macOS 系统上本地化运行</p>\n<hr>\n<h2 id=\"弃用和移除项\"><a href=\"#弃用和移除项\" class=\"headerlink\" title=\"弃用和移除项\"></a>弃用和移除项</h2><h3 id=\"JEP-411-弃用安全管理器\"><a href=\"#JEP-411-弃用安全管理器\" class=\"headerlink\" title=\"JEP 411: 弃用安全管理器\"></a>JEP 411: 弃用安全管理器</h3><p>安全管理器从 Java 1.0 开始，这些年来它一直都不是保护 Java 应用程序代码的主要手段，也很少用于保护 Java 服务器端代码，所以这个版本标识为弃用状态了，未来的版本会进行移除</p>\n<hr>\n<h3 id=\"JEP-398-弃用-Applet-API\"><a href=\"#JEP-398-弃用-Applet-API\" class=\"headerlink\" title=\"JEP 398: 弃用 Applet API\"></a>JEP 398: 弃用 Applet API</h3><p>Applet 是一种运行在 Web 浏览器内的 Java 程序，但 Applet 早就没什么鸟用了，现在很少有浏览器支持 Java Applet</p>\n<hr>\n<h3 id=\"JEP-407-移除-RMI-激活\"><a href=\"#JEP-407-移除-RMI-激活\" class=\"headerlink\" title=\"JEP 407: 移除 RMI 激活\"></a>JEP 407: 移除 RMI 激活</h3><p>RMI 激活机制已于 2020 年 9 月在 <a href=\"https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&idx=1&mid=2247507309&scene=21&sn=e78cfee56a2b5cd617c0370f64f4c83d#wechat_redirect\">JDK 15</a> 中移除了，远程方法调用 (RMI) 激活机制现也已被移除，需要说明的是，RMI 激活是 RMI 中一个过时的组件，自 Java 8 以来一直是可选的</p>\n<hr>\n<h3 id=\"JEP-410-移除实验性的-AOT-和-JIT-编译器\"><a href=\"#JEP-410-移除实验性的-AOT-和-JIT-编译器\" class=\"headerlink\" title=\"JEP 410: 移除实验性的 AOT 和 JIT 编译器\"></a>JEP 410: 移除实验性的 AOT 和 JIT 编译器</h3><p>AOT 和 JIT 这两个实验性的编译器，自从在 JDK 9 中引入以来几乎没有怎么使用，市面上也出现了更为广泛使用的替代方案，并且维护它们所需的工作量很大，所以在 JDK 16 中就已经删除了，本次从 <a href=\"https://so.csdn.net/so/search?q=OpenJDK&spm=1001.2101.3001.7020\">OpenJDK</a> 项目中删除了源代码</p>\n<hr>\n","site":{"data":{}},"more":"<p><a name=\"Vl3vn\"></a></p>\n<h2 id=\"JDK-17-新特性一览\"><a href=\"#JDK-17-新特性一览\" class=\"headerlink\" title=\"JDK 17 新特性一览\"></a>JDK 17 新特性一览</h2><blockquote>\n<p>JDK 17 这个版本提供了 14 个增强功能，另外在性能、稳定性和安全性上面也得到了大量的提升，以及还有一些孵化和预览特性，有了这些新变化，Java 会进一步提高开发人员的生产力</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>特性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>306:Restore Always-Strict Floating-Point Semantics</td>\n<td>恢复始终执行严格模式的浮点定义</td>\n</tr>\n<tr>\n<td>2</td>\n<td>356:Enhanced Pseudo-Random Number Generators</td>\n<td>增强型伪随机数生成器</td>\n</tr>\n<tr>\n<td>3</td>\n<td>382:New macOS Rendering Pipeline</td>\n<td>新的 macOS 渲染管道</td>\n</tr>\n<tr>\n<td>4</td>\n<td>391:macOS/AArch64 Port</td>\n<td>macOS AArch64 端口</td>\n</tr>\n<tr>\n<td>5</td>\n<td>398:Deprecate the Applet API for Removal</td>\n<td>弃用 Applet API</td>\n</tr>\n<tr>\n<td>6</td>\n<td>403:Strongly Encapsulate JDK Internals</td>\n<td>JDK 内部强封装</td>\n</tr>\n<tr>\n<td>7</td>\n<td>406:Pattern Matching for switch (Preview)</td>\n<td>为 switch 支持模式匹配</td>\n</tr>\n<tr>\n<td>8</td>\n<td>407:Remove RMI Activation</td>\n<td>移除 RMI 激活</td>\n</tr>\n<tr>\n<td>9</td>\n<td>409:Sealed Classes</td>\n<td>密封类</td>\n</tr>\n<tr>\n<td>10</td>\n<td>410:Remove the Experimental AOT and JIT Compiler</td>\n<td>移除实验性的 AOT 和 JIT 编译器</td>\n</tr>\n<tr>\n<td>11</td>\n<td>411:Deprecate the Security Manager for Removal</td>\n<td>弃用安全管理器</td>\n</tr>\n<tr>\n<td>12</td>\n<td>412:Foreign Function &amp; Memory API (Incubator)</td>\n<td>外部函数和内存 API（孵化中）</td>\n</tr>\n<tr>\n<td>13</td>\n<td>414:Vector API (Second Incubator)</td>\n<td>矢量 API（二次孵化中）</td>\n</tr>\n<tr>\n<td>14</td>\n<td>415:Context-Specific Deserialization Filters</td>\n<td>上下文特定反序列化过滤器</td>\n</tr>\n</tbody></table>\n<h2 id=\"语言特性\"><a href=\"#语言特性\" class=\"headerlink\" title=\"语言特性\"></a>语言特性</h2><h3 id=\"JEP-406：为-switch-支持模式匹配\"><a href=\"#JEP-406：为-switch-支持模式匹配\" class=\"headerlink\" title=\"JEP 406：为 switch 支持模式匹配\"></a>JEP 406：为 switch 支持模式匹配</h3><p>老版</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title\">formatter</span><span class=\"hljs-params\">(Object o)</span> </span>&#123;<br>    String formatted = <span class=\"hljs-string\">&quot;unknown&quot;</span>;<br>    <span class=\"hljs-keyword\">if</span> (o <span class=\"hljs-keyword\">instanceof</span> Integer i) &#123;<br>        formatted = String.format(<span class=\"hljs-string\">&quot;int %d&quot;</span>, i);<br>    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (o <span class=\"hljs-keyword\">instanceof</span> Long l) &#123;<br>        formatted = String.format(<span class=\"hljs-string\">&quot;long %d&quot;</span>, l);<br>    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (o <span class=\"hljs-keyword\">instanceof</span> Double d) &#123;<br>        formatted = String.format(<span class=\"hljs-string\">&quot;double %f&quot;</span>, d);<br>    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (o <span class=\"hljs-keyword\">instanceof</span> String s) &#123;<br>        formatted = String.format(<span class=\"hljs-string\">&quot;String %s&quot;</span>, s);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> formatted;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>新版</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title\">formatterPatternSwitch</span><span class=\"hljs-params\">(Object o)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">switch</span> (o) &#123;<br>        <span class=\"hljs-keyword\">case</span> Integer i -&gt; String.format(<span class=\"hljs-string\">&quot;int %d&quot;</span>, i);<br>        <span class=\"hljs-keyword\">case</span> Long l    -&gt; String.format(<span class=\"hljs-string\">&quot;long %d&quot;</span>, l);<br>        <span class=\"hljs-keyword\">case</span> Double d  -&gt; String.format(<span class=\"hljs-string\">&quot;double %f&quot;</span>, d);<br>        <span class=\"hljs-keyword\">case</span> String s  -&gt; String.format(<span class=\"hljs-string\">&quot;String %s&quot;</span>, s);<br>        <span class=\"hljs-keyword\">default</span>        -&gt; o.toString();<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"JEP-409：密封类\"><a href=\"#JEP-409：密封类\" class=\"headerlink\" title=\"JEP 409：密封类\"></a>JEP 409：密封类</h3><p>密封类，这个特性在 <a href=\"https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&idx=1&mid=2247507309&scene=21&sn=e78cfee56a2b5cd617c0370f64f4c83d#wechat_redirect\">JDK 15</a> 中首次成为预览特性，在 JDK 16 中进行二次预览，在 JDK 17 这个版本中终于正式转正了。<br>密封类可以用来增强 Java 编程语言，防止其他类或接口扩展或实现它们<br>类 Student 被 **sealed **修饰，说明它是一个密封类，并且只允许指定的 3 个子类继承</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> sealed <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span></span><br><span class=\"hljs-class\">    <span class=\"hljs-title\">permits</span> <span class=\"hljs-title\">ZhangSan</span>, <span class=\"hljs-title\">LiSi</span>, <span class=\"hljs-title\">ZhaoLiu</span> </span>&#123;<br>    ...<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"JEP-412-外部函数和内存-API（孵化中）\"><a href=\"#JEP-412-外部函数和内存-API（孵化中）\" class=\"headerlink\" title=\"JEP 412: 外部函数和内存 API（孵化中）\"></a>JEP 412: 外部函数和内存 API（孵化中）</h3><p>改进了 <a href=\"https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&idx=1&mid=2247493274&scene=21&sn=9aa8abcd70ce58d7ee6c0a44d73c8cf1#wechat_redirect\">JDK 14</a> 和 <a href=\"https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&idx=1&mid=2247507309&scene=21&sn=e78cfee56a2b5cd617c0370f64f4c83d#wechat_redirect\">JDK 15</a> 引入的 API，通过有效调用外部函数（即 JVM 之外的代码），以及安全地访问外部内存（JVM 之外的内存），这些 API 可以调用本地库和处理本地数据，与 Java 运行环境之外的代码和数据进行交互</p>\n<h3 id=\"JEP-414-矢量-API（二次孵化中）\"><a href=\"#JEP-414-矢量-API（二次孵化中）\" class=\"headerlink\" title=\"JEP 414: 矢量 API（二次孵化中）\"></a>JEP 414: 矢量 API（二次孵化中）</h3><p>Vector API 这是一个新的初始迭代孵化器模块，模块包：jdk.incubator.vector，用于表示在运行时可靠地编译到支持的 CPU 架构上的最佳矢量硬件指令的矢量计算，矢量运算可以提供优于等效标量计算的性能，并且在机器学习、人工智能和密码学等领域非常普遍<br>本次增强的 API 允许以一种在运行时，可靠地编译为支持的 CPU 架构上的最佳向量指令的方式表达向量计算</p>\n<hr>\n<h2 id=\"核心增强\"><a href=\"#核心增强\" class=\"headerlink\" title=\"核心增强\"></a>核心增强</h2><h3 id=\"JEP-306：恢复始终执行严格模式的浮点定义\"><a href=\"#JEP-306：恢复始终执行严格模式的浮点定义\" class=\"headerlink\" title=\"JEP 306：恢复始终执行严格模式的浮点定义\"></a>JEP 306：恢复始终执行严格模式的浮点定义</h3><p>Java 最初只有严格的浮点语义，但从 JDK 1.2 开始，为了适应当时硬件架构的限制，默认情况下允许这些严格语义中的细微变化，而现在这些都没有必要了，已被 JEP 306 删除</p>\n<hr>\n<h3 id=\"JEP-356：增强型伪随机数发生器\"><a href=\"#JEP-356：增强型伪随机数发生器\" class=\"headerlink\" title=\"JEP 356：增强型伪随机数发生器\"></a>JEP 356：增强型伪随机数发生器</h3><p>增加了伪随机数相关的类和接口来让开发者使用stream流进行操作</p>\n<ul>\n<li>RandomGenerator</li>\n<li>RandomGeneratorFactory</li>\n</ul>\n<p>之前的 java.util.Random 和 java.util.concurrent.ThreadLocalRandom 都是 RandomGenerator 接口的实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">RandomGenerator generator = RandomGeneratorFactory.all()<br>    .filter(RandomGeneratorFactory::isJumpable)<br>    .filter(factory -&gt; factory.stateBits() &gt; <span class=\"hljs-number\">128</span>)<br>    .findAny()<br>    .map(RandomGeneratorFactory::create)<br><span class=\"hljs-comment\">//  if you need a `JumpableGenerator`:</span><br><span class=\"hljs-comment\">//  .map(JumpableGenerator.class::cast)</span><br>    .orElseThrow();<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"JEP-382-新的macOS渲染管道\"><a href=\"#JEP-382-新的macOS渲染管道\" class=\"headerlink\" title=\"JEP 382: 新的macOS渲染管道\"></a>JEP 382: 新的macOS渲染管道</h3><p>这个新管道通过使用新的 Apple Metal API 为 macOS 实现 Java 2D 渲染管道，减少了 JDK 对已弃用的 Apple OpenGL API 的依赖</p>\n<hr>\n<h3 id=\"JEP-403-JDK-内部强封装\"><a href=\"#JEP-403-JDK-内部强封装\" class=\"headerlink\" title=\"JEP 403: JDK 内部强封装\"></a>JEP 403: JDK 内部强封装</h3><p>JDK 内部强封装，它是 JDK 16 中 JEP 396 的延续，JDK 16 开始对 JDK 内部大部分元素默认进行强封装，sun.misc.Unsafe 之类的关键内部 API 除外，从而限制对它们的访问。<br>此外，用户仍然可以选择自 JDK 9 以来的默认的宽松的强封装，这样可以帮助用户毫不费力地升级到未来的 Java 版本</p>\n<hr>\n<h3 id=\"JEP-415-上下文特定反序列化过滤器\"><a href=\"#JEP-415-上下文特定反序列化过滤器\" class=\"headerlink\" title=\"JEP 415: 上下文特定反序列化过滤器\"></a>JEP 415: 上下文特定反序列化过滤器</h3><p>允许应用配置 context-specific 和 dynamically-selected 过滤器，通过一个 JVM 范围的过滤器工厂，用来为每个单独的反序列化操作选择一个过滤器</p>\n<hr>\n<h2 id=\"新平台支持\"><a href=\"#新平台支持\" class=\"headerlink\" title=\"新平台支持\"></a>新平台支持</h2><h3 id=\"JEP-391-macOS-AArch64-端口\"><a href=\"#JEP-391-macOS-AArch64-端口\" class=\"headerlink\" title=\"JEP 391 : macOS AArch64 端口\"></a>JEP 391 : macOS AArch64 端口</h3><p>macOS AArch64 端口，即提供可适用于 macOS 的 JDK 版本，该版本可在基于 Arm 64 的较新的 macOS 系统上本地化运行</p>\n<hr>\n<h2 id=\"弃用和移除项\"><a href=\"#弃用和移除项\" class=\"headerlink\" title=\"弃用和移除项\"></a>弃用和移除项</h2><h3 id=\"JEP-411-弃用安全管理器\"><a href=\"#JEP-411-弃用安全管理器\" class=\"headerlink\" title=\"JEP 411: 弃用安全管理器\"></a>JEP 411: 弃用安全管理器</h3><p>安全管理器从 Java 1.0 开始，这些年来它一直都不是保护 Java 应用程序代码的主要手段，也很少用于保护 Java 服务器端代码，所以这个版本标识为弃用状态了，未来的版本会进行移除</p>\n<hr>\n<h3 id=\"JEP-398-弃用-Applet-API\"><a href=\"#JEP-398-弃用-Applet-API\" class=\"headerlink\" title=\"JEP 398: 弃用 Applet API\"></a>JEP 398: 弃用 Applet API</h3><p>Applet 是一种运行在 Web 浏览器内的 Java 程序，但 Applet 早就没什么鸟用了，现在很少有浏览器支持 Java Applet</p>\n<hr>\n<h3 id=\"JEP-407-移除-RMI-激活\"><a href=\"#JEP-407-移除-RMI-激活\" class=\"headerlink\" title=\"JEP 407: 移除 RMI 激活\"></a>JEP 407: 移除 RMI 激活</h3><p>RMI 激活机制已于 2020 年 9 月在 <a href=\"https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&idx=1&mid=2247507309&scene=21&sn=e78cfee56a2b5cd617c0370f64f4c83d#wechat_redirect\">JDK 15</a> 中移除了，远程方法调用 (RMI) 激活机制现也已被移除，需要说明的是，RMI 激活是 RMI 中一个过时的组件，自 Java 8 以来一直是可选的</p>\n<hr>\n<h3 id=\"JEP-410-移除实验性的-AOT-和-JIT-编译器\"><a href=\"#JEP-410-移除实验性的-AOT-和-JIT-编译器\" class=\"headerlink\" title=\"JEP 410: 移除实验性的 AOT 和 JIT 编译器\"></a>JEP 410: 移除实验性的 AOT 和 JIT 编译器</h3><p>AOT 和 JIT 这两个实验性的编译器，自从在 JDK 9 中引入以来几乎没有怎么使用，市面上也出现了更为广泛使用的替代方案，并且维护它们所需的工作量很大，所以在 JDK 16 中就已经删除了，本次从 <a href=\"https://so.csdn.net/so/search?q=OpenJDK&spm=1001.2101.3001.7020\">OpenJDK</a> 项目中删除了源代码</p>\n<hr>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckzqjcfko0015keuq2f9jcqxd","category_id":"ckzqjcfkq0016keuqdnpjbwky","_id":"ckzqjcfkq0019keuqdlfi1y7y"},{"post_id":"ckzvdpfg00026keuq8l4d5htc","category_id":"ckzvdpfg00027keuq0pjwgzzh","_id":"ckzvdymtr002bkeuqgr321xz5"},{"post_id":"ckzvegh47002okeuqa7bx03o3","category_id":"ckzvaf3yh001pkeuqeu0e3hyv","_id":"ckzvegh48002rkeuqbbbi5xih"},{"post_id":"cl3fhn94c0035keuqcr3hgs3j","category_id":"ckzveijp6002tkeuq7pl46sfj","_id":"cl3fhn94f0038keuq1cpc4zrm"},{"post_id":"ckzvacrng001lkeuqe7vnhb08","category_id":"ckzvaf3yh001pkeuqeu0e3hyv","_id":"cl3fqu7q3003qkeuqa6dj2l4y"},{"post_id":"ckzve8xjj002ckeuq2fhkam4d","category_id":"ckzvaf3yh001pkeuqeu0e3hyv","_id":"cl3fqyepq003tkeuq19av6snl"},{"post_id":"ckzyc59dk002ykeuq6motfvv4","category_id":"ckzyc59dl002zkeuqfx4o87z4","_id":"cl3fqykkn003wkeuq2gev8vow"},{"post_id":"cl3fih3qa0039keuqajde8ayv","category_id":"ckzvaf3yh001pkeuqeu0e3hyv","_id":"cl3h58pyt0042keuq0pwc8ue1"},{"post_id":"cl6ovafby0043keuqfuf74g02","category_id":"ckzvaf3yh001pkeuqeu0e3hyv","_id":"cl6ovafc40045keuq0cqqd07j"},{"post_id":"cldiixcmk004akeuqgy4c4q4n","category_id":"cldiixcml004bkeuqbk13ccpy","_id":"cldiixcmm004dkeuqfw4m76jy"}],"PostTag":[{"post_id":"ckzqjcfko0015keuq2f9jcqxd","tag_id":"ckzqjcfkq0017keuqflj10fbn","_id":"ckzqjcfkq0018keuq5y0vhhe8"},{"post_id":"ckzvdpfg00026keuq8l4d5htc","tag_id":"ckzp61zg3000jkeuq6s99b10i","_id":"ckzvdymtr002akeuq1u3rgycn"},{"post_id":"ckzvegh47002okeuqa7bx03o3","tag_id":"ckzp61zg3000jkeuq6s99b10i","_id":"ckzvegh48002pkeuq891r798g"},{"post_id":"ckzvegh47002okeuqa7bx03o3","tag_id":"ckzve8xjk002dkeuqa6jm5ghy","_id":"ckzvegh48002qkeuq6djc4t1r"},{"post_id":"cl3fhn94c0035keuqcr3hgs3j","tag_id":"ckzp61zg3000jkeuq6s99b10i","_id":"cl3fhn94f0036keuq5zrx7bbm"},{"post_id":"cl3fhn94c0035keuqcr3hgs3j","tag_id":"ckzveijp7002ukeuqewqkfcti","_id":"cl3fhn94f0037keuqacqb0ntc"},{"post_id":"ckzvacrng001lkeuqe7vnhb08","tag_id":"ckzp61zg3000jkeuq6s99b10i","_id":"cl3fqu7q3003okeuq9krchyfs"},{"post_id":"ckzvacrng001lkeuqe7vnhb08","tag_id":"ckzvaf3yh001qkeuq66s5dsl3","_id":"cl3fqu7q3003pkeuq623hbcgy"},{"post_id":"ckzve8xjj002ckeuq2fhkam4d","tag_id":"ckzp61zg3000jkeuq6s99b10i","_id":"cl3fqyepq003rkeuq70r582b9"},{"post_id":"ckzve8xjj002ckeuq2fhkam4d","tag_id":"ckzve8xjk002dkeuqa6jm5ghy","_id":"cl3fqyepq003skeuq22r68wfz"},{"post_id":"ckzyc59dk002ykeuq6motfvv4","tag_id":"ckzyc59dl0030keuq2oaddlw7","_id":"cl3fqykkn003ukeuq3vrz6y5l"},{"post_id":"ckzyc59dk002ykeuq6motfvv4","tag_id":"ckzyc59dm0031keuqh8dv6092","_id":"cl3fqykkn003vkeuq7fmtdihn"},{"post_id":"cl3fih3qa0039keuqajde8ayv","tag_id":"ckzp61zg3000jkeuq6s99b10i","_id":"cl3h58pyt0040keuq6jgs28an"},{"post_id":"cl3fih3qa0039keuqajde8ayv","tag_id":"cl3fii0zt003dkeuq1dpk030k","_id":"cl3h58pyt0041keuqg8ng8xav"},{"post_id":"cl6ovafby0043keuqfuf74g02","tag_id":"cl6ovafc30044keuq6qw3hzs9","_id":"cl6ovafc40046keuq4f4o5z5z"},{"post_id":"cldiixcmk004akeuqgy4c4q4n","tag_id":"ckzp61zg3000jkeuq6s99b10i","_id":"cldiixcmm004ckeuqerz6dvcm"}],"Tag":[{"name":"Hexo","_id":"ckzp5zvn90008keuqeqfi7e0r"},{"name":"Quiet","_id":"ckzp5zvna0009keuqbz1ofdnn"},{"name":"主题","_id":"ckzp5zvna000bkeuqb27uamvd"},{"name":"静态主题","_id":"ckzp5zvnb000ckeuqb2nr9y0t"},{"name":"生活","_id":"ckzp61zg3000ikeuq5v0m70bx"},{"name":"java","_id":"ckzp61zg3000jkeuq6s99b10i"},{"name":"cjc","_id":"ckzp6e0bb000nkeuq0i26hq88"},{"name":"Foo","_id":"ckzp6grl4000qkeuq79eo62rd"},{"name":"Bar","_id":"ckzp6grl4000rkeuqcvjycyny"},{"name":"blog","_id":"ckzqjcfkq0017keuqflj10fbn"},{"name":"SpringCloud","_id":"ckztl8gya001bkeuqgh12h2ud"},{"name":"netty","_id":"ckzvaf3yh001qkeuq66s5dsl3"},{"name":"分布式","_id":"ckzve8xjk002dkeuqa6jm5ghy"},{"name":"数据结构与算法","_id":"ckzveijp7002ukeuqewqkfcti"},{"name":"vue","_id":"ckzyc59dl0030keuq2oaddlw7"},{"name":"js","_id":"ckzyc59dm0031keuqh8dv6092"},{"name":"ELK","_id":"cl3fii0zt003dkeuq1dpk030k"},{"name":"mysql","_id":"cl6ovafc30044keuq6qw3hzs9"}]}}